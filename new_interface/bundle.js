(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],3:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],4:[function(require,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol.for === 'function')
    ? Symbol.for('nodejs.util.inspect.custom')
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    var proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = (function () {
  var alphabet = '0123456789abcdef'
  var table = new Array(256)
  for (var i = 0; i < 16; ++i) {
    var i16 = i * 16
    for (var j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

}).call(this,require("buffer").Buffer)
},{"base64-js":2,"buffer":4,"ieee754":9}],5:[function(require,module,exports){
module.exports = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
}

},{}],6:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":11}],7:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],8:[function(require,module,exports){
var http = require('http')
var url = require('url')

var https = module.exports

for (var key in http) {
  if (http.hasOwnProperty(key)) https[key] = http[key]
}

https.request = function (params, cb) {
  params = validateParams(params)
  return http.request.call(this, params, cb)
}

https.get = function (params, cb) {
  params = validateParams(params)
  return http.get.call(this, params, cb)
}

function validateParams (params) {
  if (typeof params === 'string') {
    params = url.parse(params)
  }
  if (!params.protocol) {
    params.protocol = 'https:'
  }
  if (params.protocol !== 'https:') {
    throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"')
  }
  return params
}

},{"http":38,"url":59}],9:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],10:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],11:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],12:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],13:[function(require,module,exports){
exports.endianness = function () { return 'LE' };

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

exports.loadavg = function () { return [] };

exports.uptime = function () { return 0 };

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () { return [] };

exports.type = function () { return 'Browser' };

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces
= exports.getNetworkInterfaces
= function () { return {} };

exports.arch = function () { return 'javascript' };

exports.platform = function () { return 'browser' };

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

exports.homedir = function () {
	return '/'
};

},{}],14:[function(require,module,exports){
(function (process){
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":16}],15:[function(require,module,exports){
(function (process){
'use strict';

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


}).call(this,require('_process'))
},{"_process":16}],16:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],17:[function(require,module,exports){
(function (global){
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],18:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],19:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],20:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":18,"./encode":19}],21:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":22}],22:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
},{"./_stream_readable":24,"./_stream_writable":26,"core-util-is":6,"inherits":10,"process-nextick-args":15}],23:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":25,"core-util-is":6,"inherits":10}],24:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":22,"./internal/streams/BufferList":27,"./internal/streams/destroy":28,"./internal/streams/stream":29,"_process":16,"core-util-is":6,"events":7,"inherits":10,"isarray":12,"process-nextick-args":15,"safe-buffer":30,"string_decoder/":31,"util":3}],25:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":22,"core-util-is":6,"inherits":10}],26:[function(require,module,exports){
(function (process,global,setImmediate){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)
},{"./_stream_duplex":22,"./internal/streams/destroy":28,"./internal/streams/stream":29,"_process":16,"core-util-is":6,"inherits":10,"process-nextick-args":15,"safe-buffer":30,"timers":58,"util-deprecate":61}],27:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
var util = require('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":30,"util":3}],28:[function(require,module,exports){
'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":15}],29:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":7}],30:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":4}],31:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":30}],32:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":33}],33:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":22,"./lib/_stream_passthrough.js":23,"./lib/_stream_readable.js":24,"./lib/_stream_transform.js":25,"./lib/_stream_writable.js":26}],34:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":33}],35:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":26}],36:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":4}],37:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":7,"inherits":10,"readable-stream/duplex.js":21,"readable-stream/passthrough.js":32,"readable-stream/readable.js":33,"readable-stream/transform.js":34,"readable-stream/writable.js":35}],38:[function(require,module,exports){
(function (global){
var ClientRequest = require('./lib/request')
var response = require('./lib/response')
var extend = require('xtend')
var statusCodes = require('builtin-status-codes')
var url = require('url')

var http = exports

http.request = function (opts, cb) {
	if (typeof opts === 'string')
		opts = url.parse(opts)
	else
		opts = extend(opts)

	// Normally, the page is loaded from http or https, so not specifying a protocol
	// will result in a (valid) protocol-relative url. However, this won't work if
	// the protocol is something else, like 'file:'
	var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''

	var protocol = opts.protocol || defaultProtocol
	var host = opts.hostname || opts.host
	var port = opts.port
	var path = opts.path || '/'

	// Necessary for IPv6 addresses
	if (host && host.indexOf(':') !== -1)
		host = '[' + host + ']'

	// This may be a relative url. The browser should always be able to interpret it correctly.
	opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
	opts.method = (opts.method || 'GET').toUpperCase()
	opts.headers = opts.headers || {}

	// Also valid opts.auth, opts.mode

	var req = new ClientRequest(opts)
	if (cb)
		req.on('response', cb)
	return req
}

http.get = function get (opts, cb) {
	var req = http.request(opts, cb)
	req.end()
	return req
}

http.ClientRequest = ClientRequest
http.IncomingMessage = response.IncomingMessage

http.Agent = function () {}
http.Agent.defaultMaxSockets = 4

http.globalAgent = new http.Agent()

http.STATUS_CODES = statusCodes

http.METHODS = [
	'CHECKOUT',
	'CONNECT',
	'COPY',
	'DELETE',
	'GET',
	'HEAD',
	'LOCK',
	'M-SEARCH',
	'MERGE',
	'MKACTIVITY',
	'MKCOL',
	'MOVE',
	'NOTIFY',
	'OPTIONS',
	'PATCH',
	'POST',
	'PROPFIND',
	'PROPPATCH',
	'PURGE',
	'PUT',
	'REPORT',
	'SEARCH',
	'SUBSCRIBE',
	'TRACE',
	'UNLOCK',
	'UNSUBSCRIBE'
]
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./lib/request":40,"./lib/response":41,"builtin-status-codes":5,"url":59,"xtend":65}],39:[function(require,module,exports){
(function (global){
exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)

exports.writableStream = isFunction(global.WritableStream)

exports.abortController = isFunction(global.AbortController)

// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr
function getXHR () {
	// Cache the xhr value
	if (xhr !== undefined) return xhr

	if (global.XMLHttpRequest) {
		xhr = new global.XMLHttpRequest()
		// If XDomainRequest is available (ie only, where xhr might not work
		// cross domain), use the page location. Otherwise use example.com
		// Note: this doesn't actually make an http request.
		try {
			xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
		} catch(e) {
			xhr = null
		}
	} else {
		// Service workers don't have XHR
		xhr = null
	}
	return xhr
}

function checkTypeSupport (type) {
	var xhr = getXHR()
	if (!xhr) return false
	try {
		xhr.responseType = type
		return xhr.responseType === type
	} catch (e) {}
	return false
}

// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer = exports.fetch || checkTypeSupport('arraybuffer')

// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && checkTypeSupport('ms-stream')
exports.mozchunkedarraybuffer = !exports.fetch && checkTypeSupport('moz-chunked-arraybuffer')

// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)

function isFunction (value) {
	return typeof value === 'function'
}

xhr = null // Help gc

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],40:[function(require,module,exports){
(function (process,global,Buffer){
var capability = require('./capability')
var inherits = require('inherits')
var response = require('./response')
var stream = require('readable-stream')

var IncomingMessage = response.IncomingMessage
var rStates = response.readyStates

function decideMode (preferBinary, useFetch) {
	if (capability.fetch && useFetch) {
		return 'fetch'
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer'
	} else if (capability.msstream) {
		return 'ms-stream'
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer'
	} else {
		return 'text'
	}
}

var ClientRequest = module.exports = function (opts) {
	var self = this
	stream.Writable.call(self)

	self._opts = opts
	self._body = []
	self._headers = {}
	if (opts.auth)
		self.setHeader('Authorization', 'Basic ' + Buffer.from(opts.auth).toString('base64'))
	Object.keys(opts.headers).forEach(function (name) {
		self.setHeader(name, opts.headers[name])
	})

	var preferBinary
	var useFetch = true
	if (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {
		// If the use of XHR should be preferred. Not typically needed.
		useFetch = false
		preferBinary = true
	} else if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true
	} else {
		throw new Error('Invalid value for opts.mode')
	}
	self._mode = decideMode(preferBinary, useFetch)
	self._fetchTimer = null

	self.on('finish', function () {
		self._onFinish()
	})
}

inherits(ClientRequest, stream.Writable)

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this
	var lowerName = name.toLowerCase()
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (unsafeHeaders.indexOf(lowerName) !== -1)
		return

	self._headers[lowerName] = {
		name: name,
		value: value
	}
}

ClientRequest.prototype.getHeader = function (name) {
	var header = this._headers[name.toLowerCase()]
	if (header)
		return header.value
	return null
}

ClientRequest.prototype.removeHeader = function (name) {
	var self = this
	delete self._headers[name.toLowerCase()]
}

ClientRequest.prototype._onFinish = function () {
	var self = this

	if (self._destroyed)
		return
	var opts = self._opts

	var headersObj = self._headers
	var body = null
	if (opts.method !== 'GET' && opts.method !== 'HEAD') {
        body = new Blob(self._body, {
            type: (headersObj['content-type'] || {}).value || ''
        });
    }

	// create flattened list of headers
	var headersList = []
	Object.keys(headersObj).forEach(function (keyName) {
		var name = headersObj[keyName].name
		var value = headersObj[keyName].value
		if (Array.isArray(value)) {
			value.forEach(function (v) {
				headersList.push([name, v])
			})
		} else {
			headersList.push([name, value])
		}
	})

	if (self._mode === 'fetch') {
		var signal = null
		var fetchTimer = null
		if (capability.abortController) {
			var controller = new AbortController()
			signal = controller.signal
			self._fetchAbortController = controller

			if ('requestTimeout' in opts && opts.requestTimeout !== 0) {
				self._fetchTimer = global.setTimeout(function () {
					self.emit('requestTimeout')
					if (self._fetchAbortController)
						self._fetchAbortController.abort()
				}, opts.requestTimeout)
			}
		}

		global.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headersList,
			body: body || undefined,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin',
			signal: signal
		}).then(function (response) {
			self._fetchResponse = response
			self._connect()
		}, function (reason) {
			global.clearTimeout(self._fetchTimer)
			if (!self._destroyed)
				self.emit('error', reason)
		})
	} else {
		var xhr = self._xhr = new global.XMLHttpRequest()
		try {
			xhr.open(self._opts.method, self._opts.url, true)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr)
			xhr.responseType = self._mode

		if ('withCredentials' in xhr)
			xhr.withCredentials = !!opts.withCredentials

		if (self._mode === 'text' && 'overrideMimeType' in xhr)
			xhr.overrideMimeType('text/plain; charset=x-user-defined')

		if ('requestTimeout' in opts) {
			xhr.timeout = opts.requestTimeout
			xhr.ontimeout = function () {
				self.emit('requestTimeout')
			}
		}

		headersList.forEach(function (header) {
			xhr.setRequestHeader(header[0], header[1])
		})

		self._response = null
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress()
					break
			}
		}
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress()
			}
		}

		xhr.onerror = function () {
			if (self._destroyed)
				return
			self.emit('error', new Error('XHR error'))
		}

		try {
			xhr.send(body)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}
	}
}

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */
function statusValid (xhr) {
	try {
		var status = xhr.status
		return (status !== null && status !== 0)
	} catch (e) {
		return false
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this

	if (!statusValid(self._xhr) || self._destroyed)
		return

	if (!self._response)
		self._connect()

	self._response._onXHRProgress()
}

ClientRequest.prototype._connect = function () {
	var self = this

	if (self._destroyed)
		return

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._fetchTimer)
	self._response.on('error', function(err) {
		self.emit('error', err)
	})

	self.emit('response', self._response)
}

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this

	self._body.push(chunk)
	cb()
}

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
	var self = this
	self._destroyed = true
	global.clearTimeout(self._fetchTimer)
	if (self._response)
		self._response._destroyed = true
	if (self._xhr)
		self._xhr.abort()
	else if (self._fetchAbortController)
		self._fetchAbortController.abort()
}

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this
	if (typeof data === 'function') {
		cb = data
		data = undefined
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb)
}

ClientRequest.prototype.flushHeaders = function () {}
ClientRequest.prototype.setTimeout = function () {}
ClientRequest.prototype.setNoDelay = function () {}
ClientRequest.prototype.setSocketKeepAlive = function () {}

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = [
	'accept-charset',
	'accept-encoding',
	'access-control-request-headers',
	'access-control-request-method',
	'connection',
	'content-length',
	'cookie',
	'cookie2',
	'date',
	'dnt',
	'expect',
	'host',
	'keep-alive',
	'origin',
	'referer',
	'te',
	'trailer',
	'transfer-encoding',
	'upgrade',
	'via'
]

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"./capability":39,"./response":41,"_process":16,"buffer":4,"inherits":10,"readable-stream":56}],41:[function(require,module,exports){
(function (process,global,Buffer){
var capability = require('./capability')
var inherits = require('inherits')
var stream = require('readable-stream')

var rStates = exports.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
}

var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, fetchTimer) {
	var self = this
	stream.Readable.call(self)

	self._mode = mode
	self.headers = {}
	self.rawHeaders = []
	self.trailers = {}
	self.rawTrailers = []

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		process.nextTick(function () {
			self.emit('close')
		})
	})

	if (mode === 'fetch') {
		self._fetchResponse = response

		self.url = response.url
		self.statusCode = response.status
		self.statusMessage = response.statusText
		
		response.headers.forEach(function (header, key){
			self.headers[key.toLowerCase()] = header
			self.rawHeaders.push(key, header)
		})

		if (capability.writableStream) {
			var writable = new WritableStream({
				write: function (chunk) {
					return new Promise(function (resolve, reject) {
						if (self._destroyed) {
							reject()
						} else if(self.push(Buffer.from(chunk))) {
							resolve()
						} else {
							self._resumeFetch = resolve
						}
					})
				},
				close: function () {
					global.clearTimeout(fetchTimer)
					if (!self._destroyed)
						self.push(null)
				},
				abort: function (err) {
					if (!self._destroyed)
						self.emit('error', err)
				}
			})

			try {
				response.body.pipeTo(writable).catch(function (err) {
					global.clearTimeout(fetchTimer)
					if (!self._destroyed)
						self.emit('error', err)
				})
				return
			} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
		}
		// fallback for when writableStream or pipeTo aren't available
		var reader = response.body.getReader()
		function read () {
			reader.read().then(function (result) {
				if (self._destroyed)
					return
				if (result.done) {
					global.clearTimeout(fetchTimer)
					self.push(null)
					return
				}
				self.push(Buffer.from(result.value))
				read()
			}).catch(function (err) {
				global.clearTimeout(fetchTimer)
				if (!self._destroyed)
					self.emit('error', err)
			})
		}
		read()
	} else {
		self._xhr = xhr
		self._pos = 0

		self.url = xhr.responseURL
		self.statusCode = xhr.status
		self.statusMessage = xhr.statusText
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
		headers.forEach(function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/)
			if (matches) {
				var key = matches[1].toLowerCase()
				if (key === 'set-cookie') {
					if (self.headers[key] === undefined) {
						self.headers[key] = []
					}
					self.headers[key].push(matches[2])
				} else if (self.headers[key] !== undefined) {
					self.headers[key] += ', ' + matches[2]
				} else {
					self.headers[key] = matches[2]
				}
				self.rawHeaders.push(matches[1], matches[2])
			}
		})

		self._charset = 'x-user-defined'
		if (!capability.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type']
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase()
				}
			}
			if (!self._charset)
				self._charset = 'utf-8' // best guess
		}
	}
}

inherits(IncomingMessage, stream.Readable)

IncomingMessage.prototype._read = function () {
	var self = this

	var resolve = self._resumeFetch
	if (resolve) {
		self._resumeFetch = null
		resolve()
	}
}

IncomingMessage.prototype._onXHRProgress = function () {
	var self = this

	var xhr = self._xhr

	var response = null
	switch (self._mode) {
		case 'text':
			response = xhr.responseText
			if (response.length > self._pos) {
				var newData = response.substr(self._pos)
				if (self._charset === 'x-user-defined') {
					var buffer = Buffer.alloc(newData.length)
					for (var i = 0; i < newData.length; i++)
						buffer[i] = newData.charCodeAt(i) & 0xff

					self.push(buffer)
				} else {
					self.push(newData, self._charset)
				}
				self._pos = response.length
			}
			break
		case 'arraybuffer':
			if (xhr.readyState !== rStates.DONE || !xhr.response)
				break
			response = xhr.response
			self.push(Buffer.from(new Uint8Array(response)))
			break
		case 'moz-chunked-arraybuffer': // take whole
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING || !response)
				break
			self.push(Buffer.from(new Uint8Array(response)))
			break
		case 'ms-stream':
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING)
				break
			var reader = new global.MSStreamReader()
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(Buffer.from(new Uint8Array(reader.result.slice(self._pos))))
					self._pos = reader.result.byteLength
				}
			}
			reader.onload = function () {
				self.push(null)
			}
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response)
			break
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
		self.push(null)
	}
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"./capability":39,"_process":16,"buffer":4,"inherits":10,"readable-stream":56}],42:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],43:[function(require,module,exports){
(function (process){
'use strict'

var experimentalWarnings = new Set();

function emitExperimentalWarning(feature) {
  if (experimentalWarnings.has(feature)) return;
  var msg = feature + ' is an experimental feature. This feature could ' +
       'change at any time';
  experimentalWarnings.add(feature);
  process.emitWarning(msg, 'ExperimentalWarning');
}

function noop() {}

module.exports.emitExperimentalWarning = process.emitWarning
  ? emitExperimentalWarning
  : noop;

}).call(this,require('_process'))
},{"_process":16}],44:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this,require('_process'))
},{"./_stream_readable":46,"./_stream_writable":48,"_process":16,"inherits":10}],45:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":47,"inherits":10}],46:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

var _require2 = require('../experimentalWarning'),
    emitExperimentalWarning = _require2.emitExperimentalWarning; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;

require('inherits')(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc); // if setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding;
  return this;
}; // Don't raise the hwm > 8MB


var MAX_HWM = 0x800000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  this.emit('error', new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    emitExperimentalWarning('Readable[Symbol.asyncIterator]');

    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":42,"../experimentalWarning":43,"./_stream_duplex":44,"./internal/streams/async_iterator":49,"./internal/streams/buffer_list":50,"./internal/streams/destroy":51,"./internal/streams/state":54,"./internal/streams/stream":55,"_process":16,"buffer":4,"events":7,"inherits":10,"string_decoder/":57,"util":3}],47:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":42,"./_stream_duplex":44,"inherits":10}],48:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  this.emit('error', new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  stream.emit('error', er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    stream.emit('error', er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      stream.emit('error', err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":42,"./_stream_duplex":44,"./internal/streams/destroy":51,"./internal/streams/state":54,"./internal/streams/stream":55,"_process":16,"buffer":4,"inherits":10,"util-deprecate":61}],49:[function(require,module,exports){
(function (process){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this,require('_process'))
},{"./end-of-stream":52,"_process":16}],50:[function(require,module,exports){
'use strict';

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  var _proto = BufferList.prototype;

  _proto.push = function push(v) {
    var entry = {
      data: v,
      next: null
    };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  _proto.unshift = function unshift(v) {
    var entry = {
      data: v,
      next: this.head
    };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  _proto.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  _proto.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  _proto.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;

    while (p = p.next) {
      ret += s + p.data;
    }

    return ret;
  };

  _proto.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;

    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }

    return ret;
  } // Consumes a specified amount of bytes or characters from the buffered data.
  ;

  _proto.consume = function consume(n, hasStrings) {
    var ret;

    if (n < this.head.data.length) {
      // `slice` is the same for buffers and strings.
      ret = this.head.data.slice(0, n);
      this.head.data = this.head.data.slice(n);
    } else if (n === this.head.data.length) {
      // First chunk is a perfect match.
      ret = this.shift();
    } else {
      // Result spans more than one buffer.
      ret = hasStrings ? this._getString(n) : this._getBuffer(n);
    }

    return ret;
  };

  _proto.first = function first() {
    return this.head.data;
  } // Consumes a specified amount of characters from the buffered data.
  ;

  _proto._getString = function _getString(n) {
    var p = this.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;

    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;

      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) this.head = p.next;else this.head = this.tail = null;
        } else {
          this.head = p;
          p.data = str.slice(nb);
        }

        break;
      }

      ++c;
    }

    this.length -= c;
    return ret;
  } // Consumes a specified amount of bytes from the buffered data.
  ;

  _proto._getBuffer = function _getBuffer(n) {
    var ret = Buffer.allocUnsafe(n);
    var p = this.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;

    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;

      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) this.head = p.next;else this.head = this.tail = null;
        } else {
          this.head = p;
          p.data = buf.slice(nb);
        }

        break;
      }

      ++c;
    }

    this.length -= c;
    return ret;
  } // Make sure the linked list only shows the minimal necessary information.
  ;

  _proto[custom] = function (_, options) {
    return inspect(this, _objectSpread({}, options, {
      // Only inspect one level.
      depth: 0,
      // It should not recurse.
      customInspect: false
    }));
  };

  return BufferList;
}();
},{"buffer":4,"util":3}],51:[function(require,module,exports){
(function (process){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      process.nextTick(emitErrorNT, this, err);
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      process.nextTick(emitErrorAndCloseNT, _this, err);

      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
}).call(this,require('_process'))
},{"_process":16}],52:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":42}],53:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":42,"./end-of-stream":52}],54:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":42}],55:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"dup":29,"events":7}],56:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_duplex.js":44,"./lib/_stream_passthrough.js":45,"./lib/_stream_readable.js":46,"./lib/_stream_transform.js":47,"./lib/_stream_writable.js":48,"./lib/internal/streams/end-of-stream.js":52,"./lib/internal/streams/pipeline.js":53}],57:[function(require,module,exports){
arguments[4][31][0].apply(exports,arguments)
},{"dup":31,"safe-buffer":36}],58:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":16,"timers":58}],59:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var punycode = require('punycode');
var util = require('./util');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

},{"./util":60,"punycode":17,"querystring":20}],60:[function(require,module,exports){
'use strict';

module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

},{}],61:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],62:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],63:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],64:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":63,"_process":16,"inherits":62}],65:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],66:[function(require,module,exports){
function askQuestion(){
    var user_question = document.getElementById('userQuestion').value
    console.log(user_question)
    fetch('https://jsonplaceholder.typicode.com/todos/1')
        .then(response => response.json())
        .then(json => fillFields(json))

    
}

const metascraper = require('metascraper')([
  require('metascraper-image')(),
  require('metascraper-publisher')(),
  require('metascraper-title')(),
])

const got = require('got')

const targetUrl = 'http://www.bloomberg.com/news/articles/2016-05-24/as-zenefits-stumbles-gusto-goes-head-on-by-selling-insurance'



;(async () => {
  const { body: html, url } = await got(targetUrl)
  const metadata = await metascraper({ html, url })
  console.log("trying to log metadata")
  console.log(metadata)
})()



function fillFields(json) {
    console.log(json)

    
    var sample_data = [{
        "original_q" : "original question string",
        "matched_q" : "what the question was matched to",
        "source_url" : "this is a url",
        "sourceTitle" : "some article name",
        "sourceName" : "The New York Times",
        "sourceImageURL" : "https://cdn.vox-cdn.com/thumbor/cXFmLvR0cLwgspir3axOU_AK2d0=/0x0:5260x3507/1360x765/filters:focal(2474x62:3314x902):format(webp)/cdn.vox-cdn.com/uploads/chorus_image/image/65652070/1184672034.jpg.0.jpg",
        "answer_string" : "this is an answer string"

    }]
    
    var matched_q = sample_data[0].matched_q
    var answer_string = sample_data[0].answer_string
    var sourceName = sample_data[0].sourceName
    var sourceTitle = sample_data[0].sourceTitle
    var sourceImageURL = sample_data[0].sourceImageURL

    var qaTemplate = document.getElementById('comment-template').innerHTML;

    var templateFunction = _.template(qaTemplate)

    var filledTemplate = templateFunction({
        'matchedQuestion' : matched_q,
        'matchedAnswer' : answer_string,
        'sourceTitle' : sourceTitle,
        'sourceName' : sourceName,
        'sourceImageURL' : sourceImageURL,
    })

    var questionSet = document.getElementById('questionSet')

    questionSet.innerHTML += filledTemplate
    
    
};



function ready(fn) {
    if (document.readyState != 'loading'){
      fn();
    } else {
      document.addEventListener('DOMContentLoaded', fn);
    }
  }
  
ready(function() {
    document.getElementById('submit-button').addEventListener('click',askQuestion)
})
},{"got":214,"metascraper":474,"metascraper-image":470,"metascraper-publisher":471,"metascraper-title":472}],67:[function(require,module,exports){
'use strict'

const {
  castArray,
  chain,
  eq,
  flow,
  get,
  includes,
  invoke,
  isArray,
  isDate,
  isEmpty,
  isNumber,
  isString,
  lte,
  replace,
  size,
  toLower,
  trim
} = require('lodash')

const langs = require('iso-639-3').map(({ iso6391 }) => iso6391)
const condenseWhitespace = require('condense-whitespace')
const urlRegex = require('url-regex')({ exact: true })

const isRelativeUrl = require('is-relative-url')
const fileExtension = require('file-extension')
const _normalizeUrl = require('normalize-url')
const smartquotes = require('smartquotes')
const { decodeHTML } = require('entities')
const memoizeOne = require('memoize-one')
const mimeTypes = require('mime-types')
const hasValues = require('has-values')
const chrono = require('chrono-node')
const truncate = require('truncate')
const isIso = require('isostring')
const toTitle = require('title')
const isUri = require('is-uri')
const { URL } = require('url')

const VIDEO = 'video'
const AUDIO = 'audio'
const IMAGE = 'image'

const imageExtensions = chain(require('image-extensions'))
  .reduce((acc, ext) => ({ ...acc, [ext]: IMAGE }), {})
  .value()

const audioExtensions = chain(require('audio-extensions'))
  .difference(['mp4'])
  .reduce((acc, ext) => ({ ...acc, [ext]: AUDIO }), {})
  .value()

const videoExtensions = chain(require('video-extensions'))
  .reduce((acc, ext) => ({ ...acc, [ext]: VIDEO }), {})
  .value()

const EXTENSIONS = {
  ...imageExtensions,
  ...audioExtensions,
  ...videoExtensions
}

const REGEX_BY = /^[\s\n]*by|@[\s\n]*/i

const REGEX_LOCATION = /^[A-Z\s]+\s+[-—–]\s+/

const REGEX_TITLE_SEPARATOR = /^[^|\-/•—]+/

const TRUNCATE_MAX_LENGTH = 300

const AUTHOR_MAX_LENGTH = 128

const removeLocation = value => replace(value, REGEX_LOCATION, '')

const isUrl = (url, { relative = false } = {}) =>
  relative ? isRelativeUrl(url) || urlRegex.test(url) : urlRegex.test(url)

const absoluteUrl = (baseUrl, relativePath) => {
  if (isEmpty(relativePath)) return new URL(baseUrl).toString()
  return new URL(relativePath, baseUrl).toString()
}

const sanetizeUrl = (url, opts) =>
  _normalizeUrl(url, {
    stripWWW: false,
    sortQueryParameters: false,
    removeTrailingSlash: false,
    ...opts
  })

const normalizeUrl = (baseUrl, relativePath, opts) => {
  return sanetizeUrl(absoluteUrl(baseUrl, relativePath), opts)
}

const removeBy = flow([value => value.replace(REGEX_BY, ''), trim])

const removeSeparator = title => {
  const newTitle = (REGEX_TITLE_SEPARATOR.exec(title) || [])[0] || title
  return newTitle.trim()
}

const createTitle = flow([condenseWhitespace, smartquotes])

const titleize = (src, opts = {}) => {
  let title = createTitle(src)
  if (opts.removeBy) title = removeBy(title)
  if (opts.removeSeparator) title = removeSeparator(title)
  if (opts.capitalize) title = toTitle(title)
  return title
}

const defaultFn = el => el.text().trim()

const $filter = ($, domNodes, fn = defaultFn) => {
  const el = domNodes.filter((i, el) => fn($(el))).first()
  return fn(el)
}

const isAuthor = (str, opts = { relative: false }) =>
  !isUrl(str, opts) &&
  !isEmpty(str) &&
  isString(str) &&
  lte(size(str), AUTHOR_MAX_LENGTH)

const getAuthor = (str, opts = { removeBy: true }) => titleize(str, opts)

const protocol = url => {
  const { protocol = '' } = new URL(url)
  return protocol.replace(':', '')
}

const isMediaTypeUrl = (url, type, { ext, ...opts } = {}) =>
  isUrl(url, opts) && isMediaTypeExtension(url, type, ext)

const isMediaTypeExtension = (url, type, ext) =>
  eq(type, get(EXTENSIONS, ext || extension(url)))

const isMediaUrl = (url, opts) =>
  isImageUrl(url, opts) || isVideoUrl(url, opts) || isAudioUrl(url, opts)

const isVideoUrl = (url, opts) => isMediaTypeUrl(url, VIDEO, opts)

const isAudioUrl = (url, opts) => isMediaTypeUrl(url, AUDIO, opts)

const isImageUrl = (url, opts) => isMediaTypeUrl(url, IMAGE, opts)

const isMediaExtension = url =>
  isImageExtension(url) || isVideoExtension(url) || isAudioExtension(url)

const isVideoExtension = url => isMediaTypeExtension(url, VIDEO)

const isAudioExtension = url => isMediaTypeExtension(url, AUDIO)

const isImageExtension = url => isMediaTypeExtension(url, IMAGE)

const extension = (str = '') => {
  const url = new URL(str, isRelativeUrl(str) ? 'http://localhost' : undefined)
  url.hash = ''
  url.search = ''
  return fileExtension(url.toString())
}

const description = (value, opts) =>
  isString(value) && getDescription(value, opts)

const getDescription = (
  str,
  { truncateLength = TRUNCATE_MAX_LENGTH, ...opts } = {}
) => {
  const description = removeLocation(truncate(str, truncateLength))
  return titleize(description, opts)
}

const publisher = value => isString(value) && condenseWhitespace(value)

const author = value => isAuthor(value) && getAuthor(value)

const url = (value, { url = '' } = {}) => {
  if (isEmpty(value)) return null

  try {
    const absoluteUrl = normalizeUrl(url, value)
    if (isUrl(absoluteUrl)) return absoluteUrl
  } catch (_) {}

  return isUri(value) ? value : null
}

const date = value => {
  if (!(isString(value) || isNumber(value))) return false

  // remove whitespace for easier parsing
  if (isString(value)) trim(value)

  // convert isodates to restringify, because sometimes they are truncated
  if (isIso(value)) return new Date(value).toISOString()

  // try to parse with the built-in date parser
  const native = new Date(value)
  if (!isNaN(native.getTime())) return native.toISOString()

  // try to parse a complex date string
  const parsed = chrono.parseDate(value)
  if (isDate(parsed)) return parsed.toISOString()
}

const lang = value => {
  if (isEmpty(value)) return false
  const lang = toLower(value.trim().substring(0, 2))
  const isLang = includes(langs, lang)
  return isLang ? lang : false
}

const title = (value, { removeSeparator = false } = {}) =>
  isString(value) && titleize(value, { removeSeparator })

const isMime = (contentType, type) => {
  const ext = mimeTypes.extension(contentType)
  return eq(type, get(EXTENSIONS, ext))
}

const jsonld = memoizeOne((url, $) => {
  const data = {}
  try {
    $('script[type="application/ld+json"]').map((i, e) =>
      Object.assign(
        data,
        ...castArray(
          JSON.parse(
            $(e)
              .contents()
              .text()
          )
        )
      )
    )
  } catch (err) {}

  return data
})

const $jsonld = propName => ($, url) => {
  const json = jsonld(url, $)
  const value = get(json, propName)
  return isEmpty(value) ? value : decodeHTML(value)
}

const image = url

const logo = url

const video = (value, opts) => {
  const urlValue = url(value, opts)
  return isVideoUrl(urlValue, opts) && urlValue
}

const audio = (value, opts) => {
  const urlValue = url(value, opts)
  return isAudioUrl(urlValue, opts) && urlValue
}

const validator = {
  date,
  audio,
  author,
  video,
  title,
  publisher,
  image,
  logo,
  url,
  description,
  lang
}

const toRule = (fn, opts) => rule => ({ htmlDom, url }) => {
  const value = rule(htmlDom, url)
  return fn(value, { url, ...opts })
}

const composeRule = fn => ({ from, to = from, ...opts }) => async ({
  htmlDom,
  url
}) => {
  const data = await fn(htmlDom, url)
  const value = get(data, from)
  return invoke(validator, to, value, { url, ...opts })
}

const has = value =>
  value === null || value === false || value === 0 ? false : hasValues(value)

module.exports = {
  $filter,
  $jsonld,
  absoluteUrl,
  audio,
  audioExtensions,
  author,
  composeRule,
  date,
  description,
  extension,
  has,
  image,
  imageExtensions,
  isArray,
  isAudioExtension,
  isAudioUrl,
  isAuthor,
  isImageExtension,
  isImageUrl,
  isMediaExtension,
  isMediaUrl,
  isMime,
  isString,
  isUrl,
  isVideoExtension,
  isVideoUrl,
  jsonld,
  lang,
  logo,
  memoizeOne,
  normalizeUrl,
  protocol,
  publisher,
  sanetizeUrl,
  title,
  titleize,
  url,
  validator,
  video,
  videoExtensions,
  toRule
}

},{"audio-extensions":70,"chrono-node":89,"condense-whitespace":160,"entities":200,"file-extension":205,"has-values":225,"image-extensions":240,"is-relative-url":244,"is-uri":245,"iso-639-3":246,"isostring":247,"lodash":448,"memoize-one":469,"mime-types":479,"normalize-url":484,"smartquotes":523,"title":524,"truncate":529,"url":59,"url-regex":531,"video-extensions":532}],68:[function(require,module,exports){
"use strict";
/// <reference lib="es2016"/>
/// <reference lib="es2017.sharedmemory"/>
/// <reference lib="esnext.asynciterable"/>
/// <reference lib="dom"/>
Object.defineProperty(exports, "__esModule", { value: true });
// TODO: Use the `URL` global when targeting Node.js 10
// tslint:disable-next-line
const URLGlobal = typeof URL === 'undefined' ? require('url').URL : URL;
const toString = Object.prototype.toString;
const isOfType = (type) => (value) => typeof value === type;
const isBuffer = (input) => !is.nullOrUndefined(input) && !is.nullOrUndefined(input.constructor) && is.function_(input.constructor.isBuffer) && input.constructor.isBuffer(input);
const getObjectType = (value) => {
    const objectName = toString.call(value).slice(8, -1);
    if (objectName) {
        return objectName;
    }
    return null;
};
const isObjectOfType = (type) => (value) => getObjectType(value) === type;
function is(value) {
    switch (value) {
        case null:
            return "null" /* null */;
        case true:
        case false:
            return "boolean" /* boolean */;
        default:
    }
    switch (typeof value) {
        case 'undefined':
            return "undefined" /* undefined */;
        case 'string':
            return "string" /* string */;
        case 'number':
            return "number" /* number */;
        case 'symbol':
            return "symbol" /* symbol */;
        default:
    }
    if (is.function_(value)) {
        return "Function" /* Function */;
    }
    if (is.observable(value)) {
        return "Observable" /* Observable */;
    }
    if (Array.isArray(value)) {
        return "Array" /* Array */;
    }
    if (isBuffer(value)) {
        return "Buffer" /* Buffer */;
    }
    const tagType = getObjectType(value);
    if (tagType) {
        return tagType;
    }
    if (value instanceof String || value instanceof Boolean || value instanceof Number) {
        throw new TypeError('Please don\'t use object wrappers for primitive types');
    }
    return "Object" /* Object */;
}
(function (is) {
    // tslint:disable-next-line:strict-type-predicates
    const isObject = (value) => typeof value === 'object';
    // tslint:disable:variable-name
    is.undefined = isOfType('undefined');
    is.string = isOfType('string');
    is.number = isOfType('number');
    is.function_ = isOfType('function');
    // tslint:disable-next-line:strict-type-predicates
    is.null_ = (value) => value === null;
    is.class_ = (value) => is.function_(value) && value.toString().startsWith('class ');
    is.boolean = (value) => value === true || value === false;
    is.symbol = isOfType('symbol');
    // tslint:enable:variable-name
    is.numericString = (value) => is.string(value) && value.length > 0 && !Number.isNaN(Number(value));
    is.array = Array.isArray;
    is.buffer = isBuffer;
    is.nullOrUndefined = (value) => is.null_(value) || is.undefined(value);
    is.object = (value) => !is.nullOrUndefined(value) && (is.function_(value) || isObject(value));
    is.iterable = (value) => !is.nullOrUndefined(value) && is.function_(value[Symbol.iterator]);
    is.asyncIterable = (value) => !is.nullOrUndefined(value) && is.function_(value[Symbol.asyncIterator]);
    is.generator = (value) => is.iterable(value) && is.function_(value.next) && is.function_(value.throw);
    is.nativePromise = (value) => isObjectOfType("Promise" /* Promise */)(value);
    const hasPromiseAPI = (value) => !is.null_(value) &&
        isObject(value) &&
        is.function_(value.then) &&
        is.function_(value.catch);
    is.promise = (value) => is.nativePromise(value) || hasPromiseAPI(value);
    is.generatorFunction = isObjectOfType("GeneratorFunction" /* GeneratorFunction */);
    is.asyncFunction = isObjectOfType("AsyncFunction" /* AsyncFunction */);
    is.boundFunction = (value) => is.function_(value) && !value.hasOwnProperty('prototype');
    is.regExp = isObjectOfType("RegExp" /* RegExp */);
    is.date = isObjectOfType("Date" /* Date */);
    is.error = isObjectOfType("Error" /* Error */);
    is.map = (value) => isObjectOfType("Map" /* Map */)(value);
    is.set = (value) => isObjectOfType("Set" /* Set */)(value);
    is.weakMap = (value) => isObjectOfType("WeakMap" /* WeakMap */)(value);
    is.weakSet = (value) => isObjectOfType("WeakSet" /* WeakSet */)(value);
    is.int8Array = isObjectOfType("Int8Array" /* Int8Array */);
    is.uint8Array = isObjectOfType("Uint8Array" /* Uint8Array */);
    is.uint8ClampedArray = isObjectOfType("Uint8ClampedArray" /* Uint8ClampedArray */);
    is.int16Array = isObjectOfType("Int16Array" /* Int16Array */);
    is.uint16Array = isObjectOfType("Uint16Array" /* Uint16Array */);
    is.int32Array = isObjectOfType("Int32Array" /* Int32Array */);
    is.uint32Array = isObjectOfType("Uint32Array" /* Uint32Array */);
    is.float32Array = isObjectOfType("Float32Array" /* Float32Array */);
    is.float64Array = isObjectOfType("Float64Array" /* Float64Array */);
    is.arrayBuffer = isObjectOfType("ArrayBuffer" /* ArrayBuffer */);
    is.sharedArrayBuffer = isObjectOfType("SharedArrayBuffer" /* SharedArrayBuffer */);
    is.dataView = isObjectOfType("DataView" /* DataView */);
    is.directInstanceOf = (instance, klass) => Object.getPrototypeOf(instance) === klass.prototype;
    is.urlInstance = (value) => isObjectOfType("URL" /* URL */)(value);
    is.urlString = (value) => {
        if (!is.string(value)) {
            return false;
        }
        try {
            new URLGlobal(value); // tslint:disable-line no-unused-expression
            return true;
        }
        catch (_a) {
            return false;
        }
    };
    is.truthy = (value) => Boolean(value);
    is.falsy = (value) => !value;
    is.nan = (value) => Number.isNaN(value);
    const primitiveTypes = new Set([
        'undefined',
        'string',
        'number',
        'boolean',
        'symbol'
    ]);
    is.primitive = (value) => is.null_(value) || primitiveTypes.has(typeof value);
    is.integer = (value) => Number.isInteger(value);
    is.safeInteger = (value) => Number.isSafeInteger(value);
    is.plainObject = (value) => {
        // From: https://github.com/sindresorhus/is-plain-obj/blob/master/index.js
        let prototype;
        return getObjectType(value) === "Object" /* Object */ &&
            (prototype = Object.getPrototypeOf(value), prototype === null || // tslint:disable-line:ban-comma-operator
                prototype === Object.getPrototypeOf({}));
    };
    const typedArrayTypes = new Set([
        "Int8Array" /* Int8Array */,
        "Uint8Array" /* Uint8Array */,
        "Uint8ClampedArray" /* Uint8ClampedArray */,
        "Int16Array" /* Int16Array */,
        "Uint16Array" /* Uint16Array */,
        "Int32Array" /* Int32Array */,
        "Uint32Array" /* Uint32Array */,
        "Float32Array" /* Float32Array */,
        "Float64Array" /* Float64Array */
    ]);
    is.typedArray = (value) => {
        const objectType = getObjectType(value);
        if (objectType === null) {
            return false;
        }
        return typedArrayTypes.has(objectType);
    };
    const isValidLength = (value) => is.safeInteger(value) && value > -1;
    is.arrayLike = (value) => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);
    is.inRange = (value, range) => {
        if (is.number(range)) {
            return value >= Math.min(0, range) && value <= Math.max(range, 0);
        }
        if (is.array(range) && range.length === 2) {
            return value >= Math.min(...range) && value <= Math.max(...range);
        }
        throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);
    };
    const NODE_TYPE_ELEMENT = 1;
    const DOM_PROPERTIES_TO_CHECK = [
        'innerHTML',
        'ownerDocument',
        'style',
        'attributes',
        'nodeValue'
    ];
    is.domElement = (value) => is.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is.string(value.nodeName) &&
        !is.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every(property => property in value);
    is.observable = (value) => {
        if (!value) {
            return false;
        }
        if (value[Symbol.observable] && value === value[Symbol.observable]()) {
            return true;
        }
        if (value['@@observable'] && value === value['@@observable']()) {
            return true;
        }
        return false;
    };
    is.nodeStream = (value) => !is.nullOrUndefined(value) && isObject(value) && is.function_(value.pipe) && !is.observable(value);
    is.infinite = (value) => value === Infinity || value === -Infinity;
    const isAbsoluteMod2 = (rem) => (value) => is.integer(value) && Math.abs(value % 2) === rem;
    is.even = isAbsoluteMod2(0);
    is.odd = isAbsoluteMod2(1);
    const isWhiteSpaceString = (value) => is.string(value) && /\S/.test(value) === false;
    is.emptyArray = (value) => is.array(value) && value.length === 0;
    is.nonEmptyArray = (value) => is.array(value) && value.length > 0;
    is.emptyString = (value) => is.string(value) && value.length === 0;
    is.nonEmptyString = (value) => is.string(value) && value.length > 0;
    is.emptyStringOrWhitespace = (value) => is.emptyString(value) || isWhiteSpaceString(value);
    is.emptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;
    is.nonEmptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;
    is.emptySet = (value) => is.set(value) && value.size === 0;
    is.nonEmptySet = (value) => is.set(value) && value.size > 0;
    is.emptyMap = (value) => is.map(value) && value.size === 0;
    is.nonEmptyMap = (value) => is.map(value) && value.size > 0;
    const predicateOnArray = (method, predicate, values) => {
        if (is.function_(predicate) === false) {
            throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);
        }
        if (values.length === 0) {
            throw new TypeError('Invalid number of values');
        }
        return method.call(values, predicate);
    };
    // tslint:disable variable-name
    is.any = (predicate, ...values) => predicateOnArray(Array.prototype.some, predicate, values);
    is.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values);
    // tslint:enable variable-name
})(is || (is = {}));
// Some few keywords are reserved, but we'll populate them for Node.js users
// See https://github.com/Microsoft/TypeScript/issues/2536
Object.defineProperties(is, {
    class: {
        value: is.class_
    },
    function: {
        value: is.function_
    },
    null: {
        value: is.null_
    }
});
exports.default = is;
// For CommonJS default export support
module.exports = is;
module.exports.default = is;

},{"url":59}],69:[function(require,module,exports){
'use strict';
const deferToConnect = require('defer-to-connect');

module.exports = request => {
	const timings = {
		start: Date.now(),
		socket: null,
		lookup: null,
		connect: null,
		upload: null,
		response: null,
		end: null,
		error: null,
		phases: {
			wait: null,
			dns: null,
			tcp: null,
			request: null,
			firstByte: null,
			download: null,
			total: null
		}
	};

	const handleError = origin => {
		const emit = origin.emit.bind(origin);
		origin.emit = (event, ...args) => {
			// Catches the `error` event
			if (event === 'error') {
				timings.error = Date.now();
				timings.phases.total = timings.error - timings.start;

				origin.emit = emit;
			}

			// Saves the original behavior
			return emit(event, ...args);
		};
	};

	let uploadFinished = false;
	const onUpload = () => {
		timings.upload = Date.now();
		timings.phases.request = timings.upload - timings.connect;
	};

	handleError(request);

	request.once('socket', socket => {
		timings.socket = Date.now();
		timings.phases.wait = timings.socket - timings.start;

		const lookupListener = () => {
			timings.lookup = Date.now();
			timings.phases.dns = timings.lookup - timings.socket;
		};

		socket.once('lookup', lookupListener);

		deferToConnect(socket, () => {
			timings.connect = Date.now();

			if (timings.lookup === null) {
				socket.removeListener('lookup', lookupListener);
				timings.lookup = timings.connect;
				timings.phases.dns = timings.lookup - timings.socket;
			}

			timings.phases.tcp = timings.connect - timings.lookup;

			if (uploadFinished && !timings.upload) {
				onUpload();
			}
		});
	});

	request.once('finish', () => {
		uploadFinished = true;

		if (timings.connect) {
			onUpload();
		}
	});

	request.once('response', response => {
		timings.response = Date.now();
		timings.phases.firstByte = timings.response - timings.upload;

		handleError(response);

		response.once('end', () => {
			timings.end = Date.now();
			timings.phases.download = timings.end - timings.response;
			timings.phases.total = timings.end - timings.start;
		});
	});

	return timings;
};

},{"defer-to-connect":174}],70:[function(require,module,exports){
module.exports=[
    "wav",
    "bwf",
    "raw",
    "aiff",
    "flac",
    "m4a",
    "pac",
    "tta",
    "wv",
    "ast",
    "aac",
    "mp2",
    "mp3",
    "mp4",
    "amr",
    "s3m",
    "3gp",
    "act",
    "au",
    "dct",
    "dss",
    "gsm",
    "m4p",
    "mmf",
    "mpc",
    "ogg",
    "oga",
    "opus",
    "ra",
    "sln",
    "vox"
]

},{}],71:[function(require,module,exports){
module.exports = {
	trueFunc: function trueFunc(){
		return true;
	},
	falseFunc: function falseFunc(){
		return false;
	}
};
},{}],72:[function(require,module,exports){
(function (Buffer){
'use strict';
const {PassThrough: PassThroughStream} = require('stream');

module.exports = options => {
	options = {...options};

	const {array} = options;
	let {encoding} = options;
	const isBuffer = encoding === 'buffer';
	let objectMode = false;

	if (array) {
		objectMode = !(encoding || isBuffer);
	} else {
		encoding = encoding || 'utf8';
	}

	if (isBuffer) {
		encoding = null;
	}

	const stream = new PassThroughStream({objectMode});

	if (encoding) {
		stream.setEncoding(encoding);
	}

	let length = 0;
	const chunks = [];

	stream.on('data', chunk => {
		chunks.push(chunk);

		if (objectMode) {
			length = chunks.length;
		} else {
			length += chunk.length;
		}
	});

	stream.getBufferedValue = () => {
		if (array) {
			return chunks;
		}

		return isBuffer ? Buffer.concat(chunks, length) : chunks.join('');
	};

	stream.getBufferedLength = () => length;

	return stream;
};

}).call(this,require("buffer").Buffer)
},{"buffer":4,"stream":37}],73:[function(require,module,exports){
'use strict';
const pump = require('pump');
const bufferStream = require('./buffer-stream');

class MaxBufferError extends Error {
	constructor() {
		super('maxBuffer exceeded');
		this.name = 'MaxBufferError';
	}
}

async function getStream(inputStream, options) {
	if (!inputStream) {
		return Promise.reject(new Error('Expected a stream'));
	}

	options = {
		maxBuffer: Infinity,
		...options
	};

	const {maxBuffer} = options;

	let stream;
	await new Promise((resolve, reject) => {
		const rejectPromise = error => {
			if (error) { // A null check
				error.bufferedData = stream.getBufferedValue();
			}

			reject(error);
		};

		stream = pump(inputStream, bufferStream(options), error => {
			if (error) {
				rejectPromise(error);
				return;
			}

			resolve();
		});

		stream.on('data', () => {
			if (stream.getBufferedLength() > maxBuffer) {
				rejectPromise(new MaxBufferError());
			}
		});
	});

	return stream.getBufferedValue();
}

module.exports = getStream;
// TODO: Remove this for the next major release
module.exports.default = getStream;
module.exports.buffer = (stream, options) => getStream(stream, {...options, encoding: 'buffer'});
module.exports.array = (stream, options) => getStream(stream, {...options, array: true});
module.exports.MaxBufferError = MaxBufferError;

},{"./buffer-stream":72,"pump":518}],74:[function(require,module,exports){
'use strict';
module.exports = object => {
	const result = {};

	for (const [key, value] of Object.entries(object)) {
		result[key.toLowerCase()] = value;
	}

	return result;
};

},{}],75:[function(require,module,exports){
'use strict';

const EventEmitter = require('events');
const urlLib = require('url');
const normalizeUrl = require('normalize-url');
const getStream = require('get-stream');
const CachePolicy = require('http-cache-semantics');
const Response = require('responselike');
const lowercaseKeys = require('lowercase-keys');
const cloneResponse = require('clone-response');
const Keyv = require('keyv');

class CacheableRequest {
	constructor(request, cacheAdapter) {
		if (typeof request !== 'function') {
			throw new TypeError('Parameter `request` must be a function');
		}

		this.cache = new Keyv({
			uri: typeof cacheAdapter === 'string' && cacheAdapter,
			store: typeof cacheAdapter !== 'string' && cacheAdapter,
			namespace: 'cacheable-request'
		});

		return this.createCacheableRequest(request);
	}

	createCacheableRequest(request) {
		return (opts, cb) => {
			let url;
			if (typeof opts === 'string') {
				url = normalizeUrlObject(urlLib.parse(opts));
				opts = {};
			} else if (opts instanceof urlLib.URL) {
				url = normalizeUrlObject(urlLib.parse(opts.toString()));
				opts = {};
			} else {
				const [pathname, ...searchParts] = (opts.path || '').split('?');
				const search = searchParts.length > 0 ?
					`?${searchParts.join('?')}` :
					'';
				url = normalizeUrlObject({ ...opts, pathname, search });
			}

			opts = {
				headers: {},
				method: 'GET',
				cache: true,
				strictTtl: false,
				automaticFailover: false,
				...opts,
				...urlObjectToRequestOptions(url)
			};
			opts.headers = lowercaseKeys(opts.headers);

			const ee = new EventEmitter();
			const normalizedUrlString = normalizeUrl(
				urlLib.format(url),
				{
					stripWWW: false,
					removeTrailingSlash: false,
					stripAuthentication: false
				}
			);
			const key = `${opts.method}:${normalizedUrlString}`;
			let revalidate = false;
			let madeRequest = false;

			const makeRequest = opts => {
				madeRequest = true;
				let requestErrored = false;
				let requestErrorCallback;

				const requestErrorPromise = new Promise(resolve => {
					requestErrorCallback = () => {
						if (!requestErrored) {
							requestErrored = true;
							resolve();
						}
					};
				});

				const handler = response => {
					if (revalidate && !opts.forceRefresh) {
						response.status = response.statusCode;
						const revalidatedPolicy = CachePolicy.fromObject(revalidate.cachePolicy).revalidatedPolicy(opts, response);
						if (!revalidatedPolicy.modified) {
							const headers = revalidatedPolicy.policy.responseHeaders();
							response = new Response(revalidate.statusCode, headers, revalidate.body, revalidate.url);
							response.cachePolicy = revalidatedPolicy.policy;
							response.fromCache = true;
						}
					}

					if (!response.fromCache) {
						response.cachePolicy = new CachePolicy(opts, response, opts);
						response.fromCache = false;
					}

					let clonedResponse;
					if (opts.cache && response.cachePolicy.storable()) {
						clonedResponse = cloneResponse(response);

						(async () => {
							try {
								const bodyPromise = getStream.buffer(response);

								await Promise.race([
									requestErrorPromise,
									new Promise(resolve => response.once('end', resolve))
								]);

								if (requestErrored) {
									return;
								}

								const body = await bodyPromise;

								const value = {
									cachePolicy: response.cachePolicy.toObject(),
									url: response.url,
									statusCode: response.fromCache ? revalidate.statusCode : response.statusCode,
									body
								};

								let ttl = opts.strictTtl ? response.cachePolicy.timeToLive() : undefined;
								if (opts.maxTtl) {
									ttl = ttl ? Math.min(ttl, opts.maxTtl) : opts.maxTtl;
								}

								await this.cache.set(key, value, ttl);
							} catch (error) {
								ee.emit('error', new CacheableRequest.CacheError(error));
							}
						})();
					} else if (opts.cache && revalidate) {
						(async () => {
							try {
								await this.cache.delete(key);
							} catch (error) {
								ee.emit('error', new CacheableRequest.CacheError(error));
							}
						})();
					}

					ee.emit('response', clonedResponse || response);
					if (typeof cb === 'function') {
						cb(clonedResponse || response);
					}
				};

				try {
					const req = request(opts, handler);
					req.once('error', requestErrorCallback);
					req.once('abort', requestErrorCallback);
					ee.emit('request', req);
				} catch (error) {
					ee.emit('error', new CacheableRequest.RequestError(error));
				}
			};

			(async () => {
				const get = async opts => {
					await Promise.resolve();

					const cacheEntry = opts.cache ? await this.cache.get(key) : undefined;
					if (typeof cacheEntry === 'undefined') {
						return makeRequest(opts);
					}

					const policy = CachePolicy.fromObject(cacheEntry.cachePolicy);
					if (policy.satisfiesWithoutRevalidation(opts) && !opts.forceRefresh) {
						const headers = policy.responseHeaders();
						const response = new Response(cacheEntry.statusCode, headers, cacheEntry.body, cacheEntry.url);
						response.cachePolicy = policy;
						response.fromCache = true;

						ee.emit('response', response);
						if (typeof cb === 'function') {
							cb(response);
						}
					} else {
						revalidate = cacheEntry;
						opts.headers = policy.revalidationHeaders(opts);
						makeRequest(opts);
					}
				};

				const errorHandler = error => ee.emit('error', new CacheableRequest.CacheError(error));
				this.cache.once('error', errorHandler);
				ee.on('response', () => this.cache.removeListener('error', errorHandler));

				try {
					await get(opts);
				} catch (error) {
					if (opts.automaticFailover && !madeRequest) {
						makeRequest(opts);
					}

					ee.emit('error', new CacheableRequest.CacheError(error));
				}
			})();

			return ee;
		};
	}
}

function urlObjectToRequestOptions(url) {
	const options = { ...url };
	options.path = `${url.pathname || '/'}${url.search || ''}`;
	delete options.pathname;
	delete options.search;
	return options;
}

function normalizeUrlObject(url) {
	// If url was parsed by url.parse or new URL:
	// - hostname will be set
	// - host will be hostname[:port]
	// - port will be set if it was explicit in the parsed string
	// Otherwise, url was from request options:
	// - hostname or host may be set
	// - host shall not have port encoded
	return {
		protocol: url.protocol,
		auth: url.auth,
		hostname: url.hostname || url.host || 'localhost',
		port: url.port,
		pathname: url.pathname,
		search: url.search
	};
}

CacheableRequest.RequestError = class extends Error {
	constructor(error) {
		super(error.message);
		this.name = 'RequestError';
		Object.assign(this, error);
	}
};

CacheableRequest.CacheError = class extends Error {
	constructor(error) {
		super(error.message);
		this.name = 'CacheError';
		Object.assign(this, error);
	}
};

module.exports = CacheableRequest;

},{"clone-response":159,"events":7,"get-stream":73,"http-cache-semantics":239,"keyv":249,"lowercase-keys":74,"normalize-url":484,"responselike":522,"url":59}],76:[function(require,module,exports){
'use strict'

var util = require('util')

var splitter = /^(.*?)(?::(eq|(?:(?:first|last)(?!-child)))(?:\((\d+)\))?)(.*)/

exports.wrap = function (Cheerio) {
  function CheerioAdv (selector, context, root, opts) {
    if (!(this instanceof CheerioAdv)) return new CheerioAdv(selector, context, root, opts)

    if (typeof selector === 'string' && splitter.test(selector)) {
      var steps = split(selector)
      var cursor = Cheerio(steps.shift(), context, root, opts)
      return execSteps(cursor, steps)
    }

    return Cheerio.apply(Cheerio, arguments)
  }

  util.inherits(CheerioAdv, Cheerio)

  CheerioAdv.load = function () {
    var $ = Cheerio.load.apply(Cheerio, arguments)

    function AdvInitialize (selector, context, root) {
      if (typeof selector === 'string') return exports.find($, selector, context, root)
      return $.apply(Cheerio, arguments)
    }

    Object.keys($).forEach(function (key) {
      AdvInitialize[key] = $[key]
    })

    return AdvInitialize
  }

  return CheerioAdv
}

exports.find = function ($, selector, context, root) {
  return exports.compile(selector)($, context, root)
}

exports.compile = function (selector) {
  var steps = split(selector)
  selector = steps.shift()

  return function ($, context, root) {
    var cursor = $(selector, context, root)
    return execSteps(cursor, steps)
  }
}

var split = function (selector) {
  var steps = []
  var match = selector.match(splitter)

  while (match) {
    steps.push(match[1])
    steps.push(selectors[match[2]](match[3]))
    selector = match[4].trim()
    match = selector.match(splitter)
  }

  steps.push(selector)

  return steps.filter(function (step) {
    return step !== ''
  })
}

var execSteps = function (cursor, steps) {
  return steps.reduce(function (cursor, step) {
    return typeof step === 'function' ? step(cursor) : cursor.find(step)
  }, cursor)
}

var selectors = {
  eq: function (index) {
    index = parseInt(index, 10)
    return function (cursor) {
      return cursor.eq(index)
    }
  },

  first: function () {
    return function (cursor) {
      return cursor.first()
    }
  },

  last: function () {
    return function (cursor) {
      return cursor.last()
    }
  }
}

},{"util":64}],77:[function(require,module,exports){
/**
 * Export cheerio (with )
 */

exports = module.exports = require('./lib/cheerio');

/*
  Export the version
*/

exports.version = require('./package.json').version;

},{"./lib/cheerio":83,"./package.json":88}],78:[function(require,module,exports){
var $ = require('../static'),
    utils = require('../utils'),
    isTag = utils.isTag,
    domEach = utils.domEach,
    hasOwn = Object.prototype.hasOwnProperty,
    camelCase = utils.camelCase,
    cssCase = utils.cssCase,
    rspace = /\s+/,
    dataAttrPrefix = 'data-',
    _ = {
      forEach: require('lodash/forEach'),
      extend: require('lodash/assignIn'),
      some: require('lodash/some')
    },

  // Lookup table for coercing string data-* attributes to their corresponding
  // JavaScript primitives
  primitives = {
    null: null,
    true: true,
    false: false
  },

  // Attributes that are booleans
  rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
  // Matches strings that look like JSON objects or arrays
  rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/;


var getAttr = function(elem, name) {
  if (!elem || !isTag(elem)) return;

  if (!elem.attribs) {
    elem.attribs = {};
  }

  // Return the entire attribs object if no attribute specified
  if (!name) {
    return elem.attribs;
  }

  if (hasOwn.call(elem.attribs, name)) {
    // Get the (decoded) attribute
    return rboolean.test(name) ? name : elem.attribs[name];
  }

  // Mimic the DOM and return text content as value for `option's`
  if (elem.name === 'option' && name === 'value') {
    return $.text(elem.children);
  }

  // Mimic DOM with default value for radios/checkboxes
  if (elem.name === 'input' &&
      (elem.attribs.type === 'radio' || elem.attribs.type === 'checkbox') &&
      name === 'value') {
    return 'on';
  }
};

var setAttr = function(el, name, value) {

  if (value === null) {
    removeAttribute(el, name);
  } else {
    el.attribs[name] = value+'';
  }
};

exports.attr = function(name, value) {
  // Set the value (with attr map support)
  if (typeof name === 'object' || value !== undefined) {
    if (typeof value === 'function') {
      return domEach(this, function(i, el) {
        setAttr(el, name, value.call(el, i, el.attribs[name]));
      });
    }
    return domEach(this, function(i, el) {
      if (!isTag(el)) return;

      if (typeof name === 'object') {
        _.forEach(name, function(objValue, objName) {
          setAttr(el, objName, objValue);
        });
      } else {
        setAttr(el, name, value);
      }
    });
  }

  return getAttr(this[0], name);
};

var getProp = function (el, name) {
  if (!el || !isTag(el)) return;

  return hasOwn.call(el, name)
      ? el[name]
      : rboolean.test(name)
          ? getAttr(el, name) !== undefined
          : getAttr(el, name);
};

var setProp = function (el, name, value) {
  el[name] = rboolean.test(name) ? !!value : value;
};

exports.prop = function (name, value) {
  var i = 0,
      property;

  if (typeof name === 'string' && value === undefined) {

    switch (name) {
      case 'style':
        property = this.css();

        _.forEach(property, function (v, p) {
          property[i++] = p;
        });

        property.length = i;

        break;
      case 'tagName':
      case 'nodeName':
        property = this[0].name.toUpperCase();
        break;
      default:
        property = getProp(this[0], name);
    }

    return property;
  }

  if (typeof name === 'object' || value !== undefined) {

    if (typeof value === 'function') {
      return domEach(this, function(j, el) {
        setProp(el, name, value.call(el, j, getProp(el, name)));
      });
    }

    return domEach(this, function(__, el) {
      if (!isTag(el)) return;

      if (typeof name === 'object') {

        _.forEach(name, function(val, key) {
          setProp(el, key, val);
        });

      } else {
        setProp(el, name, value);
      }
    });

  }
};

var setData = function(el, name, value) {
  if (!el.data) {
    el.data = {};
  }

  if (typeof name === 'object') return _.extend(el.data, name);
  if (typeof name === 'string' && value !== undefined) {
    el.data[name] = value;
  }
};

// Read the specified attribute from the equivalent HTML5 `data-*` attribute,
// and (if present) cache the value in the node's internal data store. If no
// attribute name is specified, read *all* HTML5 `data-*` attributes in this
// manner.
var readData = function(el, name) {
  var readAll = arguments.length === 1;
  var domNames, domName, jsNames, jsName, value, idx, length;

  if (readAll) {
    domNames = Object.keys(el.attribs).filter(function(attrName) {
      return attrName.slice(0, dataAttrPrefix.length) === dataAttrPrefix;
    });
    jsNames = domNames.map(function(_domName) {
      return camelCase(_domName.slice(dataAttrPrefix.length));
    });
  } else {
    domNames = [dataAttrPrefix + cssCase(name)];
    jsNames = [name];
  }

  for (idx = 0, length = domNames.length; idx < length; ++idx) {
    domName = domNames[idx];
    jsName = jsNames[idx];
    if (hasOwn.call(el.attribs, domName)) {
      value = el.attribs[domName];

      if (hasOwn.call(primitives, value)) {
        value = primitives[value];
      } else if (value === String(Number(value))) {
        value = Number(value);
      } else if (rbrace.test(value)) {
        try {
          value = JSON.parse(value);
        } catch(e){ }
      }

      el.data[jsName] = value;
    }
  }

  return readAll ? el.data : value;
};

exports.data = function(name, value) {
  var elem = this[0];

  if (!elem || !isTag(elem)) return;

  if (!elem.data) {
    elem.data = {};
  }

  // Return the entire data object if no data specified
  if (!name) {
    return readData(elem);
  }

  // Set the value (with attr map support)
  if (typeof name === 'object' || value !== undefined) {
    domEach(this, function(i, el) {
      setData(el, name, value);
    });
    return this;
  } else if (hasOwn.call(elem.data, name)) {
    return elem.data[name];
  }

  return readData(elem, name);
};

/**
 * Get the value of an element
 */

exports.val = function(value) {
  var querying = arguments.length === 0,
      element = this[0];

  if(!element) return;

  switch (element.name) {
    case 'textarea':
      return this.text(value);
    case 'input':
      switch (this.attr('type')) {
        case 'radio':
          if (querying) {
            return this.attr('value');
          } else {
            this.attr('value', value);
            return this;
          }
          break;
        default:
          return this.attr('value', value);
      }
      return;
    case 'select':
      var option = this.find('option:selected'),
          returnValue;
      if (option === undefined) return undefined;
      if (!querying) {
        if (!hasOwn.call(this.attr(), 'multiple') && typeof value == 'object') {
          return this;
        }
        if (typeof value != 'object') {
          value = [value];
        }
        this.find('option').removeAttr('selected');
        for (var i = 0; i < value.length; i++) {
          this.find('option[value="' + value[i] + '"]').attr('selected', '');
        }
        return this;
      }
      returnValue = option.attr('value');
      if (hasOwn.call(this.attr(), 'multiple')) {
        returnValue = [];
        domEach(option, function(__, el) {
          returnValue.push(getAttr(el, 'value'));
        });
      }
      return returnValue;
    case 'option':
      if (!querying) {
        this.attr('value', value);
        return this;
      }
      return this.attr('value');
  }
};

/**
 * Remove an attribute
 */

var removeAttribute = function(elem, name) {
  if (!elem.attribs || !hasOwn.call(elem.attribs, name))
    return;

  delete elem.attribs[name];
};


exports.removeAttr = function(name) {
  domEach(this, function(i, elem) {
    removeAttribute(elem, name);
  });

  return this;
};

exports.hasClass = function(className) {
  return _.some(this, function(elem) {
    var attrs = elem.attribs,
        clazz = attrs && attrs['class'],
        idx = -1,
        end;

    if (clazz && className.length) {
      while ((idx = clazz.indexOf(className, idx+1)) > -1) {
        end = idx + className.length;

        if ((idx === 0 || rspace.test(clazz[idx-1]))
            && (end === clazz.length || rspace.test(clazz[end]))) {
          return true;
        }
      }
    }
  });
};

exports.addClass = function(value) {
  // Support functions
  if (typeof value === 'function') {
    return domEach(this, function(i, el) {
      var className = el.attribs['class'] || '';
      exports.addClass.call([el], value.call(el, i, className));
    });
  }

  // Return if no value or not a string or function
  if (!value || typeof value !== 'string') return this;

  var classNames = value.split(rspace),
      numElements = this.length;


  for (var i = 0; i < numElements; i++) {
    // If selected element isn't a tag, move on
    if (!isTag(this[i])) continue;

    // If we don't already have classes
    var className = getAttr(this[i], 'class'),
        numClasses,
        setClass;

    if (!className) {
      setAttr(this[i], 'class', classNames.join(' ').trim());
    } else {
      setClass = ' ' + className + ' ';
      numClasses = classNames.length;

      // Check if class already exists
      for (var j = 0; j < numClasses; j++) {
        var appendClass = classNames[j] + ' ';
        if (setClass.indexOf(' ' + appendClass) < 0)
          setClass += appendClass;
      }

      setAttr(this[i], 'class', setClass.trim());
    }
  }

  return this;
};

var splitClass = function(className) {
  return className ? className.trim().split(rspace) : [];
};

exports.removeClass = function(value) {
  var classes,
      numClasses,
      removeAll;

  // Handle if value is a function
  if (typeof value === 'function') {
    return domEach(this, function(i, el) {
      exports.removeClass.call(
        [el], value.call(el, i, el.attribs['class'] || '')
      );
    });
  }

  classes = splitClass(value);
  numClasses = classes.length;
  removeAll = arguments.length === 0;

  return domEach(this, function(i, el) {
    if (!isTag(el)) return;

    if (removeAll) {
      // Short circuit the remove all case as this is the nice one
      el.attribs.class = '';
    } else {
      var elClasses = splitClass(el.attribs.class),
          index,
          changed;

      for (var j = 0; j < numClasses; j++) {
        index = elClasses.indexOf(classes[j]);

        if (index >= 0) {
          elClasses.splice(index, 1);
          changed = true;

          // We have to do another pass to ensure that there are not duplicate
          // classes listed
          j--;
        }
      }
      if (changed) {
        el.attribs.class = elClasses.join(' ');
      }
    }
  });
};

exports.toggleClass = function(value, stateVal) {
  // Support functions
  if (typeof value === 'function') {
    return domEach(this, function(i, el) {
      exports.toggleClass.call(
        [el],
        value.call(el, i, el.attribs['class'] || '', stateVal),
        stateVal
      );
    });
  }

  // Return if no value or not a string or function
  if (!value || typeof value !== 'string') return this;

  var classNames = value.split(rspace),
    numClasses = classNames.length,
    state = typeof stateVal === 'boolean' ? stateVal ? 1 : -1 : 0,
    numElements = this.length,
    elementClasses,
    index;

  for (var i = 0; i < numElements; i++) {
    // If selected element isn't a tag, move on
    if (!isTag(this[i])) continue;

    elementClasses = splitClass(this[i].attribs.class);

    // Check if class already exists
    for (var j = 0; j < numClasses; j++) {
      // Check if the class name is currently defined
      index = elementClasses.indexOf(classNames[j]);

      // Add if stateValue === true or we are toggling and there is no value
      if (state >= 0 && index < 0) {
        elementClasses.push(classNames[j]);
      } else if (state <= 0 && index >= 0) {
        // Otherwise remove but only if the item exists
        elementClasses.splice(index, 1);
      }
    }

    this[i].attribs.class = elementClasses.join(' ');
  }

  return this;
};

exports.is = function (selector) {
  if (selector) {
    return this.filter(selector).length > 0;
  }
  return false;
};

},{"../static":86,"../utils":87,"lodash/assignIn":423,"lodash/forEach":430,"lodash/some":458}],79:[function(require,module,exports){
var domEach = require('../utils').domEach,
    _ = {
      pick: require('lodash/pick'),
    };

var toString = Object.prototype.toString;

/**
 * Set / Get css.
 *
 * @param {String|Object} prop
 * @param {String} val
 * @return {self}
 * @api public
 */

exports.css = function(prop, val) {
  if (arguments.length === 2 ||
    // When `prop` is a "plain" object
    (toString.call(prop) === '[object Object]')) {
    return domEach(this, function(idx, el) {
      setCss(el, prop, val, idx);
    });
  } else {
    return getCss(this[0], prop);
  }
};

/**
 * Set styles of all elements.
 *
 * @param {String|Object} prop
 * @param {String} val
 * @param {Number} idx - optional index within the selection
 * @return {self}
 * @api private
 */

function setCss(el, prop, val, idx) {
  if ('string' == typeof prop) {
    var styles = getCss(el);
    if (typeof val === 'function') {
      val = val.call(el, idx, styles[prop]);
    }

    if (val === '') {
      delete styles[prop];
    } else if (val != null) {
      styles[prop] = val;
    }

    el.attribs.style = stringify(styles);
  } else if ('object' == typeof prop) {
    Object.keys(prop).forEach(function(k){
      setCss(el, k, prop[k]);
    });
  }
}

/**
 * Get parsed styles of the first element.
 *
 * @param {String} prop
 * @return {Object}
 * @api private
 */

function getCss(el, prop) {
  var styles = parse(el.attribs.style);
  if (typeof prop === 'string') {
    return styles[prop];
  } else if (Array.isArray(prop)) {
    return _.pick(styles, prop);
  } else {
    return styles;
  }
}

/**
 * Stringify `obj` to styles.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function stringify(obj) {
  return Object.keys(obj || {})
    .reduce(function(str, prop){
      return str += ''
        + (str ? ' ' : '')
        + prop
        + ': '
        + obj[prop]
        + ';';
    }, '');
}

/**
 * Parse `styles`.
 *
 * @param {String} styles
 * @return {Object}
 * @api private
 */

function parse(styles) {
  styles = (styles || '').trim();

  if (!styles) return {};

  return styles
    .split(';')
    .reduce(function(obj, str){
      var n = str.indexOf(':');
      // skip if there is no :, or if it is the first/last character
      if (n < 1 || n === str.length-1) return obj;
      obj[str.slice(0,n).trim()] = str.slice(n+1).trim();
      return obj;
    }, {});
}

},{"../utils":87,"lodash/pick":454}],80:[function(require,module,exports){
// https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js
// https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js
var submittableSelector = 'input,select,textarea,keygen',
    r20 = /%20/g,
    rCRLF = /\r?\n/g,
    _ = {
      map: require('lodash/map')
    };

exports.serialize = function() {
  // Convert form elements into name/value objects
  var arr = this.serializeArray();

  // Serialize each element into a key/value string
  var retArr = _.map(arr, function(data) {
    return encodeURIComponent(data.name) + '=' + encodeURIComponent(data.value);
  });

  // Return the resulting serialization
  return retArr.join('&').replace(r20, '+');
};

exports.serializeArray = function() {
  // Resolve all form elements from either forms or collections of form elements
  var Cheerio = this.constructor;
  return this.map(function() {
      var elem = this;
      var $elem = Cheerio(elem);
      if (elem.name === 'form') {
        return $elem.find(submittableSelector).toArray();
      } else {
        return $elem.filter(submittableSelector).toArray();
      }
    }).filter(
        // Verify elements have a name (`attr.name`) and are not disabled (`:disabled`)
        '[name!=""]:not(:disabled)'
        // and cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)
        + ':not(:submit, :button, :image, :reset, :file)'
        // and are either checked/don't have a checkable state
        + ':matches([checked], :not(:checkbox, :radio))'
    // Convert each of the elements to its value(s)
    ).map(function(i, elem) {
      var $elem = Cheerio(elem);
      var name = $elem.attr('name');
      var value = $elem.val();

      // If there is no value set (e.g. `undefined`, `null`), then default value to empty
      if (value == null) {
        value = '';
      }

      // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs
      if (Array.isArray(value)) {
        return _.map(value, function(val) {
          // We trim replace any line endings (e.g. `\r` or `\r\n` with `\r\n`) to guarantee consistency across platforms
          //   These can occur inside of `<textarea>'s`
          return {name: name, value: val.replace( rCRLF, '\r\n' )};
        });
      // Otherwise (e.g. `<input type="text">`, return only one key/value pair
      } else {
        return {name: name, value: value.replace( rCRLF, '\r\n' )};
      }
    // Convert our result to an array
    }).get();
};

},{"lodash/map":449}],81:[function(require,module,exports){
var parse = require('../parse'),
    $ = require('../static'),
    updateDOM = parse.update,
    evaluate = parse.evaluate,
    utils = require('../utils'),
    domEach = utils.domEach,
    cloneDom = utils.cloneDom,
    isHtml = utils.isHtml,
    slice = Array.prototype.slice,
    _ = {
      flatten: require('lodash/flatten'),
      bind: require('lodash/bind'),
      forEach: require('lodash/forEach')
    };

// Create an array of nodes, recursing into arrays and parsing strings if
// necessary
exports._makeDomArray = function makeDomArray(elem, clone) {
  if (elem == null) {
    return [];
  } else if (elem.cheerio) {
    return clone ? cloneDom(elem.get(), elem.options) : elem.get();
  } else if (Array.isArray(elem)) {
    return _.flatten(elem.map(function(el) {
      return this._makeDomArray(el, clone);
    }, this));
  } else if (typeof elem === 'string') {
    return evaluate(elem, this.options, false);
  } else {
    return clone ? cloneDom([elem]) : [elem];
  }
};

var _insert = function(concatenator) {
  return function() {
    var elems = slice.call(arguments),
        lastIdx = this.length - 1;

    return domEach(this, function(i, el) {
      var dom, domSrc;

      if (typeof elems[0] === 'function') {
        domSrc = elems[0].call(el, i, $.html(el.children));
      } else {
        domSrc = elems;
      }

      dom = this._makeDomArray(domSrc, i < lastIdx);
      concatenator(dom, el.children, el);
    });
  };
};

/*
 * Modify an array in-place, removing some number of elements and adding new
 * elements directly following them.
 *
 * @param {Array} array Target array to splice.
 * @param {Number} spliceIdx Index at which to begin changing the array.
 * @param {Number} spliceCount Number of elements to remove from the array.
 * @param {Array} newElems Elements to insert into the array.
 *
 * @api private
 */
var uniqueSplice = function(array, spliceIdx, spliceCount, newElems, parent) {
  var spliceArgs = [spliceIdx, spliceCount].concat(newElems),
      prev = array[spliceIdx - 1] || null,
      next = array[spliceIdx] || null;
  var idx, len, prevIdx, node, oldParent;

  // Before splicing in new elements, ensure they do not already appear in the
  // current array.
  for (idx = 0, len = newElems.length; idx < len; ++idx) {
    node = newElems[idx];
    oldParent = node.parent || node.root;
    prevIdx = oldParent && oldParent.children.indexOf(newElems[idx]);

    if (oldParent && prevIdx > -1) {
      oldParent.children.splice(prevIdx, 1);
      if (parent === oldParent && spliceIdx > prevIdx) {
        spliceArgs[0]--;
      }
    }

    node.root = null;
    node.parent = parent;

    if (node.prev) {
      node.prev.next = node.next || null;
    }

    if (node.next) {
      node.next.prev = node.prev || null;
    }

    node.prev = newElems[idx - 1] || prev;
    node.next = newElems[idx + 1] || next;
  }

  if (prev) {
    prev.next = newElems[0];
  }
  if (next) {
    next.prev = newElems[newElems.length - 1];
  }
  return array.splice.apply(array, spliceArgs);
};

exports.appendTo = function(target) {
  if (!target.cheerio) {
    target = this.constructor.call(this.constructor, target, null, this._originalRoot);
  }

  target.append(this);

  return this;
};

exports.prependTo = function(target) {
  if (!target.cheerio) {
    target = this.constructor.call(this.constructor, target, null, this._originalRoot);
  }

  target.prepend(this);

  return this;
};

exports.append = _insert(function(dom, children, parent) {
  uniqueSplice(children, children.length, 0, dom, parent);
});

exports.prepend = _insert(function(dom, children, parent) {
  uniqueSplice(children, 0, 0, dom, parent);
});

exports.wrap = function(wrapper) {
  var wrapperFn = typeof wrapper === 'function' && wrapper,
      lastIdx = this.length - 1;

  _.forEach(this, _.bind(function(el, i) {
    var parent = el.parent || el.root,
        siblings = parent.children,
        wrapperDom, elInsertLocation, j, index;

    if (!parent) {
      return;
    }

    if (wrapperFn) {
      wrapper = wrapperFn.call(el, i);
    }

    if (typeof wrapper === 'string' && !isHtml(wrapper)) {
      wrapper = this.parents().last().find(wrapper).clone();
    }

    wrapperDom = this._makeDomArray(wrapper, i < lastIdx).slice(0, 1);
    elInsertLocation = wrapperDom[0];
    // Find the deepest child. Only consider the first tag child of each node
    // (ignore text); stop if no children are found.
    j = 0;

    while (elInsertLocation && elInsertLocation.children) {
      if (j >= elInsertLocation.children.length) {
        break;
      }

      if (elInsertLocation.children[j].type === 'tag') {
        elInsertLocation = elInsertLocation.children[j];
        j=0;
      } else {
        j++;
      }
    }
    index = siblings.indexOf(el);

    updateDOM([el], elInsertLocation);
    // The previous operation removed the current element from the `siblings`
    // array, so the `dom` array can be inserted without removing any
    // additional elements.
    uniqueSplice(siblings, index, 0, wrapperDom, parent);
  }, this));

  return this;
};

exports.after = function() {
  var elems = slice.call(arguments),
      lastIdx = this.length - 1;

  domEach(this, function(i, el) {
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el),
        domSrc, dom;

    // If not found, move on
    if (index < 0) return;

    if (typeof elems[0] === 'function') {
      domSrc = elems[0].call(el, i, $.html(el.children));
    } else {
      domSrc = elems;
    }
    dom = this._makeDomArray(domSrc, i < lastIdx);

    // Add element after `this` element
    uniqueSplice(siblings, index + 1, 0, dom, parent);
  });

  return this;
};

exports.insertAfter = function(target) {
  var clones = [],
      self = this;
  if (typeof target === 'string') {
    target = this.constructor.call(this.constructor, target, null, this._originalRoot);
  }
  target = this._makeDomArray(target);
  self.remove();
  domEach(target, function(i, el) {
    var clonedSelf = self._makeDomArray(self.clone());
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el);

    // If not found, move on
    if (index < 0) return;

    // Add cloned `this` element(s) after target element
    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);
    clones.push(clonedSelf);
  });
  return this.constructor.call(this.constructor, this._makeDomArray(clones));
};

exports.before = function() {
  var elems = slice.call(arguments),
      lastIdx = this.length - 1;

  domEach(this, function(i, el) {
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el),
        domSrc, dom;

    // If not found, move on
    if (index < 0) return;

    if (typeof elems[0] === 'function') {
      domSrc = elems[0].call(el, i, $.html(el.children));
    } else {
      domSrc = elems;
    }

    dom = this._makeDomArray(domSrc, i < lastIdx);

    // Add element before `el` element
    uniqueSplice(siblings, index, 0, dom, parent);
  });

  return this;
};

exports.insertBefore = function(target) {
  var clones = [],
      self = this;
  if (typeof target === 'string') {
    target = this.constructor.call(this.constructor, target, null, this._originalRoot);
  }
  target = this._makeDomArray(target);
  self.remove();
  domEach(target, function(i, el) {
    var clonedSelf = self._makeDomArray(self.clone());
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el);

    // If not found, move on
    if (index < 0) return;

    // Add cloned `this` element(s) after target element
    uniqueSplice(siblings, index, 0, clonedSelf, parent);
    clones.push(clonedSelf);
  });
  return this.constructor.call(this.constructor, this._makeDomArray(clones));
};

/*
  remove([selector])
*/
exports.remove = function(selector) {
  var elems = this;

  // Filter if we have selector
  if (selector)
    elems = elems.filter(selector);

  domEach(elems, function(i, el) {
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el);

    if (index < 0) return;

    siblings.splice(index, 1);
    if (el.prev) {
      el.prev.next = el.next;
    }
    if (el.next) {
      el.next.prev = el.prev;
    }
    el.prev = el.next = el.parent = el.root = null;
  });

  return this;
};

exports.replaceWith = function(content) {
  var self = this;

  domEach(this, function(i, el) {
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        dom = self._makeDomArray(typeof content === 'function' ? content.call(el, i, el) : content),
        index;

    // In the case that `dom` contains nodes that already exist in other
    // structures, ensure those nodes are properly removed.
    updateDOM(dom, null);

    index = siblings.indexOf(el);

    // Completely remove old element
    uniqueSplice(siblings, index, 1, dom, parent);
    el.parent = el.prev = el.next = el.root = null;
  });

  return this;
};

exports.empty = function() {
  domEach(this, function(i, el) {
    _.forEach(el.children, function(child) {
      child.next = child.prev = child.parent = null;
    });

    el.children.length = 0;
  });
  return this;
};

/**
 * Set/Get the HTML
 */
exports.html = function(str) {
  if (str === undefined) {
    if (!this[0] || !this[0].children) return null;
    return $.html(this[0].children, this.options);
  }

  var opts = this.options;

  domEach(this, function(i, el) {
    _.forEach(el.children, function(child) {
      child.next = child.prev = child.parent = null;
    });

    var content = str.cheerio ? str.clone().get() : evaluate('' + str, opts, false);

    updateDOM(content, el);
  });

  return this;
};

exports.toString = function() {
  return $.html(this, this.options);
};

exports.text = function(str) {
  // If `str` is undefined, act as a "getter"
  if (str === undefined) {
    return $.text(this);
  } else if (typeof str === 'function') {
    // Function support
    return domEach(this, function(i, el) {
      var $el = [el];
      return exports.text.call($el, str.call(el, i, $.text($el)));
    });
  }

  // Append text node to each selected elements
  domEach(this, function(i, el) {
    _.forEach(el.children, function(child) {
      child.next = child.prev = child.parent = null;
    });

    var elem = {
      data: '' + str,
      type: 'text',
      parent: el,
      prev: null,
      next: null,
      children: []
    };

    updateDOM(elem, el);
  });

  return this;
};

exports.clone = function() {
  return this._make(cloneDom(this.get(), this.options));
};

},{"../parse":85,"../static":86,"../utils":87,"lodash/bind":424,"lodash/flatten":429,"lodash/forEach":430}],82:[function(require,module,exports){
var select = require('css-select'),
    utils = require('../utils'),
    domEach = utils.domEach,
    uniqueSort = require('htmlparser2').DomUtils.uniqueSort,
    isTag = utils.isTag,
    _ = {
      bind: require('lodash/bind'),
      forEach: require('lodash/forEach'),
      reject: require('lodash/reject'),
      filter: require('lodash/filter'),
      reduce: require('lodash/reduce')
    };

exports.find = function(selectorOrHaystack) {
  var elems = _.reduce(this, function(memo, elem) {
    return memo.concat(_.filter(elem.children, isTag));
  }, []);
  var contains = this.constructor.contains;
  var haystack;

  if (selectorOrHaystack && typeof selectorOrHaystack !== 'string') {
    if (selectorOrHaystack.cheerio) {
      haystack = selectorOrHaystack.get();
    } else {
      haystack = [selectorOrHaystack];
    }

    return this._make(haystack.filter(function(elem) {
      var idx, len;
      for (idx = 0, len = this.length; idx < len; ++idx) {
        if (contains(this[idx], elem)) {
          return true;
        }
      }
    }, this));
  }

  var options = {__proto__: this.options, context: this.toArray()};

  return this._make(select(selectorOrHaystack, elems, options));
};

// Get the parent of each element in the current set of matched elements,
// optionally filtered by a selector.
exports.parent = function(selector) {
  var set = [];

  domEach(this, function(idx, elem) {
    var parentElem = elem.parent;
    if (parentElem && set.indexOf(parentElem) < 0) {
      set.push(parentElem);
    }
  });

  if (arguments.length) {
    set = exports.filter.call(set, selector, this);
  }

  return this._make(set);
};

exports.parents = function(selector) {
  var parentNodes = [];

  // When multiple DOM elements are in the original set, the resulting set will
  // be in *reverse* order of the original elements as well, with duplicates
  // removed.
  this.get().reverse().forEach(function(elem) {
    traverseParents(this, elem.parent, selector, Infinity)
      .forEach(function(node) {
        if (parentNodes.indexOf(node) === -1) {
          parentNodes.push(node);
        }
      }
    );
  }, this);

  return this._make(parentNodes);
};

exports.parentsUntil = function(selector, filter) {
  var parentNodes = [], untilNode, untilNodes;

  if (typeof selector === 'string') {
    untilNode = select(selector, this.parents().toArray(), this.options)[0];
  } else if (selector && selector.cheerio) {
    untilNodes = selector.toArray();
  } else if (selector) {
    untilNode = selector;
  }

  // When multiple DOM elements are in the original set, the resulting set will
  // be in *reverse* order of the original elements as well, with duplicates
  // removed.

  this.toArray().reverse().forEach(function(elem) {
    while ((elem = elem.parent)) {
      if ((untilNode && elem !== untilNode) ||
        (untilNodes && untilNodes.indexOf(elem) === -1) ||
        (!untilNode && !untilNodes)) {
        if (isTag(elem) && parentNodes.indexOf(elem) === -1) { parentNodes.push(elem); }
      } else {
        break;
      }
    }
  }, this);

  return this._make(filter ? select(filter, parentNodes, this.options) : parentNodes);
};

// For each element in the set, get the first element that matches the selector
// by testing the element itself and traversing up through its ancestors in the
// DOM tree.
exports.closest = function(selector) {
  var set = [];

  if (!selector) {
    return this._make(set);
  }

  domEach(this, function(idx, elem) {
    var closestElem = traverseParents(this, elem, selector, 1)[0];

    // Do not add duplicate elements to the set
    if (closestElem && set.indexOf(closestElem) < 0) {
      set.push(closestElem);
    }
  }.bind(this));

  return this._make(set);
};

exports.next = function(selector) {
  if (!this[0]) { return this; }
  var elems = [];

  _.forEach(this, function(elem) {
    while ((elem = elem.next)) {
      if (isTag(elem)) {
        elems.push(elem);
        return;
      }
    }
  });

  return selector ?
    exports.filter.call(elems, selector, this) :
    this._make(elems);
};

exports.nextAll = function(selector) {
  if (!this[0]) { return this; }
  var elems = [];

  _.forEach(this, function(elem) {
    while ((elem = elem.next)) {
      if (isTag(elem) && elems.indexOf(elem) === -1) {
        elems.push(elem);
      }
    }
  });

  return selector ?
    exports.filter.call(elems, selector, this) :
    this._make(elems);
};

exports.nextUntil = function(selector, filterSelector) {
  if (!this[0]) { return this; }
  var elems = [], untilNode, untilNodes;

  if (typeof selector === 'string') {
    untilNode = select(selector, this.nextAll().get(), this.options)[0];
  } else if (selector && selector.cheerio) {
    untilNodes = selector.get();
  } else if (selector) {
    untilNode = selector;
  }

  _.forEach(this, function(elem) {
    while ((elem = elem.next)) {
      if ((untilNode && elem !== untilNode) ||
        (untilNodes && untilNodes.indexOf(elem) === -1) ||
        (!untilNode && !untilNodes)) {
        if (isTag(elem) && elems.indexOf(elem) === -1) {
          elems.push(elem);
        }
      } else {
        break;
      }
    }
  });

  return filterSelector ?
    exports.filter.call(elems, filterSelector, this) :
    this._make(elems);
};

exports.prev = function(selector) {
  if (!this[0]) { return this; }
  var elems = [];

  _.forEach(this, function(elem) {
    while ((elem = elem.prev)) {
      if (isTag(elem)) {
        elems.push(elem);
        return;
      }
    }
  });

  return selector ?
    exports.filter.call(elems, selector, this) :
    this._make(elems);
};

exports.prevAll = function(selector) {
  if (!this[0]) { return this; }
  var elems = [];

  _.forEach(this, function(elem) {
    while ((elem = elem.prev)) {
      if (isTag(elem) && elems.indexOf(elem) === -1) {
        elems.push(elem);
      }
    }
  });

  return selector ?
    exports.filter.call(elems, selector, this) :
    this._make(elems);
};

exports.prevUntil = function(selector, filterSelector) {
  if (!this[0]) { return this; }
  var elems = [], untilNode, untilNodes;

  if (typeof selector === 'string') {
    untilNode = select(selector, this.prevAll().get(), this.options)[0];
  } else if (selector && selector.cheerio) {
    untilNodes = selector.get();
  } else if (selector) {
    untilNode = selector;
  }

  _.forEach(this, function(elem) {
    while ((elem = elem.prev)) {
      if ((untilNode && elem !== untilNode) ||
        (untilNodes && untilNodes.indexOf(elem) === -1) ||
        (!untilNode && !untilNodes)) {
        if (isTag(elem) && elems.indexOf(elem) === -1) {
          elems.push(elem);
        }
      } else {
        break;
      }
    }
  });

  return filterSelector ?
    exports.filter.call(elems, filterSelector, this) :
    this._make(elems);
};

exports.siblings = function(selector) {
  var parent = this.parent();

  var elems = _.filter(
    parent ? parent.children() : this.siblingsAndMe(),
    _.bind(function(elem) { return isTag(elem) && !this.is(elem); }, this)
  );

  if (selector !== undefined) {
    return exports.filter.call(elems, selector, this);
  } else {
    return this._make(elems);
  }
};

exports.children = function(selector) {

  var elems = _.reduce(this, function(memo, elem) {
    return memo.concat(_.filter(elem.children, isTag));
  }, []);

  if (selector === undefined) return this._make(elems);

  return exports.filter.call(elems, selector, this);
};

exports.contents = function() {
  return this._make(_.reduce(this, function(all, elem) {
    all.push.apply(all, elem.children);
    return all;
  }, []));
};

exports.each = function(fn) {
  var i = 0, len = this.length;
  while (i < len && fn.call(this[i], i, this[i]) !== false) ++i;
  return this;
};

exports.map = function(fn) {
  return this._make(_.reduce(this, function(memo, el, i) {
    var val = fn.call(el, i, el);
    return val == null ? memo : memo.concat(val);
  }, []));
};

var makeFilterMethod = function(filterFn) {
  return function(match, container) {
    var testFn;
    container = container || this;

    if (typeof match === 'string') {
      testFn = select.compile(match, container.options);
    } else if (typeof match === 'function') {
      testFn = function(el, i) {
        return match.call(el, i, el);
      };
    } else if (match.cheerio) {
      testFn = match.is.bind(match);
    } else {
      testFn = function(el) {
        return match === el;
      };
    }

    return container._make(filterFn(this, testFn));
  };
};

exports.filter = makeFilterMethod(_.filter);
exports.not = makeFilterMethod(_.reject);

exports.has = function(selectorOrHaystack) {
  var that = this;
  return exports.filter.call(this, function() {
    return that._make(this).find(selectorOrHaystack).length > 0;
  });
};

exports.first = function() {
  return this.length > 1 ? this._make(this[0]) : this;
};

exports.last = function() {
  return this.length > 1 ? this._make(this[this.length - 1]) : this;
};

// Reduce the set of matched elements to the one at the specified index.
exports.eq = function(i) {
  i = +i;

  // Use the first identity optimization if possible
  if (i === 0 && this.length <= 1) return this;

  if (i < 0) i = this.length + i;
  return this[i] ? this._make(this[i]) : this._make([]);
};

// Retrieve the DOM elements matched by the jQuery object.
exports.get = function(i) {
  if (i == null) {
    return Array.prototype.slice.call(this);
  } else {
    return this[i < 0 ? (this.length + i) : i];
  }
};

// Search for a given element from among the matched elements.
exports.index = function(selectorOrNeedle) {
  var $haystack, needle;

  if (arguments.length === 0) {
    $haystack = this.parent().children();
    needle = this[0];
  } else if (typeof selectorOrNeedle === 'string') {
    $haystack = this._make(selectorOrNeedle);
    needle = this[0];
  } else {
    $haystack = this;
    needle = selectorOrNeedle.cheerio ? selectorOrNeedle[0] : selectorOrNeedle;
  }

  return $haystack.get().indexOf(needle);
};

exports.slice = function() {
  return this._make([].slice.apply(this, arguments));
};

function traverseParents(self, elem, selector, limit) {
  var elems = [];
  while (elem && elems.length < limit) {
    if (!selector || exports.filter.call([elem], selector, self).length) {
      elems.push(elem);
    }
    elem = elem.parent;
  }
  return elems;
}

// End the most recent filtering operation in the current chain and return the
// set of matched elements to its previous state.
exports.end = function() {
  return this.prevObject || this._make([]);
};

exports.add = function(other, context) {
  var selection = this._make(other, context);
  var contents = uniqueSort(selection.get().concat(this.get()));

  for (var i = 0; i < contents.length; ++i) {
    selection[i] = contents[i];
  }
  selection.length = contents.length;

  return selection;
};

// Add the previous set of elements on the stack to the current set, optionally
// filtered by a selector.
exports.addBack = function(selector) {
  return this.add(
    arguments.length ? this.prevObject.filter(selector) : this.prevObject
  );
};

},{"../utils":87,"css-select":161,"htmlparser2":233,"lodash/bind":424,"lodash/filter":428,"lodash/forEach":430,"lodash/reduce":456,"lodash/reject":457}],83:[function(require,module,exports){
/*
  Module dependencies
*/

var parse = require('./parse'),
    defaultOptions = require('./options').default,
    flattenOptions = require('./options').flatten,
    isHtml = require('./utils').isHtml,
    _ = {
      extend: require('lodash/assignIn'),
      bind: require('lodash/bind'),
      forEach: require('lodash/forEach'),
      defaults: require('lodash/defaults')
    };

/*
 * The API
 */

var api = [
  require('./api/attributes'),
  require('./api/traversing'),
  require('./api/manipulation'),
  require('./api/css'),
  require('./api/forms')
];

/*
 * Instance of cheerio
 */

var Cheerio = module.exports = function(selector, context, root, options) {
  if (!(this instanceof Cheerio)) return new Cheerio(selector, context, root, options);

  this.options = _.defaults(flattenOptions(options), this.options, defaultOptions);

  // $(), $(null), $(undefined), $(false)
  if (!selector) return this;

  if (root) {
    if (typeof root === 'string') root = parse(root, this.options, false);
    this._root = Cheerio.call(this, root);
  }

  // $($)
  if (selector.cheerio) return selector;

  // $(dom)
  if (isNode(selector))
    selector = [selector];

  // $([dom])
  if (Array.isArray(selector)) {
    _.forEach(selector, _.bind(function(elem, idx) {
      this[idx] = elem;
    }, this));
    this.length = selector.length;
    return this;
  }

  // $(<html>)
  if (typeof selector === 'string' && isHtml(selector)) {
    return Cheerio.call(this, parse(selector, this.options, false).children);
  }

  // If we don't have a context, maybe we have a root, from loading
  if (!context) {
    context = this._root;
  } else if (typeof context === 'string') {
    if (isHtml(context)) {
      // $('li', '<ul>...</ul>')
      context = parse(context, this.options, false);
      context = Cheerio.call(this, context);
    } else {
      // $('li', 'ul')
      selector = [context, selector].join(' ');
      context = this._root;
    }
  // $('li', node), $('li', [nodes])
  } else if (!context.cheerio) {
    context = Cheerio.call(this, context);
  }

  // If we still don't have a context, return
  if (!context) return this;

  // #id, .class, tag
  return context.find(selector);
};

/**
 * Mix in `static`
 */

_.extend(Cheerio, require('./static'));

/*
 * Set a signature of the object
 */

Cheerio.prototype.cheerio = '[cheerio object]';

/*
 * Make cheerio an array-like object
 */

Cheerio.prototype.length = 0;
Cheerio.prototype.splice = Array.prototype.splice;

/*
 * Make a cheerio object
 *
 * @api private
 */

Cheerio.prototype._make = function(dom, context) {
  var cheerio = new this.constructor(dom, context, this._root, this.options);
  cheerio.prevObject = this;
  return cheerio;
};

/**
 * Turn a cheerio object into an array
 */

Cheerio.prototype.toArray = function() {
  return this.get();
};

/**
 * Plug in the API
 */
api.forEach(function(mod) {
  _.extend(Cheerio.prototype, mod);
});

var isNode = function(obj) {
  return obj.name || obj.type === 'text' || obj.type === 'comment';
};

},{"./api/attributes":78,"./api/css":79,"./api/forms":80,"./api/manipulation":81,"./api/traversing":82,"./options":84,"./parse":85,"./static":86,"./utils":87,"lodash/assignIn":423,"lodash/bind":424,"lodash/defaults":426,"lodash/forEach":430}],84:[function(require,module,exports){
var assign = require('lodash/assign');

/*
 * Cheerio default options
 */

exports.default = {
  withDomLvl1: true,
  normalizeWhitespace: false,
  xml: false,
  decodeEntities: true
};

exports.flatten = function(options) {
  return options && options.xml ? assign({xmlMode: true}, options.xml) : options;
};
},{"lodash/assign":422}],85:[function(require,module,exports){
(function (Buffer){
/*
  Module Dependencies
*/
var htmlparser = require('htmlparser2'),
    parse5 = require('parse5');

/*
  Parser
*/
exports = module.exports = function(content, options, isDocument) {
  var dom = exports.evaluate(content, options, isDocument),
      // Generic root element
      root = exports.evaluate('<root></root>', options, false)[0];

  root.type = 'root';
  root.parent = null;

  // Update the dom using the root
  exports.update(dom, root);

  return root;
};

function parseWithParse5 (content, isDocument) {
  var parse = isDocument ? parse5.parse : parse5.parseFragment,
      root = parse(content, { treeAdapter: parse5.treeAdapters.htmlparser2 });

  return root.children;
}

exports.evaluate = function(content, options, isDocument) {
  // options = options || $.fn.options;

  var dom;

  if (Buffer.isBuffer(content))
    content = content.toString();

  if (typeof content === 'string') {
    var useHtmlParser2 = options.xmlMode || options._useHtmlParser2;

    dom = useHtmlParser2 ? htmlparser.parseDOM(content, options) : parseWithParse5(content, isDocument);
  } else {
    dom = content;
  }

  return dom;
};

/*
  Update the dom structure, for one changed layer
*/
exports.update = function(arr, parent) {
  // normalize
  if (!Array.isArray(arr)) arr = [arr];

  // Update parent
  if (parent) {
    parent.children = arr;
  } else {
    parent = null;
  }

  // Update neighbors
  for (var i = 0; i < arr.length; i++) {
    var node = arr[i];

    // Cleanly remove existing nodes from their previous structures.
    var oldParent = node.parent || node.root,
        oldSiblings = oldParent && oldParent.children;
    if (oldSiblings && oldSiblings !== arr) {
      oldSiblings.splice(oldSiblings.indexOf(node), 1);
      if (node.prev) {
        node.prev.next = node.next;
      }
      if (node.next) {
        node.next.prev = node.prev;
      }
    }

    if (parent) {
      node.prev = arr[i - 1] || null;
      node.next = arr[i + 1] || null;
    } else {
      node.prev = node.next = null;
    }

    if (parent && parent.type === 'root') {
      node.root = parent;
      node.parent = null;
    } else {
      node.root = null;
      node.parent = parent;
    }
  }

  return parent;
};

// module.exports = $.extend(exports);

}).call(this,{"isBuffer":require("../../../../../../../../AppData/Roaming/npm/node_modules/browserify/node_modules/is-buffer/index.js")})
},{"../../../../../../../../AppData/Roaming/npm/node_modules/browserify/node_modules/is-buffer/index.js":11,"htmlparser2":233,"parse5":499}],86:[function(require,module,exports){
/**
 * Module dependencies
 */

var serialize = require('dom-serializer'),
    defaultOptions = require('./options').default,
    flattenOptions = require('./options').flatten,
    select = require('css-select'),
    parse = require('./parse'),
    _ = {
      merge: require('lodash/merge'),
      defaults: require('lodash/defaults')
    };

/**
 * $.load(str)
 */

exports.load = function(content, options, isDocument) {
  var Cheerio = require('./cheerio');

  options = _.defaults(flattenOptions(options || {}), defaultOptions);

  if (isDocument === void 0)
    isDocument = true;

  var root = parse(content, options, isDocument);

  var initialize = function(selector, context, r, opts) {
    if (!(this instanceof initialize)) {
      return new initialize(selector, context, r, opts);
    }
    opts = _.defaults(opts || {}, options);
    return Cheerio.call(this, selector, context, r || root, opts);
  };

  // Ensure that selections created by the "loaded" `initialize` function are
  // true Cheerio instances.
  initialize.prototype = Object.create(Cheerio.prototype);
  initialize.prototype.constructor = initialize;

  // Mimic jQuery's prototype alias for plugin authors.
  initialize.fn = initialize.prototype;

  // Keep a reference to the top-level scope so we can chain methods that implicitly
  // resolve selectors; e.g. $("<span>").(".bar"), which otherwise loses ._root
  initialize.prototype._originalRoot = root;

  // Add in the static methods
  _.merge(initialize, exports);

  // Add in the root
  initialize._root = root;
  // store options
  initialize._options = options;

  return initialize;
};

/*
* Helper function
*/

function render(that, dom, options) {
  if (!dom) {
    if (that._root && that._root.children) {
      dom = that._root.children;
    } else {
      return '';
    }
  } else if (typeof dom === 'string') {
    dom = select(dom, that._root, options);
  }

  return serialize(dom, options);
}

/**
 * $.html([selector | dom], [options])
 */

exports.html = function(dom, options) {
  // be flexible about parameters, sometimes we call html(),
  // with options as only parameter
  // check dom argument for dom element specific properties
  // assume there is no 'length' or 'type' properties in the options object
  if (Object.prototype.toString.call(dom) === '[object Object]' && !options && !('length' in dom) && !('type' in dom))
  {
    options = dom;
    dom = undefined;
  }

  // sometimes $.html() used without preloading html
  // so fallback non existing options to the default ones
  options = _.defaults(flattenOptions(options || {}), this._options, defaultOptions);

  return render(this, dom, options);
};

/**
 * $.xml([selector | dom])
 */

exports.xml = function(dom) {
  var options = _.defaults({xml: true}, this._options);

  return render(this, dom, options);
};

/**
 * $.text(dom)
 */

exports.text = function(elems) {
  if (!elems) {
    elems = this.root();
  }

  var ret = '',
      len = elems.length,
      elem;

  for (var i = 0; i < len; i++) {
    elem = elems[i];
    if (elem.type === 'text') ret += elem.data;
    else if (elem.children && elem.type !== 'comment' && elem.tagName !== 'script' && elem.tagName !== 'style') {
      ret += exports.text(elem.children);
    }
  }

  return ret;
};

/**
 * $.parseHTML(data [, context ] [, keepScripts ])
 * Parses a string into an array of DOM nodes. The `context` argument has no
 * meaning for Cheerio, but it is maintained for API compatibility with jQuery.
 */
exports.parseHTML = function(data, context, keepScripts) {
  var parsed;

  if (!data || typeof data !== 'string') {
    return null;
  }

  if (typeof context === 'boolean') {
    keepScripts = context;
  }

  parsed = this.load(data, defaultOptions, false);
  if (!keepScripts) {
    parsed('script').remove();
  }

  // The `children` array is used by Cheerio internally to group elements that
  // share the same parents. When nodes created through `parseHTML` are
  // inserted into previously-existing DOM structures, they will be removed
  // from the `children` array. The results of `parseHTML` should remain
  // constant across these operations, so a shallow copy should be returned.
  return parsed.root()[0].children.slice();
};

/**
 * $.root()
 */
exports.root = function() {
  return this(this._root);
};

/**
 * $.contains()
 */
exports.contains = function(container, contained) {

  // According to the jQuery API, an element does not "contain" itself
  if (contained === container) {
    return false;
  }

  // Step up the descendants, stopping when the root element is reached
  // (signaled by `.parent` returning a reference to the same object)
  while (contained && contained !== contained.parent) {
    contained = contained.parent;
    if (contained === container) {
      return true;
    }
  }

  return false;
};

/**
 * $.merge()
 */

exports.merge = function(arr1, arr2) {
  if(!(isArrayLike(arr1) && isArrayLike(arr2))){
    return;
  }
  var newLength = arr1.length + arr2.length;
  var i = 0;
  while(i < arr2.length){
    arr1[i + arr1.length] = arr2[i];
    i++;
  }
  arr1.length = newLength;
  return arr1;
};

function isArrayLike(item){
  if(Array.isArray(item)){
    return true;
  }
  if(typeof item !== 'object'){
    return false;
  }
  if(!item.hasOwnProperty('length')){
    return false;
  }
  if(typeof item.length !== 'number') {
    return false;
  }
  if(item.length < 0){
    return false;
  }
  var i = 0;
  while(i < item.length){
    if(!(i in item)){
      return false;
    }
    i++;
  }
  return true;
}

},{"./cheerio":83,"./options":84,"./parse":85,"css-select":161,"dom-serializer":175,"lodash/defaults":426,"lodash/merge":451}],87:[function(require,module,exports){
var parse = require('./parse'),
    render = require('dom-serializer'),
    assign = require('lodash/assign');

/**
 * HTML Tags
 */

var tags = { tag: true, script: true, style: true };

/**
 * Check if the DOM element is a tag
 *
 * isTag(type) includes <script> and <style> tags
 */

exports.isTag = function(type) {
  if (type.type) type = type.type;
  return tags[type] || false;
};

/**
 * Convert a string to camel case notation.
 * @param  {String} str String to be converted.
 * @return {String}     String in camel case notation.
 */

exports.camelCase = function(str) {
  return str.replace(/[_.-](\w|$)/g, function(_, x) {
    return x.toUpperCase();
  });
};

/**
 * Convert a string from camel case to "CSS case", where word boundaries are
 * described by hyphens ("-") and all characters are lower-case.
 * @param  {String} str String to be converted.
 * @return {string}     String in "CSS case".
 */
exports.cssCase = function(str) {
  return str.replace(/[A-Z]/g, '-$&').toLowerCase();
};

/**
 * Iterate over each DOM element without creating intermediary Cheerio instances.
 *
 * This is indented for use internally to avoid otherwise unnecessary memory pressure introduced
 * by _make.
 */

exports.domEach = function(cheerio, fn) {
  var i = 0, len = cheerio.length;
  while (i < len && fn.call(cheerio, i, cheerio[i]) !== false) ++i;
  return cheerio;
};

/**
 * Create a deep copy of the given DOM structure by first rendering it to a
 * string and then parsing the resultant markup.
 *
 * @argument {Object} dom - The htmlparser2-compliant DOM structure
 * @argument {Object} options - The parsing/rendering options
 */
exports.cloneDom = function(dom, options) {
  options = assign({}, options, { _useHtmlParser2: true });

  return parse(render(dom, options), options, false).children;
};

/*
 * A simple way to check for HTML strings or ID strings
 */

var quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/;

/*
 * Check if string is HTML
 */
exports.isHtml = function(str) {
  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML
  if (str.charAt(0) === '<' && str.charAt(str.length - 1) === '>' && str.length >= 3) return true;

  // Run the regex
  var match = quickExpr.exec(str);
  return !!(match && match[1]);
};

},{"./parse":85,"dom-serializer":175,"lodash/assign":422}],88:[function(require,module,exports){
module.exports={
  "_args": [
    [
      "cheerio@1.0.0-rc.3",
      "C:\\Users\\David Lee\\OneDrive - Northwestern University\\Classes\\Knight Lab\\studio-conversational-news-f19\\new_interface"
    ]
  ],
  "_from": "cheerio@1.0.0-rc.3",
  "_id": "cheerio@1.0.0-rc.3",
  "_inBundle": false,
  "_integrity": "sha512-0td5ijfUPuubwLUu0OBoe98gZj8C/AA+RW3v67GPlGOrvxWjZmBXiBCRU+I8VEiNyJzjth40POfHiz2RB3gImA==",
  "_location": "/cheerio",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "cheerio@1.0.0-rc.3",
    "name": "cheerio",
    "escapedName": "cheerio",
    "rawSpec": "1.0.0-rc.3",
    "saveSpec": null,
    "fetchSpec": "1.0.0-rc.3"
  },
  "_requiredBy": [
    "/metascraper"
  ],
  "_resolved": "https://registry.npmjs.org/cheerio/-/cheerio-1.0.0-rc.3.tgz",
  "_spec": "1.0.0-rc.3",
  "_where": "C:\\Users\\David Lee\\OneDrive - Northwestern University\\Classes\\Knight Lab\\studio-conversational-news-f19\\new_interface",
  "author": {
    "name": "Matt Mueller",
    "email": "mattmuelle@gmail.com",
    "url": "mat.io"
  },
  "bugs": {
    "url": "https://github.com/cheeriojs/cheerio/issues"
  },
  "dependencies": {
    "css-select": "~1.2.0",
    "dom-serializer": "~0.1.1",
    "entities": "~1.1.1",
    "htmlparser2": "^3.9.1",
    "lodash": "^4.15.0",
    "parse5": "^3.0.1"
  },
  "description": "Tiny, fast, and elegant implementation of core jQuery designed specifically for the server",
  "devDependencies": {
    "benchmark": "^2.1.0",
    "coveralls": "^2.11.9",
    "expect.js": "~0.3.1",
    "istanbul": "^0.4.3",
    "jquery": "^3.0.0",
    "jsdom": "^9.2.1",
    "jshint": "^2.9.2",
    "mocha": "^3.1.2",
    "xyz": "~1.1.0"
  },
  "engines": {
    "node": ">= 0.6"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "homepage": "https://github.com/cheeriojs/cheerio#readme",
  "keywords": [
    "htmlparser",
    "jquery",
    "selector",
    "scraper",
    "parser",
    "html"
  ],
  "license": "MIT",
  "main": "./index.js",
  "name": "cheerio",
  "repository": {
    "type": "git",
    "url": "git://github.com/cheeriojs/cheerio.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.0.0-rc.3"
}

},{}],89:[function(require,module,exports){

var options = exports.options = require('./options');

exports.parser = require('./parsers/parser');
exports.refiner = require('./refiners/refiner');

exports.Parser = exports.parser.Parser;
exports.Refiner = exports.refiner.Refiner;
exports.Filter = exports.refiner.Filter;

exports.ParsedResult = require('./result').ParsedResult;
exports.ParsedComponents = require('./result').ParsedComponents;

var Chrono = function(option) {

    option = option || exports.options.casualOption();
    this.parsers = new Object(option.parsers);
    this.refiners = new Object(option.refiners);
};


Chrono.prototype.parse = function(text, refDate, opt) {

    refDate = refDate || new Date();
    opt = opt || {};
    opt.forwardDate = opt.forwardDate || opt.forwardDate;
    
    var allResults = [];

    this.parsers.forEach(function (parser) {
        var results = parser.execute(text, refDate, opt);
        allResults = allResults.concat(results);
    });

    allResults.sort(function(a, b) {
        return a.index - b.index;
    });

    this.refiners.forEach(function (refiner) {
        allResults = refiner.refine(text, allResults, opt);
    });
    
    return allResults;
};


Chrono.prototype.parseDate = function(text, refDate, opt) {
    var results = this.parse(text, refDate, opt);
    if (results.length > 0) {
        return results[0].start.date();
    }
    return null;
};

exports.Chrono = Chrono;
exports.strict = new Chrono( options.strictOption() );
exports.casual = new Chrono( options.casualOption() );

exports.en = new Chrono( options.mergeOptions([
    options.en.casual, options.commonPostProcessing]));

exports.en_GB = new Chrono( options.mergeOptions([
    options.en_GB.casual, options.commonPostProcessing]));

exports.de = new Chrono( options.mergeOptions([
    options.de.casual, options.en, options.commonPostProcessing]));

exports.es = new Chrono( options.mergeOptions([
    options.es.casual, options.en, options.commonPostProcessing]));

exports.fr = new Chrono( options.mergeOptions([
    options.fr.casual, options.en, options.commonPostProcessing]));

exports.ja = new Chrono( options.mergeOptions([ 
    options.ja.casual, options.en, options.commonPostProcessing]));


exports.parse = function () {
    return exports.casual.parse.apply(exports.casual, arguments);
};

exports.parseDate = function () {
    return exports.casual.parseDate.apply(exports.casual, arguments);
};





},{"./options":90,"./parsers/parser":131,"./refiners/refiner":150,"./result":151}],90:[function(require,module,exports){
var parser = require('./parsers/parser');
var refiner = require('./refiners/refiner');


exports.mergeOptions = function(options) {

    var addedTypes = {};
    var mergedOption = {
        parsers: [],
        refiners: []
    };

    options.forEach(function (option) {

        if (option.call) {
            option = option.call();
        }

        if (option.parsers) {
            option.parsers.forEach(function (p) {
                if (!addedTypes[p.constructor]) {
                    mergedOption.parsers.push(p);
                    addedTypes[p.constructor] = true;
                }
            });
        }

        if (option.refiners) {
            option.refiners.forEach(function (r) {
                if (!addedTypes[r.constructor]) {
                    mergedOption.refiners.push(r);
                    addedTypes[r.constructor] = true;
                }
            });
        }
    });

    return mergedOption;
};


exports.commonPostProcessing = function() {
    return {
        refiners: [
            // These should be after all other refiners
            new refiner.ExtractTimezoneOffsetRefiner(),
            new refiner.ExtractTimezoneAbbrRefiner(),
            new refiner.UnlikelyFormatFilter()
        ]
    }
};


// -------------------------------------------------------------

exports.strictOption = function () {
    var strictConfig = {
        strict: true
    };

    return exports.mergeOptions([
        exports.en(strictConfig),
        exports.de(strictConfig),
        exports.es(strictConfig),
        exports.fr(strictConfig),
        exports.ja(strictConfig),
        exports.zh,
        exports.commonPostProcessing
    ]);
};

exports.casualOption = function () {
    return exports.mergeOptions([
        exports.en.casual,
        // Some German abbriviate overlap with common English
        exports.de({ strict: true }), 
        exports.es.casual,
        exports.fr.casual,
        exports.ja.casual,
        exports.zh,
        exports.commonPostProcessing
    ]);
};

// -------------------------------------------------------------

exports.de = function(config) {
    return {
        parsers: [
            new parser.DEDeadlineFormatParser(config),
            new parser.DEMonthNameLittleEndianParser(config),
            new parser.DEMonthNameParser(config),
            new parser.DESlashDateFormatParser(config),
            new parser.DETimeAgoFormatParser(config),
            new parser.DETimeExpressionParser(config)
        ],
        refiners: [
            new refiner.OverlapRemovalRefiner(),
            new refiner.ForwardDateRefiner(),
            new refiner.DEMergeDateTimeRefiner(),
            new refiner.DEMergeDateRangeRefiner()
        ]
    }
};

exports.de.casual = function() {
    var option = exports.de({
        strict: false
    });
    option.parsers.unshift(new parser.DECasualDateParser());
    option.parsers.unshift(new parser.DEWeekdayParser());
    return option;
};



// -------------------------------------------------------------


exports.en = function(config) {
    return {
        parsers: [
            new parser.ENISOFormatParser(config),
            new parser.ENDeadlineFormatParser(config),
            new parser.ENMonthNameLittleEndianParser(config),
            new parser.ENMonthNameMiddleEndianParser(config),
            new parser.ENMonthNameParser(config),
            new parser.ENSlashDateFormatParser(config),
            new parser.ENSlashDateFormatStartWithYearParser(config),
            new parser.ENSlashMonthFormatParser(config),
            new parser.ENTimeAgoFormatParser(config),
            new parser.ENTimeLaterFormatParser(config),
            new parser.ENTimeExpressionParser(config)
        ],
        refiners: [
            new refiner.OverlapRemovalRefiner(),
            new refiner.ForwardDateRefiner(),

            // English
            new refiner.ENMergeDateTimeRefiner(),
            new refiner.ENMergeDateRangeRefiner(),
            new refiner.ENPrioritizeSpecificDateRefiner()
        ]
    }
};

exports.en.casual = function(config) {
    config = config || {};
    config.strict = false;
    var option = exports.en(config);

    // en
    option.parsers.unshift(new parser.ENCasualDateParser());
    option.parsers.unshift(new parser.ENCasualTimeParser());
    option.parsers.unshift(new parser.ENWeekdayParser());
    option.parsers.unshift(new parser.ENRelativeDateFormatParser());
    return option;
};


exports.en_GB = function(config) {
    config = config || {};
    config.littleEndian = true;
    return exports.en(config);
}

exports.en_GB.casual = function(config) {
    config = config || {};
    config.littleEndian = true;
    return exports.en.casual(config);
}

// -------------------------------------------------------------

exports.ja = function() {
    return {
        parsers: [
            new parser.JPStandardParser()
        ],
        refiners: [
            new refiner.OverlapRemovalRefiner(),
            new refiner.ForwardDateRefiner(),
            new refiner.JPMergeDateRangeRefiner()
        ]
    }
};

exports.ja.casual = function() {
    var option = exports.ja();
    option.parsers.unshift(new parser.JPCasualDateParser());
    return option;
};


// -------------------------------------------------------------


exports.es = function(config) {
    return {
        parsers: [
            new parser.ESTimeAgoFormatParser(config),
            new parser.ESDeadlineFormatParser(config),
            new parser.ESTimeExpressionParser(config),
            new parser.ESMonthNameLittleEndianParser(config),
            new parser.ESSlashDateFormatParser(config)
        ],
        refiners: [
            new refiner.OverlapRemovalRefiner(),
            new refiner.ForwardDateRefiner()
        ]
    }
};

exports.es.casual = function() {
    var option = exports.es({ 
        strict: false 
    });

    option.parsers.unshift(new parser.ESCasualDateParser());
    option.parsers.unshift(new parser.ESWeekdayParser());
    return option;
};


// -------------------------------------------------------------

exports.fr = function(config) {
    return {
        parsers: [
            new parser.FRDeadlineFormatParser(config),
            new parser.FRMonthNameLittleEndianParser(config),
            new parser.FRSlashDateFormatParser(config),
            new parser.FRTimeAgoFormatParser(config),
            new parser.FRTimeExpressionParser(config)
        ],
        refiners: [
            new refiner.OverlapRemovalRefiner(),
            new refiner.ForwardDateRefiner(),
            new refiner.FRMergeDateRangeRefiner(),
            new refiner.FRMergeDateTimeRefiner()
        ]
    }
};

exports.fr.casual = function() {
    var option = exports.fr({
        strict: false
    });

    option.parsers.unshift(new parser.FRCasualDateParser());
    option.parsers.unshift(new parser.FRWeekdayParser());
    option.parsers.unshift(new parser.FRRelativeDateFormatParser());
    return option;
};


// -------------------------------------------------------------

exports.zh = function() {
    return {
        parsers: [
            new parser.ZHHantDateParser(),
            new parser.ZHHantWeekdayParser(),
            new parser.ZHHantTimeExpressionParser(),
            new parser.ZHHantCasualDateParser(),
            new parser.ZHHantDeadlineFormatParser()
        ],
        refiners: [
            new refiner.OverlapRemovalRefiner(),
            new refiner.ForwardDateRefiner()
        ]
    }
};
},{"./parsers/parser":131,"./refiners/refiner":150}],91:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = new RegExp(
    '(\\W|^)(' +
        'jetzt|' +
        '(?:heute|diesen)\\s*(morgen|vormittag|mittag|nachmittag|abend)|' +
        '(?:heute|diese)\\s*nacht|' +
        'heute|' +
        '(?:(?:ü|ue)ber)?morgen(?:\\s*(morgen|vormittag|mittag|nachmittag|abend|nacht))?|' +
        '(?:vor)?gestern(?:\\s*(morgen|vormittag|mittag|nachmittag|abend|nacht))?|' +
        'letzte\\s*nacht' +
    ')(?=\\W|$)', 'i');

exports.Parser = function DECasualDateParser() {

    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; }

    this.extract = function(text, ref, match, opt) {
        var text = match[0].substr(match[1].length);
        var index = match.index + match[1].length;
        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref,
        });

        var refMoment = moment(ref);
        var startMoment = refMoment.clone();
        var lowerText = text.toLowerCase();

        if (/(?:heute|diese)\s*nacht/.test(lowerText)) {
            // Normally means this coming midnight
            result.start.imply('hour', 22);
            result.start.imply('meridiem', 1);
        } else if (/^(?:ü|ue)bermorgen/.test(lowerText)) {
            startMoment.add(refMoment.hour() > 1 ? 2 : 1, 'day');
        } else if (/^morgen/.test(lowerText)) {
            // Check not "Tomorrow" on late night
            if (refMoment.hour() > 1) {
                startMoment.add(1, 'day');
            }
        } else if (/^gestern/.test(lowerText)) {
            startMoment.add(-1, 'day');
        } else if (/^vorgestern/.test(lowerText)) {
            startMoment.add(-2, 'day');
        } else if (/letzte\s*nacht/.test(lowerText)) {
            result.start.imply('hour', 0);
            if (refMoment.hour() > 6) {
                startMoment.add(-1, 'day');
            }
        } else if (lowerText === 'jetzt') {
          result.start.imply('hour', refMoment.hour());
          result.start.imply('minute', refMoment.minute());
          result.start.imply('second', refMoment.second());
          result.start.imply('millisecond', refMoment.millisecond());
        }

        var secondMatch = match[3] || match[4] || match[5];
        if (secondMatch) {
            switch (secondMatch.toLowerCase()) {
                case 'morgen':
                    result.start.imply('hour', 6);
                    break;
                case 'vormittag':
                    result.start.imply('hour', 9);
                    break;
                case 'mittag':
                    result.start.imply('hour', 12);
                    break;
                case 'nachmittag':
                    result.start.imply('hour', 15);
                    result.start.imply('meridiem', 1);
                    break;
                case 'abend':
                    result.start.imply('hour', 18);
                    result.start.imply('meridiem', 1);
                    break;
                case 'nacht':
                    result.start.imply('hour', 0);
                    break;
            }
        }

        result.start.assign('day', startMoment.date())
        result.start.assign('month', startMoment.month() + 1)
        result.start.assign('year', startMoment.year())
        result.tags['DECasualDateParser'] = true;
        return result;
    }
}

},{"../../result":151,"../parser":131,"moment":483}],92:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var util  = require('../../utils/DE');

var PATTERN = new RegExp('(\\W|^)' +
    '(in|nach)\\s*' +
    '('+ util.INTEGER_WORDS_PATTERN + '|[0-9]+|einigen|eine[rm]\\s*halben|eine[rm])\\s*' +
    '(sekunden?|min(?:ute)?n?|stunden?|tag(?:en)?|wochen?|monat(?:en)?|jahr(?:en)?)\\s*' +
    '(?=\\W|$)', 'i'
);

var STRICT_PATTERN = new RegExp('(\\W|^)' +
    '(in|nach)\\s*' +
    '('+ util.INTEGER_WORDS_PATTERN + '|[0-9]+|eine(?:r|m)?)\\s*' +
    '(sekunden?|minuten?|stunden?|tag(?:en)?)\\s*' +
    '(?=\\W|$)', 'i'
);

exports.Parser = function DEDeadlineFormatParser(){
    Parser.apply(this, arguments);

    this.pattern = function() {
        return this.isStrictMode()? STRICT_PATTERN : PATTERN;
    };

    this.extract = function(text, ref, match, opt){

        var index = match.index + match[1].length;
        var text  = match[0];
        text  = match[0].substr(match[1].length, match[0].length - match[1].length);

        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref
        });

        var num = match[3].toLowerCase();
        if (util.INTEGER_WORDS[num] !== undefined) {
            num = util.INTEGER_WORDS[num];
        } else if (num === 'einer' || num === 'einem') {
            num = 1;
        } else if (num === 'einigen') {
            num = 3;
        } else if (/halben/.test(num)) {
            num = 0.5;
        } else {
            num = parseInt(num);
        }

        var date = moment(ref);
        if (/tag|woche|monat|jahr/i.test(match[4])) {

            if (/tag/i.test(match[4])) {
                date.add(num, 'd');
            } else if (/woche/i.test(match[4])) {
                date.add(num * 7, 'd');
            } else if (/monat/i.test(match[4])) {
                date.add(num, 'month');
            } else if (/jahr/i.test(match[4])) {
                date.add(num, 'year');
            }

            result.start.assign('year', date.year());
            result.start.assign('month', date.month() + 1);
            result.start.assign('day', date.date());
            return result;
        }

        if (/stunde/i.test(match[4])) {

            date.add(num, 'hour');

        } else if (/min/i.test(match[4])) {

            date.add(num, 'minute');

        } else if (/sekunde/i.test(match[4])) {

            date.add(num, 'second');
        }

        result.start.imply('year', date.year());
        result.start.imply('month', date.month() + 1);
        result.start.imply('day', date.date());
        result.start.assign('hour', date.hour());
        result.start.assign('minute', date.minute());
        result.start.assign('second', date.second());
        result.tags['DEDeadlineFormatParser'] = true;
        return result;
    };
};

},{"../../result":151,"../../utils/DE":152,"../parser":131,"moment":483}],93:[function(require,module,exports){
/*


*/

var moment = require('moment');

var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var util  = require('../../utils/DE');

var PATTERN = new RegExp('(\\W|^)' +
        '(?:am\\s*?)?' +
        '(?:(Sonntag|Montag|Dienstag|Mittwoch|Donnerstag|Freitag|Samstag|So|Mo|Di|Mi|Do|Fr|Sa)\\s*,?\\s*)?' +
        '(?:den\\s*)?' +
        '([0-9]{1,2})\\.' +
        '(?:\\s*(?:bis(?:\\s*(?:am|zum))?|\\-|\\–|\\s)\\s*([0-9]{1,2})\\.)?\\s*' +
        '(Jan(?:uar|\\.)?|Feb(?:ruar|\\.)?|Mär(?:z|\\.)?|Maerz|Mrz\\.?|Apr(?:il|\\.)?|Mai|Jun(?:i|\\.)?|Jul(?:i|\\.)?|Aug(?:ust|\\.)?|Sep(?:t|t\\.|tember|\\.)?|Okt(?:ober|\\.)?|Nov(?:ember|\\.)?|Dez(?:ember|\\.)?)' +
        '(?:' +
            ',?\\s*([0-9]{1,4}(?![^\\s]\\d))' +
            '(\\s*[vn]\\.?\\s*C(?:hr)?\\.?)?' +
        ')?' +
        '(?=\\W|$)', 'i'
    );

var WEEKDAY_GROUP = 2;
var DATE_GROUP = 3;
var DATE_TO_GROUP = 4;
var MONTH_NAME_GROUP = 5;
var YEAR_GROUP = 6;
var YEAR_BE_GROUP = 7;

exports.Parser = function DEMonthNameLittleEndianParser(){
    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; }

    this.extract = function(text, ref, match, opt){

        var result = new ParsedResult({
            text: match[0].substr(match[1].length, match[0].length - match[1].length),
            index: match.index + match[1].length,
            ref: ref,
        });

        var month = match[MONTH_NAME_GROUP];
        month = util.MONTH_OFFSET[month.toLowerCase()];

        var day = match[DATE_GROUP];
        day = parseInt(day);

        var year = null;
        if (match[YEAR_GROUP]) {
            year = match[YEAR_GROUP];
            year = parseInt(year);

            if(match[YEAR_BE_GROUP]){
                if (/v/i.test(match[YEAR_BE_GROUP])) {
                    // v.Chr.
                    year = -year;
                }
            } else if (year < 100){

                year = year + 2000;
            }
        }

        if(year){
            result.start.assign('day', day);
            result.start.assign('month', month);
            result.start.assign('year', year);
        } else {

            //Find the most appropriated year
            var refMoment = moment(ref);
            refMoment.month(month - 1);
            refMoment.date(day);
            refMoment.year(moment(ref).year());

            var nextYear = refMoment.clone().add(1, 'y');
            var lastYear = refMoment.clone().add(-1, 'y');
            if( Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){
                refMoment = nextYear;
            }
            else if( Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){
                refMoment = lastYear;
            }

            result.start.assign('day', day);
            result.start.assign('month', month);
            result.start.imply('year', refMoment.year());
        }

        // Weekday component
        if (match[WEEKDAY_GROUP]) {
            var weekday = match[WEEKDAY_GROUP];
            weekday = util.WEEKDAY_OFFSET[weekday.toLowerCase()]
            result.start.assign('weekday', weekday);
        }

        // Text can be 'range' value. Such as '12 - 13 January 2012'
        if (match[DATE_TO_GROUP]) {
            result.end = result.start.clone();
            result.end.assign('day', parseInt(match[DATE_TO_GROUP]));
        }

        result.tags['DEMonthNameLittleEndianParser'] = true;
        return result;
    };
}

},{"../../result":151,"../../utils/DE":152,"../parser":131,"moment":483}],94:[function(require,module,exports){
/*
    
    The parser for parsing month name and year.
    
    EX. 
        - Januar
        - Januar 2012
*/

var moment = require('moment');

var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var util  = require('../../utils/DE');

var PATTERN = new RegExp('(^|\\D\\s+|[^\\w\\s])' +
    '(Jan\\.?|Januar|Feb\\.?|Februar|Mär\\.?|M(?:ä|ae)rz|Mrz\\.?|Apr\\.?|April|Mai\\.?|Jun\\.?|Juni|Jul\\.?|Juli|Aug\\.?|August|Sep\\.?|Sept\\.?|September|Okt\\.?|Oktober|Nov\\.?|November|Dez\\.?|Dezember)' + 
    '\\s*' +
    '(?:' +
        ',?\\s*(?:([0-9]{4})(\\s*[vn]\\.?\\s*C(?:hr)?\\.?)?|([0-9]{1,4})\\s*([vn]\\.?\\s*C(?:hr)?\\.?))' +
    ')?' +
    '(?=[^\\s\\w]|$)', 'i');

var MONTH_NAME_GROUP = 2;
var YEAR_GROUP = 3;
var YEAR_BE_GROUP = 4;
var YEAR_GROUP2 = 5;
var YEAR_BE_GROUP2 = 6;

exports.Parser = function ENMonthNameParser(){
    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; }
    
    this.extract = function(text, ref, match, opt){
        var result = new ParsedResult({
            text: match[0].substr(match[1].length, match[0].length - match[1].length),
            index: match.index + match[1].length,
            ref: ref,
        });

        
        var month = match[MONTH_NAME_GROUP];
        month = util.MONTH_OFFSET[month.toLowerCase()];

        var day = 1;

        var year = null;
        if (match[YEAR_GROUP] || match[YEAR_GROUP2]) {
            year = match[YEAR_GROUP] || match[YEAR_GROUP2];
            year = parseInt(year);

            if (match[YEAR_BE_GROUP] || match[YEAR_BE_GROUP2]) {
                if (/v/i.test(match[YEAR_BE_GROUP] || match[YEAR_BE_GROUP2])) {
                    // v.Chr.
                    year = -year;
                }

            } else if (year < 100){ 

                year = year + 2000;
            }
        }

        if(year){
            result.start.imply('day', day);
            result.start.assign('month', month);
            result.start.assign('year', year);
        } else {
            
            //Find the most appropriated year
            var refMoment = moment(ref);
            refMoment.month(month - 1);
            refMoment.date(day);

            var nextYear = refMoment.clone().add(1, 'y');
            var lastYear = refMoment.clone().add(-1, 'y');
            if( Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){  
                refMoment = nextYear;
            }
            else if( Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){ 
                refMoment = lastYear;
            }

            result.start.imply('day', day);
            result.start.assign('month', month);
            result.start.imply('year', refMoment.year());
        }

        result.tags['DEMonthNameParser'] = true;
        return result;
    }
}


},{"../../result":151,"../../utils/DE":152,"../parser":131,"moment":483}],95:[function(require,module,exports){
/*
    Date format with slash "/" (also "-" and ".") between numbers
    - Tuesday 11/3/2015
    - 11/3/2015
    - 11/3
*/
var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = new RegExp('(\\W|^)' +
    '(?:' +
        '(?:am\\s*?)?' +
        '((?:sonntag|so|montag|mo|dienstag|di|mittwoch|mi|donnerstag|do|freitag|fr|samstag|sa))' +
        '\\s*\\,?\\s*' +
        '(?:den\\s*)?' +
    ')?' +
    '([0-3]{0,1}[0-9]{1})[\\/\\.\\-]([0-3]{0,1}[0-9]{1})' +
    '(?:' +
        '[\\/\\.\\-]' +
        '([0-9]{4}\s*\,?\s*|[0-9]{2}\s*\,?\s*)' +
    ')?' +
    '(\\W|$)', 'i');

var DAYS_OFFSET = {
    'sonntag': 0, 'so': 0,
    'montag': 1, 'mo': 1,
    'dienstag': 2, 'di': 2,
    'mittwoch': 3, 'mi': 3,
    'donnerstag': 4, 'do': 4,
    'freitag': 5, 'fr': 5,
    'samstag': 6, 'sa': 6
};


var OPENNING_GROUP = 1;
var ENDING_GROUP = 6;

var WEEKDAY_GROUP = 2;
var DAY_GROUP = 3;
var MONTH_GROUP = 4;
var YEAR_GROUP = 5;

exports.Parser = function DESlashDateFormatParser(argument) {
    Parser.apply(this, arguments);

    this.pattern = function () { return PATTERN; };
    this.extract = function(text, ref, match, opt){

        if(match[OPENNING_GROUP] == '/' || match[ENDING_GROUP] == '/') {
            // Long skip, if there is some overlapping like:
            // XX[/YY/ZZ]
            // [XX/YY/]ZZ
            match.index += match[0].length
            return;
        }

        var index = match.index + match[OPENNING_GROUP].length;
        var text = match[0].substr(match[OPENNING_GROUP].length, match[0].length - match[ENDING_GROUP].length);


        var result = new ParsedResult({
            text: text,
            index: index,
            ref: ref,
        });

        if(text.match(/^\d\.\d$/)) return;
        if(text.match(/^\d\.\d{1,2}\.\d{1,2}$/)) return;

        // MM/dd -> OK
        // MM.dd -> NG
        if(!match[YEAR_GROUP] && match[0].indexOf('/') < 0) return;

        var date = null;
        var year = match[YEAR_GROUP] || moment(ref).year() + '';
        var month = match[MONTH_GROUP];
        var day   = match[DAY_GROUP];

        month = parseInt(month);
        day  = parseInt(day);
        year = parseInt(year);

        if (month < 1 || month > 12) return null;
        if(day < 1 || day > 31) return null;

        if(year < 100){
            if (year > 50) {
                year = year + 1900;
            } else {
                year = year + 2000;
            }
        }

        result.start.assign('day', day);
        result.start.assign('month', month);
        result.start.assign('year', year);

        //Day of week
        if(match[WEEKDAY_GROUP]) {
            result.start.assign('weekday', DAYS_OFFSET[match[WEEKDAY_GROUP].toLowerCase()]);
        }

        result.tags['DESlashDateFormatParser'] = true;
        return result;
    };
};

},{"../../result":151,"../parser":131,"moment":483}],96:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var util  = require('../../utils/DE');

var PATTERN = new RegExp('' +
    '(\\W|^)vor\\s*' +
    '(' + util.INTEGER_WORDS_PATTERN + '|[0-9]+|einigen|eine[rm]\\s*halben|eine[rm])\\s*' +
    '(sekunden?|min(?:ute)?n?|stunden?|wochen?|tag(?:en)?|monat(?:en)?|jahr(?:en)?)\\s*' +
    '(?=(?:\\W|$))', 'i');

var STRICT_PATTERN = new RegExp('' +
    '(\\W|^)vor\\s*' +
    '([0-9]+|eine(?:r|m))\\s*' +
    '(sekunden?|minuten?|stunden?|tag(?:en)?)' +
    '(?=(?:\\W|$))', 'i');

exports.Parser = function DETimeAgoFormatParser(){
    Parser.apply(this, arguments);

    this.pattern = function() {
        return this.isStrictMode()? STRICT_PATTERN : PATTERN;
    };

    this.extract = function(text, ref, match, opt){

        if (match.index > 0 && text[match.index-1].match(/\w/)) return null;

        var text = match[0];
        text  = match[0].substr(match[1].length, match[0].length - match[1].length);
        index = match.index + match[1].length;

        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref
        });

        var num = match[2].toLowerCase() ;
        if (util.INTEGER_WORDS[num] !== undefined) {
            num = util.INTEGER_WORDS[num];
        } else if (num === 'einer' || num === 'einem') {
            num = 1;
        } else if (num === 'einigen') {
            num = 3;
        } else if (/halben/.test(num)) {
            num = 0.5;
        } else {
            num = parseInt(num);
        }

        var date = moment(ref);

        if (/stunde|min|sekunde/i.test(match[3])) {
            if (/stunde/i.test(match[3])) {

                date.add(-num, 'hour');

            } else if (/min/i.test(match[3])) {

                date.add(-num, 'minute');

            } else if (/sekunde/i.test(match[3])) {

                date.add(-num, 'second');
            }

            result.start.imply('day', date.date());
            result.start.imply('month', date.month() + 1);
            result.start.imply('year', date.year());
            result.start.assign('hour', date.hour());
            result.start.assign('minute', date.minute());
            result.start.assign('second', date.second());
            result.tags['DETimeAgoFormatParser'] = true;
            return result;
        }

        if (/woche/i.test(match[3])) {
            date.add(-num, 'week');

            result.start.imply('day', date.date());
            result.start.imply('month', date.month() + 1);
            result.start.imply('year', date.year());
            result.start.imply('weekday', date.day());
            return result;
        }

        if (/tag/i.test(match[3])) {
            date.add(-num, 'd');
        }

        if (/monat/i.test(match[3])) {
            date.add(-num, 'month');
        }

        if (/jahr/i.test(match[3])) {

            date.add(-num, 'year');
        }

        result.start.assign('day', date.date());
        result.start.assign('month', date.month() + 1);
        result.start.assign('year', date.year());
        return result;

    };
}

},{"../../result":151,"../../utils/DE":152,"../parser":131,"moment":483}],97:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var ParsedComponents = require('../../result').ParsedComponents;

var FIRST_REG_PATTERN  = new RegExp("(^|\\s|T)" +
    "(?:(?:um|von)\\s*)?" + 
    "(\\d{1,4}|mittags?|mitternachts?)" + 
    "(?:" + 
        "(?:\\.|\\:|\\：)(\\d{1,2})" + 
        "(?:" + 
            "(?:\\:|\\：)(\\d{2})" + 
        ")?" + 
    ")?" +
    "(?:\\s*uhr)?" +
    "(?:\\s*(morgens|vormittags|mittags|nachmittags|abends|nachts))?" + 
    "(?=\\W|$)", 'i');


var SECOND_REG_PATTERN = new RegExp("^\\s*" + 
    "(\\-|\\–|\\~|\\〜|bis|\\?)\\s*" + 
    "(\\d{1,4})" +
    "(?:" + 
        "(?:\\.|\\:|\\：)(\\d{1,2})" + 
        "(?:" + 
            "(?:\\.|\\:|\\：)(\\d{1,2})" + 
        ")?" + 
    ")?" + 
    "(?:\\s*(morgens|vormittags|mittags|nachmittags|abends|nachts))?" + 
    "(?=\\W|$)", 'i');

var HOUR_GROUP    = 2;
var MINUTE_GROUP  = 3;
var SECOND_GROUP  = 4;
var AM_PM_HOUR_GROUP = 5;


exports.Parser = function DETimeExpressionParser() {
    Parser.apply(this, arguments);

    this.pattern = function() { return FIRST_REG_PATTERN; }
    
    this.extract = function(text, ref, match, opt){ 
        
        // This pattern can be overlaped Ex. [12] AM, 1[2] AM
        if (match.index > 0 && text[match.index-1].match(/\w/)) return null;
        var refMoment = moment(ref);
        var result = new ParsedResult();
        result.ref = ref;
        result.index = match.index + match[1].length;
        result.text  = match[0].substring(match[1].length);
        result.tags['DETimeExpressionParser'] = true;

        result.start.imply('day',   refMoment.date());
        result.start.imply('month', refMoment.month()+1);
        result.start.imply('year',  refMoment.year());
        
        var hour = 0;
        var minute = 0;
        var meridiem = -1;

        // ----- Second
        if(match[SECOND_GROUP] != null){ 
            var second = parseInt(match[SECOND_GROUP]);
            if(second >= 60) return null;

            result.start.assign('second', second);
        }
        
        // ----- Hours
        if (/mittags?/i.test(match[HOUR_GROUP])) {
            meridiem = 1; 
            hour = 12;
        } else if (/mitternachts?/i.test(match[HOUR_GROUP])) {
            meridiem = 0; 
            hour = 0;
        } else {
            hour = parseInt(match[HOUR_GROUP]);
        }
        
        // ----- Minutes
        if(match[MINUTE_GROUP] != null){ 
            minute = parseInt(match[MINUTE_GROUP]);
        } else if(hour > 100) { 
            minute = hour%100;
            hour   = parseInt(hour/100);
        } 
        
        if(minute >= 60) {
            return null;
        }

        if(hour > 24) {
            return null;
        }
        if (hour >= 12) { 
            meridiem = 1;
        }

        // ----- AM & PM  
        if (match[AM_PM_HOUR_GROUP] != null) {
            if (hour > 12) return null;
            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if (ampm === 'morgens' || ampm === 'vormittags') {
                meridiem = 0; 
                if(hour == 12) hour = 0;
            } else {
                meridiem = 1; 
                if(hour != 12) hour += 12;
            }
        } 

        result.start.assign('hour', hour);
        result.start.assign('minute', minute);

        if (meridiem >= 0) {
            result.start.assign('meridiem', meridiem);
        } else {
            if (hour < 12) {
                result.start.imply('meridiem', 0);
            } else {
                result.start.imply('meridiem', 1);
            }
        }
        
        // ==============================================================
        //                  Extracting the 'to' chunk
        // ==============================================================
        match = SECOND_REG_PATTERN.exec(text.substring(result.index + result.text.length));
        if (!match) {
            // Not accept number only result
            if (result.text.match(/^\d+$/)) { 
                return null;
            }
            return result;
        }



        // Pattern "YY.YY -XXXX" is more like timezone offset
        if (match[0].match(/^\s*(\+|\-)\s*\d{3,4}$/)) {
            return result;
        }

        if(result.end == null){
            result.end = new ParsedComponents(null, result.start.date());
        }

        var hour = 0;
        var minute = 0;
        var meridiem = -1;

        // ----- Second
        if(match[SECOND_GROUP] != null){ 
            var second = parseInt(match[SECOND_GROUP]);
            if(second >= 60) return null;

            result.end.assign('second', second);
        }

        hour = parseInt(match[2]);
        
        // ----- Minute
        if (match[MINUTE_GROUP]!= null) {
            
            minute = parseInt(match[MINUTE_GROUP]);
            if(minute >= 60) return result;
            
        } else if (hour > 100) {

            minute = hour%100;
            hour   = parseInt(hour/100);
        }

        if(minute >= 60) {
            return null;
        }

        if(hour > 24) {
            return null;
        }
        if (hour >= 12) { 
            meridiem = 1;
        }
        
        // ----- AM & PM 
        if (match[AM_PM_HOUR_GROUP] != null) {

            if (hour > 12) return null;

            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if (ampm === 'morgens' || ampm === 'vormittags') {
                meridiem = 0; 
                if(hour == 12) {
                    hour = 0;
                    if (!result.end.isCertain('day')) {
                        result.end.imply('day', result.end.get('day') + 1);
                    }
                }
            } else {
                meridiem = 1; 
                if(hour != 12) hour += 12;
            }
            
            if (!result.start.isCertain('meridiem')) {
                if (meridiem == 0) {
                    
                    result.start.imply('meridiem', 0);
                    
                    if (result.start.get('hour') == 12) {
                        result.start.assign('hour', 0);
                    }

                } else {

                    result.start.imply('meridiem', 1);
                    
                    if (result.start.get('hour') != 12) {
                        result.start.assign('hour', result.start.get('hour') + 12); 
                    }
                }
            }
        }

        result.text = result.text + match[0];
        result.end.assign('hour', hour);
        result.end.assign('minute', minute);
        if (meridiem >= 0) {
            result.end.assign('meridiem', meridiem);
        } else {
            var startAtPM = result.start.isCertain('meridiem') && result.start.get('meridiem') == 1;
            if (startAtPM && result.start.get('hour') > hour) {
                // 10pm - 1 (am)
                result.end.imply('meridiem', 0);

            } else if (hour > 12) {
                result.end.imply('meridiem', 1);
            }
        }

        if (result.end.date().getTime() < result.start.date().getTime()) {
            result.end.imply('day', result.end.get('day') + 1)
        }
        
        return result;
    }
}

},{"../../result":151,"../parser":131,"moment":483}],98:[function(require,module,exports){
/*


*/
var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var DAYS_OFFSET = {
    'sonntag': 0, 'so': 0,
    'montag': 1, 'mo': 1,
    'dienstag': 2, 'di': 2,
    'mittwoch': 3, 'mi': 3,
    'donnerstag': 4, 'do': 4,
    'freitag': 5, 'fr': 5,
    'samstag': 6, 'sa': 6
};

var PATTERN = new RegExp('(\\W|^)' +
    '(?:(?:\\,|\\(|\\（)\\s*)?' +
    '(?:a[mn]\\s*?)?' +
    '(?:(diese[mn]|letzte[mn]|n(?:ä|ae)chste[mn])\\s*)?' +
    '(' + Object.keys(DAYS_OFFSET).join('|') + ')' +
    '(?:\\s*(?:\\,|\\)|\\）))?' +
    '(?:\\s*(diese|letzte|n(?:ä|ae)chste)\\s*woche)?' +
    '(?=\\W|$)', 'i');

var PREFIX_GROUP = 2;
var WEEKDAY_GROUP = 3;
var POSTFIX_GROUP = 4;

exports.Parser = function DEWeekdayParser() {
    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; };

    this.extract = function(text, ref, match, opt){
        var index = match.index + match[1].length;
        var text = match[0].substr(match[1].length, match[0].length - match[1].length);
        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref,
        });

        var dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        var offset = DAYS_OFFSET[dayOfWeek];
        if(offset === undefined) return null;

        var startMoment = moment(ref);
        var prefix = match[PREFIX_GROUP];
        var postfix = match[POSTFIX_GROUP];

        var refOffset = startMoment.day();
        var norm = prefix || postfix;
        norm = norm || '';
        norm = norm.toLowerCase();
        if (/letzte/.test(norm)) {
            startMoment.day(offset - 7);
        } else if (/n(?:ä|ae)chste/.test(norm)) {
            startMoment.day(offset + 7);
        } else if (/diese/.test(norm)) {
            if ( opt.forwardDate && refOffset > offset ) {
                startMoment.day(offset + 7);
            } else {
                startMoment.day(offset);
            }
        } else {
            if ( opt.forwardDate && refOffset > offset ) {
                startMoment.day(offset + 7);
            } else if (!opt.forwardDate && Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {
                startMoment.day(offset - 7);
            } else if (!opt.forwardDate && Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {
                startMoment.day(offset + 7);
            } else {
                startMoment.day(offset);
            }
        }

        result.start.assign('weekday', offset);
        result.start.imply('day', startMoment.date());
        result.start.imply('month', startMoment.month() + 1);
        result.start.imply('year', startMoment.year());
        return result;
    }
};

},{"../../result":151,"../parser":131,"moment":483}],99:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = /(\W|^)(now|today|tonight|last\s*night|(?:tomorrow|tmr|yesterday)\s*|tomorrow|tmr|yesterday)(?=\W|$)/i;

exports.Parser = function ENCasualDateParser(){

    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; }

    this.extract = function(text, ref, match, opt){

        var text = match[0].substr(match[1].length);
        var index = match.index + match[1].length;
        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref,
        });

        var refMoment = moment(ref);
        var startMoment = refMoment.clone();
        var lowerText = text.toLowerCase();

        if(lowerText == 'tonight'){
            // Normally means this coming midnight
            result.start.imply('hour', 22);
            result.start.imply('meridiem', 1);

        } else if (/^tomorrow|^tmr/.test(lowerText)) {

            // Check not "Tomorrow" on late night
            if(refMoment.hour() > 1) {
                startMoment.add(1, 'day');
            }

        } else if (/^yesterday/.test(lowerText)) {

            startMoment.add(-1, 'day');

        } else if(lowerText.match(/last\s*night/)) {

            result.start.imply('hour', 0);
            if (refMoment.hour() > 6) {
                startMoment.add(-1, 'day');
            }

        } else if (lowerText.match("now")) {

          result.start.assign('hour', refMoment.hour());
          result.start.assign('minute', refMoment.minute());
          result.start.assign('second', refMoment.second());
          result.start.assign('millisecond', refMoment.millisecond());

        }

        result.start.assign('day', startMoment.date())
        result.start.assign('month', startMoment.month() + 1)
        result.start.assign('year', startMoment.year())
        result.tags['ENCasualDateParser'] = true;
        return result;
    }
}

},{"../../result":151,"../parser":131,"moment":483}],100:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = /(\W|^)((this)?\s*(morning|afternoon|evening|noon|night))/i;

var TIME_MATCH = 4;

exports.Parser = function ENCasualTimeParser(){

    Parser.apply(this, arguments);


    this.pattern = function() { return PATTERN; }

    this.extract = function(text, ref, match, opt){

        var text = match[0].substr(match[1].length);
        var index = match.index + match[1].length;
        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref,
        });

        if(!match[TIME_MATCH]) TIME_MATCH = 3;
        
        switch (match[TIME_MATCH].toLowerCase()) {

            case 'afternoon':
                result.start.imply('meridiem', 1);
                result.start.imply('hour', 15);
                break;

            case 'evening':
            case 'night':
                result.start.imply('meridiem', 1);
                result.start.imply('hour', 20);
                break;

            case 'morning':
                result.start.imply('meridiem', 0);
                result.start.imply('hour', 6);
                break;

            case 'noon':
                result.start.imply('meridiem', 0);
                result.start.imply('hour', 12);
                break;
        }
        
        result.tags['ENCasualTimeParser'] = true;
        return result;
    };
};

},{"../../result":151,"../parser":131,"moment":483}],101:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var util  = require('../../utils/EN');

var PATTERN = new RegExp('(\\W|^)' +
    '(within|in)\\s*' +
    '('+ util.INTEGER_WORDS_PATTERN + '|[0-9]+|an?(?:\\s*few)?|half(?:\\s*an?)?)\\s*' +
    '(seconds?|min(?:ute)?s?|hours?|days?|weeks?|months?|years?)\\s*' +
    '(?=\\W|$)', 'i'
);

var STRICT_PATTERN = new RegExp('(\\W|^)' +
    '(within|in)\\s*' +
    '('+ util.INTEGER_WORDS_PATTERN + '|[0-9]+|an?)\\s*' +
    '(seconds?|minutes?|hours?|days?)\\s*' +
    '(?=\\W|$)', 'i'
);

exports.Parser = function ENDeadlineFormatParser(){
    Parser.apply(this, arguments);

    this.pattern = function() {
        return this.isStrictMode()? STRICT_PATTERN : PATTERN;
    };

    this.extract = function(text, ref, match, opt){

        var index = match.index + match[1].length;
        var text  = match[0];
        text  = match[0].substr(match[1].length, match[0].length - match[1].length);

        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref
        });

        var num = match[3].toLowerCase();
        if (util.INTEGER_WORDS[num] !== undefined) {
            num = util.INTEGER_WORDS[num];
        } else if (num === 'a' || num === 'an'){
            num = 1;
        } else if (num.match(/few/i)){
            num = 3;
        } else if (num.match(/half/i)) {
            num = 0.5;
        } else {
            num = parseInt(num);
        }

        var date = moment(ref);
        if (match[4].match(/day|week|month|year/i)) {

            if (match[4].match(/day/i)) {
                date.add(num, 'd');
            } else if (match[4].match(/week/i)) {
                date.add(num * 7, 'd');
            } else if (match[4].match(/month/i)) {
                date.add(num, 'month');
            } else if (match[4].match(/year/i)) {
                date.add(num, 'year');
            }

            result.start.imply('year', date.year());
            result.start.imply('month', date.month() + 1);
            result.start.imply('day', date.date());
            return result;
        }

        if (match[4].match(/hour/i)) {

            date.add(num, 'hour');

        } else if (match[4].match(/min/i)) {

            date.add(num, 'minute');

        } else if (match[4].match(/second/i)) {

            date.add(num, 'second');
        }

        result.start.imply('year', date.year());
        result.start.imply('month', date.month() + 1);
        result.start.imply('day', date.date());
        result.start.imply('hour', date.hour());
        result.start.imply('minute', date.minute());
        result.start.imply('second', date.second());
        result.tags['ENDeadlineFormatParser'] = true;
        return result;
    };
};

},{"../../result":151,"../../utils/EN":153,"../parser":131,"moment":483}],102:[function(require,module,exports){
/*
    ISO 8601
    http://www.w3.org/TR/NOTE-datetime
    - YYYY-MM-DD
    - YYYY-MM-DDThh:mmTZD
    - YYYY-MM-DDThh:mm:ssTZD
    - YYYY-MM-DDThh:mm:ss.sTZD 
    - TZD = (Z or +hh:mm or -hh:mm)
*/
var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = new RegExp('(\\W|^)' 
            + '([0-9]{4})\\-([0-9]{1,2})\\-([0-9]{1,2})'
            + '(?:T' //..
                + '([0-9]{1,2}):([0-9]{1,2})' // hh:mm
                + '(?::([0-9]{1,2})(?:\\.(\\d{1,4}))?)?' // :ss.s
                + '(?:Z|([+-]\\d{2}):?(\\d{2})?)?' // TZD (Z or ±hh:mm or ±hhmm or ±hh)
            + ')?'  //..
            + '(?=\\W|$)', 'i');

var YEAR_NUMBER_GROUP = 2;
var MONTH_NUMBER_GROUP = 3;
var DATE_NUMBER_GROUP  = 4;
var HOUR_NUMBER_GROUP  = 5;
var MINUTE_NUMBER_GROUP = 6;
var SECOND_NUMBER_GROUP = 7;
var MILLISECOND_NUMBER_GROUP = 8;
var TZD_HOUR_OFFSET_GROUP = 9;
var TZD_MINUTE_OFFSET_GROUP = 10;

exports.Parser = function ENISOFormatParser(){
    Parser.apply(this, arguments);
    
    this.pattern = function() { return PATTERN; }
    
    this.extract = function(text, ref, match, opt){ 
        
        var text = match[0].substr(match[1].length);
        var index = match.index + match[1].length;

        var result = new ParsedResult({
            text: text,
            index: index,
            ref: ref,
        })
        
        result.start.assign('year', parseInt(match[YEAR_NUMBER_GROUP]));
        result.start.assign('month', parseInt(match[MONTH_NUMBER_GROUP]));
        result.start.assign('day', parseInt(match[DATE_NUMBER_GROUP]));

        if (moment(result.start.get('month')) > 12 || moment(result.start.get('month')) < 1 ||
            moment(result.start.get('day')) > 31 || moment(result.start.get('day')) < 1) {
            return null;
        }

        if (match[HOUR_NUMBER_GROUP] != null) {
            
            result.start.assign('hour',
                    parseInt(match[HOUR_NUMBER_GROUP]));
            result.start.assign('minute',
                    parseInt(match[MINUTE_NUMBER_GROUP]));

            if (match[SECOND_NUMBER_GROUP] != null) {

                result.start.assign('second',
                        parseInt(match[SECOND_NUMBER_GROUP]));
            }

            if (match[MILLISECOND_NUMBER_GROUP] != null) {

                result.start.assign('millisecond',
                        parseInt(match[MILLISECOND_NUMBER_GROUP]));
            }

            if (match[TZD_HOUR_OFFSET_GROUP] == null) {

                result.start.assign('timezoneOffset', 0);
            } else {

                var minuteOffset = 0;
                var hourOffset = parseInt(match[TZD_HOUR_OFFSET_GROUP]);
                if (match[TZD_MINUTE_OFFSET_GROUP] != null)
                    minuteOffset = parseInt(match[TZD_MINUTE_OFFSET_GROUP]);

                var offset = hourOffset * 60;
                if (offset < 0) {
                    offset -= minuteOffset;
                } else {
                    offset += minuteOffset;
                }

                result.start.assign('timezoneOffset', offset);
            }
        }
        
        result.tags['ENISOFormatParser'] = true;
        return result;
    };

}


},{"../../result":151,"../parser":131,"moment":483}],103:[function(require,module,exports){
/*


*/

var moment = require('moment');

var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var util  = require('../../utils/EN');

var PATTERN = new RegExp('(\\W|^)' +
        '(?:on\\s*?)?' +
        '(?:(Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sun|Mon|Tue|Wed|Thu|Fri|Sat)\\s*,?\\s*)?' +
        '(([0-9]{1,2})(?:st|nd|rd|th)?|' + util.ORDINAL_WORDS_PATTERN + ')' +
        '(?:\\s*' +
            '(?:to|\\-|\\–|until|through|till|\\s)\\s*' +
            '(([0-9]{1,2})(?:st|nd|rd|th)?|' + util.ORDINAL_WORDS_PATTERN + ')' +
        ')?' + 
        '(?:-|\/|\\s*(?:of)?\\s*)' +
        '(' + util.MONTH_PATTERN + ')' +
        '(?:' +
            '(?:-|\/|,?\\s*)' +
            '((?:' + 
                '[1-9][0-9]{0,3}\\s*(?:BE|AD|BC)|' +
                '[1-2][0-9]{3}' + 
            ')(?![^\\s]\\d))' +
        ')?' +
        '(?=\\W|$)', 'i'
    );

var WEEKDAY_GROUP = 2;
var DATE_GROUP = 3;
var DATE_NUM_GROUP = 4;
var DATE_TO_GROUP = 5;
var DATE_TO_NUM_GROUP = 6;
var MONTH_NAME_GROUP = 7;
var YEAR_GROUP = 8;

exports.Parser = function ENMonthNameLittleEndianParser(){
    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; }

    this.extract = function(text, ref, match, opt){

        var result = new ParsedResult({
            text: match[0].substr(match[1].length, match[0].length - match[1].length),
            index: match.index + match[1].length,
            ref: ref
        });

        var month = match[MONTH_NAME_GROUP];
        month = util.MONTH_OFFSET[month.toLowerCase()];

        var day = match[DATE_NUM_GROUP] ?
            parseInt(match[DATE_NUM_GROUP]):
            util.ORDINAL_WORDS[match[DATE_GROUP].trim().replace('-', ' ').toLowerCase()];

        var year = null;
        if (match[YEAR_GROUP]) {
            year = match[YEAR_GROUP];
            
            if (/BE/i.test(year)) {
                // Buddhist Era
                year = year.replace(/BE/i, '');
                year = parseInt(year) - 543;
            } else if (/BC/i.test(year)){
                // Before Christ
                year = year.replace(/BC/i, '');
                year = -parseInt(year);
            } else if (/AD/i.test(year)){
                year = year.replace(/AD/i, '');
                year = parseInt(year);
            } else {
                year = parseInt(year);
                if (year < 100){
                    year = year + 2000;
                }
            }
        }

        if(year){
            result.start.assign('day', day);
            result.start.assign('month', month);
            result.start.assign('year', year);
        } else {

            //Find the most appropriated year
            var refMoment = moment(ref);
            refMoment.month(month - 1);
            refMoment.date(day);
            refMoment.year(moment(ref).year());

            var nextYear = refMoment.clone().add(1, 'y');
            var lastYear = refMoment.clone().add(-1, 'y');
            if( Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){
                refMoment = nextYear;
            }
            else if( Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){
                refMoment = lastYear;
            }

            result.start.assign('day', day);
            result.start.assign('month', month);
            result.start.imply('year', refMoment.year());
        }

        // Weekday component
        if (match[WEEKDAY_GROUP]) {
            var weekday = match[WEEKDAY_GROUP];
            weekday = util.WEEKDAY_OFFSET[weekday.toLowerCase()]
            result.start.assign('weekday', weekday);
        }

        // Text can be 'range' value. Such as '12 - 13 January 2012'
        if (match[DATE_TO_GROUP]) {
            var endDate = match[DATE_TO_NUM_GROUP] ?
                parseInt(match[DATE_TO_NUM_GROUP]):
                util.ORDINAL_WORDS[match[DATE_TO_GROUP].trim().replace('-', ' ').toLowerCase()];

            result.end = result.start.clone();
            result.end.assign('day', endDate);
        }

        result.tags['ENMonthNameLittleEndianParser'] = true;
        return result;
    };
};

},{"../../result":151,"../../utils/EN":153,"../parser":131,"moment":483}],104:[function(require,module,exports){
/*

    The parser for parsing US's date format that begin with month's name.

    EX.
        - January 13
        - January 13, 2012
        - January 13 - 15, 2012
        - Tuesday, January 13, 2012

    Watch out for:
        - January 12:00
        - January 12.44
        - January 1222344
*/

var moment = require('moment');

var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var util  = require('../../utils/EN');

var PATTERN = new RegExp('(\\W|^)' +
    '(?:' +
        '(?:on\\s*?)?' +
        '(Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sun\\.?|Mon\\.?|Tue\\.?|Wed\\.?|Thu\\.?|Fri\\.?|Sat\\.?)' +
    '\\s*,?\\s*)?' +
    '(' + util.MONTH_PATTERN + ')' +
    '(?:-|\/|\\s*,?\\s*)' +
    '(([0-9]{1,2})(?:st|nd|rd|th)?|' + util.ORDINAL_WORDS_PATTERN +')(?!\\s*(?:am|pm))\\s*' + '' + 
    '(?:' +
        '(?:to|\\-)\\s*' +
        '(([0-9]{1,2})(?:st|nd|rd|th)?| ' + util.ORDINAL_WORDS_PATTERN + ')\\s*' +
    ')?' +
    '(?:' +
        '(?:-|\/|\\s*,?\\s*)' +
        '(?:([0-9]{4})\\s*(BE|AD|BC)?|([0-9]{1,4})\\s*(AD|BC))\\s*' +
    ')?' +
    '(?=\\W|$)(?!\\:\\d)', 'i');

var WEEKDAY_GROUP = 2;
var MONTH_NAME_GROUP = 3;
var DATE_GROUP = 4;
var DATE_NUM_GROUP = 5;
var DATE_TO_GROUP = 6;
var DATE_TO_NUM_GROUP = 7;
var YEAR_GROUP = 8;
var YEAR_BE_GROUP = 9;
var YEAR_GROUP2 = 10;
var YEAR_BE_GROUP2 = 11;

exports.Parser = function ENMonthNameMiddleEndianParser(){
    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; }

    this.extract = function(text, ref, match, opt){

        var result = new ParsedResult({
            text: match[0].substr(match[1].length, match[0].length - match[1].length),
            index: match.index + match[1].length,
            ref: ref,
        });


        var month = match[MONTH_NAME_GROUP];
        month = util.MONTH_OFFSET[month.toLowerCase()];
        var day = match[DATE_NUM_GROUP] ?
            parseInt(match[DATE_NUM_GROUP]) :
            util.ORDINAL_WORDS[match[DATE_GROUP].trim().replace('-', ' ').toLowerCase()];

        var year = null;
        if (match[YEAR_GROUP] || match[YEAR_GROUP2]) {
            year = match[YEAR_GROUP] || match[YEAR_GROUP2];
            year = parseInt(year);

            var yearBE = match[YEAR_BE_GROUP] || match[YEAR_BE_GROUP2];
            if (yearBE) {
                if (/BE/i.test(yearBE)) {
                    // Buddhist Era
                    year = year - 543;
                } else if (/BC/i.test(yearBE)) {
                    // Before Christ
                    year = -year;
                }
            } else if (year < 100){

                year = year + 2000;
            }
        }

        if(year){
            result.start.assign('day', day);
            result.start.assign('month', month);
            result.start.assign('year', year);
        } else {

            //Find the most appropriated year
            var refMoment = moment(ref);
            refMoment.month(month - 1);
            refMoment.date(day);

            var nextYear = refMoment.clone().add(1, 'y');
            var lastYear = refMoment.clone().add(-1, 'y');
            if( Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){
                refMoment = nextYear;
            }
            else if( Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){
                refMoment = lastYear;
            }

            result.start.assign('day', day);
            result.start.assign('month', month);
            result.start.imply('year', refMoment.year());
        }

        // Weekday component
        if (match[WEEKDAY_GROUP]) {
            var weekday = match[WEEKDAY_GROUP];
            weekday = util.WEEKDAY_OFFSET[weekday.toLowerCase()]
            result.start.assign('weekday', weekday);
        }

        // Text can be 'range' value. Such as 'January 12 - 13, 2012'
        if (match[DATE_TO_GROUP]) {
            var endDate = match[DATE_TO_NUM_GROUP] ?
                endDate = parseInt(match[DATE_TO_NUM_GROUP]) :
                util.ORDINAL_WORDS[match[DATE_TO_GROUP].replace('-', ' ').trim().toLowerCase()];

            result.end = result.start.clone();
            result.end.assign('day', endDate);
        }

        result.tags['ENMonthNameMiddleEndianParser'] = true;
        return result;
    }
};
},{"../../result":151,"../../utils/EN":153,"../parser":131,"moment":483}],105:[function(require,module,exports){
/*
    
    The parser for parsing month name and year.
    
    EX. 
        - January
        - January 2012
        - January, 2012
*/

var moment = require('moment');

var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var util  = require('../../utils/EN');

var PATTERN = new RegExp('(^|\\D\\s+|[^\\w\\s])' +
    '('+ util.MONTH_PATTERN +')' + 
    '\\s*' +
    '(?:' +
        '[,-]?\\s*([0-9]{4})(\\s*BE|AD|BC)?' +
    ')?' +
    '(?=[^\\s\\w]|\\s+[^0-9]|\\s+$|$)', 'i');

var MONTH_NAME_GROUP = 2;
var YEAR_GROUP = 3;
var YEAR_BE_GROUP = 4;

exports.Parser = function ENMonthNameParser(){
    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; }
    
    this.extract = function(text, ref, match, opt){
        var result = new ParsedResult({
            text: match[0].substr(match[1].length, match[0].length - match[1].length),
            index: match.index + match[1].length,
            ref: ref,
        });

        
        var month = match[MONTH_NAME_GROUP];
        month = util.MONTH_OFFSET[month.toLowerCase()];

        var day = 1;

        var year = null;
        if (match[YEAR_GROUP]) {
            year = match[YEAR_GROUP];
            year = parseInt(year);

            if(match[YEAR_BE_GROUP]){
                if (match[YEAR_BE_GROUP].match(/BE/)) {
                    // Buddhist Era
                    year = year - 543;
                } else if (match[YEAR_BE_GROUP].match(/BC/)) {
                    // Before Christ
                    year = -year;
                }

            } else if (year < 100){ 

                year = year + 2000;
            }
        }

        if(year){
            result.start.imply('day', day);
            result.start.assign('month', month);
            result.start.assign('year', year);
        } else {
            
            //Find the most appropriated year
            var refMoment = moment(ref);
            refMoment.month(month - 1);
            refMoment.date(day);

            var nextYear = refMoment.clone().add(1, 'y');
            var lastYear = refMoment.clone().add(-1, 'y');
            if( Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){  
                refMoment = nextYear;
            }
            else if( Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){ 
                refMoment = lastYear;
            }

            result.start.imply('day', day);
            result.start.assign('month', month);
            result.start.imply('year', refMoment.year());
        }

        result.tags['ENMonthNameParser'] = true;
        return result;
    }
}

},{"../../result":151,"../../utils/EN":153,"../parser":131,"moment":483}],106:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var util  = require('../../utils/EN');

var PATTERN = new RegExp('(\\W|^)' +
    '(this|next|last|past)\\s*' +
    '('+ util.INTEGER_WORDS_PATTERN + '|[0-9]+|few|half(?:\\s*an?)?)?\\s*' +
    '(seconds?|min(?:ute)?s?|hours?|days?|weeks?|months?|years?)(?=\\s*)' +
    '(?=\\W|$)', 'i'
);

var MODIFIER_WORD_GROUP = 2;
var MULTIPLIER_WORD_GROUP = 3;
var RELATIVE_WORD_GROUP = 4;

exports.Parser = function ENRelativeDateFormatParser(){
    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; };

    this.extract = function(text, ref, match, opt){

        var index = match.index + match[1].length;
        var modifier = match[MODIFIER_WORD_GROUP].toLowerCase().match(/^next/) ? 1 : -1;
        var text  = match[0];
        text  = match[0].substr(match[1].length, match[0].length - match[1].length);

        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref
        });
        result.tags['ENRelativeDateFormatParser'] = true;

        var num = match[MULTIPLIER_WORD_GROUP] === undefined ? '' : match[3].toLowerCase();
        if (util.INTEGER_WORDS[num] !== undefined) {
            num = util.INTEGER_WORDS[num];
        } else if (num === ''){
            num = 1;
        } else if (num.match(/few/i)){
            num = 3;
        } else if (num.match(/half/i)) {
            num = 0.5;
        } else {
            num = parseInt(num);
        }

        num *= modifier;
        var date = moment(ref);

        if (match[MODIFIER_WORD_GROUP].toLowerCase().match(/^this/)) {

            if (match[MULTIPLIER_WORD_GROUP]) {
                return null;
            }

            if (match[RELATIVE_WORD_GROUP].match(/day|week|month|year/i)) {
                
                // This week
                if (match[RELATIVE_WORD_GROUP].match(/week/i)) {
                    date.add(-date.get('d'), 'd');
                    result.start.imply('day', date.date());
                    result.start.imply('month', date.month() + 1);
                    result.start.imply('year', date.year());
                } 
                
                // This month
                else if (match[RELATIVE_WORD_GROUP].match(/month/i)) {
                    date.add(-date.date() + 1, 'd');
                    result.start.imply('day', date.date());
                    result.start.assign('year', date.year());
                    result.start.assign('month', date.month() + 1);
                } 

                // This year
                else if (match[RELATIVE_WORD_GROUP].match(/year/i)) {
                    date.add(-date.date() + 1, 'd');
                    date.add(-date.month(), 'month');

                    result.start.imply('day', date.date());
                    result.start.imply('month', date.month() + 1);
                    result.start.assign('year', date.year());
                } 

                return result;
            }
        }
        
        if (match[RELATIVE_WORD_GROUP].match(/day|week|month|year/i)) {

            if (match[RELATIVE_WORD_GROUP].match(/day/i)) {
                date.add(num, 'd');
                result.start.assign('year', date.year());
                result.start.assign('month', date.month() + 1);
                result.start.assign('day', date.date());
            } else if (match[RELATIVE_WORD_GROUP].match(/week/i)) {
                date.add(num * 7, 'd');
                // We don't know the exact date for next/last week so we imply
                // them
                result.start.imply('day', date.date());
                result.start.imply('month', date.month() + 1);
                result.start.imply('year', date.year());
            } else if (match[RELATIVE_WORD_GROUP].match(/month/i)) {
                date.add(num, 'month');
                // We don't know the exact day for next/last month
                result.start.imply('day', date.date());
                result.start.assign('year', date.year());
                result.start.assign('month', date.month() + 1);
            } else if (match[RELATIVE_WORD_GROUP].match(/year/i)) {
                date.add(num, 'year');
                // We don't know the exact day for month on next/last year
                result.start.imply('day', date.date());
                result.start.imply('month', date.month() + 1);
                result.start.assign('year', date.year());
            }

            return result;
        }

        if (match[RELATIVE_WORD_GROUP].match(/hour/i)) {

            date.add(num, 'hour');
            result.start.imply('minute', date.minute());
            result.start.imply('second', date.second());

        } else if (match[RELATIVE_WORD_GROUP].match(/min/i)) {

            date.add(num, 'minute');
            result.start.assign('minute', date.minute());
            result.start.imply('second', date.second());

        } else if (match[RELATIVE_WORD_GROUP].match(/second/i)) {

            date.add(num, 'second');
            result.start.assign('second', date.second());
            result.start.assign('minute', date.minute());
        }

        result.start.assign('hour', date.hour());
        result.start.assign('year', date.year());
        result.start.assign('month', date.month() + 1);
        result.start.assign('day', date.date());
        return result;
    };
};

},{"../../result":151,"../../utils/EN":153,"../parser":131,"moment":483}],107:[function(require,module,exports){
/*
    Date format with slash "/" (also "-" and ".") between numbers
    - Tuesday 11/3/2015 
    - 11/3/2015
    - 11/3

    By default the paser us "middle-endien" format (US English),
    then fallback to little-endian if failed.
    - 11/3/2015 = November 3rd, 2015
    - 23/4/2015 = April 23th, 2015

    If "littleEndian" config is set, the parser will try the little-endian first. 
    - 11/3/2015 = March 11th, 2015
*/
var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = new RegExp('(\\W|^)' +
    '(?:' +
        '(?:on\\s*?)?' +
        '((?:sun|mon|tues?|wed(?:nes)?|thu(?:rs?)?|fri|sat(?:ur)?)(?:day)?)' +
        '\\s*\\,?\\s*' +
    ')?' +
    '([0-3]{0,1}[0-9]{1})[\\/\\.\\-]([0-3]{0,1}[0-9]{1})' +
    '(?:' +
        '[\\/\\.\\-]' +
        '([0-9]{4}\s*\,?\s*|[0-9]{2}\s*\,?\s*)' +
    ')?' +
    '(\\W|$)', 'i');

var DAYS_OFFSET = { 'sunday': 0, 'sun': 0, 'monday': 1, 'mon': 1,'tuesday': 2, 'wednesday': 3, 'wed': 3,
    'thursday': 4, 'thur': 4,'friday': 5, 'fri': 5,'saturday': 6, 'sat': 6,}


var OPENNING_GROUP = 1;
var ENDING_GROUP = 6;

var WEEKDAY_GROUP = 2;


var FIRST_NUMBERS_GROUP = 3;
var SECOND_NUMBERS_GROUP = 4;

var YEAR_GROUP = 5;

exports.Parser = function ENSlashDateFormatParser(config) {
    Parser.apply(this, arguments);
    config = config || {};
    var littleEndian  = config.littleEndian;
    var MONTH_GROUP = littleEndian ? SECOND_NUMBERS_GROUP : FIRST_NUMBERS_GROUP;
    var DAY_GROUP = littleEndian ? FIRST_NUMBERS_GROUP : SECOND_NUMBERS_GROUP;

    this.pattern = function () { return PATTERN; };
    this.extract = function(text, ref, match, opt){

        if(match[OPENNING_GROUP] == '/' || match[ENDING_GROUP] == '/') {
            // Long skip, if there is some overlapping like:
            // XX[/YY/ZZ]
            // [XX/YY/]ZZ
            match.index += match[0].length
            return;
        }

        var index = match.index + match[OPENNING_GROUP].length;
        var text = match[0].substr(match[OPENNING_GROUP].length, match[0].length - match[ENDING_GROUP].length);


        var result = new ParsedResult({
            text: text,
            index: index,
            ref: ref,
        });

        if(text.match(/^\d\.\d$/)) return;
        if(text.match(/^\d\.\d{1,2}\.\d{1,2}$/)) return;

        // MM/dd -> OK
        // MM.dd -> NG
        if(!match[YEAR_GROUP] && match[0].indexOf('/') < 0) return;

        var date = null;
        var year = match[YEAR_GROUP] || moment(ref).year() + '';
        var month = match[MONTH_GROUP];
        var day   = match[DAY_GROUP];

        month = parseInt(month);
        day  = parseInt(day);
        year = parseInt(year);

        if(month < 1 || month > 12) {
            if(month > 12) {
                // dd/mm/yyyy date format if day looks like a month, and month
                // looks like a day.
                if (day >= 1 && day <= 12 && month >= 13 && month <= 31) {
                    // unambiguous
                    var tday = month;
                    month = day;
                    day = tday;
                }
                else {
                    // both month and day are <= 12
                    return null;
                }
            }
        }
        if(day < 1 || day > 31) return null;

        if(year < 100){
            if (year > 50) {
                year = year + 1900;
            } else {
                year = year + 2000;
            }
        }

        result.start.assign('day', day);
        result.start.assign('month', month);
        if (match[YEAR_GROUP]) {
            result.start.assign('year', year);
        } else {
            result.start.imply('year', year);
        }

        //Day of week
        if(match[WEEKDAY_GROUP]) {
            result.start.assign('weekday', DAYS_OFFSET[match[WEEKDAY_GROUP].toLowerCase()]);
        }

        result.tags['ENSlashDateFormatParser'] = true;
        return result;
    };
};

},{"../../result":151,"../parser":131,"moment":483}],108:[function(require,module,exports){
/*
    Date format with slash "/" between numbers like ENSlashDateFormatParser,
    but this parser expect year before month and date. 
    - YYYY/MM/DD
    - YYYY-MM-DD
    - YYYY.MM.DD
*/
var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var util  = require('../../utils/EN');

var PATTERN = new RegExp('(\\W|^)' 
            + '([0-9]{4})[\\-\\.\\/]'
            + '((?:' + util.MONTH_PATTERN + '|[0-9]{1,2}))[\\-\\.\\/]'
            + '([0-9]{1,2})'
            + '(?=\\W|$)', 'i');

var YEAR_NUMBER_GROUP = 2;
var MONTH_NUMBER_GROUP = 3;
var DATE_NUMBER_GROUP  = 4;

exports.Parser = function ENSlashDateFormatStartWithYearParser(){
    Parser.apply(this, arguments);
    
    this.pattern = function() { return PATTERN; }
    
    this.extract = function(text, ref, match, opt){

        var text = match[0].substr(match[1].length);
        var index = match.index + match[1].length;

        var result = new ParsedResult({
            text: text,
            index: index,
            ref: ref,
        })
        
        var month = match[MONTH_NUMBER_GROUP].toLowerCase();
        month = util.MONTH_OFFSET[month] | month;

        result.start.assign('year', parseInt(match[YEAR_NUMBER_GROUP]));
        result.start.assign('month', parseInt(month));
        result.start.assign('day', parseInt(match[DATE_NUMBER_GROUP]));

        if (moment(result.start.get('month')) > 12 || moment(result.start.get('month')) < 1 ||
            moment(result.start.get('day')) > 31 || moment(result.start.get('day')) < 1) {
            return null;
        }
        
        result.tags['ENDateFormatParser'] = true;
        return result;
    };
}

},{"../../result":151,"../../utils/EN":153,"../parser":131,"moment":483}],109:[function(require,module,exports){
/*
    Month/Year date format with slash "/" (also "-" and ".") between numbers 
    - 11/05
    - 06/2005
*/
var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = new RegExp('(^|[^\\d/]\\s+|[^\\w\\s])' +
    '([0-9]|0[1-9]|1[012])/([0-9]{4})' + 
    '([^\\d/]|$)', 'i');

var OPENNING_GROUP = 1;
var ENDING_GROUP = 4;

var MONTH_GROUP = 2;
var YEAR_GROUP = 3;

exports.Parser = function ENSlashMonthFormatParser(argument) {
    Parser.apply(this, arguments);

    this.pattern = function () { return PATTERN; };
    this.extract = function(text, ref, match, opt){
        
        var index = match.index + match[OPENNING_GROUP].length;
        var text = match[0].substr(match[OPENNING_GROUP].length, match[0].length - (1 + match[ENDING_GROUP].length)).trim();

        var result = new ParsedResult({
            text: text,
            index: index,
            ref: ref,
        });

        var date = null;
        var year = match[YEAR_GROUP] ;
        var month = match[MONTH_GROUP];
        var day   = 1;
        
        month = parseInt(month);
        year = parseInt(year);

        result.start.imply('day', day);
        result.start.assign('month', month);
        result.start.assign('year', year);

        result.tags['ENSlashMonthFormatParser'] = true;
        return result;
    };
};

},{"../../result":151,"../parser":131,"moment":483}],110:[function(require,module,exports){
var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var util  = require('../../utils/EN');

var PATTERN = new RegExp('' +
    '(\\W|^)' +
    '(?:within\\s*)?' +
    '(' + util.TIME_UNIT_PATTERN + ')' +
    '(?:ago|before|earlier)(?=(?:\\W|$))', 'i');

var STRICT_PATTERN = new RegExp('' +
    '(\\W|^)' +
    '(?:within\\s*)?' +
    '(' + util.TIME_UNIT_STRICT_PATTERN + ')' +
    'ago(?=(?:\\W|$))', 'i');

exports.Parser = function ENTimeAgoFormatParser(){
    Parser.apply(this, arguments);

    this.pattern = function() {
        return this.isStrictMode()? STRICT_PATTERN : PATTERN;
    };

    this.extract = function(text, ref, match, opt){

        if (match.index > 0 && text[match.index-1].match(/\w/)) return null;

        var text = match[0];
        text  = match[0].substr(match[1].length, match[0].length - match[1].length);
        var index = match.index + match[1].length;

        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref
        });

        var fragments = util.extractDateTimeUnitFragments(match[2]);
        var date = moment(ref);

        for (var key in fragments) {
            date.add(-fragments[key], key);
        }

        if (fragments['hour'] > 0 || fragments['minute'] > 0 || fragments['second'] > 0) {
            result.start.assign('hour', date.hour());
            result.start.assign('minute', date.minute());
            result.start.assign('second', date.second());
            result.tags['ENTimeAgoFormatParser'] = true;
        } 
        
        if (fragments['d'] > 0 || fragments['month'] > 0 || fragments['year'] > 0) {
            result.start.assign('day', date.date());
            result.start.assign('month', date.month() + 1);
            result.start.assign('year', date.year());
        } else {
            if (fragments['week'] > 0) {
                result.start.imply('weekday', date.day());
            }

            result.start.imply('day', date.date());
            result.start.imply('month', date.month() + 1);
            result.start.imply('year', date.year());
        }

        return result;
    };
}

},{"../../result":151,"../../utils/EN":153,"../parser":131,"moment":483}],111:[function(require,module,exports){
/*

*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var ParsedComponents = require('../../result').ParsedComponents;

var FIRST_REG_PATTERN  = new RegExp("(^|\\s|T)" +
    "(?:(?:at|from)\\s*)??" + 
    "(\\d{1,4}|noon|midnight)" + 
    "(?:" + 
        "(?:\\.|\\:|\\：)(\\d{1,2})" + 
        "(?:" + 
            "(?:\\:|\\：)(\\d{2})(?:\\.(\\d{1,6}))?" + 
        ")?" + 
    ")?" + 
    "(?:\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?|O\\W*CLOCK))?" + 
    "(?=\\W|$)", 'i');


var SECOND_REG_PATTERN = new RegExp("^\\s*" + 
    "(\\-|\\–|\\~|\\〜|to|\\?)\\s*" + 
    "(\\d{1,4})" +
    "(?:" + 
        "(?:\\.|\\:|\\：)(\\d{1,2})" + 
        "(?:" + 
            "(?:\\.|\\:|\\：)(\\d{1,2})(?:\\.(\\d{1,6}))?" + 
        ")?" + 
    ")?" + 
    "(?:\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?|O\\W*CLOCK))?" + 
    "(?=\\W|$)", 'i');

var HOUR_GROUP    = 2;
var MINUTE_GROUP  = 3;
var SECOND_GROUP  = 4;
var MILLI_SECOND_GROUP  = 5;
var AM_PM_HOUR_GROUP = 6;


exports.Parser = function ENTimeExpressionParser(){
    Parser.apply(this, arguments);

    this.pattern = function() { return FIRST_REG_PATTERN; }
    
    this.extract = function(text, ref, match, opt){ 
        
        // This pattern can be overlapped Ex. [12] AM, 1[2] AM
        if (match.index > 0 && text[match.index-1].match(/\w/)) return null;
        var refMoment = moment(ref);
        var result = new ParsedResult();
        result.ref = ref;
        result.index = match.index + match[1].length;
        result.text  = match[0].substring(match[1].length);
        result.tags['ENTimeExpressionParser'] = true;

        result.start.imply('day',   refMoment.date());
        result.start.imply('month', refMoment.month()+1);
        result.start.imply('year',  refMoment.year());
        
        var hour = 0;
        var minute = 0;
        var meridiem = -1;

        // ----- Millisecond
        if(match[MILLI_SECOND_GROUP] != null){ 
            var millisecond = parseInt(match[MILLI_SECOND_GROUP].substring(0, 3));
            if(millisecond >= 1000) return null;
            
            result.start.assign('millisecond', millisecond);
        }

        // ----- Second
        if(match[SECOND_GROUP] != null){ 
            var second = parseInt(match[SECOND_GROUP]);
            if(second >= 60) return null;

            result.start.assign('second', second);
        }
        
        // ----- Hours
        if (match[HOUR_GROUP].toLowerCase() == "noon"){
            meridiem = 1; 
            hour = 12;
        } else if (match[HOUR_GROUP].toLowerCase() == "midnight") {
            meridiem = 0; 
            hour = 0;
        } else {
            hour = parseInt(match[HOUR_GROUP]);
        }
        
        // ----- Minutes
        if(match[MINUTE_GROUP] != null){ 
            minute = parseInt(match[MINUTE_GROUP]);
        } else if(hour > 100) { 
            minute = hour%100;
            hour   = parseInt(hour/100);
        } 
        
        if(minute >= 60) {
            return null;
        }

        if(hour > 24) {
            return null;
        }
        if (hour >= 12) { 
            meridiem = 1;
        }

        // ----- AM & PM  
        if(match[AM_PM_HOUR_GROUP] != null) {
            if(hour > 12) return null;
            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if(ampm == "a"){
                meridiem = 0; 
                if(hour == 12) hour = 0;
            }
            
            if(ampm == "p"){
                meridiem = 1; 
                if(hour != 12) hour += 12;
            }
        } 

        result.start.assign('hour', hour);
        result.start.assign('minute', minute);

        if (meridiem >= 0) {
            result.start.assign('meridiem', meridiem);
        } else {
            if (hour < 12) {
                result.start.imply('meridiem', 0);
            } else {
                result.start.imply('meridiem', 1);
            }
        }

        // ==============================================================
        //                  Extracting the 'to' chunk
        // ==============================================================
        match = SECOND_REG_PATTERN.exec(text.substring(result.index + result.text.length));
        if (!match) {
            return result;
        }



        // Pattern "YY.YY -XXXX" is more like timezone offset
        if (match[0].match(/^\s*(\+|\-)\s*\d{3,4}$/)) {
            return result;
        }

        if(result.end == null){
            result.end = new ParsedComponents(null, result.start.date());
        }

        var hour = 0;
        var minute = 0;
        var meridiem = -1;

        // ----- Millisecond
        if(match[MILLI_SECOND_GROUP] != null){ 
            var millisecond = parseInt(match[MILLI_SECOND_GROUP].substring(0, 3));
            if(millisecond >= 1000) return null;
            
            result.end.assign('millisecond', millisecond);
        }
        
        // ----- Second
        if(match[SECOND_GROUP] != null){ 
            var second = parseInt(match[SECOND_GROUP]);
            if(second >= 60) return null;

            result.end.assign('second', second);
        }

        hour = parseInt(match[2]);
        
        // ----- Minute
        if (match[MINUTE_GROUP]!= null) {
            
            minute = parseInt(match[MINUTE_GROUP]);
            if(minute >= 60) return result;
            
        } else if (hour > 100) {

            minute = hour%100;
            hour   = parseInt(hour/100);
        }

        if(minute >= 60) {
            return null;
        }

        if(hour > 24) {
            return null;
        }
        if (hour >= 12) { 
            meridiem = 1;
        }
        
        // ----- AM & PM 
        if (match[AM_PM_HOUR_GROUP] != null){

            if (hour > 12) return null;

            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if(ampm == "a"){
                meridiem = 0; 
                if(hour == 12) {
                    hour = 0;
                    if (!result.end.isCertain('day')) {
                        result.end.imply('day', result.end.get('day') + 1);
                    }
                }
            }
            
            if(ampm == "p"){
                meridiem = 1; 
                if(hour != 12) hour += 12;
            }
            
            if (!result.start.isCertain('meridiem')) {
                if (meridiem == 0) {
                    
                    result.start.imply('meridiem', 0);
                    
                    if (result.start.get('hour') == 12) {
                        result.start.assign('hour', 0);
                    }

                } else {

                    result.start.imply('meridiem', 1);
                    
                    if (result.start.get('hour') != 12) {
                        result.start.assign('hour', result.start.get('hour') + 12); 
                    }
                }
            }
        }

        result.text = result.text + match[0];
        result.end.assign('hour', hour);
        result.end.assign('minute', minute);
        if (meridiem >= 0) {
            result.end.assign('meridiem', meridiem);
        } else {
            var startAtPM = result.start.isCertain('meridiem') && result.start.get('meridiem') == 1;
            if (startAtPM && result.start.get('hour') > hour) {
                // 10pm - 1 (am)
                result.end.imply('meridiem', 0);

            } else if (hour > 12) {
                result.end.imply('meridiem', 1);
            }
        }

        if (result.end.date().getTime() < result.start.date().getTime()) {
            result.end.imply('day', result.end.get('day') + 1)
        }
        
        return result;
    }
}

},{"../../result":151,"../parser":131,"moment":483}],112:[function(require,module,exports){
var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var util  = require('../../utils/EN');

var PATTERN = new RegExp('' +
    /*match[1]*/ '(\\W|^)' +
    /*match[2]*/ '(in )?' +
    /*match[3]*/ '(' + util.TIME_UNIT_PATTERN + ')' +
    /*match[4]*/ '(later|after|from now|henceforth|forward|out)?' +
    /*match[5]*/ '(?=(?:\\W|$))',
'i');

var STRICT_PATTERN = new RegExp('' +
    /*match[1]*/ '(\\W|^)' +
    /*match[2]*/ '(in )?' +
    /*match[3]*/ '(' + util.TIME_UNIT_STRICT_PATTERN + ')' +
    /*match[4]*/ '(later|from now)?' +
    /*match[5]*/ '(?=(?:\\W|$))',
'i');

exports.Parser = function ENTimeLaterFormatParser(){
    Parser.apply(this, arguments);

    this.pattern = function() {
        return this.isStrictMode()? STRICT_PATTERN : PATTERN;
    };

    this.extract = function(text, ref, match, opt){
        if (match.index > 0 && text[match.index-1].match(/\w/)) return null;

        var prefix = match[2];
        var suffix = match[4];
        if (!prefix && !suffix) return null;

        var preamble = match[1];
        
        var text = match[0];
        text  = match[0].substr(preamble.length, match[0].length - preamble.length);
        index = match.index + preamble.length;

        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref
        });

        var fragments = util.extractDateTimeUnitFragments(match[3]);
        var date = moment(ref);
        for (var key in fragments) {
            date.add(fragments[key], key);
        }

        if (fragments['hour'] > 0 || fragments['minute'] > 0 || fragments['second'] > 0) {
            result.start.assign('hour', date.hour());
            result.start.assign('minute', date.minute());
            result.start.assign('second', date.second());
            result.tags['ENTimeAgoFormatParser'] = true;
        } 
        
        if (fragments['d'] > 0 || fragments['month'] > 0 || fragments['year'] > 0) {
            result.start.assign('day', date.date());
            result.start.assign('month', date.month() + 1);
            result.start.assign('year', date.year());
        } else {
            if (fragments['week'] > 0) {
                result.start.imply('weekday', date.day());
            }

            result.start.imply('day', date.date());
            result.start.imply('month', date.month() + 1);
            result.start.imply('year', date.year());
        }

        return result;
    };
}

},{"../../result":151,"../../utils/EN":153,"../parser":131,"moment":483}],113:[function(require,module,exports){
/*


*/
var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var DAYS_OFFSET = { 'sunday': 0, 'sun': 0, 'monday': 1, 'mon': 1,'tuesday': 2, 'tues':2, 'tue':2, 'wednesday': 3, 'wed': 3,
    'thursday': 4, 'thurs':4, 'thur': 4, 'thu': 4,'friday': 5, 'fri': 5,'saturday': 6, 'sat': 6};

var PATTERN = new RegExp('(\\W|^)' +
    '(?:(?:\\,|\\(|\\（)\\s*)?' +
    '(?:on\\s*?)?' +
    '(?:(this|last|past|next)\\s*)?' +
    '(' + Object.keys(DAYS_OFFSET).join('|') + ')' +
    '(?:\\s*(?:\\,|\\)|\\）))?' +
    '(?:\\s*(this|last|past|next)\\s*week)?' +
    '(?=\\W|$)', 'i');

var PREFIX_GROUP = 2;
var WEEKDAY_GROUP = 3;
var POSTFIX_GROUP = 4;


exports.updateParsedComponent = function updateParsedComponent(result, ref, offset, modifier) {

    var startMoment = moment(ref);
    var startMomentFixed = false;
    var refOffset = startMoment.day();

    if(modifier == 'last' || modifier == 'past') {
        startMoment.day(offset - 7);
        startMomentFixed = true;
    } else if(modifier == 'next') {
        startMoment.day(offset + 7);
        startMomentFixed = true;
    } else if(modifier == 'this') {
        startMoment.day(offset);
    } else {
        if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {
            startMoment.day(offset - 7);
        } else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {
            startMoment.day(offset + 7);
        } else {
            startMoment.day(offset);
        }
    }

    result.start.assign('weekday', offset);
    if (startMomentFixed) {
        result.start.assign('day', startMoment.date());
        result.start.assign('month', startMoment.month() + 1);
        result.start.assign('year', startMoment.year());
    } else {
        result.start.imply('day', startMoment.date());
        result.start.imply('month', startMoment.month() + 1);
        result.start.imply('year', startMoment.year());
    }

    return result;
};


exports.Parser = function ENWeekdayParser() {
    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; };

    this.extract = function(text, ref, match, opt){
        var index = match.index + match[1].length;
        var text = match[0].substr(match[1].length, match[0].length - match[1].length);
        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref
        });

        var dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        var offset = DAYS_OFFSET[dayOfWeek];
        if(offset === undefined) {
            return null;
        }

        var prefix = match[PREFIX_GROUP];
        var postfix = match[POSTFIX_GROUP];
        var norm = prefix || postfix;
        norm = norm || '';
        norm = norm.toLowerCase();

        exports.updateParsedComponent(result, ref, offset, norm);
        result.tags['ENWeekdayParser'] = true;

        return result;
    }
};

},{"../../result":151,"../parser":131,"moment":483}],114:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

/*
  Valid patterns:
  - esta mañana -> today in the morning
  - esta tarde -> today in the afternoon/evening
  - esta noche -> tonight
  - ayer por la mañana -> yesterday in the morning
  - ayer por la tarde -> yesterday in the afternoon/evening
  - ayer por la noche -> yesterday at night
  - mañana por la mañana -> tomorrow in the morning
  - mañana por la tarde -> tomorrow in the afternoon/evening
  - mañana por la noche -> tomorrow at night
  - anoche -> tomorrow at night
  - hoy -> today
  - ayer -> yesterday
  - mañana -> tomorrow
 */
var PATTERN = /(\W|^)(ahora|esta\s*(mañana|tarde|noche)|(ayer|mañana)\s*por\s*la\s*(mañana|tarde|noche)|hoy|mañana|ayer|anoche)(?=\W|$)/i;

exports.Parser = function ESCasualDateParser(){

    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; }

    this.extract = function(text, ref, match, opt){

        var text = match[0].substr(match[1].length);
        var index = match.index + match[1].length;
        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref,
        });

        var refMoment = moment(ref);
        var startMoment = refMoment.clone();
        var lowerText = text.toLowerCase().replace(/\s+/g, ' ');

        if(lowerText == 'mañana'){

            // Check not "Tomorrow" on late night
            if(refMoment.hour() > 1) {
                startMoment.add(1, 'day');
            }

        } else if(lowerText == 'ayer') {

            startMoment.add(-1, 'day');
        }
        else if(lowerText == 'anoche') {

            result.start.imply('hour', 0);
            if (refMoment.hour() > 6) {
                startMoment.add(-1, 'day');
            }

        } else if (lowerText.match("esta")) {

            var secondMatch = match[3].toLowerCase();
            if (secondMatch == "tarde") {

                result.start.imply('hour', 18);

            } else if (secondMatch == "mañana") {

                result.start.imply('hour', 6);

            } else if (secondMatch == "noche") {

              // Normally means this coming midnight
              result.start.imply('hour', 22);
              result.start.imply('meridiem', 1);

            }
        } else if (lowerText.match(/por\s*la/)) {

            var firstMatch = match[4].toLowerCase();
            if (firstMatch === 'ayer') {

              startMoment.add(-1, 'day');

            } else if (firstMatch === 'mañana') {

              startMoment.add(1, 'day');

            }

            var secondMatch = match[5].toLowerCase();
            if (secondMatch == "tarde") {

                result.start.imply('hour', 18);

            } else if (secondMatch == "mañana") {

                result.start.imply('hour', 9);

            } else if (secondMatch == "noche") {

              // Normally means this coming midnight
              result.start.imply('hour', 22);
              result.start.imply('meridiem', 1);

            }

        } else if (lowerText.match("ahora")) {

          result.start.imply('hour', refMoment.hour());
          result.start.imply('minute', refMoment.minute());
          result.start.imply('second', refMoment.second());
          result.start.imply('millisecond', refMoment.millisecond());

        }

        result.start.assign('day', startMoment.date())
        result.start.assign('month', startMoment.month() + 1)
        result.start.assign('year', startMoment.year())
        result.tags['ESCasualDateParser'] = true;
        return result;
    }
}

},{"../../result":151,"../parser":131,"moment":483}],115:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = /(\W|^)(dentro\s*de|en)\s*([0-9]+|medi[oa]|una?)\s*(minutos?|horas?|d[ií]as?)\s*(?=(?:\W|$))/i;

exports.Parser = function ESDeadlineFormatParser(){
    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; }

    this.extract = function(text, ref, match, opt){

        var index = match.index + match[1].length;
        var text  = match[0];
        text  = match[0].substr(match[1].length, match[0].length - match[1].length);

        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref,
        });

        var num = parseInt(match[3]);
        if (isNaN(num)) {
          if (match[3].match(/medi/)) {
            num = 0.5;
          } else {
            num = 1;
          }
        }

        var date = moment(ref);
        if (match[4].match(/d[ií]a/)) {
            date.add(num, 'd');

            result.start.assign('year', date.year());
            result.start.assign('month', date.month() + 1);
            result.start.assign('day', date.date());
            return result;
        }


        if (match[4].match(/hora/)) {

            date.add(num, 'hour');

        } else if (match[4].match(/minuto/)) {

            date.add(num, 'minute');
        }

        result.start.imply('year', date.year());
        result.start.imply('month', date.month() + 1);
        result.start.imply('day', date.date());
        result.start.assign('hour', date.hour());
        result.start.assign('minute', date.minute());
        result.tags['ESDeadlineFormatParser'] = true;
        return result;
    };
}

},{"../../result":151,"../parser":131,"moment":483}],116:[function(require,module,exports){
/*


*/

var moment = require('moment');

var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var util  = require('../../utils/ES');

var DAYS_OFFSET = util.WEEKDAY_OFFSET;

var PATTERN = new RegExp('(\\W|^)' +
        '(?:(Domingo|Lunes|Martes|Miércoles|Miercoles|Jueves|Viernes|Sábado|Sabado|Dom|Lun|Mar|Mie|Jue|Vie|Sab)\\s*,?\\s*)?' +
        '([0-9]{1,2})(?:º|ª|°)?' +
        '(?:\\s*(?:desde|de|\\-|\\–|al?|hasta|\\s)\\s*([0-9]{1,2})(?:º|ª|°)?)?\\s*(?:de)?\\s*' +
        '(Ene(?:ro|\\.)?|Feb(?:rero|\\.)?|Mar(?:zo|\\.)?|Abr(?:il|\\.)?|May(?:o|\\.)?|Jun(?:io|\\.)?|Jul(?:io|\\.)?|Ago(?:sto|\\.)?|Sep(?:tiembre|\\.)?|Set(?:iembre|\\.)?|Oct(?:ubre|\\.)?|Nov(?:iembre|\\.)?|Dic(?:iembre|\\.)?)' +
        '(?:\\s*(?:del?)?(\\s*[0-9]{1,4}(?![^\\s]\\d))(\\s*[ad]\\.?\\s*c\\.?|a\\.?\\s*d\\.?)?)?' +
        '(?=\\W|$)', 'i'
    );

var WEEKDAY_GROUP = 2;
var DATE_GROUP = 3;
var DATE_TO_GROUP = 4;
var MONTH_NAME_GROUP = 5;
var YEAR_GROUP = 6;
var YEAR_BE_GROUP = 7;

exports.Parser = function ESMonthNameLittleEndianParser(){
    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; }

    this.extract = function(text, ref, match, opt){

        var result = new ParsedResult({
            text: match[0].substr(match[1].length, match[0].length - match[1].length),
            index: match.index + match[1].length,
            ref: ref,
        });

        var month = match[MONTH_NAME_GROUP];
        month = util.MONTH_OFFSET[month.toLowerCase()];

        var day = match[DATE_GROUP];
        day = parseInt(day);

        var year = null;
        if (match[YEAR_GROUP]) {
            year = match[YEAR_GROUP];
            year = parseInt(year);

            if(match[YEAR_BE_GROUP]){
                if (/a\.?\s*c\.?/i.test(match[YEAR_BE_GROUP])) {
                    // antes de Cristo
                    year = -year;
                }
            } else if (year < 100){

                year = year + 2000;
            }
        }

        if(year){
            result.start.assign('day', day);
            result.start.assign('month', month);
            result.start.assign('year', year);
        } else {

            //Find the most appropriated year
            var refMoment = moment(ref);
            refMoment.month(month - 1);
            refMoment.date(day);
            refMoment.year(moment(ref).year());

            var nextYear = refMoment.clone().add(1, 'y');
            var lastYear = refMoment.clone().add(-1, 'y');
            if( Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){
                refMoment = nextYear;
            }
            else if( Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){
                refMoment = lastYear;
            }

            result.start.assign('day', day);
            result.start.assign('month', month);
            result.start.imply('year', refMoment.year());
        }

        // Weekday component
        if (match[WEEKDAY_GROUP]) {
            var weekday = match[WEEKDAY_GROUP];
            weekday = util.WEEKDAY_OFFSET[weekday.toLowerCase()]
            result.start.assign('weekday', weekday);
        }

        // Text can be 'range' value. Such as '12 - 13 January 2012'
        if (match[DATE_TO_GROUP]) {
            result.end = result.start.clone();
            result.end.assign('day', parseInt(match[DATE_TO_GROUP]));
        }

        result.tags['ESMonthNameLittleEndianParser'] = true;
        return result;
    };
}

},{"../../result":151,"../../utils/ES":154,"../parser":131,"moment":483}],117:[function(require,module,exports){
/*
    Date format with slash "/" (also "-" and ".") between numbers
    - Martes 3/11/2015
    - 3/11/2015
    - 3/11
*/
var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = new RegExp('(\\W|^)' +
    '(?:' +
        '((?:domingo|dom|lunes|lun|martes|mar|mi[ée]rcoles|mie|jueves|jue|viernes|vie|s[áa]bado|sab))' +
        '\\s*\\,?\\s*' +
    ')?' +
    '([0-1]{0,1}[0-9]{1})[\\/\\.\\-]([0-3]{0,1}[0-9]{1})' +
    '(?:' +
        '[\\/\\.\\-]' +
        '([0-9]{4}\s*\,?\s*|[0-9]{2}\s*\,?\s*)' +
    ')?' +
    '(\\W|$)', 'i');

var DAYS_OFFSET = { 'domingo': 0, 'dom': 0, 'lunes': 1, 'lun': 1, 'martes': 2, 'mar': 2, 'miercoles': 3, 'miércoles': 3, 'mie': 3,
    'jueves': 4, 'jue': 4, 'viernes': 5, 'vier': 5, 'sábado': 6, 'sabado': 6, 'sab': 6,}


var OPENNING_GROUP = 1;
var ENDING_GROUP = 6;

// in Spanish we use day/month/year
var WEEKDAY_GROUP = 2;
var MONTH_GROUP = 4;
var DAY_GROUP = 3;
var YEAR_GROUP = 5;

exports.Parser = function ESSlashDateFormatParser(argument) {
    Parser.apply(this, arguments);

    this.pattern = function () { return PATTERN; };
    this.extract = function(text, ref, match, opt){

        if(match[OPENNING_GROUP] == '/' || match[ENDING_GROUP] == '/') {
            // Long skip, if there is some overlapping like:
            // XX[/YY/ZZ]
            // [XX/YY/]ZZ
            match.index += match[0].length
            return;
        }

        var index = match.index + match[OPENNING_GROUP].length;
        var text = match[0].substr(match[OPENNING_GROUP].length, match[0].length - match[ENDING_GROUP].length);


        var result = new ParsedResult({
            text: text,
            index: index,
            ref: ref,
        });

        if(text.match(/^\d\.\d$/)) return;
        if(text.match(/^\d\.\d{1,2}\.\d{1,2}$/)) return;

        // MM/dd -> OK
        // MM.dd -> NG
        if(!match[YEAR_GROUP] && match[0].indexOf('/') < 0) return;

        var date = null;
        var year = match[YEAR_GROUP] || moment(ref).year() + '';
        var month = match[MONTH_GROUP];
        var day   = match[DAY_GROUP];

        month = parseInt(month);
        day  = parseInt(day);
        year = parseInt(year);

        if(month < 1 || month > 12) {
            if(month > 12) {
                // dd/mm/yyyy date format if day looks like a month, and month
                // looks like a day.
                if (day >= 1 && day <= 12 && month >= 13 && month <= 31) {
                    // unambiguous
                    var tday = month;
                    month = day;
                    day = tday;
                }
                else {
                    // both month and day are <= 12
                    return null;
                }
            }
        }
        if(day < 1 || day > 31) return null;

        if(year < 100){
            if(year > 50){
                year = year + 1900;
            }else{
                year = year + 2000;
            }
        }

        result.start.assign('day', day);
        result.start.assign('month', month);
        result.start.assign('year', year);

        //Day of week
        if(match[WEEKDAY_GROUP]) {
            result.start.assign('weekday', DAYS_OFFSET[match[WEEKDAY_GROUP].toLowerCase()]);
        }

        result.tags['ESSlashDateFormatParser'] = true;
        return result;
    };
};
},{"../../result":151,"../parser":131,"moment":483}],118:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = /(\W|^)hace\s*([0-9]+|medi[oa]|una?)\s*(minutos?|horas?|semanas?|d[ií]as?|mes(es)?|años?)(?=(?:\W|$))/i;

exports.Parser = function ESTimeAgoFormatParser(){
    Parser.apply(this, arguments);

    this.pattern = function() {
        return PATTERN;
    }

    this.extract = function(text, ref, match, opt){

        if (match.index > 0 && text[match.index-1].match(/\w/)) return null;

        var text = match[0];
        text  = match[0].substr(match[1].length, match[0].length - match[1].length);
        index = match.index + match[1].length;

        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref,
        });

        var num = parseInt(match[2]);
        if (isNaN(num)) {
          if (match[2].match(/medi/)) {
            num = 0.5;
          } else {
            num = 1;
          }
        }

        var date = moment(ref);

        if (match[3].match(/hora/) || match[3].match(/minuto/)) {
            if (match[3].match(/hora/)) {

                date.add(-num, 'hour');

            } else if (match[3].match(/minuto/)) {

                date.add(-num, 'minute');
            }

            result.start.imply('day', date.date());
            result.start.imply('month', date.month() + 1);
            result.start.imply('year', date.year());
            result.start.assign('hour', date.hour());
            result.start.assign('minute', date.minute());
            result.tags['ESTimeAgoFormatParser'] = true;
            return result;
        }

        if (match[3].match(/semana/)) {
            date.add(-num, 'week');

            result.start.imply('day', date.date());
            result.start.imply('month', date.month() + 1);
            result.start.imply('year', date.year());
            result.start.imply('weekday', date.day());
            return result;
        }

        if (match[3].match(/d[ií]a/)) {
            date.add(-num, 'd');
        }

        if (match[3].match(/mes/)) {
            date.add(-num, 'month');
        }

        if (match[3].match(/año/)) {

            date.add(-num, 'year');
        }

        result.start.assign('day', date.date());
        result.start.assign('month', date.month() + 1);
        result.start.assign('year', date.year());
        return result;

    };
}

},{"../../result":151,"../parser":131,"moment":483}],119:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var ParsedComponents = require('../../result').ParsedComponents;

var FIRST_REG_PATTERN  = new RegExp("(^|\\s|T)" +
    "(?:(?:a las?|al?|desde|de)\\s*)?" +
    "(\\d{1,4}|mediod[ií]a|medianoche)" +
    "(?:" +
        "(?:\\.|\\:|\\：)(\\d{1,2})" +
        "(?:" +
            "(?:\\:|\\：)(\\d{2})" +
        ")?" +
    ")?" +
    "(?:\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?))?" +
    "(?=\\W|$)", 'i');


var SECOND_REG_PATTERN = new RegExp("^\\s*" +
    "(\\-|\\–|\\~|\\〜|a(?:\s*las)?|\\?)\\s*" +
    "(\\d{1,4})" +
    "(?:" +
        "(?:\\.|\\:|\\：)(\\d{1,2})" +
        "(?:" +
            "(?:\\.|\\:|\\：)(\\d{1,2})" +
        ")?" +
    ")?" +
    "(?:\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?))?" +
    "(?=\\W|$)", 'i');

var HOUR_GROUP    = 2;
var MINUTE_GROUP  = 3;
var SECOND_GROUP  = 4;
var AM_PM_HOUR_GROUP = 5;

exports.Parser = function ESTimeExpressionParser(){
    Parser.apply(this, arguments);

    this.pattern = function() { return FIRST_REG_PATTERN; }

    this.extract = function(text, ref, match, opt){

        // This pattern can be overlaped Ex. [12] AM, 1[2] AM
        if (match.index > 0 && text[match.index-1].match(/\w/)) return null;
        var refMoment = moment(ref);
        var result = new ParsedResult();
        result.ref = ref;
        result.index = match.index + match[1].length;
        result.text  = match[0].substring(match[1].length);
        result.tags['ESTimeExpressionParser'] = true;

        result.start.imply('day',   refMoment.date());
        result.start.imply('month', refMoment.month()+1);
        result.start.imply('year',  refMoment.year());

        var hour = 0;
        var minute = 0;
        var meridiem = -1;

        // ----- Second
        if(match[SECOND_GROUP] != null){
            var second = parseInt(match[SECOND_GROUP]);
            if(second >= 60) return null;

            result.start.assign('second', second);
        }

        // ----- Hours
        if (match[HOUR_GROUP].toLowerCase().match(/mediod/)){
            meridiem = 1;
            hour = 12;
        } else if (match[HOUR_GROUP].toLowerCase() == "medianoche") {
            meridiem = 0;
            hour = 0;
        } else {
            hour = parseInt(match[HOUR_GROUP]);
        }

        // ----- Minutes
        if(match[MINUTE_GROUP] != null){
            minute = parseInt(match[MINUTE_GROUP]);
        } else if(hour > 100) {
            minute = hour%100;
            hour   = parseInt(hour/100);
        }

        if(minute >= 60) {
            return null;
        }

        if(hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = 1;
        }

        // ----- AM & PM
        if(match[AM_PM_HOUR_GROUP] != null) {
            if(hour > 12) return null;
            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if(ampm == "a"){
                meridiem = 0;
                if(hour == 12) hour = 0;
            }

            if(ampm == "p"){
                meridiem = 1;
                if(hour != 12) hour += 12;
            }
        }
        result.start.assign('hour', hour);
        result.start.assign('minute', minute);
        if (meridiem >= 0) {
            result.start.assign('meridiem', meridiem);
        }

        // ==============================================================
        //                  Extracting the 'to' chunk
        // ==============================================================
        match = SECOND_REG_PATTERN.exec(text.substring(result.index + result.text.length));
        if (!match) {
            // Not accept number only result
            if (result.text.match(/^\d+$/)) {
                return null;
            }
            return result;
        }



        // Pattern "YY.YY -XXXX" is more like timezone offset
        if (match[0].match(/^\s*(\+|\-)\s*\d{3,4}$/)) {
            return result;
        }

        if(result.end == null){
            result.end = new ParsedComponents(null, result.start.date());
        }

        var hour = 0;
        var minute = 0;
        var meridiem = -1;

        // ----- Second
        if(match[SECOND_GROUP] != null){
            var second = parseInt(match[SECOND_GROUP]);
            if(second >= 60) return null;

            result.end.assign('second', second);
        }

        hour = parseInt(match[2]);

        // ----- Minute
        if (match[MINUTE_GROUP]!= null) {

            minute = parseInt(match[MINUTE_GROUP]);
            if(minute >= 60) return result;

        } else if (hour > 100) {

            minute = hour%100;
            hour   = parseInt(hour/100);
        }

        if(minute >= 60) {
            return null;
        }

        if(hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = 1;
        }

        // ----- AM & PM
        if (match[AM_PM_HOUR_GROUP] != null){

            if (hour > 12) return null;

            if(match[AM_PM_HOUR_GROUP][0].toLowerCase() == "a"){
                meridiem = 0;
                if(hour == 12) {
                    hour = 0;
                    if (!result.end.isCertain('day')) {
                        result.end.imply('day', result.end.get('day') + 1);
                    }
                }
            }

            if(match[AM_PM_HOUR_GROUP][0].toLowerCase() == "p"){
                meridiem = 1;
                if(hour != 12) hour += 12;
            }

            if (!result.start.isCertain('meridiem')) {
                if (meridiem == 0) {

                    result.start.imply('meridiem', 0);

                    if (result.start.get('hour') == 12) {
                        result.start.assign('hour', 0);
                    }

                } else {

                    result.start.imply('meridiem', 1);

                    if (result.start.get('hour') != 12) {
                        result.start.assign('hour', result.start.get('hour') + 12);
                    }
                }
            }

        } else if(hour >= 12) {
            meridiem = 1;
        }

        result.text = result.text + match[0];
        result.end.assign('hour', hour);
        result.end.assign('minute', minute);
        if (meridiem >= 0) {
            result.end.assign('meridiem', meridiem);
        }

        if (result.end.date().getTime() < result.start.date().getTime()) {
            result.end.imply('day', result.end.get('day') + 1)
        }

        return result;
    }
}

},{"../../result":151,"../parser":131,"moment":483}],120:[function(require,module,exports){
/*


*/
var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var updateParsedComponent = require('../en/ENWeekdayParser').updateParsedComponent;

var DAYS_OFFSET = { 'domingo': 0, 'dom': 0, 'lunes': 1, 'lun': 1, 'martes': 2, 'mar':2, 'miercoles': 3, 'miércoles': 3, 'mie': 3,
    'jueves': 4, 'jue': 4, 'viernes': 5, 'vier': 5, 'sabado': 6, 'sábado': 6, 'sab': 6,}

var PATTERN = new RegExp('(\\W|^)' +
    '(?:(?:\\,|\\(|\\（)\\s*)?' +
    '(?:(este|pasado|pr[oó]ximo)\\s*)?' +
    '(' + Object.keys(DAYS_OFFSET).join('|') + ')' +
    '(?:\\s*(?:\\,|\\)|\\）))?' +
    '(?:\\s*(este|pasado|pr[óo]ximo)\\s*week)?' +
    '(?=\\W|$)', 'i');

var PREFIX_GROUP = 2;
var WEEKDAY_GROUP = 3;
var POSTFIX_GROUP = 4;

exports.Parser = function ESWeekdayParser() {
    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; }

    this.extract = function(text, ref, match, opt){
        var index = match.index + match[1].length;
        var text = match[0].substr(match[1].length, match[0].length - match[1].length);
        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref
        });

        var dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        var offset = DAYS_OFFSET[dayOfWeek];
        if(offset === undefined) return null;

        var modifier = null;
        var prefix = match[PREFIX_GROUP];
        var postfix = match[POSTFIX_GROUP];
        if (prefix || postfix) {
            var norm = prefix || postfix;
            norm = norm.toLowerCase();

            if(norm == 'pasado') {
                modifier = 'this';
            }
            else if(norm == 'próximo' || norm == 'proximo') {
                modifier = 'next';
            }
            else if(norm== 'este') {
                modifier =  'this';
            }
        }

        updateParsedComponent(result, ref, offset, modifier);
        result.tags['ESWeekdayParser'] = true;
        return result;
    }
}

},{"../../result":151,"../en/ENWeekdayParser":113,"../parser":131,"moment":483}],121:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = /(\W|^)(maintenant|aujourd'hui|ajd|cette\s*nuit|la\s*veille|(demain|hier)(\s*(matin|soir|aprem|après-midi))?|ce\s*(matin|soir)|cet\s*(après-midi|aprem))(?=\W|$)/i;

exports.Parser = function FRCasualDateParser(){

    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; }

    this.extract = function(text, ref, match, opt){

        var text = match[0].substr(match[1].length);
        var index = match.index + match[1].length;
        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref,
        });

        var refMoment = moment(ref);
        var startMoment = refMoment.clone();
        var lowerText = text.toLowerCase();

        if(lowerText.match(/demain/)){
            // Check not "Tomorrow" on late night
            if(refMoment.hour() > 1) {
                startMoment.add(1, 'day');
            }
        } 

        if(lowerText.match(/hier/)) {
            startMoment.add(-1, 'day');
        }

        if(lowerText.match(/cette\s*nuit/)){
            // Normally means this coming midnight
            result.start.imply('hour', 22);
            result.start.imply('meridiem', 1);

        } else if(lowerText.match(/la\s*veille/)) {

            result.start.imply('hour', 0);
            if (refMoment.hour() > 6) {
                startMoment.add(-1, 'day');
            }

        } else if (lowerText.match(/(après-midi|aprem)/)) {

            result.start.imply('hour', 14);

        } else if (lowerText.match(/(soir)/)) {

            result.start.imply('hour', 18);

        } else if (lowerText.match(/matin/)) {

            result.start.imply('hour', 8);

        }  else if (lowerText.match("maintenant")) {

          result.start.imply('hour', refMoment.hour());
          result.start.imply('minute', refMoment.minute());
          result.start.imply('second', refMoment.second());
          result.start.imply('millisecond', refMoment.millisecond());

        }

        result.start.assign('day', startMoment.date())
        result.start.assign('month', startMoment.month() + 1)
        result.start.assign('year', startMoment.year())
        result.tags['FRCasualDateParser'] = true;
        return result;
    }
}

},{"../../result":151,"../parser":131,"moment":483}],122:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var util  = require('../../utils/FR');

var PATTERN = new RegExp('(\\W|^)' +
    '(dans|en)\\s*' +
    '('+ util.INTEGER_WORDS_PATTERN + '|[0-9]+|une?|(?:\\s*quelques)?|demi(?:\\s*|-?)?)\\s*' +
    '(secondes?|min(?:ute)?s?|heures?|jours?|semaines?|mois|années?)\\s*' +
    '(?=\\W|$)', 'i'
);

var STRICT_PATTERN = new RegExp('(\\W|^)' +
    '(dans|en)\\s*' +
    '('+ util.INTEGER_WORDS_PATTERN + '|[0-9]+|un?)\\s*' +
    '(secondes?|minutes?|heures?|jours?)\\s*' +
    '(?=\\W|$)', 'i'
);

exports.Parser = function FRDeadlineFormatParser(){
    Parser.apply(this, arguments);

    this.pattern = function() {
        return this.isStrictMode()? STRICT_PATTERN : PATTERN;
    };

    this.extract = function(text, ref, match, opt){

        var index = match.index + match[1].length;
        var text  = match[0];
        text  = match[0].substr(match[1].length, match[0].length - match[1].length);

        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref
        });

        var num = match[3];
        if (util.INTEGER_WORDS[num] !== undefined) {
            num = util.INTEGER_WORDS[num];
        } else if (num === 'un' || num === 'une'){
            num = 1;
        } else if (num.match(/quelques?/i)){
            num = 3;
        } else if (num.match(/demi-?/i)) {
            num = 0.5;
        } else {
            num = parseInt(num);
        }

        var date = moment(ref);
        if (match[4].match(/jour|semaine|mois|année/i)) {

            if (match[4].match(/jour/)) {
                date.add(num, 'd');
            } else if (match[4].match(/semaine/i)) {
                date.add(num * 7, 'd');
            } else if (match[4].match(/mois/i)) {
                date.add(num, 'month');
            } else if (match[4].match(/année/i)) {
                date.add(num, 'year');
            }

            result.start.assign('year', date.year());
            result.start.assign('month', date.month() + 1);
            result.start.assign('day', date.date());
            return result;
        }

        if (match[4].match(/heure/i)) {

            date.add(num, 'hour');

        } else if (match[4].match(/min/i)) {

            date.add(num, 'minutes');

        } else if (match[4].match(/secondes/i)) {

            date.add(num, 'second');
        }

        result.start.imply('year', date.year());
        result.start.imply('month', date.month() + 1);
        result.start.imply('day', date.date());
        result.start.assign('hour', date.hour());
        result.start.assign('minute', date.minute());
        result.start.assign('second', date.second());
        result.tags['FRDeadlineFormatParser'] = true;
        return result;
    };
};

},{"../../result":151,"../../utils/FR":155,"../parser":131,"moment":483}],123:[function(require,module,exports){
/*


*/

var moment = require('moment');

var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var util  = require('../../utils/FR');

var DAYS_OFFSET = util.WEEKDAY_OFFSET;

var PATTERN = new RegExp('(\\W|^)' +
        '(?:(Dimanche|Lundi|Mardi|mercredi|Jeudi|Vendredi|Samedi|Dim|Lun|Mar|Mer|Jeu|Ven|Sam)\\s*,?\\s*)?' +
        '([0-9]{1,2}|1er)' +
        '(?:\\s*(?:au|\\-|\\–|jusqu\'au?|\\s)\\s*([0-9]{1,2})(?:er)?)?\\s*(?:de)?\\s*' +
        '(Jan(?:vier|\\.)?|F[ée]v(?:rier|\\.)?|Mars|Avr(?:il|\\.)?|Mai|Juin|Juil(?:let|\\.)?|Ao[uû]t|Sept(?:embre|\\.)?|Oct(?:obre|\\.)?|Nov(?:embre|\\.)?|d[ée]c(?:embre|\\.)?)' +
        '(?:\\s*(\\s*[0-9]{1,4}(?![^\\s]\\d))(?:\\s*(AC|[ap]\\.?\\s*c(?:h(?:r)?)?\\.?\\s*n\\.?))?)?' +
        '(?=\\W|$)', 'i'
    );

var WEEKDAY_GROUP = 2;
var DATE_GROUP = 3;
var DATE_TO_GROUP = 4;
var MONTH_NAME_GROUP = 5;
var YEAR_GROUP = 6;
var YEAR_BE_GROUP = 7;

exports.Parser = function FRMonthNameLittleEndianParser(){
    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; }

    this.extract = function(text, ref, match, opt){

        var result = new ParsedResult({
            text: match[0].substr(match[1].length, match[0].length - match[1].length),
            index: match.index + match[1].length,
            ref: ref,
        });

        var month = match[MONTH_NAME_GROUP];
        month = util.MONTH_OFFSET[month.toLowerCase()];

        var day = match[DATE_GROUP];
        day = parseInt(day);

        var year = null;
        if (match[YEAR_GROUP]) {
            year = match[YEAR_GROUP];
            year = parseInt(year);

            if(match[YEAR_BE_GROUP]){
                if (/a/i.test(match[YEAR_BE_GROUP])) {
                    // Ante Christe natum
                    year = -year;
                }
            } else if (year < 100){

                year = year + 2000;
            }
        }

        if(year){
            result.start.assign('day', day);
            result.start.assign('month', month);
            result.start.assign('year', year);
        } else {

            // Find the most appropriated year
            var refMoment = moment(ref);
            refMoment.month(month - 1);
            refMoment.date(day);
            refMoment.year(moment(ref).year());

            var nextYear = refMoment.clone().add(1, 'y');
            var lastYear = refMoment.clone().add(-1, 'y');
            if( Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){
                refMoment = nextYear;
            }
            else if( Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){
                refMoment = lastYear;
            }

            result.start.assign('day', day);
            result.start.assign('month', month);
            result.start.imply('year', refMoment.year());
        }

        // Weekday component
        if (match[WEEKDAY_GROUP]) {
            var weekday = match[WEEKDAY_GROUP];
            weekday = util.WEEKDAY_OFFSET[weekday.toLowerCase()]
            result.start.assign('weekday', weekday);
        }

        // Text can be 'range' value. Such as '12 - 13 janvier 2012'
        if (match[DATE_TO_GROUP]) {
            result.end = result.start.clone();
            result.end.assign('day', parseInt(match[DATE_TO_GROUP]));
        }

        result.tags['FRMonthNameLittleEndianParser'] = true;
        return result;
    };
}

},{"../../result":151,"../../utils/FR":155,"../parser":131,"moment":483}],124:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var util  = require('../../utils/FR');

// Force load fr localization data from moment for the locale files to be linkded durning browserify.
// NOTE: The function moment.defineLocale() also has a side effect that it change global locale
//  We also need to save and restore the previous locale (see. moment.js, loadLocale)
var originalLocale = moment.locale();
require('moment/locale/fr');
moment.locale(originalLocale);

var PATTERN = new RegExp('(\\W|^)' +
    '(?:les?|la|l\'|du|des?)\\s*' +
    '('+ util.INTEGER_WORDS_PATTERN + '|\\d+)?\\s*' +
    '(prochaine?s?|derni[eè]re?s?|pass[ée]e?s?|pr[ée]c[ée]dents?|suivante?s?)?\\s*' +
    '(secondes?|min(?:ute)?s?|heures?|jours?|semaines?|mois|trimestres?|années?)\\s*' +
    '(prochaine?s?|derni[eè]re?s?|pass[ée]e?s?|pr[ée]c[ée]dents?|suivante?s?)?' +
    '(?=\\W|$)', 'i'
);

var MULTIPLIER_GROUP = 2;
var MODIFIER_1_GROUP = 3;
var RELATIVE_WORD_GROUP = 4;
var MODIFIER_2_GROUP = 5;

exports.Parser = function FRRelativeDateFormatParser(){
    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; };

    this.extract = function(text, ref, match, opt){
        var index = match.index + match[1].length;
        var text  = match[0];
        text  = match[0].substr(match[1].length, match[0].length - match[1].length);

        // Multiplier
        var multiplier = match[MULTIPLIER_GROUP] === undefined ? '1' : match[MULTIPLIER_GROUP];
        if (util.INTEGER_WORDS[multiplier] !== undefined) {
            multiplier = util.INTEGER_WORDS[multiplier];
        } else {
            multiplier = parseInt(multiplier);
        }

        // Modifier
        var modifier = match[MODIFIER_1_GROUP] === undefined ?
                    (match[MODIFIER_2_GROUP] === undefined ? '' : match[MODIFIER_2_GROUP].toLowerCase())
                     : match[MODIFIER_1_GROUP].toLowerCase();
        if(!modifier) {
            // At least one modifier is mandatory to match this parser
            return;
        }

        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref
        });
        result.tags['FRRelativeDateFormatParser'] = true;

        var modifierFactor;
        switch(true) {
            case /prochaine?s?/.test(modifier):
            case /suivants?/.test(modifier):
                modifierFactor = 1;
                break;
            case /derni[eè]re?s?/.test(modifier):
            case /pass[ée]e?s?/.test(modifier):
            case /pr[ée]c[ée]dents?/.test(modifier):
                modifierFactor = -1;
                break;
        }

        var total = multiplier * modifierFactor;

        var dateFrom = moment(ref),
            dateTo = moment(ref);
        dateFrom.locale('fr');
        dateTo.locale('fr');
        var relative = match[RELATIVE_WORD_GROUP];
        var startOf;
        switch(true) {
            case /secondes?/.test(relative):
                dateFrom.add(total, 's');
                dateTo.add(modifierFactor, 's');
                startOf = 'second';
                break;
            case /min(?:ute)?s?/.test(relative):
                dateFrom.add(total, 'm');
                dateTo.add(modifierFactor, 'm');
                startOf = 'minute';
                break;
            case /heures?/.test(relative):
                dateFrom.add(total, 'h');
                dateTo.add(modifierFactor, 'h');
                startOf = 'hour';
                break;
            case /jours?/.test(relative):
                dateFrom.add(total, 'd');
                dateTo.add(modifierFactor, 'd');
                startOf = 'day';
                break;
            case /semaines?/.test(relative):
                dateFrom.add(total, 'w');
                dateTo.add(modifierFactor, 'w');
                startOf = 'week';
                break;
            case /mois?/.test(relative):
                dateFrom.add(total, 'M');
                dateTo.add(modifierFactor, 'M');
                startOf = 'month';
                break;
            case /trimestres?/.test(relative):
                dateFrom.add(total, 'Q');
                dateTo.add(modifierFactor, 'Q');
                startOf = 'quarter';
                break;
            case /années?/.test(relative):
                dateFrom.add(total, 'y');
                dateTo.add(modifierFactor, 'y');
                startOf = 'year';
                break;
        }

        // if we go forward, switch the start and end dates
        if(modifierFactor > 0) {
            var dateTmp = dateFrom;
            dateFrom = dateTo;
            dateTo = dateTmp;
        }

        // Get start and end of dates
        dateFrom.startOf(startOf);
        dateTo.endOf(startOf);

        // Assign results
        result.start.assign('year', dateFrom.year());
        result.start.assign('month', dateFrom.month() + 1);
        result.start.assign('day', dateFrom.date());
        result.start.assign('minute', dateFrom.minute());
        result.start.assign('second', dateFrom.second());
        result.start.assign('hour', dateFrom.hour());
        result.start.assign('millisecond', dateFrom.millisecond());

        result.end = result.start.clone();
        result.end.assign('year', dateTo.year());
        result.end.assign('month', dateTo.month() + 1);
        result.end.assign('day', dateTo.date());
        result.end.assign('minute', dateTo.minute());
        result.end.assign('second', dateTo.second());
        result.end.assign('hour', dateTo.hour());
        result.end.assign('millisecond', dateTo.millisecond());
        return result;
    };
};

},{"../../result":151,"../../utils/FR":155,"../parser":131,"moment":483,"moment/locale/fr":482}],125:[function(require,module,exports){
/*
    Date format with slash "/" (also "-" and ".") between numbers
    - Martes 3/11/2015
    - 3/11/2015
    - 3/11
*/
var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = new RegExp('(\\W|^)' +
    '(?:' +
        '((?:dimanche|dim|lundi|lun|mardi|mar|mercredi|mer|jeudi|jeu|vendredi|ven|samedi|sam|le))' +
        '\\s*\\,?\\s*' +
    ')?' +
    '([0-3]{0,1}[0-9]{1})[\\/\\.\\-]([0-3]{0,1}[0-9]{1})' +
    '(?:' +
        '[\\/\\.\\-]' +
        '([0-9]{4}\s*\,?\s*|[0-9]{2}\s*\,?\s*)' +
    ')?' +
    '(\\W|$)', 'i');

var DAYS_OFFSET = { 'dimanche': 0, 'dim': 0, 'lundi': 1, 'lun': 1,'mardi': 2, 'mar':2, 'mercredi': 3, 'mer': 3,
    'jeudi': 4, 'jeu':4, 'vendredi': 5, 'ven': 5,'samedi': 6, 'sam': 6};


var OPENNING_GROUP = 1;
var ENDING_GROUP = 6;

// In French we use day/month/year
var WEEKDAY_GROUP = 2;
var DAY_GROUP = 3;
var MONTH_GROUP = 4;
var YEAR_GROUP = 5;
var YEAR_BE_GROUP = 6;

exports.Parser = function FRSlashDateFormatParser(argument) {
    Parser.apply(this, arguments);

    this.pattern = function () { return PATTERN; };
    this.extract = function(text, ref, match, opt){

        if(match[OPENNING_GROUP] == '/' || match[ENDING_GROUP] == '/') {
            // Long skip, if there is some overlapping like:
            // XX[/YY/ZZ]
            // [XX/YY/]ZZ
            match.index += match[0].length
            return;
        }

        var index = match.index + match[OPENNING_GROUP].length;
        var text = match[0].substr(match[OPENNING_GROUP].length, match[0].length - match[ENDING_GROUP].length);


        var result = new ParsedResult({
            text: text,
            index: index,
            ref: ref,
        });

        if(text.match(/^\d\.\d$/)) return;
        if(text.match(/^\d\.\d{1,2}\.\d{1,2}$/)) return;

        // MM/dd -> OK
        // MM.dd -> NG
        if(!match[YEAR_GROUP] && match[0].indexOf('/') < 0) return;

        var date = null;
        var month = match[MONTH_GROUP];
        var day   = match[DAY_GROUP];

        day  = parseInt(day);
        month = parseInt(month);

        var year = null;
        if (match[YEAR_GROUP]) {
            year = match[YEAR_GROUP];
            year = parseInt(year);

            if(match[YEAR_BE_GROUP]){
                if (/a/i.test(match[YEAR_BE_GROUP])) {
                    // Ante Christe natum
                    year = -year;
                }
            } else if (year < 100){

                year = year + 2000;
            }
        }

        if(month < 1 || month > 12) {
            if(month > 12) {
                // dd/mm/yyyy date format if day looks like a month, and month looks like a day.
                if (day >= 1 && day <= 12 && month >= 13 && month <= 31) {
                    // unambiguous
                    var tday = month;
                    month = day;
                    day = tday;
                }
                else {
                    // both month and day are <= 12
                    return null;
                }
            }
        }

        if(day < 1 || day > 31) return null;

        if(year){
            result.start.assign('day', day);
            result.start.assign('month', month);
            result.start.assign('year', year);
        } else {

            // Find the most appropriated year
            var refMoment = moment(ref);
            refMoment.month(month - 1);
            refMoment.date(day);
            refMoment.year(moment(ref).year());

            var nextYear = refMoment.clone().add(1, 'y');
            var lastYear = refMoment.clone().add(-1, 'y');
            if( Math.abs(nextYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){
                refMoment = nextYear;
            }
            else if( Math.abs(lastYear.diff(moment(ref))) < Math.abs(refMoment.diff(moment(ref))) ){
                refMoment = lastYear;
            }

            result.start.assign('day', day);
            result.start.assign('month', month);
            result.start.imply('year', refMoment.year());
        }

        // Day of week
        if(match[WEEKDAY_GROUP]) {
            result.start.assign('weekday', DAYS_OFFSET[match[WEEKDAY_GROUP].toLowerCase()]);
        }

        result.tags['FRSlashDateFormatParser'] = true;
        return result;
    };
};
},{"../../result":151,"../parser":131,"moment":483}],126:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = /(\W|^)il y a\s*([0-9]+|une?)\s*(minutes?|heures?|semaines?|jours?|mois|années?|ans?)(?=(?:\W|$))/i;

exports.Parser = function FRTimeAgoFormatParser(){
    Parser.apply(this, arguments);

    this.pattern = function() {
        return PATTERN;
    }

    this.extract = function(text, ref, match, opt){

        if (match.index > 0 && text[match.index-1].match(/\w/)) return null;

        var text = match[0];
        text  = match[0].substr(match[1].length, match[0].length - match[1].length);
        index = match.index + match[1].length;

        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref,
        });
        result.tags['FRTimeAgoFormatParser'] = true;
        
        var num = parseInt(match[2]);
        if (isNaN(num)) {
          if (match[2].match(/demi/)) {
            num = 0.5;
          } else {
            num = 1;
          }
        }

        var date = moment(ref);

        if (match[3].match(/heure/) || match[3].match(/minute/)) {
            if (match[3].match(/heure/)) {

                date.add(-num, 'hour');

            } else if (match[3].match(/minute/)) {

                date.add(-num, 'minute');
            }

            result.start.imply('day', date.date());
            result.start.imply('month', date.month() + 1);
            result.start.imply('year', date.year());
            result.start.assign('hour', date.hour());
            result.start.assign('minute', date.minute());

            return result;
        }

        if (match[3].match(/semaine/)) {
            date.add(-num, 'week');

            result.start.imply('day', date.date());
            result.start.imply('month', date.month() + 1);
            result.start.imply('year', date.year());
            result.start.imply('weekday', date.day());
            return result;
        }

        if (match[3].match(/jour/)) {
            date.add(-num, 'd');
        }

        if (match[3].match(/mois/)) {
            date.add(-num, 'month');
        }

        if (match[3].match(/années?|ans?/)) {

            date.add(-num, 'year');
        }

        result.start.assign('day', date.date());
        result.start.assign('month', date.month() + 1);
        result.start.assign('year', date.year());
        return result;

    };
}

},{"../../result":151,"../parser":131,"moment":483}],127:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var ParsedComponents = require('../../result').ParsedComponents;

var FIRST_REG_PATTERN  = new RegExp("(^|\\s|T)" +
    "(?:(?:[àa])\\s*)?" +
    "(\\d{1,2}(?:h)?|midi|minuit)" +
    "(?:" +
        "(?:\\.|\\:|\\：|h)(\\d{1,2})(?:m)?" +
        "(?:" +
            "(?:\\:|\\：|m)(\\d{0,2})(?:s)?" +
        ")?" +
    ")?" +
    "(?:\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?))?" +
    "(?=\\W|$)", 'i');


var SECOND_REG_PATTERN = new RegExp("^\\s*" +
    "(\\-|\\–|\\~|\\〜|[àa]|\\?)\\s*" +
    "(\\d{1,2}(?:h)?)" +
    "(?:" +
        "(?:\\.|\\:|\\：|h)(\\d{1,2})(?:m)?" +
        "(?:" +
            "(?:\\.|\\:|\\：|m)(\\d{1,2})(?:s)?" +
        ")?" +
    ")?" +
    "(?:\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?))?" +
    "(?=\\W|$)", 'i');

var HOUR_GROUP    = 2;
var MINUTE_GROUP  = 3;
var SECOND_GROUP  = 4;
var AM_PM_HOUR_GROUP = 5;

exports.Parser = function FRTimeExpressionParser(){
    Parser.apply(this, arguments);

    this.pattern = function() { return FIRST_REG_PATTERN; }

    this.extract = function(text, ref, match, opt){

        // This pattern can be overlaped Ex. [12] AM, 1[2] AM
        if (match.index > 0 && text[match.index-1].match(/\w/)) return null;
        var refMoment = moment(ref);
        var result = new ParsedResult();
        result.ref = ref;
        result.index = match.index + match[1].length;
        result.text  = match[0].substring(match[1].length);
        result.tags['FRTimeExpressionParser'] = true;

        result.start.imply('day',   refMoment.date());
        result.start.imply('month', refMoment.month()+1);
        result.start.imply('year',  refMoment.year());

        var hour = 0;
        var minute = 0;
        var meridiem = -1;

        // ----- Second
        if(match[SECOND_GROUP] != null){
            var second = parseInt(match[SECOND_GROUP]);
            if(second >= 60) return null;

            result.start.assign('second', second);
        }

        // ----- Hours
        if (match[HOUR_GROUP].toLowerCase() == "midi"){
            meridiem = 1;
            hour = 12;
        } else if (match[HOUR_GROUP].toLowerCase() == "minuit") {
            meridiem = 0;
            hour = 0;
        } else {
            hour = parseInt(match[HOUR_GROUP]);
        }

        // ----- Minutes
        if(match[MINUTE_GROUP] != null){
            minute = parseInt(match[MINUTE_GROUP]);
        } else if(hour > 100) {
            minute = hour%100;
            hour   = parseInt(hour/100);
        }

        if(minute >= 60) {
            return null;
        }

        if(hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = 1;
        }

        // ----- AM & PM
        if(match[AM_PM_HOUR_GROUP] != null) {
            if(hour > 12) return null;
            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if(ampm == "a"){
                meridiem = 0;
                if(hour == 12) hour = 0;
            }

            if(ampm == "p"){
                meridiem = 1;
                if(hour != 12) hour += 12;
            }
        }
        result.start.assign('hour', hour);
        result.start.assign('minute', minute);
        if (meridiem >= 0) {
            result.start.assign('meridiem', meridiem);
        }

        // ==============================================================
        //                  Extracting the 'to' chunk
        // ==============================================================
        match = SECOND_REG_PATTERN.exec(text.substring(result.index + result.text.length));
        if (!match) {
            // Not accept number only result
            if (result.text.match(/^\d+$/)) {
                return null;
            }
            return result;
        }



        // Pattern "YY.YY -XXXX" is more like timezone offset
        if (match[0].match(/^\s*(\+|\-)\s*\d{3,4}$/)) {
            return result;
        }

        if(result.end == null){
            result.end = new ParsedComponents(null, result.start.date());
        }

        var hour = 0;
        var minute = 0;
        var meridiem = -1;

        // ----- Second
        if(match[SECOND_GROUP] != null){
            var second = parseInt(match[SECOND_GROUP]);
            if(second >= 60) return null;

            result.end.assign('second', second);
        }

        hour = parseInt(match[2]);

        // ----- Minute
        if (match[MINUTE_GROUP]!= null) {

            minute = parseInt(match[MINUTE_GROUP]);
            if(minute >= 60) return result;

        } else if (hour > 100) {

            minute = hour%100;
            hour   = parseInt(hour/100);
        }

        if(minute >= 60) {
            return null;
        }

        if(hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = 1;
        }

        // ----- AM & PM
        if (match[AM_PM_HOUR_GROUP] != null){

            if (hour > 12) return null;

            if(match[AM_PM_HOUR_GROUP][0].toLowerCase() == "a"){
                meridiem = 0;
                if(hour == 12) {
                    hour = 0;
                    if (!result.end.isCertain('day')) {
                        result.end.imply('day', result.end.get('day') + 1);
                    }
                }
            }

            if(match[AM_PM_HOUR_GROUP][0].toLowerCase() == "p"){
                meridiem = 1;
                if(hour != 12) hour += 12;
            }

            if (!result.start.isCertain('meridiem')) {
                if (meridiem == 0) {

                    result.start.imply('meridiem', 0);

                    if (result.start.get('hour') == 12) {
                        result.start.assign('hour', 0);
                    }

                } else {

                    result.start.imply('meridiem', 1);

                    if (result.start.get('hour') != 12) {
                        result.start.assign('hour', result.start.get('hour') + 12);
                    }
                }
            }

        } else if(hour >= 12) {
            meridiem = 1;
        }

        result.text = result.text + match[0];
        result.end.assign('hour', hour);
        result.end.assign('minute', minute);
        if (meridiem >= 0) {
            result.end.assign('meridiem', meridiem);
        }

        if (result.end.date().getTime() < result.start.date().getTime()) {
            result.end.imply('day', result.end.get('day') + 1)
        }

        return result;
    }
}

},{"../../result":151,"../parser":131,"moment":483}],128:[function(require,module,exports){
/*


*/
var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var updateParsedComponent = require('../en/ENWeekdayParser').updateParsedComponent;

var DAYS_OFFSET = { 'dimanche': 0, 'dim': 0, 'lundi': 1, 'lun': 1,'mardi': 2, 'mar':2, 'mercredi': 3, 'mer': 3,
    'jeudi': 4, 'jeu':4, 'vendredi': 5, 'ven': 5,'samedi': 6, 'sam': 6};

var PATTERN = new RegExp('(\\s|^)' +
    '(?:(?:\\,|\\(|\\（)\\s*)?' +
    '(?:(ce)\\s*)?' +
    '(' + Object.keys(DAYS_OFFSET).join('|') + ')' +
    '(?:\\s*(?:\\,|\\)|\\）))?' +
    '(?:\\s*(dernier|prochain)\\s*)?' +
    '(?=\\W|$)', 'i');

var PREFIX_GROUP = 2;
var WEEKDAY_GROUP = 3;
var POSTFIX_GROUP = 4;

exports.Parser = function FRWeekdayParser() {
    Parser.apply(this, arguments);

    this.pattern = function() { return PATTERN; };

    this.extract = function(text, ref, match, opt){
        var index = match.index + match[1].length;
        var text = match[0].substr(match[1].length, match[0].length - match[1].length);
        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref
        });

        var dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        var offset = DAYS_OFFSET[dayOfWeek];
        if(offset === undefined) return null;

        var modifier = null;
        var prefix = match[PREFIX_GROUP];
        var postfix = match[POSTFIX_GROUP];
        if (prefix || postfix) {
            var norm = prefix || postfix;
            norm = norm.toLowerCase();

            if(norm == 'dernier') {
                modifier = 'last';
            } else if(norm == 'prochain') {
                modifier = 'next';
            } else if(norm== 'ce') {
                modifier = 'this';
            }
        }

        updateParsedComponent(result, ref, offset, modifier);
        result.tags['FRWeekdayParser'] = true;
        return result;
    }
};


},{"../../result":151,"../en/ENWeekdayParser":113,"../parser":131,"moment":483}],129:[function(require,module,exports){
/*
    
    
*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = /今日|当日|昨日|明日|今夜|今夕|今晩|今朝/i;

exports.Parser = function JPCasualDateParser(){
    
    Parser.apply(this, arguments);
        
    this.pattern = function() { return PATTERN; }
    
    this.extract = function(text, ref, match, opt){ 
        
        var index = match.index;
        var text = match[0];
        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref,
        });

        var refMoment = moment(ref);
        var startMoment = refMoment.clone();

        if(text == '今夜' || text == '今夕' || text == '今晩'){
            // Normally means this coming midnight 
            result.start.imply('hour', 22);
            result.start.imply('meridiem', 1);

        } else if(text == '明日'){

            // Check not "Tomorrow" on late night
            if(refMoment.hour() > 4) {
                startMoment.add(1, 'day');
            }

        } else if(text == '昨日') {

            startMoment.add(-1, 'day');

        } else if (text.match("今朝")) {

            result.start.imply('hour', 6);
            result.start.imply('meridiem', 0);
        }

        result.start.assign('day', startMoment.date())
        result.start.assign('month', startMoment.month() + 1)
        result.start.assign('year', startMoment.year())
        result.tags['JPCasualDateParser'] = true;
        return result;
    }
}


},{"../../result":151,"../parser":131,"moment":483}],130:[function(require,module,exports){
/*
    
    
*/

var moment = require('moment');

var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var util  = require('../../utils/JP'); 
var PATTERN = /(?:(同|((昭和|平成)?([0-9０-９]{2,4})))年\s*)?([0-9０-９]{1,2})月\s*([0-9０-９]{1,2})日/i;
  
var YEAR_GROUP        = 2;
var ERA_GROUP         = 3;
var YEAR_NUMBER_GROUP = 4;
var MONTH_GROUP       = 5;
var DAY_GROUP         = 6;

exports.Parser = function JPStandardParser(){
    Parser.apply(this, arguments);
    
    this.pattern = function() { return PATTERN; }
    
    this.extract = function(text, ref, match, opt){ 

        var startMoment = moment(ref);
        var result = new ParsedResult({
            text: match[0],
            index: match.index,
            ref: ref,
        });
        
        var month = match[MONTH_GROUP];
        month = util.toHankaku(month);
        month = parseInt(month);

        var day = match[DAY_GROUP];
        day = util.toHankaku(day);
        day = parseInt(day);

        startMoment.set('date', day);
        startMoment.set('month', month - 1);
        result.start.assign('day', startMoment.date());
        result.start.assign('month', startMoment.month() + 1);
            
        if (!match[YEAR_GROUP]) {
            
            //Find the most appropriated year
            startMoment.year(moment(ref).year());
            var nextYear = startMoment.clone().add(1, 'y');
            var lastYear = startMoment.clone().add(-1, 'y');
            if( Math.abs(nextYear.diff(moment(ref))) < Math.abs(startMoment.diff(moment(ref))) ){  
                startMoment = nextYear;
            }
            else if( Math.abs(lastYear.diff(moment(ref))) < Math.abs(startMoment.diff(moment(ref))) ){ 
                startMoment = lastYear;
            }

            result.start.assign('day', startMoment.date());
            result.start.assign('month', startMoment.month() + 1);
            result.start.imply('year', startMoment.year());

        } else if (match[YEAR_GROUP].match('同年')) {

            result.start.assign('year', startMoment.year());

        } else {
            var year = match[YEAR_NUMBER_GROUP];
            year = util.toHankaku(year);
            year = parseInt(year);

            if (match[ERA_GROUP] == '平成') {
                year += 1988;
            } else if (match[ERA_GROUP] == '昭和') {
                year += 1925;
            }

            result.start.assign('year', year);
        }
        

        result.tags['JPStandardParser'] = true;
        return result;
    };

}


},{"../../result":151,"../../utils/JP":156,"../parser":131,"moment":483}],131:[function(require,module,exports){

function Parser(config) {

    config = config || {};
    var strictMode = config.strict;

    this.isStrictMode = function() { return (strictMode == true) };

    this.pattern = function() { return /./i; }

    this.extract = function(text, ref, match, opt){ return null; }

    this.execute = function(text, ref, opt) {

        var results = [];
        var regex = this.pattern();

        var remainingText = text;
        var match = regex.exec(remainingText);

        while (match) {

            // Calculate match index on the full text;
            match.index += text.length - remainingText.length;

            var result = this.extract(text, ref, match, opt);
            if (result) {

                // If success, start from the end of the result
                remainingText = text.substring(result.index + result.text.length);

                if (!this.isStrictMode() || result.hasPossibleDates()) {
                    results.push(result);
                }

            } else {
                // If fail, move on by 1
                remainingText = text.substring(match.index + 1);
            }

            match = regex.exec(remainingText);
        }

        if (this.refiners) {
            this.refiners.forEach(function () {
                results = refiner.refine(results, text, options);
            });
        }

        return results;
    }
}

exports.Parser = Parser;

exports.ENISOFormatParser = require('./en/ENISOFormatParser').Parser;
exports.ENDeadlineFormatParser = require('./en/ENDeadlineFormatParser').Parser;
exports.ENRelativeDateFormatParser = require('./en/ENRelativeDateFormatParser').Parser;
exports.ENMonthNameLittleEndianParser = require('./en/ENMonthNameLittleEndianParser').Parser;
exports.ENMonthNameMiddleEndianParser = require('./en/ENMonthNameMiddleEndianParser').Parser;
exports.ENMonthNameParser = require('./en/ENMonthNameParser').Parser;
exports.ENSlashDateFormatParser = require('./en/ENSlashDateFormatParser').Parser;
exports.ENSlashDateFormatStartWithYearParser = require('./en/ENSlashDateFormatStartWithYearParser').Parser;
exports.ENSlashMonthFormatParser = require('./en/ENSlashMonthFormatParser').Parser;
exports.ENTimeAgoFormatParser = require('./en/ENTimeAgoFormatParser').Parser;
exports.ENTimeExpressionParser = require('./en/ENTimeExpressionParser').Parser;
exports.ENTimeLaterFormatParser = require('./en/ENTimeLaterFormatParser').Parser;
exports.ENWeekdayParser = require('./en/ENWeekdayParser').Parser;
exports.ENCasualDateParser = require('./en/ENCasualDateParser').Parser;
exports.ENCasualTimeParser = require('./en/ENCasualTimeParser').Parser;

exports.JPStandardParser = require('./ja/JPStandardParser').Parser;
exports.JPCasualDateParser = require('./ja/JPCasualDateParser').Parser;

exports.ESCasualDateParser = require('./es/ESCasualDateParser').Parser;
exports.ESDeadlineFormatParser = require('./es/ESDeadlineFormatParser').Parser;
exports.ESTimeAgoFormatParser = require('./es/ESTimeAgoFormatParser').Parser;
exports.ESTimeExpressionParser = require('./es/ESTimeExpressionParser').Parser;
exports.ESWeekdayParser = require('./es/ESWeekdayParser').Parser;
exports.ESMonthNameLittleEndianParser = require('./es/ESMonthNameLittleEndianParser').Parser;
exports.ESSlashDateFormatParser = require('./es/ESSlashDateFormatParser').Parser;

exports.FRCasualDateParser = require('./fr/FRCasualDateParser').Parser;
exports.FRDeadlineFormatParser = require('./fr/FRDeadlineFormatParser').Parser;
exports.FRMonthNameLittleEndianParser = require('./fr/FRMonthNameLittleEndianParser').Parser;
exports.FRSlashDateFormatParser = require('./fr/FRSlashDateFormatParser').Parser;
exports.FRTimeAgoFormatParser = require('./fr/FRTimeAgoFormatParser').Parser;
exports.FRTimeExpressionParser = require('./fr/FRTimeExpressionParser').Parser;
exports.FRWeekdayParser = require('./fr/FRWeekdayParser').Parser;
exports.FRRelativeDateFormatParser = require('./fr/FRRelativeDateFormatParser').Parser;

exports.ZHHantDateParser = require('./zh-Hant/ZHHantDateParser').Parser;
exports.ZHHantWeekdayParser = require('./zh-Hant/ZHHantWeekdayParser').Parser;
exports.ZHHantTimeExpressionParser = require('./zh-Hant/ZHHantTimeExpressionParser').Parser;
exports.ZHHantCasualDateParser = require('./zh-Hant/ZHHantCasualDateParser').Parser;
exports.ZHHantDeadlineFormatParser = require('./zh-Hant/ZHHantDeadlineFormatParser').Parser;

exports.DEDeadlineFormatParser = require('./de/DEDeadlineFormatParser').Parser;
exports.DEMonthNameLittleEndianParser = require('./de/DEMonthNameLittleEndianParser').Parser;
exports.DEMonthNameParser = require('./de/DEMonthNameParser').Parser;
exports.DESlashDateFormatParser = require('./de/DESlashDateFormatParser').Parser;
exports.DETimeAgoFormatParser = require('./de/DETimeAgoFormatParser').Parser;
exports.DETimeExpressionParser = require('./de/DETimeExpressionParser').Parser;
exports.DEWeekdayParser = require('./de/DEWeekdayParser').Parser;
exports.DECasualDateParser = require('./de/DECasualDateParser').Parser;

},{"./de/DECasualDateParser":91,"./de/DEDeadlineFormatParser":92,"./de/DEMonthNameLittleEndianParser":93,"./de/DEMonthNameParser":94,"./de/DESlashDateFormatParser":95,"./de/DETimeAgoFormatParser":96,"./de/DETimeExpressionParser":97,"./de/DEWeekdayParser":98,"./en/ENCasualDateParser":99,"./en/ENCasualTimeParser":100,"./en/ENDeadlineFormatParser":101,"./en/ENISOFormatParser":102,"./en/ENMonthNameLittleEndianParser":103,"./en/ENMonthNameMiddleEndianParser":104,"./en/ENMonthNameParser":105,"./en/ENRelativeDateFormatParser":106,"./en/ENSlashDateFormatParser":107,"./en/ENSlashDateFormatStartWithYearParser":108,"./en/ENSlashMonthFormatParser":109,"./en/ENTimeAgoFormatParser":110,"./en/ENTimeExpressionParser":111,"./en/ENTimeLaterFormatParser":112,"./en/ENWeekdayParser":113,"./es/ESCasualDateParser":114,"./es/ESDeadlineFormatParser":115,"./es/ESMonthNameLittleEndianParser":116,"./es/ESSlashDateFormatParser":117,"./es/ESTimeAgoFormatParser":118,"./es/ESTimeExpressionParser":119,"./es/ESWeekdayParser":120,"./fr/FRCasualDateParser":121,"./fr/FRDeadlineFormatParser":122,"./fr/FRMonthNameLittleEndianParser":123,"./fr/FRRelativeDateFormatParser":124,"./fr/FRSlashDateFormatParser":125,"./fr/FRTimeAgoFormatParser":126,"./fr/FRTimeExpressionParser":127,"./fr/FRWeekdayParser":128,"./ja/JPCasualDateParser":129,"./ja/JPStandardParser":130,"./zh-Hant/ZHHantCasualDateParser":132,"./zh-Hant/ZHHantDateParser":133,"./zh-Hant/ZHHantDeadlineFormatParser":134,"./zh-Hant/ZHHantTimeExpressionParser":135,"./zh-Hant/ZHHantWeekdayParser":136}],132:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var PATTERN = new RegExp(
    '(而家|立(?:刻|即)|即刻)|' +
    '(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|' +
    '(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|' +
    '(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)' +
    '(?:[\\s|,|，]*)' +
    '(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?', 'i');

var NOW_GROUP = 1;
var DAY_GROUP_1 = 2;
var TIME_GROUP_1 = 3;
var TIME_GROUP_2 = 4;
var DAY_GROUP_3 = 5;
var TIME_GROUP_3 = 6;

exports.Parser = function ZHHantCasualDateParser() {

    Parser.apply(this, arguments);

    this.pattern = function() {
        return PATTERN;
    };

    this.extract = function(text, ref, match, opt) {
        text = match[0];
        var index = match.index;
        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref,
        });

        var refMoment = moment(ref);
        var startMoment = refMoment.clone();

        if (match[NOW_GROUP]) {
            result.start.imply('hour', refMoment.hour());
            result.start.imply('minute', refMoment.minute());
            result.start.imply('second', refMoment.second());
            result.start.imply('millisecond', refMoment.millisecond());
        } else if (match[DAY_GROUP_1]) {
            var day1 = match[DAY_GROUP_1];
            var time1 = match[TIME_GROUP_1];

            if (day1 == '明' || day1 == '聽') {
              // Check not "Tomorrow" on late night
              if(refMoment.hour() > 1) {
                  startMoment.add(1, 'day');
              }
            } else if (day1 == '昨' || day1 == '尋' || day1 == '琴') {
                startMoment.add(-1, 'day');
            } else if (day1 == "前"){
                startMoment.add(-2, 'day');
            } else if (day1 == "大前"){
                startMoment.add(-3, 'day');
            } else if ( day1 == "後"){
                startMoment.add(2, 'day');
            } else if (day1 == "大後"){
                startMoment.add(3, 'day');
            }

            if (time1 == '早' || time1 == '朝') {
                result.start.imply('hour', 6);
            } else if (time1 == '晚') {
                result.start.imply('hour', 22);
                result.start.imply('meridiem', 1);
            }

        } else if (match[TIME_GROUP_2]) {
            var timeString2 = match[TIME_GROUP_2];
            var time2 = timeString2[0];
            if (time2 == '早' || time2 == '朝' || time2 == '上') {
                result.start.imply('hour', 6);
            } else if (time2 == '下' || time2 == '晏') {
                result.start.imply('hour', 15);
                result.start.imply('meridiem', 1);
            } else if (time2 == '中') {
                result.start.imply('hour', 12);
                result.start.imply('meridiem', 1);
            } else if (time2 == '夜' || time2 == '晚') {
                result.start.imply('hour', 22);
                result.start.imply('meridiem', 1);
            } else if (time2 == '凌') {
                result.start.imply('hour', 0);
            }

        } else if (match[DAY_GROUP_3]) {
            var day3 = match[DAY_GROUP_3];

            if (day3 == '明' || day3 == '聽') {
              // Check not "Tomorrow" on late night
              if(refMoment.hour() > 1) {
                  startMoment.add(1, 'day');
              }
            } else if (day3 == '昨' || day3 == '尋' || day3 == '琴') {
                startMoment.add(-1, 'day');
            } else if (day3 == "前"){
                startMoment.add(-2, 'day');
            } else if (day3 == "大前"){
                startMoment.add(-3, 'day');
            } else if (day3 == "後"){
                startMoment.add(2, 'day');
            } else if (day3 == "大後"){
                startMoment.add(3, 'day');
            }


            var timeString3 = match[TIME_GROUP_3];
            if (timeString3) {
                var time3 = timeString3[0];
                if (time3 == '早' || time3 == '朝' || time3 == '上') {
                    result.start.imply('hour', 6);
                } else if (time3 == '下' || time3 == '晏') {
                    result.start.imply('hour', 15);
                    result.start.imply('meridiem', 1);
                } else if (time3 == '中') {
                    result.start.imply('hour', 12);
                    result.start.imply('meridiem', 1);
                } else if (time3 == '夜' || time3 == '晚') {
                    result.start.imply('hour', 22);
                    result.start.imply('meridiem', 1);
                } else if (time3 == '凌') {
                    result.start.imply('hour', 0);
                }
            }
        }

        result.start.assign('day', startMoment.date())
        result.start.assign('month', startMoment.month() + 1)
        result.start.assign('year', startMoment.year())
        result.tags.ZHHantCasualDateParser = true;
        return result;
    };
};

},{"../../result":151,"../parser":131,"moment":483}],133:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var util = require('../../utils/ZH-Hant.js');

var PATTERN = new RegExp(
    '(\\d{2,4}|[' + Object.keys(util.NUMBER).join('') + ']{2,4})?' +
    '(?:\\s*)' +
    '(?:年)?' +
    '(?:[\\s|,|，]*)' +
    '(\\d{1,2}|[' + Object.keys(util.NUMBER).join('') + ']{1,2})' +
    '(?:\\s*)' +
    '(?:月)' +
    '(?:\\s*)' +
    '(\\d{1,2}|[' + Object.keys(util.NUMBER).join('') + ']{1,2})?' +
    '(?:\\s*)' +
    '(?:日|號)?'
);

var YEAR_GROUP = 1;
var MONTH_GROUP = 2;
var DAY_GROUP = 3;

exports.Parser = function ZHHantDateParser() {

    Parser.apply(this, arguments);

    this.pattern = function() {
        return PATTERN;
    };

    this.extract = function(text, ref, match, opt) {
        var startMoment = moment(ref);
        var result = new ParsedResult({
            text: match[0],
            index: match.index,
            ref: ref,
        });

        //Month
        var month = parseInt(match[MONTH_GROUP]);
        if (isNaN(month)) month = util.zhStringToNumber(match[MONTH_GROUP]);
        result.start.assign('month', month);

        //Day
        if (match[DAY_GROUP]) {
            var day = parseInt(match[DAY_GROUP]);
            if (isNaN(day)) day = util.zhStringToNumber(match[DAY_GROUP]);
            result.start.assign('day', day);
        } else {
            result.start.imply('day', startMoment.date());
        }

        //Year
        if (match[YEAR_GROUP]) {
            var year = parseInt(match[YEAR_GROUP]);
            if (isNaN(year)) year = util.zhStringToYear(match[YEAR_GROUP]);
            result.start.assign('year', year);
        } else {
            result.start.imply('year', startMoment.year());
        }

        result.tags.ZHHantDateParser = true;
        return result;
    };
};

},{"../../result":151,"../../utils/ZH-Hant.js":157,"../parser":131,"moment":483}],134:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;

var util = require('../../utils/ZH-Hant.js');

var PATTERN = new RegExp(
    '(\\d+|[' + Object.keys(util.NUMBER).join('') + ']+|半|幾)(?:\\s*)' +
    '(?:個)?' +
    '(秒(?:鐘)?|分鐘|小時|鐘|日|天|星期|禮拜|月|年)' +
    '(?:(?:之|過)?後|(?:之)?內)', 'i'
);

var NUMBER_GROUP = 1;
var UNIT_GROUP = 2;

exports.Parser = function ZHHantCasualDateParser() {

    Parser.apply(this, arguments);

    this.pattern = function() {
        return PATTERN;
    };

    this.extract = function(text, ref, match, opt) {
      var index = match.index;
      text  = match[0];

      var result = new ParsedResult({
          index: index,
          text: text,
          ref: ref
      });

      var number = parseInt(match[NUMBER_GROUP]);
      if (isNaN(number)){
        number = util.zhStringToNumber(match[NUMBER_GROUP]);
      }

      if (isNaN(number)){
        var string = match[NUMBER_GROUP];
        if (string === '幾'){
          number = 3;
        }else if(string === '半'){
          number = 0.5;
        }else{

          //just in case
          return null;
        }
      }

      var date = moment(ref);
      var unit = match[UNIT_GROUP];
      var unitAbbr = unit[0];

      if (unitAbbr.match(/[日天星禮月年]/)){
        if(unitAbbr == '日' || unitAbbr == '天'){
          date.add(number, 'd');
        }else if(unitAbbr == '星' || unitAbbr == '禮'){
          date.add(number * 7, 'd');
        }else if(unitAbbr == '月'){
          date.add(number, 'month');
        }else if(unitAbbr == '年'){
          date.add(number, 'year');
        }

        result.start.assign('year', date.year());
        result.start.assign('month', date.month() + 1);
        result.start.assign('day', date.date());
        return result;
      }

      if(unitAbbr == '秒'){
        date.add(number, 'second');
      }else if(unitAbbr == '分'){
        date.add(number, 'minute');
      }else if(unitAbbr == '小' || unitAbbr == '鐘'){
        date.add(number, 'hour');
      }

      result.start.imply('year', date.year());
      result.start.imply('month', date.month() + 1);
      result.start.imply('day', date.date());
      result.start.assign('hour', date.hour());
      result.start.assign('minute', date.minute());
      result.start.assign('second', date.second());
      result.tags.ZHHantDeadlineFormatParser = true;
      return result;
    };
};

},{"../../result":151,"../../utils/ZH-Hant.js":157,"../parser":131,"moment":483}],135:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var ParsedComponents = require('../../result').ParsedComponents;

var util = require('../../utils/ZH-Hant.js');

var patternString1 = '(?:由|從|自)?' +
    '(?:' +
    '(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|' +
    '(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|' +
    '(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)' +
    '(?:[\\s,，]*)' +
    '(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?' +
    ')?' +
    '(?:[\\s,，]*)' +
    '(?:(\\d+|[' + Object.keys(util.NUMBER).join('') + ']+)(?:\\s*)(?:點|時|:|：)' +
    '(?:\\s*)' +
    '(\\d+|半|正|整|[' + Object.keys(util.NUMBER).join('') + ']+)?(?:\\s*)(?:分|:|：)?' +
    '(?:\\s*)' +
    '(\\d+|[' + Object.keys(util.NUMBER).join('') + ']+)?(?:\\s*)(?:秒)?)' +
    '(?:\\s*(A\.M\.|P\.M\.|AM?|PM?))?';

var patternString2 = '(?:\\s*(?:到|至|\\-|\\–|\\~|\\〜)\\s*)' +
    '(?:' +
    '(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|' +
    '(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|' +
    '(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)' +
    '(?:[\\s,，]*)' +
    '(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?' +
    ')?' +
    '(?:[\\s,，]*)' +
    '(?:(\\d+|[' + Object.keys(util.NUMBER).join('') + ']+)(?:\\s*)(?:點|時|:|：)' +
    '(?:\\s*)' +
    '(\\d+|半|正|整|[' + Object.keys(util.NUMBER).join('') + ']+)?(?:\\s*)(?:分|:|：)?' +
    '(?:\\s*)' +
    '(\\d+|[' + Object.keys(util.NUMBER).join('') + ']+)?(?:\\s*)(?:秒)?)' +
    '(?:\\s*(A\.M\.|P\.M\.|AM?|PM?))?';

var FIRST_REG_PATTERN = new RegExp(patternString1, 'i');
var SECOND_REG_PATTERN = new RegExp(patternString2, 'i');

var DAY_GROUP_1 = 1;
var ZH_AM_PM_HOUR_GROUP_1 = 2;
var ZH_AM_PM_HOUR_GROUP_2 = 3;
var DAY_GROUP_3 = 4;
var ZH_AM_PM_HOUR_GROUP_3 = 5;
var HOUR_GROUP = 6;
var MINUTE_GROUP = 7;
var SECOND_GROUP = 8;
var AM_PM_HOUR_GROUP = 9;

exports.Parser = function ZHHantTimeExpressionParser() {

    Parser.apply(this, arguments);

    this.pattern = function() {
        return FIRST_REG_PATTERN;
    };

    this.extract = function(text, ref, match, opt) {

        // This pattern can be overlaped Ex. [12] AM, 1[2] AM
        if (match.index > 0 && text[match.index - 1].match(/\w/)) return null;
        var refMoment = moment(ref);
        var result = new ParsedResult();
        result.ref = ref;
        result.index = match.index;
        result.text = match[0];
        result.tags.ZHTimeExpressionParser = true;

        var startMoment = refMoment.clone();

        // ----- Day
        if (match[DAY_GROUP_1]) {
            var day1 = match[DAY_GROUP_1];
            if (day1 == '明' || day1 == '聽') {
              // Check not "Tomorrow" on late night
              if(refMoment.hour() > 1) {
                  startMoment.add(1, 'day');
              }
            } else if (day1 == '昨' || day1 == '尋' || day1 == '琴') {
                startMoment.add(-1, 'day');
            } else if (day1 == "前"){
                startMoment.add(-2, 'day');
            } else if (day1 == "大前"){
                startMoment.add(-3, 'day');
            } else if (day1 == "後"){
                startMoment.add(2, 'day');
            } else if (day1 == "大後"){
                startMoment.add(3, 'day');
            }
            result.start.assign('day', startMoment.date());
            result.start.assign('month', startMoment.month() + 1);
            result.start.assign('year', startMoment.year());
        } else if (match[DAY_GROUP_3]) {
            var day3 = match[DAY_GROUP_3];
            if (day3 == '明' || day3 == '聽') {
                startMoment.add(1, 'day');
            } else if (day3 == '昨' || day3 == '尋' || day3 == '琴') {
                startMoment.add(-1, 'day');
            } else if (day3 == "前"){
                startMoment.add(-2, 'day');
            } else if (day3 == "大前"){
                startMoment.add(-3, 'day');
            } else if (day3 == "後"){
                startMoment.add(2, 'day');
            } else if (day3 == "大後"){
                startMoment.add(3, 'day');
            }
            result.start.assign('day', startMoment.date());
            result.start.assign('month', startMoment.month() + 1);
            result.start.assign('year', startMoment.year());
        } else {
            result.start.imply('day', startMoment.date());
            result.start.imply('month', startMoment.month() + 1);
            result.start.imply('year', startMoment.year());
        }

        var hour = 0;
        var minute = 0;
        var meridiem = -1;

        // ----- Second
        if (match[SECOND_GROUP]) {
            var second = parseInt(match[SECOND_GROUP]);
            if (isNaN(second)) {
                second = util.zhStringToNumber(match[SECOND_GROUP]);
            }
            if (second >= 60) return null;
            result.start.assign('second', second);
        }

        hour = parseInt(match[HOUR_GROUP]);
        if (isNaN(hour)) {
            hour = util.zhStringToNumber(match[HOUR_GROUP]);
        }

        // ----- Minutes
        if (match[MINUTE_GROUP]) {
            if (match[MINUTE_GROUP] == '半') {
                minute = 30;
            } else if (match[MINUTE_GROUP] == '正' || match[MINUTE_GROUP] == '整') {
                minute = 0;
            } else {
                minute = parseInt(match[MINUTE_GROUP]);
                if (isNaN(minute)) {
                    minute = util.zhStringToNumber(match[MINUTE_GROUP]);
                }
            }
        } else if (hour > 100) {
            minute = hour % 100;
            hour = parseInt(hour / 100);
        }

        if (minute >= 60) {
            return null;
        }

        if (hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = 1;
        }

        // ----- AM & PM
        if (match[AM_PM_HOUR_GROUP]) {
            if (hour > 12) return null;
            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if (ampm == "a") {
                meridiem = 0;
                if (hour == 12) hour = 0;
            }

            if (ampm == "p") {
                meridiem = 1;
                if (hour != 12) hour += 12;
            }
        } else if (match[ZH_AM_PM_HOUR_GROUP_1]) {
            var zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];
            var zhAMPM1 = zhAMPMString1[0];
            if (zhAMPM1 == '朝' || zhAMPM1 == '早') {
                meridiem = 0;
                if (hour == 12) hour = 0;
            } else if (zhAMPM1 == '晚') {
                meridiem = 1;
                if (hour != 12) hour += 12;
            }
        } else if (match[ZH_AM_PM_HOUR_GROUP_2]) {
            var zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];
            var zhAMPM2 = zhAMPMString2[0];
            if (zhAMPM2 == '上' || zhAMPM2 == '朝' || zhAMPM2 == '早' || zhAMPM2 == '凌') {
                meridiem = 0;
                if (hour == 12) hour = 0;
            } else if (zhAMPM2 == '下' || zhAMPM2 == '晏' || zhAMPM2 == '晚') {
                meridiem = 1;
                if (hour != 12) hour += 12;
            }
        } else if (match[ZH_AM_PM_HOUR_GROUP_3]) {
            var zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];
            var zhAMPM3 = zhAMPMString3[0];
            if (zhAMPM3 == '上' || zhAMPM3 == '朝' || zhAMPM3 == '早' || zhAMPM3 == '凌') {
                meridiem = 0;
                if (hour == 12) hour = 0;
            } else if (zhAMPM3 == '下' || zhAMPM3 == '晏' || zhAMPM3 == '晚') {
                meridiem = 1;
                if (hour != 12) hour += 12;
            }
        }

        result.start.assign('hour', hour);
        result.start.assign('minute', minute);

        if (meridiem >= 0) {
            result.start.assign('meridiem', meridiem);
        } else {
            if (hour < 12) {
                result.start.imply('meridiem', 0);
            } else {
                result.start.imply('meridiem', 1);
            }
        }

        // ==============================================================
        //                  Extracting the 'to' chunk
        // ==============================================================

        match = SECOND_REG_PATTERN.exec(text.substring(result.index + result.text.length));
        if (!match) {
            // Not accept number only result
            if (result.text.match(/^\d+$/)) {
                return null;
            }
            return result;
        }

        var endMoment = startMoment.clone();
        result.end = new ParsedComponents(null, null);

        // ----- Day
        if (match[DAY_GROUP_1]) {
            var day1 = match[DAY_GROUP_1];
            if (day1 == '明' || day1 == '聽') {
              // Check not "Tomorrow" on late night
              if(refMoment.hour() > 1) {
                  endMoment.add(1, 'day');
              }
            } else if (day1 == '昨' || day1 == '尋' || day1 == '琴') {
                endMoment.add(-1, 'day');
            } else if (day1 == "前"){
                endMoment.add(-2, 'day');
            } else if (day1 == "大前"){
                endMoment.add(-3, 'day');
            } else if (day1 == "後"){
                endMoment.add(2, 'day');
            } else if (day1 == "大後"){
                endMoment.add(3, 'day');
            }
            result.end.assign('day', endMoment.date());
            result.end.assign('month', endMoment.month() + 1);
            result.end.assign('year', endMoment.year());
        } else if (match[DAY_GROUP_3]) {
            var day3 = match[DAY_GROUP_3];
            if (day3 == '明' || day3 == '聽') {
                endMoment.add(1, 'day');
            } else if (day3 == '昨' || day3 == '尋' || day3 == '琴') {
                endMoment.add(-1, 'day');
            } else if (day3 == "前"){
                endMoment.add(-2, 'day');
            } else if (day3 == "大前"){
                endMoment.add(-3, 'day');
            } else if (day3 == "後"){
                endMoment.add(2, 'day');
            } else if (day3 == "大後"){
                endMoment.add(3, 'day');
            }
            result.end.assign('day', endMoment.date());
            result.end.assign('month', endMoment.month() + 1);
            result.end.assign('year', endMoment.year());
        } else {
            result.end.imply('day', endMoment.date());
            result.end.imply('month', endMoment.month() + 1);
            result.end.imply('year', endMoment.year());
        }

        hour = 0;
        minute = 0;
        meridiem = -1;

        // ----- Second
        if (match[SECOND_GROUP]) {
            var second = parseInt(match[SECOND_GROUP]);
            if (isNaN(second)) {
                second = util.zhStringToNumber(match[SECOND_GROUP]);
            }

            if (second >= 60) return null;
            result.end.assign('second', second);
        }

        hour = parseInt(match[HOUR_GROUP]);
        if (isNaN(hour)) {
            hour = util.zhStringToNumber(match[HOUR_GROUP]);
        }

        // ----- Minutes
        if (match[MINUTE_GROUP]) {
            if (match[MINUTE_GROUP] == '半') {
                minute = 30;
            } else if (match[MINUTE_GROUP] == '正' || match[MINUTE_GROUP] == '整') {
                minute = 0;
            } else {
                minute = parseInt(match[MINUTE_GROUP]);
                if (isNaN(minute)) {
                    minute = util.zhStringToNumber(match[MINUTE_GROUP]);
                }
            }
        } else if (hour > 100) {
            minute = hour % 100;
            hour = parseInt(hour / 100);
        }

        if (minute >= 60) {
            return null;
        }

        if (hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = 1;
        }

        // ----- AM & PM
        if (match[AM_PM_HOUR_GROUP]) {
            if (hour > 12) return null;
            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if (ampm == "a") {
                meridiem = 0;
                if (hour == 12) hour = 0;
            }

            if (ampm == "p") {
                meridiem = 1;
                if (hour != 12) hour += 12;
            }

            if (!result.start.isCertain('meridiem')) {
                if (meridiem == 0) {

                    result.start.imply('meridiem', 0);

                    if (result.start.get('hour') == 12) {
                        result.start.assign('hour', 0);
                    }

                } else {

                    result.start.imply('meridiem', 1);

                    if (result.start.get('hour') != 12) {
                        result.start.assign('hour', result.start.get('hour') + 12);
                    }
                }
            }

        } else if (match[ZH_AM_PM_HOUR_GROUP_1]) {
            var zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];
            var zhAMPM1 = zhAMPMString1[0];
            if (zhAMPM1 == '朝' || zhAMPM1 == '早') {
                meridiem = 0;
                if (hour == 12) hour = 0;
            } else if (zhAMPM1 == '晚') {
                meridiem = 1;
                if (hour != 12) hour += 12;
            }
        } else if (match[ZH_AM_PM_HOUR_GROUP_2]) {
            var zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];
            var zhAMPM2 = zhAMPMString2[0];
            if (zhAMPM2 == '上' || zhAMPM2 == '朝' || zhAMPM2 == '早' || zhAMPM2 == '凌') {
                meridiem = 0;
                if (hour == 12) hour = 0;
            } else if (zhAMPM2 == '下' || zhAMPM2 == '晏' || zhAMPM2 == '晚') {
                meridiem = 1;
                if (hour != 12) hour += 12;
            }
        } else if (match[ZH_AM_PM_HOUR_GROUP_3]) {
            var zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];
            var zhAMPM3 = zhAMPMString3[0];
            if (zhAMPM3 == '上' || zhAMPM3 == '朝' || zhAMPM3 == '早' || zhAMPM3 == '凌') {
                meridiem = 0;
                if (hour == 12) hour = 0;
            } else if (zhAMPM3 == '下' || zhAMPM3 == '晏' || zhAMPM3 == '晚') {
                meridiem = 1;
                if (hour != 12) hour += 12;
            }
        }

        result.text = result.text + match[0];
        result.end.assign('hour', hour);
        result.end.assign('minute', minute);
        if (meridiem >= 0) {
            result.end.assign('meridiem', meridiem);
        } else {
            var startAtPM = result.start.isCertain('meridiem') && result.start.get('meridiem') == 1;
            if (startAtPM && result.start.get('hour') > hour) {
                // 10pm - 1 (am)
                result.end.imply('meridiem', 0);

            } else if (hour > 12) {
                result.end.imply('meridiem', 1);
            }
        }

        if (result.end.date().getTime() < result.start.date().getTime()) {
            result.end.imply('day', result.end.get('day') + 1)
        }

        return result;
    };
};

},{"../../result":151,"../../utils/ZH-Hant.js":157,"../parser":131,"moment":483}],136:[function(require,module,exports){
/*


*/

var moment = require('moment');
var Parser = require('../parser').Parser;
var ParsedResult = require('../../result').ParsedResult;
var updateParsedComponent = require('../en/ENWeekdayParser').updateParsedComponent;

var util = require('../../utils/ZH-Hant.js');

var PATTERN = new RegExp(
    '(上|今|下|這|呢)?' +
    '(?:個)?' +
    '(?:星期|禮拜)' +
    '(' + Object.keys(util.WEEKDAY_OFFSET).join('|') + ')'
);

var PREFIX_GROUP = 1;
var WEEKDAY_GROUP = 2;

exports.Parser = function ZHHantWeekdayParser() {

    Parser.apply(this, arguments);

    this.pattern = function() {
        return PATTERN;
    };

    this.extract = function(text, ref, match, opt) {
        var index = match.index;
        text = match[0];
        var result = new ParsedResult({
            index: index,
            text: text,
            ref: ref
        });

        var dayOfWeek = match[WEEKDAY_GROUP];
        var offset = util.WEEKDAY_OFFSET[dayOfWeek];
        if(offset === undefined) return null;

        var modifier = null;
        var prefix = match[PREFIX_GROUP];

        if(prefix == '上') {
            modifier = 'last';
        } else if(prefix == '下') {
            modifier = 'next';
        } else if(prefix == '今' || prefix == '這' || prefix == '呢') {
            modifier = 'this';
        }

        updateParsedComponent(result, ref, offset, modifier);
        result.tags['ZHHantWeekdayParser'] = true;
        return result;
    };
};

},{"../../result":151,"../../utils/ZH-Hant.js":157,"../en/ENWeekdayParser":113,"../parser":131,"moment":483}],137:[function(require,module,exports){
/*

*/
var Refiner = require('./refiner').Refiner;

// Map ABBR -> Offset in minute
var TIMEZONE_NAME_PATTERN = new RegExp("^\\s*\\(?([A-Z]{2,4})\\)?(?=\\W|$)", 'i');
var DEFAULT_TIMEZONE_ABBR_MAP = {
    "ACDT":630,"ACST":570,"ADT":-180,"AEDT":660,"AEST":600,"AFT":270,"AKDT":-480,"AKST":-540,"ALMT":360,"AMST":-180,"AMT":-240,"ANAST":720,"ANAT":720,"AQTT":300,"ART":-180,"AST":-240,"AWDT":540,"AWST":480,"AZOST":0,"AZOT":-60,"AZST":300,"AZT":240,"BNT":480,"BOT":-240,"BRST":-120,"BRT":-180,"BST":60,"BTT":360,"CAST":480,"CAT":120,"CCT":390,"CDT":-300,"CEST":120,"CET":60,"CHADT":825,"CHAST":765,"CKT":-600,"CLST":-180,"CLT":-240,"COT":-300,"CST":-360,"CVT":-60,"CXT":420,"ChST":600,"DAVT":420,"EASST":-300,"EAST":-360,"EAT":180,"ECT":-300,"EDT":-240,"EEST":180,"EET":120,"EGST":0,"EGT":-60,"EST":-300,"ET":-300,"FJST":780,"FJT":720,"FKST":-180,"FKT":-240,"FNT":-120,"GALT":-360,"GAMT":-540,"GET":240,"GFT":-180,"GILT":720,"GMT":0,"GST":240,"GYT":-240,"HAA":-180,"HAC":-300,"HADT":-540,"HAE":-240,"HAP":-420,"HAR":-360,"HAST":-600,"HAT":-90,"HAY":-480,"HKT":480,"HLV":-210,"HNA":-240,"HNC":-360,"HNE":-300,"HNP":-480,"HNR":-420,"HNT":-150,"HNY":-540,"HOVT":420,"ICT":420,"IDT":180,"IOT":360,"IRDT":270,"IRKST":540,"IRKT":540,"IRST":210,"IST":330,"JST":540,"KGT":360,"KRAST":480,"KRAT":480,"KST":540,"KUYT":240,"LHDT":660,"LHST":630,"LINT":840,"MAGST":720,"MAGT":720,"MART":-510,"MAWT":300,"MDT":-360,"MESZ":120,"MEZ":60,"MHT":720,"MMT":390,"MSD":240,"MSK":240,"MST":-420,"MUT":240,"MVT":300,"MYT":480,"NCT":660,"NDT":-90,"NFT":690,"NOVST":420,"NOVT":360,"NPT":345,"NST":-150,"NUT":-660,"NZDT":780,"NZST":720,"OMSST":420,"OMST":420,"PDT":-420,"PET":-300,"PETST":720,"PETT":720,"PGT":600,"PHOT":780,"PHT":480,"PKT":300,"PMDT":-120,"PMST":-180,"PONT":660,"PST":-480,"PT":-480,"PWT":540,"PYST":-180,"PYT":-240,"RET":240,"SAMT":240,"SAST":120,"SBT":660,"SCT":240,"SGT":480,"SRT":-180,"SST":-660,"TAHT":-600,"TFT":300,"TJT":300,"TKT":780,"TLT":540,"TMT":300,"TVT":720,"ULAT":480,"UTC":0,"UYST":-120,"UYT":-180,"UZT":300,"VET":-210,"VLAST":660,"VLAT":660,"VUT":660,"WAST":120,"WAT":60,"WEST":60,"WESZ":60,"WET":0,"WEZ":0,"WFT":720,"WGST":-120,"WGT":-180,"WIB":420,"WIT":540,"WITA":480,"WST":780,"WT":0,"YAKST":600,"YAKT":600,"YAPT":600,"YEKST":360,"YEKT":360
};

exports.Refiner = function ExtractTimezoneAbbrRefiner(config) {
	Refiner.call(this, arguments);

	this.refine = function(text, results, opt) {

	    var timezones = new Object(DEFAULT_TIMEZONE_ABBR_MAP);
	    if (opt.timezones) {
	        for (var name in opt.timezones) {
                timezones[name] = opt.timezones[name];
            }
        }

		results.forEach(function(result) {

            if (!result.tags['ENTimeExpressionParser'] &&
                !result.tags['ZHTimeExpressionParser'] &&
                !result.tags['FRTimeExpressionParser'] &&
                !result.tags['DETimeExpressionParser']) {
                return;
            }

            var match = TIMEZONE_NAME_PATTERN.exec(text.substring(result.index + result.text.length));
            if (match) {
                var timezoneAbbr = match[1].toUpperCase();
                if (timezones[timezoneAbbr] === undefined) {
                    return;
                }

                var timezoneOffset = timezones[timezoneAbbr];
                if (!result.start.isCertain('timezoneOffset')) {
                    result.start.assign('timezoneOffset', timezoneOffset);
                }

                if (result.end != null && !result.end.isCertain('timezoneOffset')) {
                    result.end.assign('timezoneOffset', timezoneOffset);
                }

                result.text += match[0];
                result.tags['ExtractTimezoneAbbrRefiner'] = true;
            }
		});

        return results;
	}
};
},{"./refiner":150}],138:[function(require,module,exports){
/*
  
*/
var Refiner = require('./refiner').Refiner;


var TIMEZONE_OFFSET_PATTERN = new RegExp("^\\s*(GMT|UTC)?(\\+|\\-)(\\d{1,2}):?(\\d{2})", 'i');
var TIMEZONE_OFFSET_SIGN_GROUP = 2;
var TIMEZONE_OFFSET_HOUR_OFFSET_GROUP = 3;
var TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP = 4;

exports.Refiner = function ExtractTimezoneOffsetRefiner() {
    Refiner.call(this);

    this.refine = function(text, results, opt) {

        results.forEach(function(result) {

            if (result.start.isCertain('timezoneOffset')) {
                return;
            }

            var match = TIMEZONE_OFFSET_PATTERN.exec(text.substring(result.index + result.text.length));
            if (!match) {
                return;
            }

            var hourOffset = parseInt(match[TIMEZONE_OFFSET_HOUR_OFFSET_GROUP]);
            var minuteOffset = parseInt(match[TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP]);
            var timezoneOffset = hourOffset * 60 + minuteOffset;
            if (match[TIMEZONE_OFFSET_SIGN_GROUP] === '-') {
                timezoneOffset = -timezoneOffset;
            }

            if (result.end != null) {
                result.end.assign('timezoneOffset', timezoneOffset);
            }

            result.start.assign('timezoneOffset', timezoneOffset);
            result.text += match[0];
            result.tags['ExtractTimezoneOffsetRefiner'] = true;
        });

        return results;
    }
}

},{"./refiner":150}],139:[function(require,module,exports){
/*
    Enforce 'forwardDate' option to on the results. When there are missing component,
    e.g. "March 12-13 (without year)" or "Thursday", the refiner will try to adjust the result
    into the future instead of the past.
*/
var moment = require('moment');
var Refiner = require('./refiner').Refiner;

exports.Refiner = function ForwardDateRefiner() {
    Refiner.call(this);

    this.refine = function(text, results, opt) {

        if (!opt['forwardDate']) {
            return results;
        }

        results.forEach(function(result) {

            var refMoment = moment(result.ref);

            if (result.start.isCertain('day') && result.start.isCertain('month') &&
                !result.start.isCertain('year') &&
                refMoment.isAfter(result.start.moment())
            ) {
                // Adjust year into the future
                for (var i=0; i < 3 && refMoment.isAfter(result.start.moment()); i++) {
                    result.start.imply('year', result.start.get('year') + 1);

                    if (result.end && !result.end.isCertain('year')) {
                        result.end.imply('year', result.end.get('year') + 1);
                    }
                }

                result.tags['ExtractTimezoneOffsetRefiner'] = true;
            }

            if (!result.start.isCertain('day') && !result.start.isCertain('month') && !result.start.isCertain('year') &&
                result.start.isCertain('weekday') &&
                refMoment.isAfter(result.start.moment())
            ) {
                // Adjust date to the coming week
                if (refMoment.day() > result.start.get('weekday')) {
                    refMoment.day(result.start.get('weekday') + 7);
                } else {
                    refMoment.day(result.start.get('weekday'));
                }

                result.start.imply('day', refMoment.date());
                result.start.imply('month', refMoment.month() + 1);
                result.start.imply('year', refMoment.year());
                result.tags['ExtractTimezoneOffsetRefiner'] = true;
            }
        });

        return results;
    }
};

},{"./refiner":150,"moment":483}],140:[function(require,module,exports){
/*
  
*/
var Refiner = require('./refiner').Refiner;

exports.Refiner = function OverlapRemovalRefiner() {
	Refiner.call(this);
	

	this.refine = function(text, results, opt) { 

        if (results.length < 2) return results;
        
        var filteredResults = [];
        var prevResult = results[0];
        
        for (var i=1; i<results.length; i++){
            
            var result = results[i];
            
            // If overlap, compare the length and discard the shorter one
            if (result.index < prevResult.index + prevResult.text.length) {

                if (result.text.length > prevResult.text.length){
                    prevResult = result;
                }
                
            } else {
                filteredResults.push(prevResult);
                prevResult = result;
            }
        }
        
        // The last one
        if (prevResult != null) {
            filteredResults.push(prevResult);
        }

        return filteredResults;
    }
}
},{"./refiner":150}],141:[function(require,module,exports){
/*
  
*/
var Filter = require('./refiner').Filter;

exports.Refiner = function UnlikelyFormatFilter() {
    Filter.call(this);
    

    this.isValid = function(text, result, opt) { 

        if (result.text.replace(' ','').match(/^\d*(\.\d*)?$/)) {
            return false;
        }

        return true; 
    }
}
},{"./refiner":150}],142:[function(require,module,exports){
/*
  
*/
var ENMergeDateRangeRefiner = require('../en/ENMergeDateRangeRefiner').Refiner;

exports.Refiner = function DEMergeDateRangeRefiner() {
    ENMergeDateRangeRefiner.call(this);

    this.pattern = function () {
        return /^\s*(bis(?:\s*(?:am|zum))?|\-)\s*$/i
    };
};

},{"../en/ENMergeDateRangeRefiner":144}],143:[function(require,module,exports){
/*
    
*/
var ParsedComponents = require('../../result').ParsedComponents;
var Refiner = require('../refiner').Refiner;

var mergeDateTimeComponent = require('../en/ENMergeDateTimeRefiner').mergeDateTimeComponent;
var isDateOnly = require('../en/ENMergeDateTimeRefiner').isDateOnly;
var isTimeOnly = require('../en/ENMergeDateTimeRefiner').isTimeOnly;

var PATTERN = new RegExp("^\\s*(T|um|am|,|-)?\\s*$");

function isAbleToMerge(text, prevResult, curResult) {
    var textBetween = text.substring(prevResult.index + prevResult.text.length, curResult.index);
    return textBetween.match(PATTERN);
}

function mergeResult(text, dateResult, timeResult){

    var beginDate = dateResult.start;
    var beginTime = timeResult.start;    
    var beginDateTime = mergeDateTimeComponent(beginDate, beginTime);

    if (dateResult.end != null || timeResult.end != null) {
        
        var endDate   = dateResult.end == null ? dateResult.start : dateResult.end;            
        var endTime   = timeResult.end == null ? timeResult.start : timeResult.end;
        var endDateTime = mergeDateTimeComponent(endDate, endTime);
        
        if (dateResult.end == null && endDateTime.date().getTime() < beginDateTime.date().getTime()) {
            // Ex. 9pm - 1am
            if (endDateTime.isCertain('day')) {
                endDateTime.assign('day', endDateTime.get('day') + 1);
            } else {
                endDateTime.imply('day', endDateTime.get('day') + 1);
            }
        }

        dateResult.end = endDateTime;
    }

    dateResult.start = beginDateTime;    

    var startIndex = Math.min(dateResult.index, timeResult.index);
    var endIndex = Math.max(
            dateResult.index + dateResult.text.length, 
            timeResult.index + timeResult.text.length);
    
    dateResult.index = startIndex;
    dateResult.text  = text.substring(startIndex, endIndex);

    for (var tag in timeResult.tags) {
        dateResult.tags[tag] = true;
    }
    dateResult.tags['DEMergeDateAndTimeRefiner'] = true;
    return dateResult;
}

exports.Refiner = function DEMergeDateTimeRefiner() {
    Refiner.call(this);


    this.refine = function(text, results, opt) { 

        if (results.length < 2) return results;

        var mergedResult = [];
        var currResult = null;
        var prevResult = null;

        for (var i = 1; i < results.length; i++) {

            currResult = results[i];
            prevResult = results[i-1];
            
            if (isDateOnly(prevResult) && isTimeOnly(currResult) 
                    && isAbleToMerge(text, prevResult, currResult)) {
                
                prevResult = mergeResult(text, prevResult, currResult);
                currResult = null;
                i += 1;
                
            } else if (isDateOnly(currResult) && isTimeOnly(prevResult)
                    && isAbleToMerge(text, prevResult, currResult)) {
                
                prevResult = mergeResult(text, currResult, prevResult);
                currResult = null;
                i += 1;
            }
            
            mergedResult.push(prevResult);
        }

        if (currResult != null) {
            mergedResult.push(currResult);
        }

        return mergedResult;
    }
}
},{"../../result":151,"../en/ENMergeDateTimeRefiner":145,"../refiner":150}],144:[function(require,module,exports){
/*
  
*/
var Refiner = require('../refiner').Refiner;

exports.Refiner = function ENMergeDateRangeRefiner() {
    Refiner.call(this);

    this.pattern = function () { return /^\s*(to|\-)\s*$/i };

    this.refine = function(text, results, opt) {

        if (results.length < 2) return results;
        
        var mergedResult = [];
        var currResult = null;
        var prevResult = null;
        
        for (var i=1; i<results.length; i++){
            
            currResult = results[i];
            prevResult = results[i-1];
            
            if (!prevResult.end && !currResult.end 
                && this.isAbleToMerge(text, prevResult, currResult)) {
              
                prevResult = this.mergeResult(text, prevResult, currResult);
                currResult = null;
                i += 1;
            }
            
            mergedResult.push(prevResult);
        }
        
        if (currResult != null) {
            mergedResult.push(currResult);
        }


        return mergedResult;
    };

    this.isAbleToMerge = function(text, result1, result2) {
        var begin = result1.index + result1.text.length;
        var end   = result2.index;
        var textBetween = text.substring(begin,end);

        return textBetween.match(this.pattern());
    };

    this.isWeekdayResult = function (result) {
        return result.start.isCertain('weekday') && !result.start.isCertain('day');
    };

    this.mergeResult = function(text, fromResult, toResult) {

        if (!this.isWeekdayResult(fromResult) && !this.isWeekdayResult(toResult)) {
            
            var timeKeys = {'hour': true, 'minute': true, 'second': true};

            for (var key in toResult.start.knownValues) {
                if (!fromResult.start.isCertain(key)) {
                    fromResult.start.assign(key, toResult.start.get(key));
                }
            }

            for (var key in fromResult.start.knownValues) {
                if (!toResult.start.isCertain(key)) {
                    toResult.start.assign(key, fromResult.start.get(key));
                }
            }
        }

        if (fromResult.start.date().getTime() > toResult.start.date().getTime()) {
            
            var fromMoment = fromResult.start.moment();
            var toMoment = toResult.start.moment();

            if (this.isWeekdayResult(fromResult) && fromMoment.clone().add(-7, 'days').isBefore(toMoment)) {
                fromMoment = fromMoment.add(-7, 'days');
                fromResult.start.imply('day', fromMoment.date());
                fromResult.start.imply('month', fromMoment.month() + 1);
                fromResult.start.imply('year', fromMoment.year());
            } else if (this.isWeekdayResult(toResult) && toMoment.clone().add(7, 'days').isAfter(fromMoment)) {
                toMoment = toMoment.add(7, 'days');
                toResult.start.imply('day', toMoment.date());
                toResult.start.imply('month', toMoment.month() + 1);
                toResult.start.imply('year', toMoment.year());
            } else {
                var tmp = toResult;
                toResult = fromResult;
                fromResult = tmp;
            }
        }
        
        fromResult.end = toResult.start;

        

        for (var tag in toResult.tags) {
            fromResult.tags[tag] = true;
        }

            
        var startIndex = Math.min(fromResult.index, toResult.index);
        var endIndex = Math.max(
            fromResult.index + fromResult.text.length, 
            toResult.index + toResult.text.length);
            
        fromResult.index = startIndex;
        fromResult.text  = text.substring(startIndex, endIndex);
        fromResult.tags[this.constructor.name] = true;
        return fromResult;
    }
};


},{"../refiner":150}],145:[function(require,module,exports){
/*
    
*/
var ParsedComponents = require('../../result').ParsedComponents;
var Refiner = require('../refiner').Refiner;

var PATTERN = new RegExp("^\\s*(T|at|after|before|on|of|,|-)?\\s*$");

var isDateOnly = exports.isDateOnly = function(result) {
    return !result.start.isCertain('hour');
}
    
var isTimeOnly = exports.isTimeOnly = function(result) {
    return !result.start.isCertain('month') && !result.start.isCertain('weekday');
}

var isAbleToMerge = exports.isAbleToMerge = function(text, prevResult, curResult) {
    var textBetween = text.substring(prevResult.index + prevResult.text.length, curResult.index);
    return textBetween.match(PATTERN);
}

var mergeDateTimeComponent = exports.mergeDateTimeComponent = function(dateComponent, timeComponent) {
    var dateTimeComponent = dateComponent.clone();

    if (timeComponent.isCertain('hour')) {
        dateTimeComponent.assign('hour', timeComponent.get('hour'));
        dateTimeComponent.assign('minute', timeComponent.get('minute'));

        if (timeComponent.isCertain('second')) {
            dateTimeComponent.assign('second', timeComponent.get('second'));

            if (timeComponent.isCertain('millisecond')) {
                dateTimeComponent.assign('millisecond', timeComponent.get('millisecond'));
            } else {
                dateTimeComponent.imply('millisecond', timeComponent.get('millisecond'));
            }
        } else {
            dateTimeComponent.imply('second', timeComponent.get('second'));
            dateTimeComponent.imply('millisecond', timeComponent.get('millisecond'));
        }
        
    } else {
        dateTimeComponent.imply('hour', timeComponent.get('hour'));
        dateTimeComponent.imply('minute', timeComponent.get('minute'));
        dateTimeComponent.imply('second', timeComponent.get('second'));
        dateTimeComponent.imply('millisecond', timeComponent.get('millisecond'));
    }

    if (timeComponent.isCertain('meridiem')) {
        dateTimeComponent.assign('meridiem', timeComponent.get('meridiem'));
    } else if (
        timeComponent.get('meridiem') !== undefined &&
        dateTimeComponent.get('meridiem') === undefined
    ) {
        dateTimeComponent.imply('meridiem', timeComponent.get('meridiem'));
    }

    if (dateTimeComponent.get('meridiem') == 1 && dateTimeComponent.get('hour') < 12) {
        if (timeComponent.isCertain('hour')) {
            dateTimeComponent.assign('hour', dateTimeComponent.get('hour') + 12);
        } else {
            dateTimeComponent.imply('hour', dateTimeComponent.get('hour') + 12);
        }
    }

    return dateTimeComponent;
}


function mergeResult(text, dateResult, timeResult){

    var beginDate = dateResult.start;
    var beginTime = timeResult.start;
    var beginDateTime = mergeDateTimeComponent(beginDate, beginTime);
    
    if (dateResult.end != null || timeResult.end != null) {
        
        var endDate   = dateResult.end == null ? dateResult.start : dateResult.end;            
        var endTime   = timeResult.end == null ? timeResult.start : timeResult.end;
        var endDateTime = mergeDateTimeComponent(endDate, endTime);
        
        if (dateResult.end == null && endDateTime.date().getTime() < beginDateTime.date().getTime()) {
            // Ex. 9pm - 1am
            if (endDateTime.isCertain('day')) {
                endDateTime.assign('day', endDateTime.get('day') + 1);
            } else {
                endDateTime.imply('day', endDateTime.get('day') + 1);
            }
        }

        dateResult.end = endDateTime;
    }

    dateResult.start = beginDateTime;    

    var startIndex = Math.min(dateResult.index, timeResult.index);
    var endIndex = Math.max(
            dateResult.index + dateResult.text.length, 
            timeResult.index + timeResult.text.length);
    
    dateResult.index = startIndex;
    dateResult.text  = text.substring(startIndex, endIndex);

    for (var tag in timeResult.tags) {
        dateResult.tags[tag] = true;
    }
    dateResult.tags['ENMergeDateAndTimeRefiner'] = true;
    return dateResult;
}

exports.Refiner = function ENMergeDateTimeRefiner() {
    Refiner.call(this);


    this.refine = function(text, results, opt) { 

        if (results.length < 2) return results;

        var mergedResult = [];
        var currResult = null;
        var prevResult = null;

        for (var i = 1; i < results.length; i++) {

            currResult = results[i];
            prevResult = results[i-1];
            
            if (isDateOnly(prevResult) && isTimeOnly(currResult) 
                    && isAbleToMerge(text, prevResult, currResult)) {
                
                prevResult = mergeResult(text, prevResult, currResult);
                currResult = results[i + 1];
                i += 1;
                
            } else if (isDateOnly(currResult) && isTimeOnly(prevResult)
                    && isAbleToMerge(text, prevResult, currResult)) {
                
                prevResult = mergeResult(text, currResult, prevResult);
                currResult = results[i + 1];
                i += 1;
            }
            
            mergedResult.push(prevResult);
        }

        if (currResult != null) {
            mergedResult.push(currResult);
        }

        return mergedResult;
    }
}
},{"../../result":151,"../refiner":150}],146:[function(require,module,exports){
/*

*/
var ParsedComponents = require('../../result').ParsedComponents;
var Refiner = require('../refiner').Refiner;


var PATTERN = new RegExp("^\\s*(at|after|before|on|,|-|\\(|\\))?\\s*$");

function isMoreSpecific(prevResult, currResult) {
    var moreSpecific = false;

    if (prevResult.start.isCertain('year')) {
        if (!currResult.start.isCertain('year')) {
            moreSpecific = true;
        } else {
            if (prevResult.start.isCertain('month')) {
                if (!currResult.start.isCertain('month')) {
                    moreSpecific = true;
                } else {
                    if (prevResult.start.isCertain('day') && !currResult.start.isCertain('day')) {
                        moreSpecific = true;
                    }
                }
            }
        }
    }

    return moreSpecific;
}


function isAbleToMerge(text, prevResult, currResult) {
    var textBetween = text.substring(prevResult.index + prevResult.text.length, currResult.index);

    // Only accepts merge if one of them comes from casual relative date
    var includesRelativeResult = (prevResult.tags['ENRelativeDateFormatParser'] || currResult.tags['ENRelativeDateFormatParser']);

    // We assume they refer to the same date if all date fields are implied
    var referToSameDate = !prevResult.start.isCertain('day') && !prevResult.start.isCertain('month') && !prevResult.start.isCertain('year');

    // If both years are certain, that determines if they refer to the same date
    // but with one more specific than the other
    if (prevResult.start.isCertain('year') && currResult.start.isCertain('year'))
        referToSameDate = (prevResult.start.get('year') === currResult.start.get('year'));

    // We now test with the next level (month) if they refer to the same date
    if (prevResult.start.isCertain('month') && currResult.start.isCertain('month'))
        referToSameDate = (prevResult.start.get('month') === currResult.start.get('month')) && referToSameDate;

    return includesRelativeResult && textBetween.match(PATTERN) && referToSameDate;
}

function mergeResult(text, specificResult, nonSpecificResult){

    var specificDate = specificResult.start;
    var nonSpecificDate = nonSpecificResult.start;

    var startIndex = Math.min(specificResult.index, nonSpecificResult.index);
    var endIndex = Math.max(
            specificResult.index + specificResult.text.length,
            nonSpecificResult.index + nonSpecificResult.text.length);

    specificResult.index = startIndex;
    specificResult.text  = text.substring(startIndex, endIndex);

    for (var tag in nonSpecificResult.tags) {
        specificResult.tags[tag] = true;
    }
    specificResult.tags['ENPrioritizeSpecificDateRefiner'] = true;
    return specificResult;
}

exports.Refiner = function ENPrioritizeSpecificDateRefiner() {
    Refiner.call(this);

    this.refine = function(text, results, opt) {

        if (results.length < 2) return results;

        var mergedResult = [];
        var currResult = null;
        var prevResult = null;

        for (var i = 1; i < results.length; i++) {

            currResult = results[i];
            prevResult = results[i-1];

            if (isMoreSpecific(prevResult, currResult)
                    && isAbleToMerge(text, prevResult, currResult)) {

                prevResult = mergeResult(text, prevResult, currResult);
                currResult = null;
                i += 1;

            } else if (isMoreSpecific(currResult, prevResult)
                    && isAbleToMerge(text, prevResult, currResult)) {

                prevResult = mergeResult(text, currResult, prevResult);
                currResult = null;
                i += 1;
            }

            mergedResult.push(prevResult);
        }

        if (currResult != null) {
            mergedResult.push(currResult);
        }

        return mergedResult;
    }
}

},{"../../result":151,"../refiner":150}],147:[function(require,module,exports){
/*
  
*/
var Refiner = require('../refiner').Refiner;

exports.Refiner = function FRMergeDateRangeRefiner() {
    Refiner.call(this);

    this.pattern = function () { return /^\s*(à|a|\-)\s*$/i };

    this.refine = function(text, results, opt) {

        if (results.length < 2) return results;
        
        var mergedResult = [];
        var currResult = null;
        var prevResult = null;
        
        for (var i=1; i<results.length; i++){
            
            currResult = results[i];
            prevResult = results[i-1];
            
            if (!prevResult.end && !currResult.end 
                && this.isAbleToMerge(text, prevResult, currResult)) {
              
                prevResult = this.mergeResult(text, prevResult, currResult);
                currResult = null;
                i += 1;
            }
            
            mergedResult.push(prevResult);
        }
        
        if (currResult != null) {
            mergedResult.push(currResult);
        }


        return mergedResult;
    };

    this.isAbleToMerge = function(text, result1, result2) {
        var begin = result1.index + result1.text.length;
        var end   = result2.index;
        var textBetween = text.substring(begin,end);

        return textBetween.match(this.pattern());
    };

    this.isWeekdayResult = function (result) {
        return result.start.isCertain('weekday') && !result.start.isCertain('day');
    };

    this.mergeResult = function(text, fromResult, toResult) {

        if (!this.isWeekdayResult(fromResult) && !this.isWeekdayResult(toResult)) {

            for (var key in toResult.start.knownValues) {
                if (!fromResult.start.isCertain(key)) {
                    fromResult.start.assign(key, toResult.start.get(key));
                }
            }

            for (var key in fromResult.start.knownValues) {
                if (!toResult.start.isCertain(key)) {
                    toResult.start.assign(key, fromResult.start.get(key));
                }
            }
        }

        if (fromResult.start.date().getTime() > toResult.start.date()) {
            var tmp = toResult;
            toResult = fromResult;
            fromResult = tmp;
        }
        
        fromResult.end = toResult.start;

        

        for (var tag in toResult.tags) {
            fromResult.tags[tag] = true;
        }

            
        var startIndex = Math.min(fromResult.index, toResult.index);
        var endIndex = Math.max(
            fromResult.index + fromResult.text.length, 
            toResult.index + toResult.text.length);
            
        fromResult.index = startIndex;
        fromResult.text  = text.substring(startIndex, endIndex);
        fromResult.tags[this.constructor.name] = true;
        return fromResult;
    }
};


},{"../refiner":150}],148:[function(require,module,exports){
/*
    
*/
var ParsedComponents = require('../../result').ParsedComponents;
var Refiner = require('../refiner').Refiner;
var mergeDateTimeComponent = require('../en/ENMergeDateTimeRefiner').mergeDateTimeComponent;

var PATTERN = new RegExp("^\\s*(T|à|a|vers|de|,|-)?\\s*$");

function isDateOnly(result) {
    return !result.start.isCertain('hour') || result.tags['FRCasualDateParser'];
}
    
function isTimeOnly(result) {
    return !result.start.isCertain('month') && !result.start.isCertain('weekday');
}


function isAbleToMerge(text, prevResult, curResult) {
    var textBetween = text.substring(prevResult.index + prevResult.text.length, curResult.index);
    return textBetween.match(PATTERN);
}

function mergeResult(text, dateResult, timeResult){

    var beginDate = dateResult.start;
    var beginTime = timeResult.start;
    var beginDateTime = mergeDateTimeComponent(beginDate, beginTime);

    if (dateResult.end != null || timeResult.end != null) {
        
        var endDate   = dateResult.end == null ? dateResult.start : dateResult.end;            
        var endTime   = timeResult.end == null ? timeResult.start : timeResult.end;
        var endDateTime = mergeDateTimeComponent(endDate, endTime);
        
        if (dateResult.end == null && endDateTime.date().getTime() < beginDateTime.date().getTime()) {
            // Ex. 9pm - 1am
            if (endDateTime.isCertain('day')) {
                endDateTime.assign('day', endDateTime.get('day') + 1);
            } else {
                endDateTime.imply('day', endDateTime.get('day') + 1);
            }
        }

        dateResult.end = endDateTime;
    }

    dateResult.start = beginDateTime;    

    var startIndex = Math.min(dateResult.index, timeResult.index);
    var endIndex = Math.max(
            dateResult.index + dateResult.text.length, 
            timeResult.index + timeResult.text.length);
    
    dateResult.index = startIndex;
    dateResult.text  = text.substring(startIndex, endIndex);

    for (var tag in timeResult.tags) {
        dateResult.tags[tag] = true;
    }
    dateResult.tags['FRMergeDateAndTimeRefiner'] = true;
    return dateResult;
}

exports.Refiner = function FRMergeDateTimeRefiner() {
    Refiner.call(this);


    this.refine = function(text, results, opt) { 

        if (results.length < 2) return results;

        var mergedResult = [];
        var currResult = null;
        var prevResult = null;

        for (var i = 1; i < results.length; i++) {

            currResult = results[i];
            prevResult = results[i-1];
            
            if (isDateOnly(prevResult) && isTimeOnly(currResult) 
                    && isAbleToMerge(text, prevResult, currResult)) {
                
                prevResult = mergeResult(text, prevResult, currResult);
                currResult = null;
                i += 1;
                
            } else if (isDateOnly(currResult) && isTimeOnly(prevResult)
                    && isAbleToMerge(text, prevResult, currResult)) {
                
                prevResult = mergeResult(text, currResult, prevResult);
                currResult = null;
                i += 1;
            }
            
            mergedResult.push(prevResult);
        }

        if (currResult != null) {
            mergedResult.push(currResult);
        }

        return mergedResult;
    }
}
},{"../../result":151,"../en/ENMergeDateTimeRefiner":145,"../refiner":150}],149:[function(require,module,exports){
/*
  
*/
var ENMergeDateRangeRefiner = require('../en/ENMergeDateRangeRefiner').Refiner;

exports.Refiner = function JPMergeDateRangeRefiner() {
    ENMergeDateRangeRefiner.call(this);

    this.pattern = function () { return /^\s*(から|ー)\s*$/i };
}


},{"../en/ENMergeDateRangeRefiner":144}],150:[function(require,module,exports){

exports.Refiner = function Refiner() { 

    this.refine = function(text, results, opt) { return results; };
}

exports.Filter = function Filter() { 
    
    exports.Refiner.call(this);

    this.isValid = function(text, result, opt) { return true; }
    this.refine = function(text, results, opt) { 

        var filteredResult = [];
        for (var i=0; i < results.length; i++) {

            var result = results[i];
            if (this.isValid(text, result, opt)) {
                filteredResult.push(result);
            }
        }

        return filteredResult;
    }
}


// Common refiners
exports.OverlapRemovalRefiner = require('./OverlapRemovalRefiner').Refiner;
exports.ExtractTimezoneOffsetRefiner = require('./ExtractTimezoneOffsetRefiner').Refiner;
exports.ExtractTimezoneAbbrRefiner = require('./ExtractTimezoneAbbrRefiner').Refiner;
exports.ForwardDateRefiner = require('./ForwardDateRefiner').Refiner;
exports.UnlikelyFormatFilter = require('./UnlikelyFormatFilter').Refiner;

// en refiners
exports.ENMergeDateTimeRefiner = require('./en/ENMergeDateTimeRefiner').Refiner;
exports.ENMergeDateRangeRefiner = require('./en/ENMergeDateRangeRefiner').Refiner;
exports.ENPrioritizeSpecificDateRefiner = require('./en/ENPrioritizeSpecificDateRefiner').Refiner;

// ja refiners
exports.JPMergeDateRangeRefiner = require('./ja/JPMergeDateRangeRefiner').Refiner;

// fr refiners
exports.FRMergeDateRangeRefiner = require('./fr/FRMergeDateRangeRefiner').Refiner;
exports.FRMergeDateTimeRefiner = require('./fr/FRMergeDateTimeRefiner').Refiner;

// de refiners
exports.DEMergeDateRangeRefiner = require('./de/DEMergeDateRangeRefiner').Refiner;
exports.DEMergeDateTimeRefiner = require('./de/DEMergeDateTimeRefiner').Refiner;

},{"./ExtractTimezoneAbbrRefiner":137,"./ExtractTimezoneOffsetRefiner":138,"./ForwardDateRefiner":139,"./OverlapRemovalRefiner":140,"./UnlikelyFormatFilter":141,"./de/DEMergeDateRangeRefiner":142,"./de/DEMergeDateTimeRefiner":143,"./en/ENMergeDateRangeRefiner":144,"./en/ENMergeDateTimeRefiner":145,"./en/ENPrioritizeSpecificDateRefiner":146,"./fr/FRMergeDateRangeRefiner":147,"./fr/FRMergeDateTimeRefiner":148,"./ja/JPMergeDateRangeRefiner":149}],151:[function(require,module,exports){
var moment = require('moment');

function ParsedResult(result){
    result = result || {};

    this.ref   = result.ref;
    this.index = result.index;
    this.text  = result.text;
    this.tags  = result.tags || {};

    this.start = new ParsedComponents(result.start, result.ref)
    if(result.end){
        this.end = new ParsedComponents(result.end, result.ref)
    }
}

ParsedResult.prototype.clone = function() {
    var result = new ParsedResult(this);
    result.tags = JSON.parse(JSON.stringify(this.tags));
    result.start = this.start.clone();
    if (this.end) {
        result.end = this.end.clone();
    }

    return result
}

ParsedResult.prototype.hasPossibleDates = function() {
    return this.start.isPossibleDate() && (!this.end || this.end.isPossibleDate());
}


function ParsedComponents (components, ref){

    this.knownValues = {};
    this.impliedValues = {};

    if (components) {
        for (key in components) {
            this.knownValues[key] = components[key];
        }
    }

    if (ref) {
        ref = moment(ref);
        this.imply('day', ref.date())
        this.imply('month', ref.month() + 1)
        this.imply('year', ref.year())
    }
    

    this.imply('hour', 12);
    this.imply('minute', 0);
    this.imply('second', 0);
    this.imply('millisecond', 0);
}

ParsedComponents.prototype.clone = function () {
    var component = new ParsedComponents();
    component.knownValues = JSON.parse(JSON.stringify(this.knownValues));
    component.impliedValues = JSON.parse(JSON.stringify(this.impliedValues));
    return component;
};

ParsedComponents.prototype.get = function(component, value) {
    if (component in this.knownValues) return this.knownValues[component];
    if (component in this.impliedValues) return this.impliedValues[component];
};

ParsedComponents.prototype.assign = function(component, value) {
    this.knownValues[component] = value;
    delete this.impliedValues[component];
};

ParsedComponents.prototype.imply = function(component, value) {
    if (component in this.knownValues) return;
    this.impliedValues[component] = value;
};

ParsedComponents.prototype.isCertain = function(component) {
    return component in this.knownValues;
};

ParsedComponents.prototype.isPossibleDate = function() {
    var dateMoment = this.moment();
    if (this.isCertain('timezoneOffset')) {
        dateMoment.utcOffset(this.get('timezoneOffset'))
    }

    if (dateMoment.get('year') != this.get('year')) return false;
    if (dateMoment.get('month') != this.get('month')-1) return false;
    if (dateMoment.get('date') != this.get('day')) return false;
    if (dateMoment.get('hour') != this.get('hour')) return false;
    if (dateMoment.get('minute') != this.get('minute')) return false;

    return true;
};

ParsedComponents.prototype.date = function() {
    var dateMoment = this.moment();
    return dateMoment.toDate();
};

ParsedComponents.prototype.moment = function() {
    var dateMoment = moment();

    dateMoment.set('year', this.get('year'));
    dateMoment.set('month', this.get('month')-1);
    dateMoment.set('date', this.get('day'));
    dateMoment.set('hour', this.get('hour'));
    dateMoment.set('minute', this.get('minute'));
    dateMoment.set('second', this.get('second'));
    dateMoment.set('millisecond', this.get('millisecond'));

    // Javascript Date Object return minus timezone offset
    var currentTimezoneOffset = dateMoment.utcOffset();
    var targetTimezoneOffset = this.get('timezoneOffset') !== undefined ? 
        this.get('timezoneOffset') : currentTimezoneOffset;

    var adjustTimezoneOffset = targetTimezoneOffset - currentTimezoneOffset;
    dateMoment.add(-adjustTimezoneOffset, 'minutes');

    return dateMoment;
};



exports.ParsedComponents = ParsedComponents;
exports.ParsedResult = ParsedResult;

},{"moment":483}],152:[function(require,module,exports){
exports.WEEKDAY_OFFSET = { 
    'sonntag': 0, 
    'so': 0, 
    'montag': 1, 
    'mo': 1,
    'dienstag': 2, 
    'di':2, 
    'mittwoch': 3, 
    'mi': 3, 
    'donnerstag': 4, 
    'do': 4, 
    'freitag': 5, 
    'fr': 5,
    'samstag': 6, 
    'sa': 6
};
    
exports.MONTH_OFFSET = { 
    'januar': 1,
    'jan': 1,
    'jan.': 1,
    'februar': 2,
    'feb': 2,
    'feb.': 2,
    'märz': 3,
    'maerz': 3,
    'mär': 3,
    'mär.': 3,
    'mrz': 3,
    'mrz.': 3,
    'april': 4,
    'apr': 4,
    'apr.': 4,
    'mai': 5,
    'juni': 6,
    'jun': 6,
    'jun.': 6,
    'juli': 7,
    'jul': 7,
    'jul.': 7,
    'august': 8,
    'aug': 8,
    'aug.': 8,
    'september': 9,
    'sep': 9,
    'sep.': 9,
    'sept': 9,
    'sept.': 9,
    'oktober': 10,
    'okt': 10,
    'okt.': 10,
    'november': 11,
    'nov': 11,
    'nov.': 11,
    'dezember': 12,
    'dez': 12,
    'dez.': 12
};

exports.INTEGER_WORDS_PATTERN = '(?:eins|zwei|drei|vier|fünf|fuenf|sechs|sieben|acht|neun|zehn|elf|zwölf|zwoelf)';
exports.INTEGER_WORDS = {
    'eins' : 1,
    'zwei' : 2,
    'drei' : 3,
    'vier' : 4,
    'fünf' : 5,
    'fuenf': 5,
    'sechs' : 6,
    'sieben' : 7,
    'acht' : 8,
    'neun' : 9,
    'zehn' : 10,
    'elf' : 11,
    'zwölf' : 12,
    'zwoelf' : 12
};

},{}],153:[function(require,module,exports){
exports.WEEKDAY_OFFSET = { 
    'sunday': 0, 
    'sun': 0, 
    'monday': 1, 
    'mon': 1,
    'tuesday': 2, 
    'tue':2, 
    'wednesday': 3, 
    'wed': 3, 
    'thursday': 4, 
    'thur': 4, 
    'thu': 4,
    'friday': 5, 
    'fri': 5,
    'saturday': 6, 
    'sat': 6
};
    
exports.MONTH_OFFSET = { 
    'january': 1,
    'jan': 1,
    'jan.': 1,
    'february': 2,
    'feb': 2,
    'feb.': 2,
    'march': 3,
    'mar': 3,
    'mar.': 3,
    'april': 4,
    'apr': 4,
    'apr.': 4,
    'may': 5,
    'june': 6,
    'jun': 6,
    'jun.': 6,
    'july': 7,
    'jul': 7,
    'jul.': 7,
    'august': 8,
    'aug': 8,
    'aug.': 8,
    'september': 9,
    'sep': 9,
    'sep.': 9,
    'sept': 9,
    'sept.': 9,
    'october': 10,
    'oct': 10,
    'oct.': 10,
    'november': 11,
    'nov': 11,
    'nov.': 11,
    'december': 12,
    'dec': 12,
    'dec.': 12
};

exports.MONTH_PATTERN = '(?:' 
    + Object.keys(exports.MONTH_OFFSET).join('|').replace(/\./g, '\\.')
    + ')';

exports.INTEGER_WORDS = {
    'one' : 1,
    'two' : 2,
    'three' : 3,
    'four' : 4,
    'five' : 5,
    'six' : 6,
    'seven' : 7,
    'eight' : 8,
    'nine' : 9,
    'ten' : 10,
    'eleven' : 11,
    'twelve' : 12
};
exports.INTEGER_WORDS_PATTERN = '(?:' 
    + Object.keys(exports.INTEGER_WORDS).join('|') 
    +')';

exports.ORDINAL_WORDS = {
    'first' : 1,
    'second': 2,
    'third': 3,
    'fourth': 4,
    'fifth': 5,
    'sixth': 6,
    'seventh': 7,
    'eighth': 8,
    'ninth': 9,
    'tenth': 10,
    'eleventh': 11,
    'twelfth': 12,
    'thirteenth': 13,
    'fourteenth': 14,
    'fifteenth': 15,
    'sixteenth': 16,
    'seventeenth': 17,
    'eighteenth': 18,
    'nineteenth': 19,
    'twentieth': 20,
    'twenty first': 21,
    'twenty second': 22,
    'twenty third': 23,
    'twenty fourth': 24,
    'twenty fifth': 25,
    'twenty sixth': 26,
    'twenty seventh': 27,
    'twenty eighth': 28,
    'twenty ninth': 29,
    'thirtieth': 30,
    'thirty first': 31
};
exports.ORDINAL_WORDS_PATTERN = '(?:' 
    + Object.keys(exports.ORDINAL_WORDS).join('|').replace(/ /g, '[ -]') 
    + ')';

var TIME_UNIT = 
    '(' + exports.INTEGER_WORDS_PATTERN + '|[0-9]+|[0-9]+\.[0-9]+|an?(?:\\s*few)?|half(?:\\s*an?)?)\\s*' +
    '(sec(?:onds?)?|min(?:ute)?s?|hours?|weeks?|days?|months?|years?)\\s*';

var TIME_UNIT_STRICT = 
    '(?:[0-9]+|an?)\\s*' +
    '(?:seconds?|minutes?|hours?|days?)\\s*';

var PATTERN_TIME_UNIT = new RegExp(TIME_UNIT, 'i');

exports.TIME_UNIT_PATTERN = '(?:' + TIME_UNIT + ')+';
exports.TIME_UNIT_STRICT_PATTERN = '(?:' + TIME_UNIT_STRICT + ')+';

exports.extractDateTimeUnitFragments = function (timeunitText) {
    var fragments = {};
    var remainingText = timeunitText;
    var match = PATTERN_TIME_UNIT.exec(remainingText);
    while (match) {
        collectDateTimeFragment(match, fragments);
        remainingText = remainingText.substring(match[0].length);
        match = PATTERN_TIME_UNIT.exec(remainingText);
    }
    return fragments;
};

function collectDateTimeFragment(match, fragments) {
    var num = match[1].toLowerCase() ;
    if (exports.INTEGER_WORDS[num] !== undefined) {
        num = exports.INTEGER_WORDS[num];
    } else if(num === 'a' || num === 'an'){
        num = 1;
    } else if (num.match(/few/)) {
        num = 3;
    } else if (num.match(/half/)) {
        num = 0.5;
    } else {
        num = parseFloat(num);
    }

    if (match[2].match(/hour/i)) {
        fragments['hour'] = num;
    } else if (match[2].match(/min/i)) {
        fragments['minute'] = num;
    } else if (match[2].match(/sec/i)) {
        fragments['second'] = num;
    } else if (match[2].match(/week/i)) {
        fragments['week'] = num;
    } else if (match[2].match(/day/i)) {
        fragments['d'] = num;
    } else if (match[2].match(/month/i)) {
        fragments['month'] = num;
    } else if (match[2].match(/year/i)) {
        fragments['year'] = num;
    }

    return fragments;
}
},{}],154:[function(require,module,exports){
exports.WEEKDAY_OFFSET = {
    'domingo': 0,
    'dom': 0,
    'lunes': 1,
    'lun': 1,
    'martes': 2,
    'mar':2,
    'miércoles': 3,
    'miercoles': 3,
    'mie': 3,
    'jueves': 4,
    'jue': 4,
    'viernes': 5,
    'vie': 5,
    'sábado': 6,
    'sabado': 6,
    'sab': 6,}

exports.MONTH_OFFSET = {
    'enero': 1,
    'ene': 1,
    'ene.': 1,
    'febrero': 2,
    'feb': 2,
    'feb.': 2,
    'marzo': 3,
    'mar': 3,
    'mar.': 3,
    'abril': 4,
    'abr': 4,
    'abr.': 4,
    'mayo': 5,
    'may': 5,
    'may.': 5,
    'junio': 6,
    'jun': 6,
    'jun.': 6,
    'julio': 7,
    'jul': 7,
    'jul.': 7,
    'agosto': 8,
    'ago': 8,
    'ago.': 8,
    'septiembre': 9,
    'sep': 9,
    'sept': 9,
    'sep.': 9,
    'sept.': 9,
    'octubre': 10,
    'oct': 10,
    'oct.': 10,
    'noviembre': 11,
    'nov': 11,
    'nov.': 11,
    'diciembre': 12,
    'dic': 12,
    'dic.': 12,
}

},{}],155:[function(require,module,exports){
exports.WEEKDAY_OFFSET = { 
    'dimanche': 0, 
    'dim': 0, 
    'lundi': 1, 
    'lun': 1,
    'mardi': 2, 
    'mar':2, 
    'mercredi': 3, 
    'mer': 3, 
    'jeudi': 4, 
    'jeu': 4, 
    'vendredi': 5, 
    'ven': 5,
    'samedi': 6, 
    'sam': 6
};
    
exports.MONTH_OFFSET = { 
    'janvier': 1,
    'jan': 1,
    'jan.': 1,
    'février': 2,
    'fév': 2,
    'fév.': 2,
    'fevrier': 2,
    'fev': 2,
    'fev.': 2,
    'mars': 3,
    'mar': 3,
    'mar.': 3,
    'avril': 4,
    'avr': 4,
    'avr.': 4,
    'mai': 5,
    'juin': 6,
    'jun': 6,
    'juillet': 7,
    'jul': 7,
    'jul.': 7,
    'août': 8,
    'aout': 8,
    'septembre': 9,
    'sep': 9,
    'sep.': 9,
    'sept': 9,
    'sept.': 9,
    'octobre': 10,
    'oct': 10,
    'oct.': 10,
    'novembre': 11,
    'nov': 11,
    'nov.': 11,
    'décembre': 12,
    'decembre': 12,
    'dec': 12,
    'dec.': 12
};

exports.INTEGER_WORDS_PATTERN = '(?:un|deux|trois|quatre|cinq|six|sept|huit|neuf|dix|onze|douze|treize)';
exports.INTEGER_WORDS = {
    'un' : 1,
    'deux' : 2,
    'trois' : 3,
    'quatre' : 4,
    'cinq' : 5,
    'six' : 6,
    'sept' : 7,
    'huit' : 8,
    'neuf' : 9,
    'dix' : 10,
    'onze' : 11,
    'douze' : 12,
    'treize' : 13,
};

},{}],156:[function(require,module,exports){


/**
 * to-hankaku.js
 * convert to ascii code strings.
 *
 * @version 1.0.1
 * @author think49
 * @url https://gist.github.com/964592
 * @license http://www.opensource.org/licenses/mit-license.php (The MIT License)
 */
 
exports.toHankaku = (function (String, fromCharCode) {
 
    function toHankaku (string) {
        return String(string).replace(/\u2019/g, '\u0027').replace(/\u201D/g, '\u0022').replace(/\u3000/g, '\u0020').replace(/\uFFE5/g, '\u00A5').replace(/[\uFF01\uFF03-\uFF06\uFF08\uFF09\uFF0C-\uFF19\uFF1C-\uFF1F\uFF21-\uFF3B\uFF3D\uFF3F\uFF41-\uFF5B\uFF5D\uFF5E]/g, alphaNum);
    }
 
    function alphaNum (token) {
        return fromCharCode(token.charCodeAt(0) - 65248);
    }
 
    return toHankaku;
})(String, String.fromCharCode);

/**
 * to-zenkaku.js
 * convert to multi byte strings.
 *
 * @version 1.0.2
 * @author think49
 * @url https://gist.github.com/964592
 * @license http://www.opensource.org/licenses/mit-license.php (The MIT License)
 */
exports.toZenkaku = (function (String, fromCharCode) {
 
    function toZenkaku (string) {
        return String(string).replace(/\u0020/g, '\u3000').replace(/\u0022/g, '\u201D').replace(/\u0027/g, '\u2019').replace(/\u00A5/g, '\uFFE5').replace(/[!#-&(),-9\u003C-?A-[\u005D_a-{}~]/g, alphaNum);
    }
 
    function alphaNum (token) {
        return fromCharCode(token.charCodeAt(0) + 65248);
    }
 
    return toZenkaku;
})(String, String.fromCharCode);
},{}],157:[function(require,module,exports){
var NUMBER ={
  '零':0,
  '一':1,
  '二':2,
  '兩':2,
  '三':3,
  '四':4,
  '五':5,
  '六':6,
  '七':7,
  '八':8,
  '九':9,
  '十':10,
  '廿':20,
  '卅':30,
};

var WEEKDAY_OFFSET ={
  '天':0,
  '日':0,
  '一':1,
  '二':2,
  '三':3,
  '四':4,
  '五':5,
  '六':6,
};

exports.NUMBER = NUMBER;
exports.WEEKDAY_OFFSET = WEEKDAY_OFFSET;

exports.zhStringToNumber=function(text){
  var number = 0;
  for(var i=0; i<text.length ;i++){
    var char = text[i];
    if(char === '十'){
      number = number=== 0 ? NUMBER[char] : (number * NUMBER[char]);
    }else{
      number += NUMBER[char];
    }
  }
  return number;
};

exports.zhStringToYear=function(text){
  var string = '';
  for(var i=0; i<text.length ;i++){
    var char = text[i];
    string = string + NUMBER[char];
  }
  return parseInt(string);
};

},{}],158:[function(require,module,exports){
'use strict';
const os = require('os');

const extractPathRegex = /\s+at.*(?:\(|\s)(.*)\)?/;
const pathRegex = /^(?:(?:(?:node|(?:internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)\.js:\d+:\d+)|native)/;
const homeDir = os.homedir();

module.exports = (stack, options) => {
	options = Object.assign({pretty: false}, options);

	return stack.replace(/\\/g, '/')
		.split('\n')
		.filter(line => {
			const pathMatches = line.match(extractPathRegex);
			if (pathMatches === null || !pathMatches[1]) {
				return true;
			}

			const match = pathMatches[1];

			// Electron
			if (
				match.includes('.app/Contents/Resources/electron.asar') ||
				match.includes('.app/Contents/Resources/default_app.asar')
			) {
				return false;
			}

			return !pathRegex.test(match);
		})
		.filter(line => line.trim() !== '')
		.map(line => {
			if (options.pretty) {
				return line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')));
			}

			return line;
		})
		.join('\n');
};

},{"os":13}],159:[function(require,module,exports){
'use strict';

const PassThrough = require('stream').PassThrough;
const mimicResponse = require('mimic-response');

const cloneResponse = response => {
	if (!(response && response.pipe)) {
		throw new TypeError('Parameter `response` must be a response stream.');
	}

	const clone = new PassThrough();
	mimicResponse(response, clone);

	return response.pipe(clone);
};

module.exports = cloneResponse;

},{"mimic-response":481,"stream":37}],160:[function(require,module,exports){
'use strict';

module.exports = string => {
	if (typeof string !== 'string') {
		throw new TypeError('Expected a string');
	}

	return string.trim().replace(/\s{2,}/g, ' ');
};

},{}],161:[function(require,module,exports){
"use strict";

module.exports = CSSselect;

var Pseudos       = require("./lib/pseudos.js"),
    DomUtils      = require("domutils"),
    findOne       = DomUtils.findOne,
    findAll       = DomUtils.findAll,
    getChildren   = DomUtils.getChildren,
    removeSubsets = DomUtils.removeSubsets,
    falseFunc     = require("boolbase").falseFunc,
    compile       = require("./lib/compile.js"),
    compileUnsafe = compile.compileUnsafe,
    compileToken  = compile.compileToken;

function getSelectorFunc(searchFunc){
	return function select(query, elems, options){
        if(typeof query !== "function") query = compileUnsafe(query, options, elems);
        if(!Array.isArray(elems)) elems = getChildren(elems);
		else elems = removeSubsets(elems);
		return searchFunc(query, elems);
	};
}

var selectAll = getSelectorFunc(function selectAll(query, elems){
	return (query === falseFunc || !elems || elems.length === 0) ? [] : findAll(query, elems);
});

var selectOne = getSelectorFunc(function selectOne(query, elems){
	return (query === falseFunc || !elems || elems.length === 0) ? null : findOne(query, elems);
});

function is(elem, query, options){
	return (typeof query === "function" ? query : compile(query, options))(elem);
}

/*
	the exported interface
*/
function CSSselect(query, elems, options){
	return selectAll(query, elems, options);
}

CSSselect.compile = compile;
CSSselect.filters = Pseudos.filters;
CSSselect.pseudos = Pseudos.pseudos;

CSSselect.selectAll = selectAll;
CSSselect.selectOne = selectOne;

CSSselect.is = is;

//legacy methods (might be removed)
CSSselect.parse = compile;
CSSselect.iterate = selectAll;

//hooks
CSSselect._compileUnsafe = compileUnsafe;
CSSselect._compileToken = compileToken;

},{"./lib/compile.js":163,"./lib/pseudos.js":166,"boolbase":71,"domutils":188}],162:[function(require,module,exports){
var DomUtils  = require("domutils"),
    hasAttrib = DomUtils.hasAttrib,
    getAttributeValue = DomUtils.getAttributeValue,
    falseFunc = require("boolbase").falseFunc;

//https://github.com/slevithan/XRegExp/blob/master/src/xregexp.js#L469
var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;

/*
	attribute selectors
*/

var attributeRules = {
	__proto__: null,
	equals: function(next, data){
		var name  = data.name,
		    value = data.value;

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function equalsIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.toLowerCase() === value && next(elem);
			};
		}

		return function equals(elem){
			return getAttributeValue(elem, name) === value && next(elem);
		};
	},
	hyphen: function(next, data){
		var name  = data.name,
		    value = data.value,
		    len = value.length;

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function hyphenIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null &&
						(attr.length === len || attr.charAt(len) === "-") &&
						attr.substr(0, len).toLowerCase() === value &&
						next(elem);
			};
		}

		return function hyphen(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null &&
					attr.substr(0, len) === value &&
					(attr.length === len || attr.charAt(len) === "-") &&
					next(elem);
		};
	},
	element: function(next, data){
		var name = data.name,
		    value = data.value;

		if(/\s/.test(value)){
			return falseFunc;
		}

		value = value.replace(reChars, "\\$&");

		var pattern = "(?:^|\\s)" + value + "(?:$|\\s)",
		    flags = data.ignoreCase ? "i" : "",
		    regex = new RegExp(pattern, flags);

		return function element(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && regex.test(attr) && next(elem);
		};
	},
	exists: function(next, data){
		var name = data.name;
		return function exists(elem){
			return hasAttrib(elem, name) && next(elem);
		};
	},
	start: function(next, data){
		var name  = data.name,
		    value = data.value,
		    len = value.length;

		if(len === 0){
			return falseFunc;
		}
		
		if(data.ignoreCase){
			value = value.toLowerCase();

			return function startIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.substr(0, len).toLowerCase() === value && next(elem);
			};
		}

		return function start(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && attr.substr(0, len) === value && next(elem);
		};
	},
	end: function(next, data){
		var name  = data.name,
		    value = data.value,
		    len   = -value.length;

		if(len === 0){
			return falseFunc;
		}

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function endIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.substr(len).toLowerCase() === value && next(elem);
			};
		}

		return function end(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && attr.substr(len) === value && next(elem);
		};
	},
	any: function(next, data){
		var name  = data.name,
		    value = data.value;

		if(value === ""){
			return falseFunc;
		}

		if(data.ignoreCase){
			var regex = new RegExp(value.replace(reChars, "\\$&"), "i");

			return function anyIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && regex.test(attr) && next(elem);
			};
		}

		return function any(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && attr.indexOf(value) >= 0 && next(elem);
		};
	},
	not: function(next, data){
		var name  = data.name,
		    value = data.value;

		if(value === ""){
			return function notEmpty(elem){
				return !!getAttributeValue(elem, name) && next(elem);
			};
		} else if(data.ignoreCase){
			value = value.toLowerCase();

			return function notIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.toLowerCase() !== value && next(elem);
			};
		}

		return function not(elem){
			return getAttributeValue(elem, name) !== value && next(elem);
		};
	}
};

module.exports = {
	compile: function(next, data, options){
		if(options && options.strict && (
			data.ignoreCase || data.action === "not"
		)) throw SyntaxError("Unsupported attribute selector");
		return attributeRules[data.action](next, data);
	},
	rules: attributeRules
};

},{"boolbase":71,"domutils":188}],163:[function(require,module,exports){
/*
	compiles a selector to an executable function
*/

module.exports = compile;
module.exports.compileUnsafe = compileUnsafe;
module.exports.compileToken = compileToken;

var parse       = require("css-what"),
    DomUtils    = require("domutils"),
    isTag       = DomUtils.isTag,
    Rules       = require("./general.js"),
    sortRules   = require("./sort.js"),
    BaseFuncs   = require("boolbase"),
    trueFunc    = BaseFuncs.trueFunc,
    falseFunc   = BaseFuncs.falseFunc,
    procedure   = require("./procedure.json");

function compile(selector, options, context){
	var next = compileUnsafe(selector, options, context);
	return wrap(next);
}

function wrap(next){
	return function base(elem){
		return isTag(elem) && next(elem);
	};
}

function compileUnsafe(selector, options, context){
	var token = parse(selector, options);
	return compileToken(token, options, context);
}

function includesScopePseudo(t){
    return t.type === "pseudo" && (
        t.name === "scope" || (
            Array.isArray(t.data) &&
            t.data.some(function(data){
                return data.some(includesScopePseudo);
            })
        )
    );
}

var DESCENDANT_TOKEN = {type: "descendant"},
    SCOPE_TOKEN = {type: "pseudo", name: "scope"},
    PLACEHOLDER_ELEMENT = {},
    getParent = DomUtils.getParent;

//CSS 4 Spec (Draft): 3.3.1. Absolutizing a Scope-relative Selector
//http://www.w3.org/TR/selectors4/#absolutizing
function absolutize(token, context){
    //TODO better check if context is document
    var hasContext = !!context && !!context.length && context.every(function(e){
        return e === PLACEHOLDER_ELEMENT || !!getParent(e);
    });


    token.forEach(function(t){
        if(t.length > 0 && isTraversal(t[0]) && t[0].type !== "descendant"){
            //don't return in else branch
        } else if(hasContext && !includesScopePseudo(t)){
            t.unshift(DESCENDANT_TOKEN);
        } else {
            return;
        }

        t.unshift(SCOPE_TOKEN);
    });
}

function compileToken(token, options, context){
    token = token.filter(function(t){ return t.length > 0; });

	token.forEach(sortRules);

	var isArrayContext = Array.isArray(context);

    context = (options && options.context) || context;

    if(context && !isArrayContext) context = [context];

    absolutize(token, context);

	return token
		.map(function(rules){ return compileRules(rules, options, context, isArrayContext); })
		.reduce(reduceRules, falseFunc);
}

function isTraversal(t){
	return procedure[t.type] < 0;
}

function compileRules(rules, options, context, isArrayContext){
	var acceptSelf = (isArrayContext && rules[0].name === "scope" && rules[1].type === "descendant");
	return rules.reduce(function(func, rule, index){
		if(func === falseFunc) return func;
		return Rules[rule.type](func, rule, options, context, acceptSelf && index === 1);
	}, options && options.rootFunc || trueFunc);
}

function reduceRules(a, b){
	if(b === falseFunc || a === trueFunc){
		return a;
	}
	if(a === falseFunc || b === trueFunc){
		return b;
	}

	return function combine(elem){
		return a(elem) || b(elem);
	};
}

//:not, :has and :matches have to compile selectors
//doing this in lib/pseudos.js would lead to circular dependencies,
//so we add them here

var Pseudos     = require("./pseudos.js"),
    filters     = Pseudos.filters,
    existsOne   = DomUtils.existsOne,
    isTag       = DomUtils.isTag,
    getChildren = DomUtils.getChildren;


function containsTraversal(t){
	return t.some(isTraversal);
}

filters.not = function(next, token, options, context){
	var opts = {
	    	xmlMode: !!(options && options.xmlMode),
	    	strict: !!(options && options.strict)
	    };

	if(opts.strict){
		if(token.length > 1 || token.some(containsTraversal)){
			throw new SyntaxError("complex selectors in :not aren't allowed in strict mode");
		}
	}

    var func = compileToken(token, opts, context);

	if(func === falseFunc) return next;
	if(func === trueFunc)  return falseFunc;

	return function(elem){
		return !func(elem) && next(elem);
	};
};

filters.has = function(next, token, options){
	var opts = {
		xmlMode: !!(options && options.xmlMode),
		strict: !!(options && options.strict)
	};

    //FIXME: Uses an array as a pointer to the current element (side effects)
    var context = token.some(containsTraversal) ? [PLACEHOLDER_ELEMENT] : null;

	var func = compileToken(token, opts, context);

	if(func === falseFunc) return falseFunc;
	if(func === trueFunc)  return function(elem){
			return getChildren(elem).some(isTag) && next(elem);
		};

	func = wrap(func);

    if(context){
        return function has(elem){
		return next(elem) && (
                (context[0] = elem), existsOne(func, getChildren(elem))
            );
	};
    }

    return function has(elem){
		return next(elem) && existsOne(func, getChildren(elem));
	};
};

filters.matches = function(next, token, options, context){
	var opts = {
		xmlMode: !!(options && options.xmlMode),
		strict: !!(options && options.strict),
		rootFunc: next
	};

	return compileToken(token, opts, context);
};

},{"./general.js":164,"./procedure.json":165,"./pseudos.js":166,"./sort.js":167,"boolbase":71,"css-what":168,"domutils":188}],164:[function(require,module,exports){
var DomUtils    = require("domutils"),
    isTag       = DomUtils.isTag,
    getParent   = DomUtils.getParent,
    getChildren = DomUtils.getChildren,
    getSiblings = DomUtils.getSiblings,
    getName     = DomUtils.getName;

/*
	all available rules
*/
module.exports = {
	__proto__: null,

	attribute: require("./attributes.js").compile,
	pseudo: require("./pseudos.js").compile,

	//tags
	tag: function(next, data){
		var name = data.name;
		return function tag(elem){
			return getName(elem) === name && next(elem);
		};
	},

	//traversal
	descendant: function(next, rule, options, context, acceptSelf){
		return function descendant(elem){

			if (acceptSelf && next(elem)) return true;

			var found = false;

			while(!found && (elem = getParent(elem))){
				found = next(elem);
			}

			return found;
		};
	},
	parent: function(next, data, options){
		if(options && options.strict) throw SyntaxError("Parent selector isn't part of CSS3");

		return function parent(elem){
			return getChildren(elem).some(test);
		};

		function test(elem){
			return isTag(elem) && next(elem);
		}
	},
	child: function(next){
		return function child(elem){
			var parent = getParent(elem);
			return !!parent && next(parent);
		};
	},
	sibling: function(next){
		return function sibling(elem){
			var siblings = getSiblings(elem);

			for(var i = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(next(siblings[i])) return true;
				}
			}

			return false;
		};
	},
	adjacent: function(next){
		return function adjacent(elem){
			var siblings = getSiblings(elem),
			    lastElement;

			for(var i = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					lastElement = siblings[i];
				}
			}

			return !!lastElement && next(lastElement);
		};
	},
	universal: function(next){
		return next;
	}
};
},{"./attributes.js":162,"./pseudos.js":166,"domutils":188}],165:[function(require,module,exports){
module.exports={
  "universal": 50,
  "tag": 30,
  "attribute": 1,
  "pseudo": 0,
  "descendant": -1,
  "child": -1,
  "parent": -1,
  "sibling": -1,
  "adjacent": -1
}

},{}],166:[function(require,module,exports){
/*
	pseudo selectors

	---

	they are available in two forms:
	* filters called when the selector
	  is compiled and return a function
	  that needs to return next()
	* pseudos get called on execution
	  they need to return a boolean
*/

var DomUtils    = require("domutils"),
    isTag       = DomUtils.isTag,
    getText     = DomUtils.getText,
    getParent   = DomUtils.getParent,
    getChildren = DomUtils.getChildren,
    getSiblings = DomUtils.getSiblings,
    hasAttrib   = DomUtils.hasAttrib,
    getName     = DomUtils.getName,
    getAttribute= DomUtils.getAttributeValue,
    getNCheck   = require("nth-check"),
    checkAttrib = require("./attributes.js").rules.equals,
    BaseFuncs   = require("boolbase"),
    trueFunc    = BaseFuncs.trueFunc,
    falseFunc   = BaseFuncs.falseFunc;

//helper methods
function getFirstElement(elems){
	for(var i = 0; elems && i < elems.length; i++){
		if(isTag(elems[i])) return elems[i];
	}
}

function getAttribFunc(name, value){
	var data = {name: name, value: value};
	return function attribFunc(next){
		return checkAttrib(next, data);
	};
}

function getChildFunc(next){
	return function(elem){
		return !!getParent(elem) && next(elem);
	};
}

var filters = {
	contains: function(next, text){
		return function contains(elem){
			return next(elem) && getText(elem).indexOf(text) >= 0;
		};
	},
	icontains: function(next, text){
		var itext = text.toLowerCase();
		return function icontains(elem){
			return next(elem) &&
				getText(elem).toLowerCase().indexOf(itext) >= 0;
		};
	},

	//location specific methods
	"nth-child": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthChild(elem){
			var siblings = getSiblings(elem);

			for(var i = 0, pos = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					else pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},
	"nth-last-child": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthLastChild(elem){
			var siblings = getSiblings(elem);

			for(var pos = 0, i = siblings.length - 1; i >= 0; i--){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					else pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},
	"nth-of-type": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthOfType(elem){
			var siblings = getSiblings(elem);

			for(var pos = 0, i = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(getName(siblings[i]) === getName(elem)) pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},
	"nth-last-of-type": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthLastOfType(elem){
			var siblings = getSiblings(elem);

			for(var pos = 0, i = siblings.length - 1; i >= 0; i--){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(getName(siblings[i]) === getName(elem)) pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},

    //TODO determine the actual root element
    root: function(next){
        return function(elem){
            return !getParent(elem) && next(elem);
        };
    },

    scope: function(next, rule, options, context){
        if(!context || context.length === 0){
            //equivalent to :root
            return filters.root(next);
        }

        if(context.length === 1){
            //NOTE: can't be unpacked, as :has uses this for side-effects
            return function(elem){
                return context[0] === elem && next(elem);
            };
        }

        return function(elem){
            return context.indexOf(elem) >= 0 && next(elem);
        };
    },

	//jQuery extensions (others follow as pseudos)
	checkbox: getAttribFunc("type", "checkbox"),
	file: getAttribFunc("type", "file"),
	password: getAttribFunc("type", "password"),
	radio: getAttribFunc("type", "radio"),
	reset: getAttribFunc("type", "reset"),
	image: getAttribFunc("type", "image"),
	submit: getAttribFunc("type", "submit")
};

//while filters are precompiled, pseudos get called when they are needed
var pseudos = {
	empty: function(elem){
		return !getChildren(elem).some(function(elem){
			return isTag(elem) || elem.type === "text";
		});
	},

	"first-child": function(elem){
		return getFirstElement(getSiblings(elem)) === elem;
	},
	"last-child": function(elem){
		var siblings = getSiblings(elem);

		for(var i = siblings.length - 1; i >= 0; i--){
			if(siblings[i] === elem) return true;
			if(isTag(siblings[i])) break;
		}

		return false;
	},
	"first-of-type": function(elem){
		var siblings = getSiblings(elem);

		for(var i = 0; i < siblings.length; i++){
			if(isTag(siblings[i])){
				if(siblings[i] === elem) return true;
				if(getName(siblings[i]) === getName(elem)) break;
			}
		}

		return false;
	},
	"last-of-type": function(elem){
		var siblings = getSiblings(elem);

		for(var i = siblings.length-1; i >= 0; i--){
			if(isTag(siblings[i])){
				if(siblings[i] === elem) return true;
				if(getName(siblings[i]) === getName(elem)) break;
			}
		}

		return false;
	},
	"only-of-type": function(elem){
		var siblings = getSiblings(elem);

		for(var i = 0, j = siblings.length; i < j; i++){
			if(isTag(siblings[i])){
				if(siblings[i] === elem) continue;
				if(getName(siblings[i]) === getName(elem)) return false;
			}
		}

		return true;
	},
	"only-child": function(elem){
		var siblings = getSiblings(elem);

		for(var i = 0; i < siblings.length; i++){
			if(isTag(siblings[i]) && siblings[i] !== elem) return false;
		}

		return true;
	},

	//:matches(a, area, link)[href]
	link: function(elem){
		return hasAttrib(elem, "href");
	},
	visited: falseFunc, //seems to be a valid implementation
	//TODO: :any-link once the name is finalized (as an alias of :link)

	//forms
	//to consider: :target

	//:matches([selected], select:not([multiple]):not(> option[selected]) > option:first-of-type)
	selected: function(elem){
		if(hasAttrib(elem, "selected")) return true;
		else if(getName(elem) !== "option") return false;

		//the first <option> in a <select> is also selected
		var parent = getParent(elem);

		if(
			!parent ||
			getName(parent) !== "select" ||
			hasAttrib(parent, "multiple")
		) return false;

		var siblings = getChildren(parent),
			sawElem  = false;

		for(var i = 0; i < siblings.length; i++){
			if(isTag(siblings[i])){
				if(siblings[i] === elem){
					sawElem = true;
				} else if(!sawElem){
					return false;
				} else if(hasAttrib(siblings[i], "selected")){
					return false;
				}
			}
		}

		return sawElem;
	},
	//https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements
	//:matches(
	//  :matches(button, input, select, textarea, menuitem, optgroup, option)[disabled],
	//  optgroup[disabled] > option),
	// fieldset[disabled] * //TODO not child of first <legend>
	//)
	disabled: function(elem){
		return hasAttrib(elem, "disabled");
	},
	enabled: function(elem){
		return !hasAttrib(elem, "disabled");
	},
	//:matches(:matches(:radio, :checkbox)[checked], :selected) (TODO menuitem)
	checked: function(elem){
		return hasAttrib(elem, "checked") || pseudos.selected(elem);
	},
	//:matches(input, select, textarea)[required]
	required: function(elem){
		return hasAttrib(elem, "required");
	},
	//:matches(input, select, textarea):not([required])
	optional: function(elem){
		return !hasAttrib(elem, "required");
	},

	//jQuery extensions

	//:not(:empty)
	parent: function(elem){
		return !pseudos.empty(elem);
	},
	//:matches(h1, h2, h3, h4, h5, h6)
	header: function(elem){
		var name = getName(elem);
		return name === "h1" ||
		       name === "h2" ||
		       name === "h3" ||
		       name === "h4" ||
		       name === "h5" ||
		       name === "h6";
	},

	//:matches(button, input[type=button])
	button: function(elem){
		var name = getName(elem);
		return name === "button" ||
		       name === "input" &&
		       getAttribute(elem, "type") === "button";
	},
	//:matches(input, textarea, select, button)
	input: function(elem){
		var name = getName(elem);
		return name === "input" ||
		       name === "textarea" ||
		       name === "select" ||
		       name === "button";
	},
	//input:matches(:not([type!='']), [type='text' i])
	text: function(elem){
		var attr;
		return getName(elem) === "input" && (
			!(attr = getAttribute(elem, "type")) ||
			attr.toLowerCase() === "text"
		);
	}
};

function verifyArgs(func, name, subselect){
	if(subselect === null){
		if(func.length > 1 && name !== "scope"){
			throw new SyntaxError("pseudo-selector :" + name + " requires an argument");
		}
	} else {
		if(func.length === 1){
			throw new SyntaxError("pseudo-selector :" + name + " doesn't have any arguments");
		}
	}
}

//FIXME this feels hacky
var re_CSS3 = /^(?:(?:nth|last|first|only)-(?:child|of-type)|root|empty|(?:en|dis)abled|checked|not)$/;

module.exports = {
	compile: function(next, data, options, context){
		var name = data.name,
			subselect = data.data;

		if(options && options.strict && !re_CSS3.test(name)){
			throw SyntaxError(":" + name + " isn't part of CSS3");
		}

		if(typeof filters[name] === "function"){
			verifyArgs(filters[name], name,  subselect);
			return filters[name](next, subselect, options, context);
		} else if(typeof pseudos[name] === "function"){
			var func = pseudos[name];
			verifyArgs(func, name, subselect);

			if(next === trueFunc) return func;

			return function pseudoArgs(elem){
				return func(elem, subselect) && next(elem);
			};
		} else {
			throw new SyntaxError("unmatched pseudo-class :" + name);
		}
	},
	filters: filters,
	pseudos: pseudos
};

},{"./attributes.js":162,"boolbase":71,"domutils":188,"nth-check":486}],167:[function(require,module,exports){
module.exports = sortByProcedure;

/*
	sort the parts of the passed selector,
	as there is potential for optimization
	(some types of selectors are faster than others)
*/

var procedure = require("./procedure.json");

var attributes = {
	__proto__: null,
	exists: 10,
	equals: 8,
	not: 7,
	start: 6,
	end: 6,
	any: 5,
	hyphen: 4,
	element: 4
};

function sortByProcedure(arr){
	var procs = arr.map(getProcedure);
	for(var i = 1; i < arr.length; i++){
		var procNew = procs[i];

		if(procNew < 0) continue;

		for(var j = i - 1; j >= 0 && procNew < procs[j]; j--){
			var token = arr[j + 1];
			arr[j + 1] = arr[j];
			arr[j] = token;
			procs[j + 1] = procs[j];
			procs[j] = procNew;
		}
	}
}

function getProcedure(token){
	var proc = procedure[token.type];

	if(proc === procedure.attribute){
		proc = attributes[token.action];

		if(proc === attributes.equals && token.name === "id"){
			//prefer ID selectors (eg. #ID)
			proc = 9;
		}

		if(token.ignoreCase){
			//ignoreCase adds some overhead, prefer "normal" token
			//this is a binary operation, to ensure it's still an int
			proc >>= 1;
		}
	} else if(proc === procedure.pseudo){
		if(!token.data){
			proc = 3;
		} else if(token.name === "has" || token.name === "contains"){
			proc = 0; //expensive in any case
		} else if(token.name === "matches" || token.name === "not"){
			proc = 0;
			for(var i = 0; i < token.data.length; i++){
				//TODO better handling of complex selectors
				if(token.data[i].length !== 1) continue;
				var cur = getProcedure(token.data[i][0]);
				//avoid executing :has or :contains
				if(cur === 0){
					proc = 0;
					break;
				}
				if(cur > proc) proc = cur;
			}
			if(token.data.length > 1 && proc > 0) proc -= 1;
		} else {
			proc = 1;
		}
	}
	return proc;
}

},{"./procedure.json":165}],168:[function(require,module,exports){
"use strict";

module.exports = parse;

var re_name = /^(?:\\.|[\w\-\u00b0-\uFFFF])+/,
    re_escape = /\\([\da-f]{1,6}\s?|(\s)|.)/ig,
    //modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87
    re_attr = /^\s*((?:\\.|[\w\u00b0-\uFFFF\-])+)\s*(?:(\S?)=\s*(?:(['"])([^]*?)\3|(#?(?:\\.|[\w\u00b0-\uFFFF\-])*)|)|)\s*(i)?\]/;

var actionTypes = {
	__proto__: null,
	"undefined": "exists",
	"":  "equals",
	"~": "element",
	"^": "start",
	"$": "end",
	"*": "any",
	"!": "not",
	"|": "hyphen"
};

var simpleSelectors = {
	__proto__: null,
	">": "child",
	"<": "parent",
	"~": "sibling",
	"+": "adjacent"
};

var attribSelectors = {
	__proto__: null,
	"#": ["id", "equals"],
	".": ["class", "element"]
};

//pseudos, whose data-property is parsed as well
var unpackPseudos = {
	__proto__: null,
	"has": true,
	"not": true,
	"matches": true
};

var stripQuotesFromPseudos = {
	__proto__: null,
	"contains": true,
	"icontains": true
};

var quotes = {
	__proto__: null,
	"\"": true,
	"'": true
};

//unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L139
function funescape( _, escaped, escapedWhitespace ) {
	var high = "0x" + escaped - 0x10000;
	// NaN means non-codepoint
	// Support: Firefox
	// Workaround erroneous numeric interpretation of +"0x"
	return high !== high || escapedWhitespace ?
		escaped :
		// BMP codepoint
		high < 0 ?
			String.fromCharCode( high + 0x10000 ) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
}

function unescapeCSS(str){
	return str.replace(re_escape, funescape);
}

function isWhitespace(c){
	return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function parse(selector, options){
	var subselects = [];

	selector = parseSelector(subselects, selector + "", options);

	if(selector !== ""){
		throw new SyntaxError("Unmatched selector: " + selector);
	}

	return subselects;
}

function parseSelector(subselects, selector, options){
	var tokens = [],
		sawWS = false,
		data, firstChar, name, quot;

	function getName(){
		var sub = selector.match(re_name)[0];
		selector = selector.substr(sub.length);
		return unescapeCSS(sub);
	}

	function stripWhitespace(start){
		while(isWhitespace(selector.charAt(start))) start++;
		selector = selector.substr(start);
	}

	function isEscaped(pos) {
		var slashCount = 0;

		while (selector.charAt(--pos) === "\\") slashCount++;
		return (slashCount & 1) === 1;
	}

	stripWhitespace(0);

	while(selector !== ""){
		firstChar = selector.charAt(0);

		if(isWhitespace(firstChar)){
			sawWS = true;
			stripWhitespace(1);
		} else if(firstChar in simpleSelectors){
			tokens.push({type: simpleSelectors[firstChar]});
			sawWS = false;

			stripWhitespace(1);
		} else if(firstChar === ","){
			if(tokens.length === 0){
				throw new SyntaxError("empty sub-selector");
			}
			subselects.push(tokens);
			tokens = [];
			sawWS = false;
			stripWhitespace(1);
		} else {
			if(sawWS){
				if(tokens.length > 0){
					tokens.push({type: "descendant"});
				}
				sawWS = false;
			}

			if(firstChar === "*"){
				selector = selector.substr(1);
				tokens.push({type: "universal"});
			} else if(firstChar in attribSelectors){
				selector = selector.substr(1);
				tokens.push({
					type: "attribute",
					name: attribSelectors[firstChar][0],
					action: attribSelectors[firstChar][1],
					value: getName(),
					ignoreCase: false
				});
			} else if(firstChar === "["){
				selector = selector.substr(1);
				data = selector.match(re_attr);
				if(!data){
					throw new SyntaxError("Malformed attribute selector: " + selector);
				}
				selector = selector.substr(data[0].length);
				name = unescapeCSS(data[1]);

				if(
					!options || (
						"lowerCaseAttributeNames" in options ?
							options.lowerCaseAttributeNames :
							!options.xmlMode
					)
				){
					name = name.toLowerCase();
				}

				tokens.push({
					type: "attribute",
					name: name,
					action: actionTypes[data[2]],
					value: unescapeCSS(data[4] || data[5] || ""),
					ignoreCase: !!data[6]
				});

			} else if(firstChar === ":"){
				if(selector.charAt(1) === ":"){
					selector = selector.substr(2);
					tokens.push({type: "pseudo-element", name: getName().toLowerCase()});
					continue;
				}

				selector = selector.substr(1);

				name = getName().toLowerCase();
				data = null;

				if(selector.charAt(0) === "("){
					if(name in unpackPseudos){
						quot = selector.charAt(1);
						var quoted = quot in quotes;

						selector = selector.substr(quoted + 1);

						data = [];
						selector = parseSelector(data, selector, options);

						if(quoted){
							if(selector.charAt(0) !== quot){
								throw new SyntaxError("unmatched quotes in :" + name);
							} else {
								selector = selector.substr(1);
							}
						}

						if(selector.charAt(0) !== ")"){
							throw new SyntaxError("missing closing parenthesis in :" + name + " " + selector);
						}

						selector = selector.substr(1);
					} else {
						var pos = 1, counter = 1;

						for(; counter > 0 && pos < selector.length; pos++){
							if(selector.charAt(pos) === "(" && !isEscaped(pos)) counter++;
							else if(selector.charAt(pos) === ")" && !isEscaped(pos)) counter--;
						}

						if(counter){
							throw new SyntaxError("parenthesis not matched");
						}

						data = selector.substr(1, pos - 2);
						selector = selector.substr(pos);

						if(name in stripQuotesFromPseudos){
							quot = data.charAt(0);

							if(quot === data.slice(-1) && quot in quotes){
								data = data.slice(1, -1);
							}

							data = unescapeCSS(data);
						}
					}
				}

				tokens.push({type: "pseudo", name: name, data: data});
			} else if(re_name.test(selector)){
				name = getName();

				if(!options || ("lowerCaseTags" in options ? options.lowerCaseTags : !options.xmlMode)){
					name = name.toLowerCase();
				}

				tokens.push({type: "tag", name: name});
			} else {
				if(tokens.length && tokens[tokens.length - 1].type === "descendant"){
					tokens.pop();
				}
				addToken(subselects, tokens);
				return selector;
			}
		}
	}

	addToken(subselects, tokens);

	return selector;
}

function addToken(subselects, tokens){
	if(subselects.length > 0 && tokens.length === 0){
		throw new SyntaxError("empty sub-selector");
	}

	subselects.push(tokens);
}

},{}],169:[function(require,module,exports){
/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */

var DEFAULT = require('./default');
var parseStyle = require('./parser');
var _ = require('./util');


/**
 * 返回值是否为空
 *
 * @param {Object} obj
 * @return {Boolean}
 */
function isNull (obj) {
  return (obj === undefined || obj === null);
}

/**
 * 浅拷贝对象
 *
 * @param {Object} obj
 * @return {Object}
 */
function shallowCopyObject (obj) {
  var ret = {};
  for (var i in obj) {
    ret[i] = obj[i];
  }
  return ret;
}

/**
 * 创建CSS过滤器
 *
 * @param {Object} options
 *   - {Object} whiteList
 *   - {Function} onAttr
 *   - {Function} onIgnoreAttr
 *   - {Function} safeAttrValue
 */
function FilterCSS (options) {
  options = shallowCopyObject(options || {});
  options.whiteList = options.whiteList || DEFAULT.whiteList;
  options.onAttr = options.onAttr || DEFAULT.onAttr;
  options.onIgnoreAttr = options.onIgnoreAttr || DEFAULT.onIgnoreAttr;
  options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
  this.options = options;
}

FilterCSS.prototype.process = function (css) {
  // 兼容各种奇葩输入
  css = css || '';
  css = css.toString();
  if (!css) return '';

  var me = this;
  var options = me.options;
  var whiteList = options.whiteList;
  var onAttr = options.onAttr;
  var onIgnoreAttr = options.onIgnoreAttr;
  var safeAttrValue = options.safeAttrValue;

  var retCSS = parseStyle(css, function (sourcePosition, position, name, value, source) {

    var check = whiteList[name];
    var isWhite = false;
    if (check === true) isWhite = check;
    else if (typeof check === 'function') isWhite = check(value);
    else if (check instanceof RegExp) isWhite = check.test(value);
    if (isWhite !== true) isWhite = false;

    // 如果过滤后 value 为空则直接忽略
    value = safeAttrValue(name, value);
    if (!value) return;

    var opts = {
      position: position,
      sourcePosition: sourcePosition,
      source: source,
      isWhite: isWhite
    };

    if (isWhite) {

      var ret = onAttr(name, value, opts);
      if (isNull(ret)) {
        return name + ':' + value;
      } else {
        return ret;
      }

    } else {

      var ret = onIgnoreAttr(name, value, opts);
      if (!isNull(ret)) {
        return ret;
      }

    }
  });

  return retCSS;
};


module.exports = FilterCSS;

},{"./default":170,"./parser":172,"./util":173}],170:[function(require,module,exports){
/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */

function getDefaultWhiteList () {
  // 白名单值说明：
  // true: 允许该属性
  // Function: function (val) { } 返回true表示允许该属性，其他值均表示不允许
  // RegExp: regexp.test(val) 返回true表示允许该属性，其他值均表示不允许
  // 除上面列出的值外均表示不允许
  var whiteList = {};

  whiteList['align-content'] = false; // default: auto
  whiteList['align-items'] = false; // default: auto
  whiteList['align-self'] = false; // default: auto
  whiteList['alignment-adjust'] = false; // default: auto
  whiteList['alignment-baseline'] = false; // default: baseline
  whiteList['all'] = false; // default: depending on individual properties
  whiteList['anchor-point'] = false; // default: none
  whiteList['animation'] = false; // default: depending on individual properties
  whiteList['animation-delay'] = false; // default: 0
  whiteList['animation-direction'] = false; // default: normal
  whiteList['animation-duration'] = false; // default: 0
  whiteList['animation-fill-mode'] = false; // default: none
  whiteList['animation-iteration-count'] = false; // default: 1
  whiteList['animation-name'] = false; // default: none
  whiteList['animation-play-state'] = false; // default: running
  whiteList['animation-timing-function'] = false; // default: ease
  whiteList['azimuth'] = false; // default: center
  whiteList['backface-visibility'] = false; // default: visible
  whiteList['background'] = true; // default: depending on individual properties
  whiteList['background-attachment'] = true; // default: scroll
  whiteList['background-clip'] = true; // default: border-box
  whiteList['background-color'] = true; // default: transparent
  whiteList['background-image'] = true; // default: none
  whiteList['background-origin'] = true; // default: padding-box
  whiteList['background-position'] = true; // default: 0% 0%
  whiteList['background-repeat'] = true; // default: repeat
  whiteList['background-size'] = true; // default: auto
  whiteList['baseline-shift'] = false; // default: baseline
  whiteList['binding'] = false; // default: none
  whiteList['bleed'] = false; // default: 6pt
  whiteList['bookmark-label'] = false; // default: content()
  whiteList['bookmark-level'] = false; // default: none
  whiteList['bookmark-state'] = false; // default: open
  whiteList['border'] = true; // default: depending on individual properties
  whiteList['border-bottom'] = true; // default: depending on individual properties
  whiteList['border-bottom-color'] = true; // default: current color
  whiteList['border-bottom-left-radius'] = true; // default: 0
  whiteList['border-bottom-right-radius'] = true; // default: 0
  whiteList['border-bottom-style'] = true; // default: none
  whiteList['border-bottom-width'] = true; // default: medium
  whiteList['border-collapse'] = true; // default: separate
  whiteList['border-color'] = true; // default: depending on individual properties
  whiteList['border-image'] = true; // default: none
  whiteList['border-image-outset'] = true; // default: 0
  whiteList['border-image-repeat'] = true; // default: stretch
  whiteList['border-image-slice'] = true; // default: 100%
  whiteList['border-image-source'] = true; // default: none
  whiteList['border-image-width'] = true; // default: 1
  whiteList['border-left'] = true; // default: depending on individual properties
  whiteList['border-left-color'] = true; // default: current color
  whiteList['border-left-style'] = true; // default: none
  whiteList['border-left-width'] = true; // default: medium
  whiteList['border-radius'] = true; // default: 0
  whiteList['border-right'] = true; // default: depending on individual properties
  whiteList['border-right-color'] = true; // default: current color
  whiteList['border-right-style'] = true; // default: none
  whiteList['border-right-width'] = true; // default: medium
  whiteList['border-spacing'] = true; // default: 0
  whiteList['border-style'] = true; // default: depending on individual properties
  whiteList['border-top'] = true; // default: depending on individual properties
  whiteList['border-top-color'] = true; // default: current color
  whiteList['border-top-left-radius'] = true; // default: 0
  whiteList['border-top-right-radius'] = true; // default: 0
  whiteList['border-top-style'] = true; // default: none
  whiteList['border-top-width'] = true; // default: medium
  whiteList['border-width'] = true; // default: depending on individual properties
  whiteList['bottom'] = false; // default: auto
  whiteList['box-decoration-break'] = true; // default: slice
  whiteList['box-shadow'] = true; // default: none
  whiteList['box-sizing'] = true; // default: content-box
  whiteList['box-snap'] = true; // default: none
  whiteList['box-suppress'] = true; // default: show
  whiteList['break-after'] = true; // default: auto
  whiteList['break-before'] = true; // default: auto
  whiteList['break-inside'] = true; // default: auto
  whiteList['caption-side'] = false; // default: top
  whiteList['chains'] = false; // default: none
  whiteList['clear'] = true; // default: none
  whiteList['clip'] = false; // default: auto
  whiteList['clip-path'] = false; // default: none
  whiteList['clip-rule'] = false; // default: nonzero
  whiteList['color'] = true; // default: implementation dependent
  whiteList['color-interpolation-filters'] = true; // default: auto
  whiteList['column-count'] = false; // default: auto
  whiteList['column-fill'] = false; // default: balance
  whiteList['column-gap'] = false; // default: normal
  whiteList['column-rule'] = false; // default: depending on individual properties
  whiteList['column-rule-color'] = false; // default: current color
  whiteList['column-rule-style'] = false; // default: medium
  whiteList['column-rule-width'] = false; // default: medium
  whiteList['column-span'] = false; // default: none
  whiteList['column-width'] = false; // default: auto
  whiteList['columns'] = false; // default: depending on individual properties
  whiteList['contain'] = false; // default: none
  whiteList['content'] = false; // default: normal
  whiteList['counter-increment'] = false; // default: none
  whiteList['counter-reset'] = false; // default: none
  whiteList['counter-set'] = false; // default: none
  whiteList['crop'] = false; // default: auto
  whiteList['cue'] = false; // default: depending on individual properties
  whiteList['cue-after'] = false; // default: none
  whiteList['cue-before'] = false; // default: none
  whiteList['cursor'] = false; // default: auto
  whiteList['direction'] = false; // default: ltr
  whiteList['display'] = true; // default: depending on individual properties
  whiteList['display-inside'] = true; // default: auto
  whiteList['display-list'] = true; // default: none
  whiteList['display-outside'] = true; // default: inline-level
  whiteList['dominant-baseline'] = false; // default: auto
  whiteList['elevation'] = false; // default: level
  whiteList['empty-cells'] = false; // default: show
  whiteList['filter'] = false; // default: none
  whiteList['flex'] = false; // default: depending on individual properties
  whiteList['flex-basis'] = false; // default: auto
  whiteList['flex-direction'] = false; // default: row
  whiteList['flex-flow'] = false; // default: depending on individual properties
  whiteList['flex-grow'] = false; // default: 0
  whiteList['flex-shrink'] = false; // default: 1
  whiteList['flex-wrap'] = false; // default: nowrap
  whiteList['float'] = false; // default: none
  whiteList['float-offset'] = false; // default: 0 0
  whiteList['flood-color'] = false; // default: black
  whiteList['flood-opacity'] = false; // default: 1
  whiteList['flow-from'] = false; // default: none
  whiteList['flow-into'] = false; // default: none
  whiteList['font'] = true; // default: depending on individual properties
  whiteList['font-family'] = true; // default: implementation dependent
  whiteList['font-feature-settings'] = true; // default: normal
  whiteList['font-kerning'] = true; // default: auto
  whiteList['font-language-override'] = true; // default: normal
  whiteList['font-size'] = true; // default: medium
  whiteList['font-size-adjust'] = true; // default: none
  whiteList['font-stretch'] = true; // default: normal
  whiteList['font-style'] = true; // default: normal
  whiteList['font-synthesis'] = true; // default: weight style
  whiteList['font-variant'] = true; // default: normal
  whiteList['font-variant-alternates'] = true; // default: normal
  whiteList['font-variant-caps'] = true; // default: normal
  whiteList['font-variant-east-asian'] = true; // default: normal
  whiteList['font-variant-ligatures'] = true; // default: normal
  whiteList['font-variant-numeric'] = true; // default: normal
  whiteList['font-variant-position'] = true; // default: normal
  whiteList['font-weight'] = true; // default: normal
  whiteList['grid'] = false; // default: depending on individual properties
  whiteList['grid-area'] = false; // default: depending on individual properties
  whiteList['grid-auto-columns'] = false; // default: auto
  whiteList['grid-auto-flow'] = false; // default: none
  whiteList['grid-auto-rows'] = false; // default: auto
  whiteList['grid-column'] = false; // default: depending on individual properties
  whiteList['grid-column-end'] = false; // default: auto
  whiteList['grid-column-start'] = false; // default: auto
  whiteList['grid-row'] = false; // default: depending on individual properties
  whiteList['grid-row-end'] = false; // default: auto
  whiteList['grid-row-start'] = false; // default: auto
  whiteList['grid-template'] = false; // default: depending on individual properties
  whiteList['grid-template-areas'] = false; // default: none
  whiteList['grid-template-columns'] = false; // default: none
  whiteList['grid-template-rows'] = false; // default: none
  whiteList['hanging-punctuation'] = false; // default: none
  whiteList['height'] = true; // default: auto
  whiteList['hyphens'] = false; // default: manual
  whiteList['icon'] = false; // default: auto
  whiteList['image-orientation'] = false; // default: auto
  whiteList['image-resolution'] = false; // default: normal
  whiteList['ime-mode'] = false; // default: auto
  whiteList['initial-letters'] = false; // default: normal
  whiteList['inline-box-align'] = false; // default: last
  whiteList['justify-content'] = false; // default: auto
  whiteList['justify-items'] = false; // default: auto
  whiteList['justify-self'] = false; // default: auto
  whiteList['left'] = false; // default: auto
  whiteList['letter-spacing'] = true; // default: normal
  whiteList['lighting-color'] = true; // default: white
  whiteList['line-box-contain'] = false; // default: block inline replaced
  whiteList['line-break'] = false; // default: auto
  whiteList['line-grid'] = false; // default: match-parent
  whiteList['line-height'] = false; // default: normal
  whiteList['line-snap'] = false; // default: none
  whiteList['line-stacking'] = false; // default: depending on individual properties
  whiteList['line-stacking-ruby'] = false; // default: exclude-ruby
  whiteList['line-stacking-shift'] = false; // default: consider-shifts
  whiteList['line-stacking-strategy'] = false; // default: inline-line-height
  whiteList['list-style'] = true; // default: depending on individual properties
  whiteList['list-style-image'] = true; // default: none
  whiteList['list-style-position'] = true; // default: outside
  whiteList['list-style-type'] = true; // default: disc
  whiteList['margin'] = true; // default: depending on individual properties
  whiteList['margin-bottom'] = true; // default: 0
  whiteList['margin-left'] = true; // default: 0
  whiteList['margin-right'] = true; // default: 0
  whiteList['margin-top'] = true; // default: 0
  whiteList['marker-offset'] = false; // default: auto
  whiteList['marker-side'] = false; // default: list-item
  whiteList['marks'] = false; // default: none
  whiteList['mask'] = false; // default: border-box
  whiteList['mask-box'] = false; // default: see individual properties
  whiteList['mask-box-outset'] = false; // default: 0
  whiteList['mask-box-repeat'] = false; // default: stretch
  whiteList['mask-box-slice'] = false; // default: 0 fill
  whiteList['mask-box-source'] = false; // default: none
  whiteList['mask-box-width'] = false; // default: auto
  whiteList['mask-clip'] = false; // default: border-box
  whiteList['mask-image'] = false; // default: none
  whiteList['mask-origin'] = false; // default: border-box
  whiteList['mask-position'] = false; // default: center
  whiteList['mask-repeat'] = false; // default: no-repeat
  whiteList['mask-size'] = false; // default: border-box
  whiteList['mask-source-type'] = false; // default: auto
  whiteList['mask-type'] = false; // default: luminance
  whiteList['max-height'] = true; // default: none
  whiteList['max-lines'] = false; // default: none
  whiteList['max-width'] = true; // default: none
  whiteList['min-height'] = true; // default: 0
  whiteList['min-width'] = true; // default: 0
  whiteList['move-to'] = false; // default: normal
  whiteList['nav-down'] = false; // default: auto
  whiteList['nav-index'] = false; // default: auto
  whiteList['nav-left'] = false; // default: auto
  whiteList['nav-right'] = false; // default: auto
  whiteList['nav-up'] = false; // default: auto
  whiteList['object-fit'] = false; // default: fill
  whiteList['object-position'] = false; // default: 50% 50%
  whiteList['opacity'] = false; // default: 1
  whiteList['order'] = false; // default: 0
  whiteList['orphans'] = false; // default: 2
  whiteList['outline'] = false; // default: depending on individual properties
  whiteList['outline-color'] = false; // default: invert
  whiteList['outline-offset'] = false; // default: 0
  whiteList['outline-style'] = false; // default: none
  whiteList['outline-width'] = false; // default: medium
  whiteList['overflow'] = false; // default: depending on individual properties
  whiteList['overflow-wrap'] = false; // default: normal
  whiteList['overflow-x'] = false; // default: visible
  whiteList['overflow-y'] = false; // default: visible
  whiteList['padding'] = true; // default: depending on individual properties
  whiteList['padding-bottom'] = true; // default: 0
  whiteList['padding-left'] = true; // default: 0
  whiteList['padding-right'] = true; // default: 0
  whiteList['padding-top'] = true; // default: 0
  whiteList['page'] = false; // default: auto
  whiteList['page-break-after'] = false; // default: auto
  whiteList['page-break-before'] = false; // default: auto
  whiteList['page-break-inside'] = false; // default: auto
  whiteList['page-policy'] = false; // default: start
  whiteList['pause'] = false; // default: implementation dependent
  whiteList['pause-after'] = false; // default: implementation dependent
  whiteList['pause-before'] = false; // default: implementation dependent
  whiteList['perspective'] = false; // default: none
  whiteList['perspective-origin'] = false; // default: 50% 50%
  whiteList['pitch'] = false; // default: medium
  whiteList['pitch-range'] = false; // default: 50
  whiteList['play-during'] = false; // default: auto
  whiteList['position'] = false; // default: static
  whiteList['presentation-level'] = false; // default: 0
  whiteList['quotes'] = false; // default: text
  whiteList['region-fragment'] = false; // default: auto
  whiteList['resize'] = false; // default: none
  whiteList['rest'] = false; // default: depending on individual properties
  whiteList['rest-after'] = false; // default: none
  whiteList['rest-before'] = false; // default: none
  whiteList['richness'] = false; // default: 50
  whiteList['right'] = false; // default: auto
  whiteList['rotation'] = false; // default: 0
  whiteList['rotation-point'] = false; // default: 50% 50%
  whiteList['ruby-align'] = false; // default: auto
  whiteList['ruby-merge'] = false; // default: separate
  whiteList['ruby-position'] = false; // default: before
  whiteList['shape-image-threshold'] = false; // default: 0.0
  whiteList['shape-outside'] = false; // default: none
  whiteList['shape-margin'] = false; // default: 0
  whiteList['size'] = false; // default: auto
  whiteList['speak'] = false; // default: auto
  whiteList['speak-as'] = false; // default: normal
  whiteList['speak-header'] = false; // default: once
  whiteList['speak-numeral'] = false; // default: continuous
  whiteList['speak-punctuation'] = false; // default: none
  whiteList['speech-rate'] = false; // default: medium
  whiteList['stress'] = false; // default: 50
  whiteList['string-set'] = false; // default: none
  whiteList['tab-size'] = false; // default: 8
  whiteList['table-layout'] = false; // default: auto
  whiteList['text-align'] = true; // default: start
  whiteList['text-align-last'] = true; // default: auto
  whiteList['text-combine-upright'] = true; // default: none
  whiteList['text-decoration'] = true; // default: none
  whiteList['text-decoration-color'] = true; // default: currentColor
  whiteList['text-decoration-line'] = true; // default: none
  whiteList['text-decoration-skip'] = true; // default: objects
  whiteList['text-decoration-style'] = true; // default: solid
  whiteList['text-emphasis'] = true; // default: depending on individual properties
  whiteList['text-emphasis-color'] = true; // default: currentColor
  whiteList['text-emphasis-position'] = true; // default: over right
  whiteList['text-emphasis-style'] = true; // default: none
  whiteList['text-height'] = true; // default: auto
  whiteList['text-indent'] = true; // default: 0
  whiteList['text-justify'] = true; // default: auto
  whiteList['text-orientation'] = true; // default: mixed
  whiteList['text-overflow'] = true; // default: clip
  whiteList['text-shadow'] = true; // default: none
  whiteList['text-space-collapse'] = true; // default: collapse
  whiteList['text-transform'] = true; // default: none
  whiteList['text-underline-position'] = true; // default: auto
  whiteList['text-wrap'] = true; // default: normal
  whiteList['top'] = false; // default: auto
  whiteList['transform'] = false; // default: none
  whiteList['transform-origin'] = false; // default: 50% 50% 0
  whiteList['transform-style'] = false; // default: flat
  whiteList['transition'] = false; // default: depending on individual properties
  whiteList['transition-delay'] = false; // default: 0s
  whiteList['transition-duration'] = false; // default: 0s
  whiteList['transition-property'] = false; // default: all
  whiteList['transition-timing-function'] = false; // default: ease
  whiteList['unicode-bidi'] = false; // default: normal
  whiteList['vertical-align'] = false; // default: baseline
  whiteList['visibility'] = false; // default: visible
  whiteList['voice-balance'] = false; // default: center
  whiteList['voice-duration'] = false; // default: auto
  whiteList['voice-family'] = false; // default: implementation dependent
  whiteList['voice-pitch'] = false; // default: medium
  whiteList['voice-range'] = false; // default: medium
  whiteList['voice-rate'] = false; // default: normal
  whiteList['voice-stress'] = false; // default: normal
  whiteList['voice-volume'] = false; // default: medium
  whiteList['volume'] = false; // default: medium
  whiteList['white-space'] = false; // default: normal
  whiteList['widows'] = false; // default: 2
  whiteList['width'] = true; // default: auto
  whiteList['will-change'] = false; // default: auto
  whiteList['word-break'] = true; // default: normal
  whiteList['word-spacing'] = true; // default: normal
  whiteList['word-wrap'] = true; // default: normal
  whiteList['wrap-flow'] = false; // default: auto
  whiteList['wrap-through'] = false; // default: wrap
  whiteList['writing-mode'] = false; // default: horizontal-tb
  whiteList['z-index'] = false; // default: auto

  return whiteList;
}


/**
 * 匹配到白名单上的一个属性时
 *
 * @param {String} name
 * @param {String} value
 * @param {Object} options
 * @return {String}
 */
function onAttr (name, value, options) {
  // do nothing
}

/**
 * 匹配到不在白名单上的一个属性时
 *
 * @param {String} name
 * @param {String} value
 * @param {Object} options
 * @return {String}
 */
function onIgnoreAttr (name, value, options) {
  // do nothing
}

var REGEXP_URL_JAVASCRIPT = /javascript\s*\:/img;

/**
 * 过滤属性值
 *
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function safeAttrValue(name, value) {
  if (REGEXP_URL_JAVASCRIPT.test(value)) return '';
  return value;
}


exports.whiteList = getDefaultWhiteList();
exports.getDefaultWhiteList = getDefaultWhiteList;
exports.onAttr = onAttr;
exports.onIgnoreAttr = onIgnoreAttr;
exports.safeAttrValue = safeAttrValue;

},{}],171:[function(require,module,exports){
/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */

var DEFAULT = require('./default');
var FilterCSS = require('./css');


/**
 * XSS过滤
 *
 * @param {String} css 要过滤的CSS代码
 * @param {Object} options 选项：whiteList, onAttr, onIgnoreAttr
 * @return {String}
 */
function filterCSS (html, options) {
  var xss = new FilterCSS(options);
  return xss.process(html);
}


// 输出
exports = module.exports = filterCSS;
exports.FilterCSS = FilterCSS;
for (var i in DEFAULT) exports[i] = DEFAULT[i];

// 在浏览器端使用
if (typeof window !== 'undefined') {
  window.filterCSS = module.exports;
}

},{"./css":169,"./default":170}],172:[function(require,module,exports){
/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */

var _ = require('./util');


/**
 * 解析style
 *
 * @param {String} css
 * @param {Function} onAttr 处理属性的函数
 *   参数格式： function (sourcePosition, position, name, value, source)
 * @return {String}
 */
function parseStyle (css, onAttr) {
  css = _.trimRight(css);
  if (css[css.length - 1] !== ';') css += ';';
  var cssLength = css.length;
  var isParenthesisOpen = false;
  var lastPos = 0;
  var i = 0;
  var retCSS = '';

  function addNewAttr () {
    // 如果没有正常的闭合圆括号，则直接忽略当前属性
    if (!isParenthesisOpen) {
      var source = _.trim(css.slice(lastPos, i));
      var j = source.indexOf(':');
      if (j !== -1) {
        var name = _.trim(source.slice(0, j));
        var value = _.trim(source.slice(j + 1));
        // 必须有属性名称
        if (name) {
          var ret = onAttr(lastPos, retCSS.length, name, value, source);
          if (ret) retCSS += ret + '; ';
        }
      }
    }
    lastPos = i + 1;
  }

  for (; i < cssLength; i++) {
    var c = css[i];
    if (c === '/' && css[i + 1] === '*') {
      // 备注开始
      var j = css.indexOf('*/', i + 2);
      // 如果没有正常的备注结束，则后面的部分全部跳过
      if (j === -1) break;
      // 直接将当前位置调到备注结尾，并且初始化状态
      i = j + 1;
      lastPos = i + 1;
      isParenthesisOpen = false;
    } else if (c === '(') {
      isParenthesisOpen = true;
    } else if (c === ')') {
      isParenthesisOpen = false;
    } else if (c === ';') {
      if (isParenthesisOpen) {
        // 在圆括号里面，忽略
      } else {
        addNewAttr();
      }
    } else if (c === '\n') {
      addNewAttr();
    }
  }

  return _.trim(retCSS);
}

module.exports = parseStyle;

},{"./util":173}],173:[function(require,module,exports){
module.exports = {
  indexOf: function (arr, item) {
    var i, j;
    if (Array.prototype.indexOf) {
      return arr.indexOf(item);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      if (arr[i] === item) {
        return i;
      }
    }
    return -1;
  },
  forEach: function (arr, fn, scope) {
    var i, j;
    if (Array.prototype.forEach) {
      return arr.forEach(fn, scope);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      fn.call(scope, arr[i], i, arr);
    }
  },
  trim: function (str) {
    if (String.prototype.trim) {
      return str.trim();
    }
    return str.replace(/(^\s*)|(\s*$)/g, '');
  },
  trimRight: function (str) {
    if (String.prototype.trimRight) {
      return str.trimRight();
    }
    return str.replace(/(\s*$)/g, '');
  }
};

},{}],174:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tls_1 = require("tls");
const deferToConnect = (socket, fn) => {
    let listeners;
    if (typeof fn === 'function') {
        const connect = fn;
        listeners = { connect };
    }
    else {
        listeners = fn;
    }
    const hasConnectListener = typeof listeners.connect === 'function';
    const hasSecureConnectListener = typeof listeners.secureConnect === 'function';
    const hasCloseListener = typeof listeners.close === 'function';
    const onConnect = () => {
        if (hasConnectListener) {
            listeners.connect();
        }
        if (socket instanceof tls_1.TLSSocket && hasSecureConnectListener) {
            if (socket.authorized) {
                listeners.secureConnect();
            }
            else {
                socket.once('secureConnect', listeners.secureConnect);
            }
        }
        if (hasCloseListener) {
            socket.once('close', listeners.close);
        }
    };
    if (socket.writable && !socket.connecting) {
        onConnect();
    }
    else if (socket.connecting) {
        socket.once('connect', onConnect);
    }
    else if (socket.destroyed && hasCloseListener) {
        listeners.close(socket._hadError);
    }
};
exports.default = deferToConnect;
// For CommonJS default export support
module.exports = deferToConnect;
module.exports.default = deferToConnect;

},{"tls":1}],175:[function(require,module,exports){
/*
  Module dependencies
*/
var ElementType = require('domelementtype');
var entities = require('entities');

var unencodedElements = {
  __proto__: null,
  style: true,
  script: true,
  xmp: true,
  iframe: true,
  noembed: true,
  noframes: true,
  plaintext: true,
  noscript: true
};

/*
  Format attributes
*/
function formatAttrs(attributes, opts) {
  if (!attributes) return;

  var output = '',
      value;

  // Loop through the attributes
  for (var key in attributes) {
    value = attributes[key];
    if (output) {
      output += ' ';
    }

    output += key;
    if ((value !== null && value !== '') || opts.xmlMode) {
        output += '="' + (opts.decodeEntities ? entities.encodeXML(value) : value) + '"';
    }
  }

  return output;
}

/*
  Self-enclosing tags (stolen from node-htmlparser)
*/
var singleTag = {
  __proto__: null,
  area: true,
  base: true,
  basefont: true,
  br: true,
  col: true,
  command: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  isindex: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true,
};


var render = module.exports = function(dom, opts) {
  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];
  opts = opts || {};

  var output = '';

  for(var i = 0; i < dom.length; i++){
    var elem = dom[i];

    if (elem.type === 'root')
      output += render(elem.children, opts);
    else if (ElementType.isTag(elem))
      output += renderTag(elem, opts);
    else if (elem.type === ElementType.Directive)
      output += renderDirective(elem);
    else if (elem.type === ElementType.Comment)
      output += renderComment(elem);
    else if (elem.type === ElementType.CDATA)
      output += renderCdata(elem);
    else
      output += renderText(elem, opts);
  }

  return output;
};

function renderTag(elem, opts) {
  // Handle SVG
  if (elem.name === "svg") opts = {decodeEntities: opts.decodeEntities, xmlMode: true};

  var tag = '<' + elem.name,
      attribs = formatAttrs(elem.attribs, opts);

  if (attribs) {
    tag += ' ' + attribs;
  }

  if (
    opts.xmlMode
    && (!elem.children || elem.children.length === 0)
  ) {
    tag += '/>';
  } else {
    tag += '>';
    if (elem.children) {
      tag += render(elem.children, opts);
    }

    if (!singleTag[elem.name] || opts.xmlMode) {
      tag += '</' + elem.name + '>';
    }
  }

  return tag;
}

function renderDirective(elem) {
  return '<' + elem.data + '>';
}

function renderText(elem, opts) {
  var data = elem.data || '';

  // if entities weren't decoded, no need to encode them back
  if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {
    data = entities.encodeXML(data);
  }

  return data;
}

function renderCdata(elem) {
  return '<![CDATA[' + elem.children[0].data + ']]>';
}

function renderComment(elem) {
  return '<!--' + elem.data + '-->';
}

},{"domelementtype":184,"entities":176}],176:[function(require,module,exports){
var encode = require("./lib/encode.js"),
    decode = require("./lib/decode.js");

exports.decode = function(data, level) {
    return (!level || level <= 0 ? decode.XML : decode.HTML)(data);
};

exports.decodeStrict = function(data, level) {
    return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);
};

exports.encode = function(data, level) {
    return (!level || level <= 0 ? encode.XML : encode.HTML)(data);
};

exports.encodeXML = encode.XML;

exports.encodeHTML4 = exports.encodeHTML5 = exports.encodeHTML = encode.HTML;

exports.decodeXML = exports.decodeXMLStrict = decode.XML;

exports.decodeHTML4 = exports.decodeHTML5 = exports.decodeHTML = decode.HTML;

exports.decodeHTML4Strict = exports.decodeHTML5Strict = exports.decodeHTMLStrict = decode.HTMLStrict;

exports.escape = encode.escape;

},{"./lib/decode.js":177,"./lib/encode.js":179}],177:[function(require,module,exports){
var entityMap = require("../maps/entities.json"),
    legacyMap = require("../maps/legacy.json"),
    xmlMap = require("../maps/xml.json"),
    decodeCodePoint = require("./decode_codepoint.js");

var decodeXMLStrict = getStrictDecoder(xmlMap),
    decodeHTMLStrict = getStrictDecoder(entityMap);

function getStrictDecoder(map) {
    var keys = Object.keys(map).join("|"),
        replace = getReplacer(map);

    keys += "|#[xX][\\da-fA-F]+|#\\d+";

    var re = new RegExp("&(?:" + keys + ");", "g");

    return function(str) {
        return String(str).replace(re, replace);
    };
}

var decodeHTML = (function() {
    var legacy = Object.keys(legacyMap).sort(sorter);

    var keys = Object.keys(entityMap).sort(sorter);

    for (var i = 0, j = 0; i < keys.length; i++) {
        if (legacy[j] === keys[i]) {
            keys[i] += ";?";
            j++;
        } else {
            keys[i] += ";";
        }
    }

    var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
        replace = getReplacer(entityMap);

    function replacer(str) {
        if (str.substr(-1) !== ";") str += ";";
        return replace(str);
    }

    //TODO consider creating a merged map
    return function(str) {
        return String(str).replace(re, replacer);
    };
})();

function sorter(a, b) {
    return a < b ? 1 : -1;
}

function getReplacer(map) {
    return function replace(str) {
        if (str.charAt(1) === "#") {
            if (str.charAt(2) === "X" || str.charAt(2) === "x") {
                return decodeCodePoint(parseInt(str.substr(3), 16));
            }
            return decodeCodePoint(parseInt(str.substr(2), 10));
        }
        return map[str.slice(1, -1)];
    };
}

module.exports = {
    XML: decodeXMLStrict,
    HTML: decodeHTML,
    HTMLStrict: decodeHTMLStrict
};

},{"../maps/entities.json":181,"../maps/legacy.json":182,"../maps/xml.json":183,"./decode_codepoint.js":178}],178:[function(require,module,exports){
var decodeMap = require("../maps/decode.json");

module.exports = decodeCodePoint;

// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
function decodeCodePoint(codePoint) {
    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
        return "\uFFFD";
    }

    if (codePoint in decodeMap) {
        codePoint = decodeMap[codePoint];
    }

    var output = "";

    if (codePoint > 0xffff) {
        codePoint -= 0x10000;
        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
        codePoint = 0xdc00 | (codePoint & 0x3ff);
    }

    output += String.fromCharCode(codePoint);
    return output;
}

},{"../maps/decode.json":180}],179:[function(require,module,exports){
var inverseXML = getInverseObj(require("../maps/xml.json")),
    xmlReplacer = getInverseReplacer(inverseXML);

exports.XML = getInverse(inverseXML, xmlReplacer);

var inverseHTML = getInverseObj(require("../maps/entities.json")),
    htmlReplacer = getInverseReplacer(inverseHTML);

exports.HTML = getInverse(inverseHTML, htmlReplacer);

function getInverseObj(obj) {
    return Object.keys(obj)
        .sort()
        .reduce(function(inverse, name) {
            inverse[obj[name]] = "&" + name + ";";
            return inverse;
        }, {});
}

function getInverseReplacer(inverse) {
    var single = [],
        multiple = [];

    Object.keys(inverse).forEach(function(k) {
        if (k.length === 1) {
            single.push("\\" + k);
        } else {
            multiple.push(k);
        }
    });

    //TODO add ranges
    multiple.unshift("[" + single.join("") + "]");

    return new RegExp(multiple.join("|"), "g");
}

var re_nonASCII = /[^\0-\x7F]/g,
    re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function singleCharReplacer(c) {
    return (
        "&#x" +
        c
            .charCodeAt(0)
            .toString(16)
            .toUpperCase() +
        ";"
    );
}

function astralReplacer(c) {
    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
    var high = c.charCodeAt(0);
    var low = c.charCodeAt(1);
    var codePoint = (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
    return "&#x" + codePoint.toString(16).toUpperCase() + ";";
}

function getInverse(inverse, re) {
    function func(name) {
        return inverse[name];
    }

    return function(data) {
        return data
            .replace(re, func)
            .replace(re_astralSymbols, astralReplacer)
            .replace(re_nonASCII, singleCharReplacer);
    };
}

var re_xmlChars = getInverseReplacer(inverseXML);

function escapeXML(data) {
    return data
        .replace(re_xmlChars, singleCharReplacer)
        .replace(re_astralSymbols, astralReplacer)
        .replace(re_nonASCII, singleCharReplacer);
}

exports.escape = escapeXML;

},{"../maps/entities.json":181,"../maps/xml.json":183}],180:[function(require,module,exports){
module.exports={"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}
},{}],181:[function(require,module,exports){
module.exports={"Aacute":"\u00C1","aacute":"\u00E1","Abreve":"\u0102","abreve":"\u0103","ac":"\u223E","acd":"\u223F","acE":"\u223E\u0333","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","Acy":"\u0410","acy":"\u0430","AElig":"\u00C6","aelig":"\u00E6","af":"\u2061","Afr":"\uD835\uDD04","afr":"\uD835\uDD1E","Agrave":"\u00C0","agrave":"\u00E0","alefsym":"\u2135","aleph":"\u2135","Alpha":"\u0391","alpha":"\u03B1","Amacr":"\u0100","amacr":"\u0101","amalg":"\u2A3F","amp":"&","AMP":"&","andand":"\u2A55","And":"\u2A53","and":"\u2227","andd":"\u2A5C","andslope":"\u2A58","andv":"\u2A5A","ang":"\u2220","ange":"\u29A4","angle":"\u2220","angmsdaa":"\u29A8","angmsdab":"\u29A9","angmsdac":"\u29AA","angmsdad":"\u29AB","angmsdae":"\u29AC","angmsdaf":"\u29AD","angmsdag":"\u29AE","angmsdah":"\u29AF","angmsd":"\u2221","angrt":"\u221F","angrtvb":"\u22BE","angrtvbd":"\u299D","angsph":"\u2222","angst":"\u00C5","angzarr":"\u237C","Aogon":"\u0104","aogon":"\u0105","Aopf":"\uD835\uDD38","aopf":"\uD835\uDD52","apacir":"\u2A6F","ap":"\u2248","apE":"\u2A70","ape":"\u224A","apid":"\u224B","apos":"'","ApplyFunction":"\u2061","approx":"\u2248","approxeq":"\u224A","Aring":"\u00C5","aring":"\u00E5","Ascr":"\uD835\uDC9C","ascr":"\uD835\uDCB6","Assign":"\u2254","ast":"*","asymp":"\u2248","asympeq":"\u224D","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","awconint":"\u2233","awint":"\u2A11","backcong":"\u224C","backepsilon":"\u03F6","backprime":"\u2035","backsim":"\u223D","backsimeq":"\u22CD","Backslash":"\u2216","Barv":"\u2AE7","barvee":"\u22BD","barwed":"\u2305","Barwed":"\u2306","barwedge":"\u2305","bbrk":"\u23B5","bbrktbrk":"\u23B6","bcong":"\u224C","Bcy":"\u0411","bcy":"\u0431","bdquo":"\u201E","becaus":"\u2235","because":"\u2235","Because":"\u2235","bemptyv":"\u29B0","bepsi":"\u03F6","bernou":"\u212C","Bernoullis":"\u212C","Beta":"\u0392","beta":"\u03B2","beth":"\u2136","between":"\u226C","Bfr":"\uD835\uDD05","bfr":"\uD835\uDD1F","bigcap":"\u22C2","bigcirc":"\u25EF","bigcup":"\u22C3","bigodot":"\u2A00","bigoplus":"\u2A01","bigotimes":"\u2A02","bigsqcup":"\u2A06","bigstar":"\u2605","bigtriangledown":"\u25BD","bigtriangleup":"\u25B3","biguplus":"\u2A04","bigvee":"\u22C1","bigwedge":"\u22C0","bkarow":"\u290D","blacklozenge":"\u29EB","blacksquare":"\u25AA","blacktriangle":"\u25B4","blacktriangledown":"\u25BE","blacktriangleleft":"\u25C2","blacktriangleright":"\u25B8","blank":"\u2423","blk12":"\u2592","blk14":"\u2591","blk34":"\u2593","block":"\u2588","bne":"=\u20E5","bnequiv":"\u2261\u20E5","bNot":"\u2AED","bnot":"\u2310","Bopf":"\uD835\uDD39","bopf":"\uD835\uDD53","bot":"\u22A5","bottom":"\u22A5","bowtie":"\u22C8","boxbox":"\u29C9","boxdl":"\u2510","boxdL":"\u2555","boxDl":"\u2556","boxDL":"\u2557","boxdr":"\u250C","boxdR":"\u2552","boxDr":"\u2553","boxDR":"\u2554","boxh":"\u2500","boxH":"\u2550","boxhd":"\u252C","boxHd":"\u2564","boxhD":"\u2565","boxHD":"\u2566","boxhu":"\u2534","boxHu":"\u2567","boxhU":"\u2568","boxHU":"\u2569","boxminus":"\u229F","boxplus":"\u229E","boxtimes":"\u22A0","boxul":"\u2518","boxuL":"\u255B","boxUl":"\u255C","boxUL":"\u255D","boxur":"\u2514","boxuR":"\u2558","boxUr":"\u2559","boxUR":"\u255A","boxv":"\u2502","boxV":"\u2551","boxvh":"\u253C","boxvH":"\u256A","boxVh":"\u256B","boxVH":"\u256C","boxvl":"\u2524","boxvL":"\u2561","boxVl":"\u2562","boxVL":"\u2563","boxvr":"\u251C","boxvR":"\u255E","boxVr":"\u255F","boxVR":"\u2560","bprime":"\u2035","breve":"\u02D8","Breve":"\u02D8","brvbar":"\u00A6","bscr":"\uD835\uDCB7","Bscr":"\u212C","bsemi":"\u204F","bsim":"\u223D","bsime":"\u22CD","bsolb":"\u29C5","bsol":"\\","bsolhsub":"\u27C8","bull":"\u2022","bullet":"\u2022","bump":"\u224E","bumpE":"\u2AAE","bumpe":"\u224F","Bumpeq":"\u224E","bumpeq":"\u224F","Cacute":"\u0106","cacute":"\u0107","capand":"\u2A44","capbrcup":"\u2A49","capcap":"\u2A4B","cap":"\u2229","Cap":"\u22D2","capcup":"\u2A47","capdot":"\u2A40","CapitalDifferentialD":"\u2145","caps":"\u2229\uFE00","caret":"\u2041","caron":"\u02C7","Cayleys":"\u212D","ccaps":"\u2A4D","Ccaron":"\u010C","ccaron":"\u010D","Ccedil":"\u00C7","ccedil":"\u00E7","Ccirc":"\u0108","ccirc":"\u0109","Cconint":"\u2230","ccups":"\u2A4C","ccupssm":"\u2A50","Cdot":"\u010A","cdot":"\u010B","cedil":"\u00B8","Cedilla":"\u00B8","cemptyv":"\u29B2","cent":"\u00A2","centerdot":"\u00B7","CenterDot":"\u00B7","cfr":"\uD835\uDD20","Cfr":"\u212D","CHcy":"\u0427","chcy":"\u0447","check":"\u2713","checkmark":"\u2713","Chi":"\u03A7","chi":"\u03C7","circ":"\u02C6","circeq":"\u2257","circlearrowleft":"\u21BA","circlearrowright":"\u21BB","circledast":"\u229B","circledcirc":"\u229A","circleddash":"\u229D","CircleDot":"\u2299","circledR":"\u00AE","circledS":"\u24C8","CircleMinus":"\u2296","CirclePlus":"\u2295","CircleTimes":"\u2297","cir":"\u25CB","cirE":"\u29C3","cire":"\u2257","cirfnint":"\u2A10","cirmid":"\u2AEF","cirscir":"\u29C2","ClockwiseContourIntegral":"\u2232","CloseCurlyDoubleQuote":"\u201D","CloseCurlyQuote":"\u2019","clubs":"\u2663","clubsuit":"\u2663","colon":":","Colon":"\u2237","Colone":"\u2A74","colone":"\u2254","coloneq":"\u2254","comma":",","commat":"@","comp":"\u2201","compfn":"\u2218","complement":"\u2201","complexes":"\u2102","cong":"\u2245","congdot":"\u2A6D","Congruent":"\u2261","conint":"\u222E","Conint":"\u222F","ContourIntegral":"\u222E","copf":"\uD835\uDD54","Copf":"\u2102","coprod":"\u2210","Coproduct":"\u2210","copy":"\u00A9","COPY":"\u00A9","copysr":"\u2117","CounterClockwiseContourIntegral":"\u2233","crarr":"\u21B5","cross":"\u2717","Cross":"\u2A2F","Cscr":"\uD835\uDC9E","cscr":"\uD835\uDCB8","csub":"\u2ACF","csube":"\u2AD1","csup":"\u2AD0","csupe":"\u2AD2","ctdot":"\u22EF","cudarrl":"\u2938","cudarrr":"\u2935","cuepr":"\u22DE","cuesc":"\u22DF","cularr":"\u21B6","cularrp":"\u293D","cupbrcap":"\u2A48","cupcap":"\u2A46","CupCap":"\u224D","cup":"\u222A","Cup":"\u22D3","cupcup":"\u2A4A","cupdot":"\u228D","cupor":"\u2A45","cups":"\u222A\uFE00","curarr":"\u21B7","curarrm":"\u293C","curlyeqprec":"\u22DE","curlyeqsucc":"\u22DF","curlyvee":"\u22CE","curlywedge":"\u22CF","curren":"\u00A4","curvearrowleft":"\u21B6","curvearrowright":"\u21B7","cuvee":"\u22CE","cuwed":"\u22CF","cwconint":"\u2232","cwint":"\u2231","cylcty":"\u232D","dagger":"\u2020","Dagger":"\u2021","daleth":"\u2138","darr":"\u2193","Darr":"\u21A1","dArr":"\u21D3","dash":"\u2010","Dashv":"\u2AE4","dashv":"\u22A3","dbkarow":"\u290F","dblac":"\u02DD","Dcaron":"\u010E","dcaron":"\u010F","Dcy":"\u0414","dcy":"\u0434","ddagger":"\u2021","ddarr":"\u21CA","DD":"\u2145","dd":"\u2146","DDotrahd":"\u2911","ddotseq":"\u2A77","deg":"\u00B0","Del":"\u2207","Delta":"\u0394","delta":"\u03B4","demptyv":"\u29B1","dfisht":"\u297F","Dfr":"\uD835\uDD07","dfr":"\uD835\uDD21","dHar":"\u2965","dharl":"\u21C3","dharr":"\u21C2","DiacriticalAcute":"\u00B4","DiacriticalDot":"\u02D9","DiacriticalDoubleAcute":"\u02DD","DiacriticalGrave":"`","DiacriticalTilde":"\u02DC","diam":"\u22C4","diamond":"\u22C4","Diamond":"\u22C4","diamondsuit":"\u2666","diams":"\u2666","die":"\u00A8","DifferentialD":"\u2146","digamma":"\u03DD","disin":"\u22F2","div":"\u00F7","divide":"\u00F7","divideontimes":"\u22C7","divonx":"\u22C7","DJcy":"\u0402","djcy":"\u0452","dlcorn":"\u231E","dlcrop":"\u230D","dollar":"$","Dopf":"\uD835\uDD3B","dopf":"\uD835\uDD55","Dot":"\u00A8","dot":"\u02D9","DotDot":"\u20DC","doteq":"\u2250","doteqdot":"\u2251","DotEqual":"\u2250","dotminus":"\u2238","dotplus":"\u2214","dotsquare":"\u22A1","doublebarwedge":"\u2306","DoubleContourIntegral":"\u222F","DoubleDot":"\u00A8","DoubleDownArrow":"\u21D3","DoubleLeftArrow":"\u21D0","DoubleLeftRightArrow":"\u21D4","DoubleLeftTee":"\u2AE4","DoubleLongLeftArrow":"\u27F8","DoubleLongLeftRightArrow":"\u27FA","DoubleLongRightArrow":"\u27F9","DoubleRightArrow":"\u21D2","DoubleRightTee":"\u22A8","DoubleUpArrow":"\u21D1","DoubleUpDownArrow":"\u21D5","DoubleVerticalBar":"\u2225","DownArrowBar":"\u2913","downarrow":"\u2193","DownArrow":"\u2193","Downarrow":"\u21D3","DownArrowUpArrow":"\u21F5","DownBreve":"\u0311","downdownarrows":"\u21CA","downharpoonleft":"\u21C3","downharpoonright":"\u21C2","DownLeftRightVector":"\u2950","DownLeftTeeVector":"\u295E","DownLeftVectorBar":"\u2956","DownLeftVector":"\u21BD","DownRightTeeVector":"\u295F","DownRightVectorBar":"\u2957","DownRightVector":"\u21C1","DownTeeArrow":"\u21A7","DownTee":"\u22A4","drbkarow":"\u2910","drcorn":"\u231F","drcrop":"\u230C","Dscr":"\uD835\uDC9F","dscr":"\uD835\uDCB9","DScy":"\u0405","dscy":"\u0455","dsol":"\u29F6","Dstrok":"\u0110","dstrok":"\u0111","dtdot":"\u22F1","dtri":"\u25BF","dtrif":"\u25BE","duarr":"\u21F5","duhar":"\u296F","dwangle":"\u29A6","DZcy":"\u040F","dzcy":"\u045F","dzigrarr":"\u27FF","Eacute":"\u00C9","eacute":"\u00E9","easter":"\u2A6E","Ecaron":"\u011A","ecaron":"\u011B","Ecirc":"\u00CA","ecirc":"\u00EA","ecir":"\u2256","ecolon":"\u2255","Ecy":"\u042D","ecy":"\u044D","eDDot":"\u2A77","Edot":"\u0116","edot":"\u0117","eDot":"\u2251","ee":"\u2147","efDot":"\u2252","Efr":"\uD835\uDD08","efr":"\uD835\uDD22","eg":"\u2A9A","Egrave":"\u00C8","egrave":"\u00E8","egs":"\u2A96","egsdot":"\u2A98","el":"\u2A99","Element":"\u2208","elinters":"\u23E7","ell":"\u2113","els":"\u2A95","elsdot":"\u2A97","Emacr":"\u0112","emacr":"\u0113","empty":"\u2205","emptyset":"\u2205","EmptySmallSquare":"\u25FB","emptyv":"\u2205","EmptyVerySmallSquare":"\u25AB","emsp13":"\u2004","emsp14":"\u2005","emsp":"\u2003","ENG":"\u014A","eng":"\u014B","ensp":"\u2002","Eogon":"\u0118","eogon":"\u0119","Eopf":"\uD835\uDD3C","eopf":"\uD835\uDD56","epar":"\u22D5","eparsl":"\u29E3","eplus":"\u2A71","epsi":"\u03B5","Epsilon":"\u0395","epsilon":"\u03B5","epsiv":"\u03F5","eqcirc":"\u2256","eqcolon":"\u2255","eqsim":"\u2242","eqslantgtr":"\u2A96","eqslantless":"\u2A95","Equal":"\u2A75","equals":"=","EqualTilde":"\u2242","equest":"\u225F","Equilibrium":"\u21CC","equiv":"\u2261","equivDD":"\u2A78","eqvparsl":"\u29E5","erarr":"\u2971","erDot":"\u2253","escr":"\u212F","Escr":"\u2130","esdot":"\u2250","Esim":"\u2A73","esim":"\u2242","Eta":"\u0397","eta":"\u03B7","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","euro":"\u20AC","excl":"!","exist":"\u2203","Exists":"\u2203","expectation":"\u2130","exponentiale":"\u2147","ExponentialE":"\u2147","fallingdotseq":"\u2252","Fcy":"\u0424","fcy":"\u0444","female":"\u2640","ffilig":"\uFB03","fflig":"\uFB00","ffllig":"\uFB04","Ffr":"\uD835\uDD09","ffr":"\uD835\uDD23","filig":"\uFB01","FilledSmallSquare":"\u25FC","FilledVerySmallSquare":"\u25AA","fjlig":"fj","flat":"\u266D","fllig":"\uFB02","fltns":"\u25B1","fnof":"\u0192","Fopf":"\uD835\uDD3D","fopf":"\uD835\uDD57","forall":"\u2200","ForAll":"\u2200","fork":"\u22D4","forkv":"\u2AD9","Fouriertrf":"\u2131","fpartint":"\u2A0D","frac12":"\u00BD","frac13":"\u2153","frac14":"\u00BC","frac15":"\u2155","frac16":"\u2159","frac18":"\u215B","frac23":"\u2154","frac25":"\u2156","frac34":"\u00BE","frac35":"\u2157","frac38":"\u215C","frac45":"\u2158","frac56":"\u215A","frac58":"\u215D","frac78":"\u215E","frasl":"\u2044","frown":"\u2322","fscr":"\uD835\uDCBB","Fscr":"\u2131","gacute":"\u01F5","Gamma":"\u0393","gamma":"\u03B3","Gammad":"\u03DC","gammad":"\u03DD","gap":"\u2A86","Gbreve":"\u011E","gbreve":"\u011F","Gcedil":"\u0122","Gcirc":"\u011C","gcirc":"\u011D","Gcy":"\u0413","gcy":"\u0433","Gdot":"\u0120","gdot":"\u0121","ge":"\u2265","gE":"\u2267","gEl":"\u2A8C","gel":"\u22DB","geq":"\u2265","geqq":"\u2267","geqslant":"\u2A7E","gescc":"\u2AA9","ges":"\u2A7E","gesdot":"\u2A80","gesdoto":"\u2A82","gesdotol":"\u2A84","gesl":"\u22DB\uFE00","gesles":"\u2A94","Gfr":"\uD835\uDD0A","gfr":"\uD835\uDD24","gg":"\u226B","Gg":"\u22D9","ggg":"\u22D9","gimel":"\u2137","GJcy":"\u0403","gjcy":"\u0453","gla":"\u2AA5","gl":"\u2277","glE":"\u2A92","glj":"\u2AA4","gnap":"\u2A8A","gnapprox":"\u2A8A","gne":"\u2A88","gnE":"\u2269","gneq":"\u2A88","gneqq":"\u2269","gnsim":"\u22E7","Gopf":"\uD835\uDD3E","gopf":"\uD835\uDD58","grave":"`","GreaterEqual":"\u2265","GreaterEqualLess":"\u22DB","GreaterFullEqual":"\u2267","GreaterGreater":"\u2AA2","GreaterLess":"\u2277","GreaterSlantEqual":"\u2A7E","GreaterTilde":"\u2273","Gscr":"\uD835\uDCA2","gscr":"\u210A","gsim":"\u2273","gsime":"\u2A8E","gsiml":"\u2A90","gtcc":"\u2AA7","gtcir":"\u2A7A","gt":">","GT":">","Gt":"\u226B","gtdot":"\u22D7","gtlPar":"\u2995","gtquest":"\u2A7C","gtrapprox":"\u2A86","gtrarr":"\u2978","gtrdot":"\u22D7","gtreqless":"\u22DB","gtreqqless":"\u2A8C","gtrless":"\u2277","gtrsim":"\u2273","gvertneqq":"\u2269\uFE00","gvnE":"\u2269\uFE00","Hacek":"\u02C7","hairsp":"\u200A","half":"\u00BD","hamilt":"\u210B","HARDcy":"\u042A","hardcy":"\u044A","harrcir":"\u2948","harr":"\u2194","hArr":"\u21D4","harrw":"\u21AD","Hat":"^","hbar":"\u210F","Hcirc":"\u0124","hcirc":"\u0125","hearts":"\u2665","heartsuit":"\u2665","hellip":"\u2026","hercon":"\u22B9","hfr":"\uD835\uDD25","Hfr":"\u210C","HilbertSpace":"\u210B","hksearow":"\u2925","hkswarow":"\u2926","hoarr":"\u21FF","homtht":"\u223B","hookleftarrow":"\u21A9","hookrightarrow":"\u21AA","hopf":"\uD835\uDD59","Hopf":"\u210D","horbar":"\u2015","HorizontalLine":"\u2500","hscr":"\uD835\uDCBD","Hscr":"\u210B","hslash":"\u210F","Hstrok":"\u0126","hstrok":"\u0127","HumpDownHump":"\u224E","HumpEqual":"\u224F","hybull":"\u2043","hyphen":"\u2010","Iacute":"\u00CD","iacute":"\u00ED","ic":"\u2063","Icirc":"\u00CE","icirc":"\u00EE","Icy":"\u0418","icy":"\u0438","Idot":"\u0130","IEcy":"\u0415","iecy":"\u0435","iexcl":"\u00A1","iff":"\u21D4","ifr":"\uD835\uDD26","Ifr":"\u2111","Igrave":"\u00CC","igrave":"\u00EC","ii":"\u2148","iiiint":"\u2A0C","iiint":"\u222D","iinfin":"\u29DC","iiota":"\u2129","IJlig":"\u0132","ijlig":"\u0133","Imacr":"\u012A","imacr":"\u012B","image":"\u2111","ImaginaryI":"\u2148","imagline":"\u2110","imagpart":"\u2111","imath":"\u0131","Im":"\u2111","imof":"\u22B7","imped":"\u01B5","Implies":"\u21D2","incare":"\u2105","in":"\u2208","infin":"\u221E","infintie":"\u29DD","inodot":"\u0131","intcal":"\u22BA","int":"\u222B","Int":"\u222C","integers":"\u2124","Integral":"\u222B","intercal":"\u22BA","Intersection":"\u22C2","intlarhk":"\u2A17","intprod":"\u2A3C","InvisibleComma":"\u2063","InvisibleTimes":"\u2062","IOcy":"\u0401","iocy":"\u0451","Iogon":"\u012E","iogon":"\u012F","Iopf":"\uD835\uDD40","iopf":"\uD835\uDD5A","Iota":"\u0399","iota":"\u03B9","iprod":"\u2A3C","iquest":"\u00BF","iscr":"\uD835\uDCBE","Iscr":"\u2110","isin":"\u2208","isindot":"\u22F5","isinE":"\u22F9","isins":"\u22F4","isinsv":"\u22F3","isinv":"\u2208","it":"\u2062","Itilde":"\u0128","itilde":"\u0129","Iukcy":"\u0406","iukcy":"\u0456","Iuml":"\u00CF","iuml":"\u00EF","Jcirc":"\u0134","jcirc":"\u0135","Jcy":"\u0419","jcy":"\u0439","Jfr":"\uD835\uDD0D","jfr":"\uD835\uDD27","jmath":"\u0237","Jopf":"\uD835\uDD41","jopf":"\uD835\uDD5B","Jscr":"\uD835\uDCA5","jscr":"\uD835\uDCBF","Jsercy":"\u0408","jsercy":"\u0458","Jukcy":"\u0404","jukcy":"\u0454","Kappa":"\u039A","kappa":"\u03BA","kappav":"\u03F0","Kcedil":"\u0136","kcedil":"\u0137","Kcy":"\u041A","kcy":"\u043A","Kfr":"\uD835\uDD0E","kfr":"\uD835\uDD28","kgreen":"\u0138","KHcy":"\u0425","khcy":"\u0445","KJcy":"\u040C","kjcy":"\u045C","Kopf":"\uD835\uDD42","kopf":"\uD835\uDD5C","Kscr":"\uD835\uDCA6","kscr":"\uD835\uDCC0","lAarr":"\u21DA","Lacute":"\u0139","lacute":"\u013A","laemptyv":"\u29B4","lagran":"\u2112","Lambda":"\u039B","lambda":"\u03BB","lang":"\u27E8","Lang":"\u27EA","langd":"\u2991","langle":"\u27E8","lap":"\u2A85","Laplacetrf":"\u2112","laquo":"\u00AB","larrb":"\u21E4","larrbfs":"\u291F","larr":"\u2190","Larr":"\u219E","lArr":"\u21D0","larrfs":"\u291D","larrhk":"\u21A9","larrlp":"\u21AB","larrpl":"\u2939","larrsim":"\u2973","larrtl":"\u21A2","latail":"\u2919","lAtail":"\u291B","lat":"\u2AAB","late":"\u2AAD","lates":"\u2AAD\uFE00","lbarr":"\u290C","lBarr":"\u290E","lbbrk":"\u2772","lbrace":"{","lbrack":"[","lbrke":"\u298B","lbrksld":"\u298F","lbrkslu":"\u298D","Lcaron":"\u013D","lcaron":"\u013E","Lcedil":"\u013B","lcedil":"\u013C","lceil":"\u2308","lcub":"{","Lcy":"\u041B","lcy":"\u043B","ldca":"\u2936","ldquo":"\u201C","ldquor":"\u201E","ldrdhar":"\u2967","ldrushar":"\u294B","ldsh":"\u21B2","le":"\u2264","lE":"\u2266","LeftAngleBracket":"\u27E8","LeftArrowBar":"\u21E4","leftarrow":"\u2190","LeftArrow":"\u2190","Leftarrow":"\u21D0","LeftArrowRightArrow":"\u21C6","leftarrowtail":"\u21A2","LeftCeiling":"\u2308","LeftDoubleBracket":"\u27E6","LeftDownTeeVector":"\u2961","LeftDownVectorBar":"\u2959","LeftDownVector":"\u21C3","LeftFloor":"\u230A","leftharpoondown":"\u21BD","leftharpoonup":"\u21BC","leftleftarrows":"\u21C7","leftrightarrow":"\u2194","LeftRightArrow":"\u2194","Leftrightarrow":"\u21D4","leftrightarrows":"\u21C6","leftrightharpoons":"\u21CB","leftrightsquigarrow":"\u21AD","LeftRightVector":"\u294E","LeftTeeArrow":"\u21A4","LeftTee":"\u22A3","LeftTeeVector":"\u295A","leftthreetimes":"\u22CB","LeftTriangleBar":"\u29CF","LeftTriangle":"\u22B2","LeftTriangleEqual":"\u22B4","LeftUpDownVector":"\u2951","LeftUpTeeVector":"\u2960","LeftUpVectorBar":"\u2958","LeftUpVector":"\u21BF","LeftVectorBar":"\u2952","LeftVector":"\u21BC","lEg":"\u2A8B","leg":"\u22DA","leq":"\u2264","leqq":"\u2266","leqslant":"\u2A7D","lescc":"\u2AA8","les":"\u2A7D","lesdot":"\u2A7F","lesdoto":"\u2A81","lesdotor":"\u2A83","lesg":"\u22DA\uFE00","lesges":"\u2A93","lessapprox":"\u2A85","lessdot":"\u22D6","lesseqgtr":"\u22DA","lesseqqgtr":"\u2A8B","LessEqualGreater":"\u22DA","LessFullEqual":"\u2266","LessGreater":"\u2276","lessgtr":"\u2276","LessLess":"\u2AA1","lesssim":"\u2272","LessSlantEqual":"\u2A7D","LessTilde":"\u2272","lfisht":"\u297C","lfloor":"\u230A","Lfr":"\uD835\uDD0F","lfr":"\uD835\uDD29","lg":"\u2276","lgE":"\u2A91","lHar":"\u2962","lhard":"\u21BD","lharu":"\u21BC","lharul":"\u296A","lhblk":"\u2584","LJcy":"\u0409","ljcy":"\u0459","llarr":"\u21C7","ll":"\u226A","Ll":"\u22D8","llcorner":"\u231E","Lleftarrow":"\u21DA","llhard":"\u296B","lltri":"\u25FA","Lmidot":"\u013F","lmidot":"\u0140","lmoustache":"\u23B0","lmoust":"\u23B0","lnap":"\u2A89","lnapprox":"\u2A89","lne":"\u2A87","lnE":"\u2268","lneq":"\u2A87","lneqq":"\u2268","lnsim":"\u22E6","loang":"\u27EC","loarr":"\u21FD","lobrk":"\u27E6","longleftarrow":"\u27F5","LongLeftArrow":"\u27F5","Longleftarrow":"\u27F8","longleftrightarrow":"\u27F7","LongLeftRightArrow":"\u27F7","Longleftrightarrow":"\u27FA","longmapsto":"\u27FC","longrightarrow":"\u27F6","LongRightArrow":"\u27F6","Longrightarrow":"\u27F9","looparrowleft":"\u21AB","looparrowright":"\u21AC","lopar":"\u2985","Lopf":"\uD835\uDD43","lopf":"\uD835\uDD5D","loplus":"\u2A2D","lotimes":"\u2A34","lowast":"\u2217","lowbar":"_","LowerLeftArrow":"\u2199","LowerRightArrow":"\u2198","loz":"\u25CA","lozenge":"\u25CA","lozf":"\u29EB","lpar":"(","lparlt":"\u2993","lrarr":"\u21C6","lrcorner":"\u231F","lrhar":"\u21CB","lrhard":"\u296D","lrm":"\u200E","lrtri":"\u22BF","lsaquo":"\u2039","lscr":"\uD835\uDCC1","Lscr":"\u2112","lsh":"\u21B0","Lsh":"\u21B0","lsim":"\u2272","lsime":"\u2A8D","lsimg":"\u2A8F","lsqb":"[","lsquo":"\u2018","lsquor":"\u201A","Lstrok":"\u0141","lstrok":"\u0142","ltcc":"\u2AA6","ltcir":"\u2A79","lt":"<","LT":"<","Lt":"\u226A","ltdot":"\u22D6","lthree":"\u22CB","ltimes":"\u22C9","ltlarr":"\u2976","ltquest":"\u2A7B","ltri":"\u25C3","ltrie":"\u22B4","ltrif":"\u25C2","ltrPar":"\u2996","lurdshar":"\u294A","luruhar":"\u2966","lvertneqq":"\u2268\uFE00","lvnE":"\u2268\uFE00","macr":"\u00AF","male":"\u2642","malt":"\u2720","maltese":"\u2720","Map":"\u2905","map":"\u21A6","mapsto":"\u21A6","mapstodown":"\u21A7","mapstoleft":"\u21A4","mapstoup":"\u21A5","marker":"\u25AE","mcomma":"\u2A29","Mcy":"\u041C","mcy":"\u043C","mdash":"\u2014","mDDot":"\u223A","measuredangle":"\u2221","MediumSpace":"\u205F","Mellintrf":"\u2133","Mfr":"\uD835\uDD10","mfr":"\uD835\uDD2A","mho":"\u2127","micro":"\u00B5","midast":"*","midcir":"\u2AF0","mid":"\u2223","middot":"\u00B7","minusb":"\u229F","minus":"\u2212","minusd":"\u2238","minusdu":"\u2A2A","MinusPlus":"\u2213","mlcp":"\u2ADB","mldr":"\u2026","mnplus":"\u2213","models":"\u22A7","Mopf":"\uD835\uDD44","mopf":"\uD835\uDD5E","mp":"\u2213","mscr":"\uD835\uDCC2","Mscr":"\u2133","mstpos":"\u223E","Mu":"\u039C","mu":"\u03BC","multimap":"\u22B8","mumap":"\u22B8","nabla":"\u2207","Nacute":"\u0143","nacute":"\u0144","nang":"\u2220\u20D2","nap":"\u2249","napE":"\u2A70\u0338","napid":"\u224B\u0338","napos":"\u0149","napprox":"\u2249","natural":"\u266E","naturals":"\u2115","natur":"\u266E","nbsp":"\u00A0","nbump":"\u224E\u0338","nbumpe":"\u224F\u0338","ncap":"\u2A43","Ncaron":"\u0147","ncaron":"\u0148","Ncedil":"\u0145","ncedil":"\u0146","ncong":"\u2247","ncongdot":"\u2A6D\u0338","ncup":"\u2A42","Ncy":"\u041D","ncy":"\u043D","ndash":"\u2013","nearhk":"\u2924","nearr":"\u2197","neArr":"\u21D7","nearrow":"\u2197","ne":"\u2260","nedot":"\u2250\u0338","NegativeMediumSpace":"\u200B","NegativeThickSpace":"\u200B","NegativeThinSpace":"\u200B","NegativeVeryThinSpace":"\u200B","nequiv":"\u2262","nesear":"\u2928","nesim":"\u2242\u0338","NestedGreaterGreater":"\u226B","NestedLessLess":"\u226A","NewLine":"\n","nexist":"\u2204","nexists":"\u2204","Nfr":"\uD835\uDD11","nfr":"\uD835\uDD2B","ngE":"\u2267\u0338","nge":"\u2271","ngeq":"\u2271","ngeqq":"\u2267\u0338","ngeqslant":"\u2A7E\u0338","nges":"\u2A7E\u0338","nGg":"\u22D9\u0338","ngsim":"\u2275","nGt":"\u226B\u20D2","ngt":"\u226F","ngtr":"\u226F","nGtv":"\u226B\u0338","nharr":"\u21AE","nhArr":"\u21CE","nhpar":"\u2AF2","ni":"\u220B","nis":"\u22FC","nisd":"\u22FA","niv":"\u220B","NJcy":"\u040A","njcy":"\u045A","nlarr":"\u219A","nlArr":"\u21CD","nldr":"\u2025","nlE":"\u2266\u0338","nle":"\u2270","nleftarrow":"\u219A","nLeftarrow":"\u21CD","nleftrightarrow":"\u21AE","nLeftrightarrow":"\u21CE","nleq":"\u2270","nleqq":"\u2266\u0338","nleqslant":"\u2A7D\u0338","nles":"\u2A7D\u0338","nless":"\u226E","nLl":"\u22D8\u0338","nlsim":"\u2274","nLt":"\u226A\u20D2","nlt":"\u226E","nltri":"\u22EA","nltrie":"\u22EC","nLtv":"\u226A\u0338","nmid":"\u2224","NoBreak":"\u2060","NonBreakingSpace":"\u00A0","nopf":"\uD835\uDD5F","Nopf":"\u2115","Not":"\u2AEC","not":"\u00AC","NotCongruent":"\u2262","NotCupCap":"\u226D","NotDoubleVerticalBar":"\u2226","NotElement":"\u2209","NotEqual":"\u2260","NotEqualTilde":"\u2242\u0338","NotExists":"\u2204","NotGreater":"\u226F","NotGreaterEqual":"\u2271","NotGreaterFullEqual":"\u2267\u0338","NotGreaterGreater":"\u226B\u0338","NotGreaterLess":"\u2279","NotGreaterSlantEqual":"\u2A7E\u0338","NotGreaterTilde":"\u2275","NotHumpDownHump":"\u224E\u0338","NotHumpEqual":"\u224F\u0338","notin":"\u2209","notindot":"\u22F5\u0338","notinE":"\u22F9\u0338","notinva":"\u2209","notinvb":"\u22F7","notinvc":"\u22F6","NotLeftTriangleBar":"\u29CF\u0338","NotLeftTriangle":"\u22EA","NotLeftTriangleEqual":"\u22EC","NotLess":"\u226E","NotLessEqual":"\u2270","NotLessGreater":"\u2278","NotLessLess":"\u226A\u0338","NotLessSlantEqual":"\u2A7D\u0338","NotLessTilde":"\u2274","NotNestedGreaterGreater":"\u2AA2\u0338","NotNestedLessLess":"\u2AA1\u0338","notni":"\u220C","notniva":"\u220C","notnivb":"\u22FE","notnivc":"\u22FD","NotPrecedes":"\u2280","NotPrecedesEqual":"\u2AAF\u0338","NotPrecedesSlantEqual":"\u22E0","NotReverseElement":"\u220C","NotRightTriangleBar":"\u29D0\u0338","NotRightTriangle":"\u22EB","NotRightTriangleEqual":"\u22ED","NotSquareSubset":"\u228F\u0338","NotSquareSubsetEqual":"\u22E2","NotSquareSuperset":"\u2290\u0338","NotSquareSupersetEqual":"\u22E3","NotSubset":"\u2282\u20D2","NotSubsetEqual":"\u2288","NotSucceeds":"\u2281","NotSucceedsEqual":"\u2AB0\u0338","NotSucceedsSlantEqual":"\u22E1","NotSucceedsTilde":"\u227F\u0338","NotSuperset":"\u2283\u20D2","NotSupersetEqual":"\u2289","NotTilde":"\u2241","NotTildeEqual":"\u2244","NotTildeFullEqual":"\u2247","NotTildeTilde":"\u2249","NotVerticalBar":"\u2224","nparallel":"\u2226","npar":"\u2226","nparsl":"\u2AFD\u20E5","npart":"\u2202\u0338","npolint":"\u2A14","npr":"\u2280","nprcue":"\u22E0","nprec":"\u2280","npreceq":"\u2AAF\u0338","npre":"\u2AAF\u0338","nrarrc":"\u2933\u0338","nrarr":"\u219B","nrArr":"\u21CF","nrarrw":"\u219D\u0338","nrightarrow":"\u219B","nRightarrow":"\u21CF","nrtri":"\u22EB","nrtrie":"\u22ED","nsc":"\u2281","nsccue":"\u22E1","nsce":"\u2AB0\u0338","Nscr":"\uD835\uDCA9","nscr":"\uD835\uDCC3","nshortmid":"\u2224","nshortparallel":"\u2226","nsim":"\u2241","nsime":"\u2244","nsimeq":"\u2244","nsmid":"\u2224","nspar":"\u2226","nsqsube":"\u22E2","nsqsupe":"\u22E3","nsub":"\u2284","nsubE":"\u2AC5\u0338","nsube":"\u2288","nsubset":"\u2282\u20D2","nsubseteq":"\u2288","nsubseteqq":"\u2AC5\u0338","nsucc":"\u2281","nsucceq":"\u2AB0\u0338","nsup":"\u2285","nsupE":"\u2AC6\u0338","nsupe":"\u2289","nsupset":"\u2283\u20D2","nsupseteq":"\u2289","nsupseteqq":"\u2AC6\u0338","ntgl":"\u2279","Ntilde":"\u00D1","ntilde":"\u00F1","ntlg":"\u2278","ntriangleleft":"\u22EA","ntrianglelefteq":"\u22EC","ntriangleright":"\u22EB","ntrianglerighteq":"\u22ED","Nu":"\u039D","nu":"\u03BD","num":"#","numero":"\u2116","numsp":"\u2007","nvap":"\u224D\u20D2","nvdash":"\u22AC","nvDash":"\u22AD","nVdash":"\u22AE","nVDash":"\u22AF","nvge":"\u2265\u20D2","nvgt":">\u20D2","nvHarr":"\u2904","nvinfin":"\u29DE","nvlArr":"\u2902","nvle":"\u2264\u20D2","nvlt":"<\u20D2","nvltrie":"\u22B4\u20D2","nvrArr":"\u2903","nvrtrie":"\u22B5\u20D2","nvsim":"\u223C\u20D2","nwarhk":"\u2923","nwarr":"\u2196","nwArr":"\u21D6","nwarrow":"\u2196","nwnear":"\u2927","Oacute":"\u00D3","oacute":"\u00F3","oast":"\u229B","Ocirc":"\u00D4","ocirc":"\u00F4","ocir":"\u229A","Ocy":"\u041E","ocy":"\u043E","odash":"\u229D","Odblac":"\u0150","odblac":"\u0151","odiv":"\u2A38","odot":"\u2299","odsold":"\u29BC","OElig":"\u0152","oelig":"\u0153","ofcir":"\u29BF","Ofr":"\uD835\uDD12","ofr":"\uD835\uDD2C","ogon":"\u02DB","Ograve":"\u00D2","ograve":"\u00F2","ogt":"\u29C1","ohbar":"\u29B5","ohm":"\u03A9","oint":"\u222E","olarr":"\u21BA","olcir":"\u29BE","olcross":"\u29BB","oline":"\u203E","olt":"\u29C0","Omacr":"\u014C","omacr":"\u014D","Omega":"\u03A9","omega":"\u03C9","Omicron":"\u039F","omicron":"\u03BF","omid":"\u29B6","ominus":"\u2296","Oopf":"\uD835\uDD46","oopf":"\uD835\uDD60","opar":"\u29B7","OpenCurlyDoubleQuote":"\u201C","OpenCurlyQuote":"\u2018","operp":"\u29B9","oplus":"\u2295","orarr":"\u21BB","Or":"\u2A54","or":"\u2228","ord":"\u2A5D","order":"\u2134","orderof":"\u2134","ordf":"\u00AA","ordm":"\u00BA","origof":"\u22B6","oror":"\u2A56","orslope":"\u2A57","orv":"\u2A5B","oS":"\u24C8","Oscr":"\uD835\uDCAA","oscr":"\u2134","Oslash":"\u00D8","oslash":"\u00F8","osol":"\u2298","Otilde":"\u00D5","otilde":"\u00F5","otimesas":"\u2A36","Otimes":"\u2A37","otimes":"\u2297","Ouml":"\u00D6","ouml":"\u00F6","ovbar":"\u233D","OverBar":"\u203E","OverBrace":"\u23DE","OverBracket":"\u23B4","OverParenthesis":"\u23DC","para":"\u00B6","parallel":"\u2225","par":"\u2225","parsim":"\u2AF3","parsl":"\u2AFD","part":"\u2202","PartialD":"\u2202","Pcy":"\u041F","pcy":"\u043F","percnt":"%","period":".","permil":"\u2030","perp":"\u22A5","pertenk":"\u2031","Pfr":"\uD835\uDD13","pfr":"\uD835\uDD2D","Phi":"\u03A6","phi":"\u03C6","phiv":"\u03D5","phmmat":"\u2133","phone":"\u260E","Pi":"\u03A0","pi":"\u03C0","pitchfork":"\u22D4","piv":"\u03D6","planck":"\u210F","planckh":"\u210E","plankv":"\u210F","plusacir":"\u2A23","plusb":"\u229E","pluscir":"\u2A22","plus":"+","plusdo":"\u2214","plusdu":"\u2A25","pluse":"\u2A72","PlusMinus":"\u00B1","plusmn":"\u00B1","plussim":"\u2A26","plustwo":"\u2A27","pm":"\u00B1","Poincareplane":"\u210C","pointint":"\u2A15","popf":"\uD835\uDD61","Popf":"\u2119","pound":"\u00A3","prap":"\u2AB7","Pr":"\u2ABB","pr":"\u227A","prcue":"\u227C","precapprox":"\u2AB7","prec":"\u227A","preccurlyeq":"\u227C","Precedes":"\u227A","PrecedesEqual":"\u2AAF","PrecedesSlantEqual":"\u227C","PrecedesTilde":"\u227E","preceq":"\u2AAF","precnapprox":"\u2AB9","precneqq":"\u2AB5","precnsim":"\u22E8","pre":"\u2AAF","prE":"\u2AB3","precsim":"\u227E","prime":"\u2032","Prime":"\u2033","primes":"\u2119","prnap":"\u2AB9","prnE":"\u2AB5","prnsim":"\u22E8","prod":"\u220F","Product":"\u220F","profalar":"\u232E","profline":"\u2312","profsurf":"\u2313","prop":"\u221D","Proportional":"\u221D","Proportion":"\u2237","propto":"\u221D","prsim":"\u227E","prurel":"\u22B0","Pscr":"\uD835\uDCAB","pscr":"\uD835\uDCC5","Psi":"\u03A8","psi":"\u03C8","puncsp":"\u2008","Qfr":"\uD835\uDD14","qfr":"\uD835\uDD2E","qint":"\u2A0C","qopf":"\uD835\uDD62","Qopf":"\u211A","qprime":"\u2057","Qscr":"\uD835\uDCAC","qscr":"\uD835\uDCC6","quaternions":"\u210D","quatint":"\u2A16","quest":"?","questeq":"\u225F","quot":"\"","QUOT":"\"","rAarr":"\u21DB","race":"\u223D\u0331","Racute":"\u0154","racute":"\u0155","radic":"\u221A","raemptyv":"\u29B3","rang":"\u27E9","Rang":"\u27EB","rangd":"\u2992","range":"\u29A5","rangle":"\u27E9","raquo":"\u00BB","rarrap":"\u2975","rarrb":"\u21E5","rarrbfs":"\u2920","rarrc":"\u2933","rarr":"\u2192","Rarr":"\u21A0","rArr":"\u21D2","rarrfs":"\u291E","rarrhk":"\u21AA","rarrlp":"\u21AC","rarrpl":"\u2945","rarrsim":"\u2974","Rarrtl":"\u2916","rarrtl":"\u21A3","rarrw":"\u219D","ratail":"\u291A","rAtail":"\u291C","ratio":"\u2236","rationals":"\u211A","rbarr":"\u290D","rBarr":"\u290F","RBarr":"\u2910","rbbrk":"\u2773","rbrace":"}","rbrack":"]","rbrke":"\u298C","rbrksld":"\u298E","rbrkslu":"\u2990","Rcaron":"\u0158","rcaron":"\u0159","Rcedil":"\u0156","rcedil":"\u0157","rceil":"\u2309","rcub":"}","Rcy":"\u0420","rcy":"\u0440","rdca":"\u2937","rdldhar":"\u2969","rdquo":"\u201D","rdquor":"\u201D","rdsh":"\u21B3","real":"\u211C","realine":"\u211B","realpart":"\u211C","reals":"\u211D","Re":"\u211C","rect":"\u25AD","reg":"\u00AE","REG":"\u00AE","ReverseElement":"\u220B","ReverseEquilibrium":"\u21CB","ReverseUpEquilibrium":"\u296F","rfisht":"\u297D","rfloor":"\u230B","rfr":"\uD835\uDD2F","Rfr":"\u211C","rHar":"\u2964","rhard":"\u21C1","rharu":"\u21C0","rharul":"\u296C","Rho":"\u03A1","rho":"\u03C1","rhov":"\u03F1","RightAngleBracket":"\u27E9","RightArrowBar":"\u21E5","rightarrow":"\u2192","RightArrow":"\u2192","Rightarrow":"\u21D2","RightArrowLeftArrow":"\u21C4","rightarrowtail":"\u21A3","RightCeiling":"\u2309","RightDoubleBracket":"\u27E7","RightDownTeeVector":"\u295D","RightDownVectorBar":"\u2955","RightDownVector":"\u21C2","RightFloor":"\u230B","rightharpoondown":"\u21C1","rightharpoonup":"\u21C0","rightleftarrows":"\u21C4","rightleftharpoons":"\u21CC","rightrightarrows":"\u21C9","rightsquigarrow":"\u219D","RightTeeArrow":"\u21A6","RightTee":"\u22A2","RightTeeVector":"\u295B","rightthreetimes":"\u22CC","RightTriangleBar":"\u29D0","RightTriangle":"\u22B3","RightTriangleEqual":"\u22B5","RightUpDownVector":"\u294F","RightUpTeeVector":"\u295C","RightUpVectorBar":"\u2954","RightUpVector":"\u21BE","RightVectorBar":"\u2953","RightVector":"\u21C0","ring":"\u02DA","risingdotseq":"\u2253","rlarr":"\u21C4","rlhar":"\u21CC","rlm":"\u200F","rmoustache":"\u23B1","rmoust":"\u23B1","rnmid":"\u2AEE","roang":"\u27ED","roarr":"\u21FE","robrk":"\u27E7","ropar":"\u2986","ropf":"\uD835\uDD63","Ropf":"\u211D","roplus":"\u2A2E","rotimes":"\u2A35","RoundImplies":"\u2970","rpar":")","rpargt":"\u2994","rppolint":"\u2A12","rrarr":"\u21C9","Rrightarrow":"\u21DB","rsaquo":"\u203A","rscr":"\uD835\uDCC7","Rscr":"\u211B","rsh":"\u21B1","Rsh":"\u21B1","rsqb":"]","rsquo":"\u2019","rsquor":"\u2019","rthree":"\u22CC","rtimes":"\u22CA","rtri":"\u25B9","rtrie":"\u22B5","rtrif":"\u25B8","rtriltri":"\u29CE","RuleDelayed":"\u29F4","ruluhar":"\u2968","rx":"\u211E","Sacute":"\u015A","sacute":"\u015B","sbquo":"\u201A","scap":"\u2AB8","Scaron":"\u0160","scaron":"\u0161","Sc":"\u2ABC","sc":"\u227B","sccue":"\u227D","sce":"\u2AB0","scE":"\u2AB4","Scedil":"\u015E","scedil":"\u015F","Scirc":"\u015C","scirc":"\u015D","scnap":"\u2ABA","scnE":"\u2AB6","scnsim":"\u22E9","scpolint":"\u2A13","scsim":"\u227F","Scy":"\u0421","scy":"\u0441","sdotb":"\u22A1","sdot":"\u22C5","sdote":"\u2A66","searhk":"\u2925","searr":"\u2198","seArr":"\u21D8","searrow":"\u2198","sect":"\u00A7","semi":";","seswar":"\u2929","setminus":"\u2216","setmn":"\u2216","sext":"\u2736","Sfr":"\uD835\uDD16","sfr":"\uD835\uDD30","sfrown":"\u2322","sharp":"\u266F","SHCHcy":"\u0429","shchcy":"\u0449","SHcy":"\u0428","shcy":"\u0448","ShortDownArrow":"\u2193","ShortLeftArrow":"\u2190","shortmid":"\u2223","shortparallel":"\u2225","ShortRightArrow":"\u2192","ShortUpArrow":"\u2191","shy":"\u00AD","Sigma":"\u03A3","sigma":"\u03C3","sigmaf":"\u03C2","sigmav":"\u03C2","sim":"\u223C","simdot":"\u2A6A","sime":"\u2243","simeq":"\u2243","simg":"\u2A9E","simgE":"\u2AA0","siml":"\u2A9D","simlE":"\u2A9F","simne":"\u2246","simplus":"\u2A24","simrarr":"\u2972","slarr":"\u2190","SmallCircle":"\u2218","smallsetminus":"\u2216","smashp":"\u2A33","smeparsl":"\u29E4","smid":"\u2223","smile":"\u2323","smt":"\u2AAA","smte":"\u2AAC","smtes":"\u2AAC\uFE00","SOFTcy":"\u042C","softcy":"\u044C","solbar":"\u233F","solb":"\u29C4","sol":"/","Sopf":"\uD835\uDD4A","sopf":"\uD835\uDD64","spades":"\u2660","spadesuit":"\u2660","spar":"\u2225","sqcap":"\u2293","sqcaps":"\u2293\uFE00","sqcup":"\u2294","sqcups":"\u2294\uFE00","Sqrt":"\u221A","sqsub":"\u228F","sqsube":"\u2291","sqsubset":"\u228F","sqsubseteq":"\u2291","sqsup":"\u2290","sqsupe":"\u2292","sqsupset":"\u2290","sqsupseteq":"\u2292","square":"\u25A1","Square":"\u25A1","SquareIntersection":"\u2293","SquareSubset":"\u228F","SquareSubsetEqual":"\u2291","SquareSuperset":"\u2290","SquareSupersetEqual":"\u2292","SquareUnion":"\u2294","squarf":"\u25AA","squ":"\u25A1","squf":"\u25AA","srarr":"\u2192","Sscr":"\uD835\uDCAE","sscr":"\uD835\uDCC8","ssetmn":"\u2216","ssmile":"\u2323","sstarf":"\u22C6","Star":"\u22C6","star":"\u2606","starf":"\u2605","straightepsilon":"\u03F5","straightphi":"\u03D5","strns":"\u00AF","sub":"\u2282","Sub":"\u22D0","subdot":"\u2ABD","subE":"\u2AC5","sube":"\u2286","subedot":"\u2AC3","submult":"\u2AC1","subnE":"\u2ACB","subne":"\u228A","subplus":"\u2ABF","subrarr":"\u2979","subset":"\u2282","Subset":"\u22D0","subseteq":"\u2286","subseteqq":"\u2AC5","SubsetEqual":"\u2286","subsetneq":"\u228A","subsetneqq":"\u2ACB","subsim":"\u2AC7","subsub":"\u2AD5","subsup":"\u2AD3","succapprox":"\u2AB8","succ":"\u227B","succcurlyeq":"\u227D","Succeeds":"\u227B","SucceedsEqual":"\u2AB0","SucceedsSlantEqual":"\u227D","SucceedsTilde":"\u227F","succeq":"\u2AB0","succnapprox":"\u2ABA","succneqq":"\u2AB6","succnsim":"\u22E9","succsim":"\u227F","SuchThat":"\u220B","sum":"\u2211","Sum":"\u2211","sung":"\u266A","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","sup":"\u2283","Sup":"\u22D1","supdot":"\u2ABE","supdsub":"\u2AD8","supE":"\u2AC6","supe":"\u2287","supedot":"\u2AC4","Superset":"\u2283","SupersetEqual":"\u2287","suphsol":"\u27C9","suphsub":"\u2AD7","suplarr":"\u297B","supmult":"\u2AC2","supnE":"\u2ACC","supne":"\u228B","supplus":"\u2AC0","supset":"\u2283","Supset":"\u22D1","supseteq":"\u2287","supseteqq":"\u2AC6","supsetneq":"\u228B","supsetneqq":"\u2ACC","supsim":"\u2AC8","supsub":"\u2AD4","supsup":"\u2AD6","swarhk":"\u2926","swarr":"\u2199","swArr":"\u21D9","swarrow":"\u2199","swnwar":"\u292A","szlig":"\u00DF","Tab":"\t","target":"\u2316","Tau":"\u03A4","tau":"\u03C4","tbrk":"\u23B4","Tcaron":"\u0164","tcaron":"\u0165","Tcedil":"\u0162","tcedil":"\u0163","Tcy":"\u0422","tcy":"\u0442","tdot":"\u20DB","telrec":"\u2315","Tfr":"\uD835\uDD17","tfr":"\uD835\uDD31","there4":"\u2234","therefore":"\u2234","Therefore":"\u2234","Theta":"\u0398","theta":"\u03B8","thetasym":"\u03D1","thetav":"\u03D1","thickapprox":"\u2248","thicksim":"\u223C","ThickSpace":"\u205F\u200A","ThinSpace":"\u2009","thinsp":"\u2009","thkap":"\u2248","thksim":"\u223C","THORN":"\u00DE","thorn":"\u00FE","tilde":"\u02DC","Tilde":"\u223C","TildeEqual":"\u2243","TildeFullEqual":"\u2245","TildeTilde":"\u2248","timesbar":"\u2A31","timesb":"\u22A0","times":"\u00D7","timesd":"\u2A30","tint":"\u222D","toea":"\u2928","topbot":"\u2336","topcir":"\u2AF1","top":"\u22A4","Topf":"\uD835\uDD4B","topf":"\uD835\uDD65","topfork":"\u2ADA","tosa":"\u2929","tprime":"\u2034","trade":"\u2122","TRADE":"\u2122","triangle":"\u25B5","triangledown":"\u25BF","triangleleft":"\u25C3","trianglelefteq":"\u22B4","triangleq":"\u225C","triangleright":"\u25B9","trianglerighteq":"\u22B5","tridot":"\u25EC","trie":"\u225C","triminus":"\u2A3A","TripleDot":"\u20DB","triplus":"\u2A39","trisb":"\u29CD","tritime":"\u2A3B","trpezium":"\u23E2","Tscr":"\uD835\uDCAF","tscr":"\uD835\uDCC9","TScy":"\u0426","tscy":"\u0446","TSHcy":"\u040B","tshcy":"\u045B","Tstrok":"\u0166","tstrok":"\u0167","twixt":"\u226C","twoheadleftarrow":"\u219E","twoheadrightarrow":"\u21A0","Uacute":"\u00DA","uacute":"\u00FA","uarr":"\u2191","Uarr":"\u219F","uArr":"\u21D1","Uarrocir":"\u2949","Ubrcy":"\u040E","ubrcy":"\u045E","Ubreve":"\u016C","ubreve":"\u016D","Ucirc":"\u00DB","ucirc":"\u00FB","Ucy":"\u0423","ucy":"\u0443","udarr":"\u21C5","Udblac":"\u0170","udblac":"\u0171","udhar":"\u296E","ufisht":"\u297E","Ufr":"\uD835\uDD18","ufr":"\uD835\uDD32","Ugrave":"\u00D9","ugrave":"\u00F9","uHar":"\u2963","uharl":"\u21BF","uharr":"\u21BE","uhblk":"\u2580","ulcorn":"\u231C","ulcorner":"\u231C","ulcrop":"\u230F","ultri":"\u25F8","Umacr":"\u016A","umacr":"\u016B","uml":"\u00A8","UnderBar":"_","UnderBrace":"\u23DF","UnderBracket":"\u23B5","UnderParenthesis":"\u23DD","Union":"\u22C3","UnionPlus":"\u228E","Uogon":"\u0172","uogon":"\u0173","Uopf":"\uD835\uDD4C","uopf":"\uD835\uDD66","UpArrowBar":"\u2912","uparrow":"\u2191","UpArrow":"\u2191","Uparrow":"\u21D1","UpArrowDownArrow":"\u21C5","updownarrow":"\u2195","UpDownArrow":"\u2195","Updownarrow":"\u21D5","UpEquilibrium":"\u296E","upharpoonleft":"\u21BF","upharpoonright":"\u21BE","uplus":"\u228E","UpperLeftArrow":"\u2196","UpperRightArrow":"\u2197","upsi":"\u03C5","Upsi":"\u03D2","upsih":"\u03D2","Upsilon":"\u03A5","upsilon":"\u03C5","UpTeeArrow":"\u21A5","UpTee":"\u22A5","upuparrows":"\u21C8","urcorn":"\u231D","urcorner":"\u231D","urcrop":"\u230E","Uring":"\u016E","uring":"\u016F","urtri":"\u25F9","Uscr":"\uD835\uDCB0","uscr":"\uD835\uDCCA","utdot":"\u22F0","Utilde":"\u0168","utilde":"\u0169","utri":"\u25B5","utrif":"\u25B4","uuarr":"\u21C8","Uuml":"\u00DC","uuml":"\u00FC","uwangle":"\u29A7","vangrt":"\u299C","varepsilon":"\u03F5","varkappa":"\u03F0","varnothing":"\u2205","varphi":"\u03D5","varpi":"\u03D6","varpropto":"\u221D","varr":"\u2195","vArr":"\u21D5","varrho":"\u03F1","varsigma":"\u03C2","varsubsetneq":"\u228A\uFE00","varsubsetneqq":"\u2ACB\uFE00","varsupsetneq":"\u228B\uFE00","varsupsetneqq":"\u2ACC\uFE00","vartheta":"\u03D1","vartriangleleft":"\u22B2","vartriangleright":"\u22B3","vBar":"\u2AE8","Vbar":"\u2AEB","vBarv":"\u2AE9","Vcy":"\u0412","vcy":"\u0432","vdash":"\u22A2","vDash":"\u22A8","Vdash":"\u22A9","VDash":"\u22AB","Vdashl":"\u2AE6","veebar":"\u22BB","vee":"\u2228","Vee":"\u22C1","veeeq":"\u225A","vellip":"\u22EE","verbar":"|","Verbar":"\u2016","vert":"|","Vert":"\u2016","VerticalBar":"\u2223","VerticalLine":"|","VerticalSeparator":"\u2758","VerticalTilde":"\u2240","VeryThinSpace":"\u200A","Vfr":"\uD835\uDD19","vfr":"\uD835\uDD33","vltri":"\u22B2","vnsub":"\u2282\u20D2","vnsup":"\u2283\u20D2","Vopf":"\uD835\uDD4D","vopf":"\uD835\uDD67","vprop":"\u221D","vrtri":"\u22B3","Vscr":"\uD835\uDCB1","vscr":"\uD835\uDCCB","vsubnE":"\u2ACB\uFE00","vsubne":"\u228A\uFE00","vsupnE":"\u2ACC\uFE00","vsupne":"\u228B\uFE00","Vvdash":"\u22AA","vzigzag":"\u299A","Wcirc":"\u0174","wcirc":"\u0175","wedbar":"\u2A5F","wedge":"\u2227","Wedge":"\u22C0","wedgeq":"\u2259","weierp":"\u2118","Wfr":"\uD835\uDD1A","wfr":"\uD835\uDD34","Wopf":"\uD835\uDD4E","wopf":"\uD835\uDD68","wp":"\u2118","wr":"\u2240","wreath":"\u2240","Wscr":"\uD835\uDCB2","wscr":"\uD835\uDCCC","xcap":"\u22C2","xcirc":"\u25EF","xcup":"\u22C3","xdtri":"\u25BD","Xfr":"\uD835\uDD1B","xfr":"\uD835\uDD35","xharr":"\u27F7","xhArr":"\u27FA","Xi":"\u039E","xi":"\u03BE","xlarr":"\u27F5","xlArr":"\u27F8","xmap":"\u27FC","xnis":"\u22FB","xodot":"\u2A00","Xopf":"\uD835\uDD4F","xopf":"\uD835\uDD69","xoplus":"\u2A01","xotime":"\u2A02","xrarr":"\u27F6","xrArr":"\u27F9","Xscr":"\uD835\uDCB3","xscr":"\uD835\uDCCD","xsqcup":"\u2A06","xuplus":"\u2A04","xutri":"\u25B3","xvee":"\u22C1","xwedge":"\u22C0","Yacute":"\u00DD","yacute":"\u00FD","YAcy":"\u042F","yacy":"\u044F","Ycirc":"\u0176","ycirc":"\u0177","Ycy":"\u042B","ycy":"\u044B","yen":"\u00A5","Yfr":"\uD835\uDD1C","yfr":"\uD835\uDD36","YIcy":"\u0407","yicy":"\u0457","Yopf":"\uD835\uDD50","yopf":"\uD835\uDD6A","Yscr":"\uD835\uDCB4","yscr":"\uD835\uDCCE","YUcy":"\u042E","yucy":"\u044E","yuml":"\u00FF","Yuml":"\u0178","Zacute":"\u0179","zacute":"\u017A","Zcaron":"\u017D","zcaron":"\u017E","Zcy":"\u0417","zcy":"\u0437","Zdot":"\u017B","zdot":"\u017C","zeetrf":"\u2128","ZeroWidthSpace":"\u200B","Zeta":"\u0396","zeta":"\u03B6","zfr":"\uD835\uDD37","Zfr":"\u2128","ZHcy":"\u0416","zhcy":"\u0436","zigrarr":"\u21DD","zopf":"\uD835\uDD6B","Zopf":"\u2124","Zscr":"\uD835\uDCB5","zscr":"\uD835\uDCCF","zwj":"\u200D","zwnj":"\u200C"}
},{}],182:[function(require,module,exports){
module.exports={"Aacute":"\u00C1","aacute":"\u00E1","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","AElig":"\u00C6","aelig":"\u00E6","Agrave":"\u00C0","agrave":"\u00E0","amp":"&","AMP":"&","Aring":"\u00C5","aring":"\u00E5","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","brvbar":"\u00A6","Ccedil":"\u00C7","ccedil":"\u00E7","cedil":"\u00B8","cent":"\u00A2","copy":"\u00A9","COPY":"\u00A9","curren":"\u00A4","deg":"\u00B0","divide":"\u00F7","Eacute":"\u00C9","eacute":"\u00E9","Ecirc":"\u00CA","ecirc":"\u00EA","Egrave":"\u00C8","egrave":"\u00E8","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","frac12":"\u00BD","frac14":"\u00BC","frac34":"\u00BE","gt":">","GT":">","Iacute":"\u00CD","iacute":"\u00ED","Icirc":"\u00CE","icirc":"\u00EE","iexcl":"\u00A1","Igrave":"\u00CC","igrave":"\u00EC","iquest":"\u00BF","Iuml":"\u00CF","iuml":"\u00EF","laquo":"\u00AB","lt":"<","LT":"<","macr":"\u00AF","micro":"\u00B5","middot":"\u00B7","nbsp":"\u00A0","not":"\u00AC","Ntilde":"\u00D1","ntilde":"\u00F1","Oacute":"\u00D3","oacute":"\u00F3","Ocirc":"\u00D4","ocirc":"\u00F4","Ograve":"\u00D2","ograve":"\u00F2","ordf":"\u00AA","ordm":"\u00BA","Oslash":"\u00D8","oslash":"\u00F8","Otilde":"\u00D5","otilde":"\u00F5","Ouml":"\u00D6","ouml":"\u00F6","para":"\u00B6","plusmn":"\u00B1","pound":"\u00A3","quot":"\"","QUOT":"\"","raquo":"\u00BB","reg":"\u00AE","REG":"\u00AE","sect":"\u00A7","shy":"\u00AD","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","szlig":"\u00DF","THORN":"\u00DE","thorn":"\u00FE","times":"\u00D7","Uacute":"\u00DA","uacute":"\u00FA","Ucirc":"\u00DB","ucirc":"\u00FB","Ugrave":"\u00D9","ugrave":"\u00F9","uml":"\u00A8","Uuml":"\u00DC","uuml":"\u00FC","Yacute":"\u00DD","yacute":"\u00FD","yen":"\u00A5","yuml":"\u00FF"}
},{}],183:[function(require,module,exports){
module.exports={"amp":"&","apos":"'","gt":">","lt":"<","quot":"\""}

},{}],184:[function(require,module,exports){
//Types of elements found in the DOM
module.exports = {
	Text: "text", //Text
	Directive: "directive", //<? ... ?>
	Comment: "comment", //<!-- ... -->
	Script: "script", //<script> tags
	Style: "style", //<style> tags
	Tag: "tag", //Any tag
	CDATA: "cdata", //<![CDATA[ ... ]]>
	Doctype: "doctype",

	isTag: function(elem){
		return elem.type === "tag" || elem.type === "script" || elem.type === "style";
	}
};

},{}],185:[function(require,module,exports){
var ElementType = require("domelementtype");

var re_whitespace = /\s+/g;
var NodePrototype = require("./lib/node");
var ElementPrototype = require("./lib/element");

function DomHandler(callback, options, elementCB){
	if(typeof callback === "object"){
		elementCB = options;
		options = callback;
		callback = null;
	} else if(typeof options === "function"){
		elementCB = options;
		options = defaultOpts;
	}
	this._callback = callback;
	this._options = options || defaultOpts;
	this._elementCB = elementCB;
	this.dom = [];
	this._done = false;
	this._tagStack = [];
	this._parser = this._parser || null;
}

//default options
var defaultOpts = {
	normalizeWhitespace: false, //Replace all whitespace with single spaces
	withStartIndices: false, //Add startIndex properties to nodes
	withEndIndices: false, //Add endIndex properties to nodes
};

DomHandler.prototype.onparserinit = function(parser){
	this._parser = parser;
};

//Resets the handler back to starting state
DomHandler.prototype.onreset = function(){
	DomHandler.call(this, this._callback, this._options, this._elementCB);
};

//Signals the handler that parsing is done
DomHandler.prototype.onend = function(){
	if(this._done) return;
	this._done = true;
	this._parser = null;
	this._handleCallback(null);
};

DomHandler.prototype._handleCallback =
DomHandler.prototype.onerror = function(error){
	if(typeof this._callback === "function"){
		this._callback(error, this.dom);
	} else {
		if(error) throw error;
	}
};

DomHandler.prototype.onclosetag = function(){
	//if(this._tagStack.pop().name !== name) this._handleCallback(Error("Tagname didn't match!"));
	
	var elem = this._tagStack.pop();

	if(this._options.withEndIndices && elem){
		elem.endIndex = this._parser.endIndex;
	}

	if(this._elementCB) this._elementCB(elem);
};

DomHandler.prototype._createDomElement = function(properties){
	if (!this._options.withDomLvl1) return properties;

	var element;
	if (properties.type === "tag") {
		element = Object.create(ElementPrototype);
	} else {
		element = Object.create(NodePrototype);
	}

	for (var key in properties) {
		if (properties.hasOwnProperty(key)) {
			element[key] = properties[key];
		}
	}

	return element;
};

DomHandler.prototype._addDomElement = function(element){
	var parent = this._tagStack[this._tagStack.length - 1];
	var siblings = parent ? parent.children : this.dom;
	var previousSibling = siblings[siblings.length - 1];

	element.next = null;

	if(this._options.withStartIndices){
		element.startIndex = this._parser.startIndex;
	}
	if(this._options.withEndIndices){
		element.endIndex = this._parser.endIndex;
	}

	if(previousSibling){
		element.prev = previousSibling;
		previousSibling.next = element;
	} else {
		element.prev = null;
	}

	siblings.push(element);
	element.parent = parent || null;
};

DomHandler.prototype.onopentag = function(name, attribs){
	var properties = {
		type: name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag,
		name: name,
		attribs: attribs,
		children: []
	};

	var element = this._createDomElement(properties);

	this._addDomElement(element);

	this._tagStack.push(element);
};

DomHandler.prototype.ontext = function(data){
	//the ignoreWhitespace is officially dropped, but for now,
	//it's an alias for normalizeWhitespace
	var normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;

	var lastTag;

	if(!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length-1]).type === ElementType.Text){
		if(normalize){
			lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
		} else {
			lastTag.data += data;
		}
	} else {
		if(
			this._tagStack.length &&
			(lastTag = this._tagStack[this._tagStack.length - 1]) &&
			(lastTag = lastTag.children[lastTag.children.length - 1]) &&
			lastTag.type === ElementType.Text
		){
			if(normalize){
				lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
			} else {
				lastTag.data += data;
			}
		} else {
			if(normalize){
				data = data.replace(re_whitespace, " ");
			}

			var element = this._createDomElement({
				data: data,
				type: ElementType.Text
			});

			this._addDomElement(element);
		}
	}
};

DomHandler.prototype.oncomment = function(data){
	var lastTag = this._tagStack[this._tagStack.length - 1];

	if(lastTag && lastTag.type === ElementType.Comment){
		lastTag.data += data;
		return;
	}

	var properties = {
		data: data,
		type: ElementType.Comment
	};

	var element = this._createDomElement(properties);

	this._addDomElement(element);
	this._tagStack.push(element);
};

DomHandler.prototype.oncdatastart = function(){
	var properties = {
		children: [{
			data: "",
			type: ElementType.Text
		}],
		type: ElementType.CDATA
	};

	var element = this._createDomElement(properties);

	this._addDomElement(element);
	this._tagStack.push(element);
};

DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function(){
	this._tagStack.pop();
};

DomHandler.prototype.onprocessinginstruction = function(name, data){
	var element = this._createDomElement({
		name: name,
		data: data,
		type: ElementType.Directive
	});

	this._addDomElement(element);
};

module.exports = DomHandler;

},{"./lib/element":186,"./lib/node":187,"domelementtype":184}],186:[function(require,module,exports){
// DOM-Level-1-compliant structure
var NodePrototype = require('./node');
var ElementPrototype = module.exports = Object.create(NodePrototype);

var domLvl1 = {
	tagName: "name"
};

Object.keys(domLvl1).forEach(function(key) {
	var shorthand = domLvl1[key];
	Object.defineProperty(ElementPrototype, key, {
		get: function() {
			return this[shorthand] || null;
		},
		set: function(val) {
			this[shorthand] = val;
			return val;
		}
	});
});

},{"./node":187}],187:[function(require,module,exports){
// This object will be used as the prototype for Nodes when creating a
// DOM-Level-1-compliant structure.
var NodePrototype = module.exports = {
	get firstChild() {
		var children = this.children;
		return children && children[0] || null;
	},
	get lastChild() {
		var children = this.children;
		return children && children[children.length - 1] || null;
	},
	get nodeType() {
		return nodeTypes[this.type] || nodeTypes.element;
	}
};

var domLvl1 = {
	tagName: "name",
	childNodes: "children",
	parentNode: "parent",
	previousSibling: "prev",
	nextSibling: "next",
	nodeValue: "data"
};

var nodeTypes = {
	element: 1,
	text: 3,
	cdata: 4,
	comment: 8
};

Object.keys(domLvl1).forEach(function(key) {
	var shorthand = domLvl1[key];
	Object.defineProperty(NodePrototype, key, {
		get: function() {
			return this[shorthand] || null;
		},
		set: function(val) {
			this[shorthand] = val;
			return val;
		}
	});
});

},{}],188:[function(require,module,exports){
var DomUtils = module.exports;

[
	require("./lib/stringify"),
	require("./lib/traversal"),
	require("./lib/manipulation"),
	require("./lib/querying"),
	require("./lib/legacy"),
	require("./lib/helpers")
].forEach(function(ext){
	Object.keys(ext).forEach(function(key){
		DomUtils[key] = ext[key].bind(DomUtils);
	});
});

},{"./lib/helpers":189,"./lib/legacy":190,"./lib/manipulation":191,"./lib/querying":192,"./lib/stringify":193,"./lib/traversal":194}],189:[function(require,module,exports){
// removeSubsets
// Given an array of nodes, remove any member that is contained by another.
exports.removeSubsets = function(nodes) {
	var idx = nodes.length, node, ancestor, replace;

	// Check if each node (or one of its ancestors) is already contained in the
	// array.
	while (--idx > -1) {
		node = ancestor = nodes[idx];

		// Temporarily remove the node under consideration
		nodes[idx] = null;
		replace = true;

		while (ancestor) {
			if (nodes.indexOf(ancestor) > -1) {
				replace = false;
				nodes.splice(idx, 1);
				break;
			}
			ancestor = ancestor.parent;
		}

		// If the node has been found to be unique, re-insert it.
		if (replace) {
			nodes[idx] = node;
		}
	}

	return nodes;
};

// Source: http://dom.spec.whatwg.org/#dom-node-comparedocumentposition
var POSITION = {
	DISCONNECTED: 1,
	PRECEDING: 2,
	FOLLOWING: 4,
	CONTAINS: 8,
	CONTAINED_BY: 16
};

// Compare the position of one node against another node in any other document.
// The return value is a bitmask with the following values:
//
// document order:
// > There is an ordering, document order, defined on all the nodes in the
// > document corresponding to the order in which the first character of the
// > XML representation of each node occurs in the XML representation of the
// > document after expansion of general entities. Thus, the document element
// > node will be the first node. Element nodes occur before their children.
// > Thus, document order orders element nodes in order of the occurrence of
// > their start-tag in the XML (after expansion of entities). The attribute
// > nodes of an element occur after the element and before its children. The
// > relative order of attribute nodes is implementation-dependent./
// Source:
// http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
//
// @argument {Node} nodaA The first node to use in the comparison
// @argument {Node} nodeB The second node to use in the comparison
//
// @return {Number} A bitmask describing the input nodes' relative position.
//         See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
//         a description of these values.
var comparePos = exports.compareDocumentPosition = function(nodeA, nodeB) {
	var aParents = [];
	var bParents = [];
	var current, sharedParent, siblings, aSibling, bSibling, idx;

	if (nodeA === nodeB) {
		return 0;
	}

	current = nodeA;
	while (current) {
		aParents.unshift(current);
		current = current.parent;
	}
	current = nodeB;
	while (current) {
		bParents.unshift(current);
		current = current.parent;
	}

	idx = 0;
	while (aParents[idx] === bParents[idx]) {
		idx++;
	}

	if (idx === 0) {
		return POSITION.DISCONNECTED;
	}

	sharedParent = aParents[idx - 1];
	siblings = sharedParent.children;
	aSibling = aParents[idx];
	bSibling = bParents[idx];

	if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
		if (sharedParent === nodeB) {
			return POSITION.FOLLOWING | POSITION.CONTAINED_BY;
		}
		return POSITION.FOLLOWING;
	} else {
		if (sharedParent === nodeA) {
			return POSITION.PRECEDING | POSITION.CONTAINS;
		}
		return POSITION.PRECEDING;
	}
};

// Sort an array of nodes based on their relative position in the document and
// remove any duplicate nodes. If the array contains nodes that do not belong
// to the same document, sort order is unspecified.
//
// @argument {Array} nodes Array of DOM nodes
//
// @returns {Array} collection of unique nodes, sorted in document order
exports.uniqueSort = function(nodes) {
	var idx = nodes.length, node, position;

	nodes = nodes.slice();

	while (--idx > -1) {
		node = nodes[idx];
		position = nodes.indexOf(node);
		if (position > -1 && position < idx) {
			nodes.splice(idx, 1);
		}
	}
	nodes.sort(function(a, b) {
		var relative = comparePos(a, b);
		if (relative & POSITION.PRECEDING) {
			return -1;
		} else if (relative & POSITION.FOLLOWING) {
			return 1;
		}
		return 0;
	});

	return nodes;
};

},{}],190:[function(require,module,exports){
var ElementType = require("domelementtype");
var isTag = exports.isTag = ElementType.isTag;

exports.testElement = function(options, element){
	for(var key in options){
		if(!options.hasOwnProperty(key));
		else if(key === "tag_name"){
			if(!isTag(element) || !options.tag_name(element.name)){
				return false;
			}
		} else if(key === "tag_type"){
			if(!options.tag_type(element.type)) return false;
		} else if(key === "tag_contains"){
			if(isTag(element) || !options.tag_contains(element.data)){
				return false;
			}
		} else if(!element.attribs || !options[key](element.attribs[key])){
			return false;
		}
	}
	return true;
};

var Checks = {
	tag_name: function(name){
		if(typeof name === "function"){
			return function(elem){ return isTag(elem) && name(elem.name); };
		} else if(name === "*"){
			return isTag;
		} else {
			return function(elem){ return isTag(elem) && elem.name === name; };
		}
	},
	tag_type: function(type){
		if(typeof type === "function"){
			return function(elem){ return type(elem.type); };
		} else {
			return function(elem){ return elem.type === type; };
		}
	},
	tag_contains: function(data){
		if(typeof data === "function"){
			return function(elem){ return !isTag(elem) && data(elem.data); };
		} else {
			return function(elem){ return !isTag(elem) && elem.data === data; };
		}
	}
};

function getAttribCheck(attrib, value){
	if(typeof value === "function"){
		return function(elem){ return elem.attribs && value(elem.attribs[attrib]); };
	} else {
		return function(elem){ return elem.attribs && elem.attribs[attrib] === value; };
	}
}

function combineFuncs(a, b){
	return function(elem){
		return a(elem) || b(elem);
	};
}

exports.getElements = function(options, element, recurse, limit){
	var funcs = Object.keys(options).map(function(key){
		var value = options[key];
		return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
	});

	return funcs.length === 0 ? [] : this.filter(
		funcs.reduce(combineFuncs),
		element, recurse, limit
	);
};

exports.getElementById = function(id, element, recurse){
	if(!Array.isArray(element)) element = [element];
	return this.findOne(getAttribCheck("id", id), element, recurse !== false);
};

exports.getElementsByTagName = function(name, element, recurse, limit){
	return this.filter(Checks.tag_name(name), element, recurse, limit);
};

exports.getElementsByTagType = function(type, element, recurse, limit){
	return this.filter(Checks.tag_type(type), element, recurse, limit);
};

},{"domelementtype":184}],191:[function(require,module,exports){
exports.removeElement = function(elem){
	if(elem.prev) elem.prev.next = elem.next;
	if(elem.next) elem.next.prev = elem.prev;

	if(elem.parent){
		var childs = elem.parent.children;
		childs.splice(childs.lastIndexOf(elem), 1);
	}
};

exports.replaceElement = function(elem, replacement){
	var prev = replacement.prev = elem.prev;
	if(prev){
		prev.next = replacement;
	}

	var next = replacement.next = elem.next;
	if(next){
		next.prev = replacement;
	}

	var parent = replacement.parent = elem.parent;
	if(parent){
		var childs = parent.children;
		childs[childs.lastIndexOf(elem)] = replacement;
	}
};

exports.appendChild = function(elem, child){
	child.parent = elem;

	if(elem.children.push(child) !== 1){
		var sibling = elem.children[elem.children.length - 2];
		sibling.next = child;
		child.prev = sibling;
		child.next = null;
	}
};

exports.append = function(elem, next){
	var parent = elem.parent,
		currNext = elem.next;

	next.next = currNext;
	next.prev = elem;
	elem.next = next;
	next.parent = parent;

	if(currNext){
		currNext.prev = next;
		if(parent){
			var childs = parent.children;
			childs.splice(childs.lastIndexOf(currNext), 0, next);
		}
	} else if(parent){
		parent.children.push(next);
	}
};

exports.prepend = function(elem, prev){
	var parent = elem.parent;
	if(parent){
		var childs = parent.children;
		childs.splice(childs.lastIndexOf(elem), 0, prev);
	}

	if(elem.prev){
		elem.prev.next = prev;
	}
	
	prev.parent = parent;
	prev.prev = elem.prev;
	prev.next = elem;
	elem.prev = prev;
};



},{}],192:[function(require,module,exports){
var isTag = require("domelementtype").isTag;

module.exports = {
	filter: filter,
	find: find,
	findOneChild: findOneChild,
	findOne: findOne,
	existsOne: existsOne,
	findAll: findAll
};

function filter(test, element, recurse, limit){
	if(!Array.isArray(element)) element = [element];

	if(typeof limit !== "number" || !isFinite(limit)){
		limit = Infinity;
	}
	return find(test, element, recurse !== false, limit);
}

function find(test, elems, recurse, limit){
	var result = [], childs;

	for(var i = 0, j = elems.length; i < j; i++){
		if(test(elems[i])){
			result.push(elems[i]);
			if(--limit <= 0) break;
		}

		childs = elems[i].children;
		if(recurse && childs && childs.length > 0){
			childs = find(test, childs, recurse, limit);
			result = result.concat(childs);
			limit -= childs.length;
			if(limit <= 0) break;
		}
	}

	return result;
}

function findOneChild(test, elems){
	for(var i = 0, l = elems.length; i < l; i++){
		if(test(elems[i])) return elems[i];
	}

	return null;
}

function findOne(test, elems){
	var elem = null;

	for(var i = 0, l = elems.length; i < l && !elem; i++){
		if(!isTag(elems[i])){
			continue;
		} else if(test(elems[i])){
			elem = elems[i];
		} else if(elems[i].children.length > 0){
			elem = findOne(test, elems[i].children);
		}
	}

	return elem;
}

function existsOne(test, elems){
	for(var i = 0, l = elems.length; i < l; i++){
		if(
			isTag(elems[i]) && (
				test(elems[i]) || (
					elems[i].children.length > 0 &&
					existsOne(test, elems[i].children)
				)
			)
		){
			return true;
		}
	}

	return false;
}

function findAll(test, elems){
	var result = [];
	for(var i = 0, j = elems.length; i < j; i++){
		if(!isTag(elems[i])) continue;
		if(test(elems[i])) result.push(elems[i]);

		if(elems[i].children.length > 0){
			result = result.concat(findAll(test, elems[i].children));
		}
	}
	return result;
}

},{"domelementtype":184}],193:[function(require,module,exports){
var ElementType = require("domelementtype"),
    getOuterHTML = require("dom-serializer"),
    isTag = ElementType.isTag;

module.exports = {
	getInnerHTML: getInnerHTML,
	getOuterHTML: getOuterHTML,
	getText: getText
};

function getInnerHTML(elem, opts){
	return elem.children ? elem.children.map(function(elem){
		return getOuterHTML(elem, opts);
	}).join("") : "";
}

function getText(elem){
	if(Array.isArray(elem)) return elem.map(getText).join("");
	if(isTag(elem) || elem.type === ElementType.CDATA) return getText(elem.children);
	if(elem.type === ElementType.Text) return elem.data;
	return "";
}

},{"dom-serializer":175,"domelementtype":184}],194:[function(require,module,exports){
var getChildren = exports.getChildren = function(elem){
	return elem.children;
};

var getParent = exports.getParent = function(elem){
	return elem.parent;
};

exports.getSiblings = function(elem){
	var parent = getParent(elem);
	return parent ? getChildren(parent) : [elem];
};

exports.getAttributeValue = function(elem, name){
	return elem.attribs && elem.attribs[name];
};

exports.hasAttrib = function(elem, name){
	return !!elem.attribs && hasOwnProperty.call(elem.attribs, name);
};

exports.getName = function(elem){
	return elem.name;
};

},{}],195:[function(require,module,exports){
"use strict";

var stream = require("stream");

function DuplexWrapper(options, writable, readable) {
  if (typeof readable === "undefined") {
    readable = writable;
    writable = options;
    options = null;
  }

  stream.Duplex.call(this, options);

  if (typeof readable.read !== "function") {
    readable = (new stream.Readable(options)).wrap(readable);
  }

  this._writable = writable;
  this._readable = readable;
  this._waiting = false;

  var self = this;

  writable.once("finish", function() {
    self.end();
  });

  this.once("finish", function() {
    writable.end();
  });

  readable.on("readable", function() {
    if (self._waiting) {
      self._waiting = false;
      self._read();
    }
  });

  readable.once("end", function() {
    self.push(null);
  });

  if (!options || typeof options.bubbleErrors === "undefined" || options.bubbleErrors) {
    writable.on("error", function(err) {
      self.emit("error", err);
    });

    readable.on("error", function(err) {
      self.emit("error", err);
    });
  }
}

DuplexWrapper.prototype = Object.create(stream.Duplex.prototype, {constructor: {value: DuplexWrapper}});

DuplexWrapper.prototype._write = function _write(input, encoding, done) {
  this._writable.write(input, encoding, done);
};

DuplexWrapper.prototype._read = function _read() {
  var buf;
  var reads = 0;
  while ((buf = this._readable.read()) !== null) {
    this.push(buf);
    reads++;
  }
  if (reads === 0) {
    this._waiting = true;
  }
};

module.exports = function duplex2(options, writable, readable) {
  return new DuplexWrapper(options, writable, readable);
};

module.exports.DuplexWrapper = DuplexWrapper;

},{"stream":37}],196:[function(require,module,exports){
(function (process){
var once = require('once');

var noop = function() {};

var isRequest = function(stream) {
	return stream.setHeader && typeof stream.abort === 'function';
};

var isChildProcess = function(stream) {
	return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3
};

var eos = function(stream, opts, callback) {
	if (typeof opts === 'function') return eos(stream, null, opts);
	if (!opts) opts = {};

	callback = once(callback || noop);

	var ws = stream._writableState;
	var rs = stream._readableState;
	var readable = opts.readable || (opts.readable !== false && stream.readable);
	var writable = opts.writable || (opts.writable !== false && stream.writable);
	var cancelled = false;

	var onlegacyfinish = function() {
		if (!stream.writable) onfinish();
	};

	var onfinish = function() {
		writable = false;
		if (!readable) callback.call(stream);
	};

	var onend = function() {
		readable = false;
		if (!writable) callback.call(stream);
	};

	var onexit = function(exitCode) {
		callback.call(stream, exitCode ? new Error('exited with error code: ' + exitCode) : null);
	};

	var onerror = function(err) {
		callback.call(stream, err);
	};

	var onclose = function() {
		process.nextTick(onclosenexttick);
	};

	var onclosenexttick = function() {
		if (cancelled) return;
		if (readable && !(rs && (rs.ended && !rs.destroyed))) return callback.call(stream, new Error('premature close'));
		if (writable && !(ws && (ws.ended && !ws.destroyed))) return callback.call(stream, new Error('premature close'));
	};

	var onrequest = function() {
		stream.req.on('finish', onfinish);
	};

	if (isRequest(stream)) {
		stream.on('complete', onfinish);
		stream.on('abort', onclose);
		if (stream.req) onrequest();
		else stream.on('request', onrequest);
	} else if (writable && !ws) { // legacy streams
		stream.on('end', onlegacyfinish);
		stream.on('close', onlegacyfinish);
	}

	if (isChildProcess(stream)) stream.on('exit', onexit);

	stream.on('end', onend);
	stream.on('finish', onfinish);
	if (opts.error !== false) stream.on('error', onerror);
	stream.on('close', onclose);

	return function() {
		cancelled = true;
		stream.removeListener('complete', onfinish);
		stream.removeListener('abort', onclose);
		stream.removeListener('request', onrequest);
		if (stream.req) stream.req.removeListener('finish', onfinish);
		stream.removeListener('end', onlegacyfinish);
		stream.removeListener('close', onlegacyfinish);
		stream.removeListener('finish', onfinish);
		stream.removeListener('exit', onexit);
		stream.removeListener('end', onend);
		stream.removeListener('error', onerror);
		stream.removeListener('close', onclose);
	};
};

module.exports = eos;

}).call(this,require('_process'))
},{"_process":16,"once":488}],197:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var entities_json_1 = __importDefault(require("./maps/entities.json"));
var legacy_json_1 = __importDefault(require("./maps/legacy.json"));
var xml_json_1 = __importDefault(require("./maps/xml.json"));
var decode_codepoint_1 = __importDefault(require("./decode_codepoint"));
exports.decodeXML = getStrictDecoder(xml_json_1.default);
exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
function getStrictDecoder(map) {
    var keys = Object.keys(map).join("|");
    var replace = getReplacer(map);
    keys += "|#[xX][\\da-fA-F]+|#\\d+";
    var re = new RegExp("&(?:" + keys + ");", "g");
    return function (str) { return String(str).replace(re, replace); };
}
var sorter = function (a, b) { return (a < b ? 1 : -1); };
exports.decodeHTML = (function () {
    var legacy = Object.keys(legacy_json_1.default).sort(sorter);
    var keys = Object.keys(entities_json_1.default).sort(sorter);
    for (var i = 0, j = 0; i < keys.length; i++) {
        if (legacy[j] === keys[i]) {
            keys[i] += ";?";
            j++;
        }
        else {
            keys[i] += ";";
        }
    }
    var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
    var replace = getReplacer(entities_json_1.default);
    function replacer(str) {
        if (str.substr(-1) !== ";")
            str += ";";
        return replace(str);
    }
    //TODO consider creating a merged map
    return function (str) {
        return String(str).replace(re, replacer);
    };
})();
function getReplacer(map) {
    return function replace(str) {
        if (str.charAt(1) === "#") {
            if (str.charAt(2) === "X" || str.charAt(2) === "x") {
                return decode_codepoint_1.default(parseInt(str.substr(3), 16));
            }
            return decode_codepoint_1.default(parseInt(str.substr(2), 10));
        }
        return map[str.slice(1, -1)];
    };
}

},{"./decode_codepoint":198,"./maps/entities.json":202,"./maps/legacy.json":203,"./maps/xml.json":204}],198:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var decode_json_1 = __importDefault(require("./maps/decode.json"));
// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
function decodeCodePoint(codePoint) {
    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
        return "\uFFFD";
    }
    if (codePoint in decode_json_1.default) {
        // @ts-ignore
        codePoint = decode_json_1.default[codePoint];
    }
    var output = "";
    if (codePoint > 0xffff) {
        codePoint -= 0x10000;
        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
        codePoint = 0xdc00 | (codePoint & 0x3ff);
    }
    output += String.fromCharCode(codePoint);
    return output;
}
exports.default = decodeCodePoint;

},{"./maps/decode.json":201}],199:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var xml_json_1 = __importDefault(require("./maps/xml.json"));
var inverseXML = getInverseObj(xml_json_1.default);
var xmlReplacer = getInverseReplacer(inverseXML);
exports.encodeXML = getInverse(inverseXML, xmlReplacer);
var entities_json_1 = __importDefault(require("./maps/entities.json"));
var inverseHTML = getInverseObj(entities_json_1.default);
var htmlReplacer = getInverseReplacer(inverseHTML);
exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
function getInverseObj(obj) {
    return Object.keys(obj)
        .sort()
        .reduce(function (inverse, name) {
        inverse[obj[name]] = "&" + name + ";";
        return inverse;
    }, {});
}
function getInverseReplacer(inverse) {
    var single = [];
    var multiple = [];
    Object.keys(inverse).forEach(function (k) {
        return k.length === 1
            ? // Add value to single array
                single.push("\\" + k)
            : // Add value to multiple array
                multiple.push(k);
    });
    //TODO add ranges
    multiple.unshift("[" + single.join("") + "]");
    return new RegExp(multiple.join("|"), "g");
}
var reNonASCII = /[^\0-\x7F]/g;
var reAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
function singleCharReplacer(c) {
    return "&#x" + c
        .charCodeAt(0)
        .toString(16)
        .toUpperCase() + ";";
}
// eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any
function astralReplacer(c, _) {
    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
    var high = c.charCodeAt(0);
    var low = c.charCodeAt(1);
    var codePoint = (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
    return "&#x" + codePoint.toString(16).toUpperCase() + ";";
}
function getInverse(inverse, re) {
    return function (data) {
        return data
            .replace(re, function (name) { return inverse[name]; })
            .replace(reAstralSymbols, astralReplacer)
            .replace(reNonASCII, singleCharReplacer);
    };
}
var reXmlChars = getInverseReplacer(inverseXML);
function escape(data) {
    return data
        .replace(reXmlChars, singleCharReplacer)
        .replace(reAstralSymbols, astralReplacer)
        .replace(reNonASCII, singleCharReplacer);
}
exports.escape = escape;

},{"./maps/entities.json":202,"./maps/xml.json":204}],200:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var decode_1 = require("./decode");
var encode_1 = require("./encode");
function decode(data, level) {
    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
}
exports.decode = decode;
function decodeStrict(data, level) {
    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
}
exports.decodeStrict = decodeStrict;
function encode(data, level) {
    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
}
exports.encode = encode;
var encode_2 = require("./encode");
exports.encodeXML = encode_2.encodeXML;
exports.encodeHTML = encode_2.encodeHTML;
exports.escape = encode_2.escape;
// Legacy aliases
exports.encodeHTML4 = encode_2.encodeHTML;
exports.encodeHTML5 = encode_2.encodeHTML;
var decode_2 = require("./decode");
exports.decodeXML = decode_2.decodeXML;
exports.decodeHTML = decode_2.decodeHTML;
exports.decodeHTMLStrict = decode_2.decodeHTMLStrict;
// Legacy aliases
exports.decodeHTML4 = decode_2.decodeHTML;
exports.decodeHTML5 = decode_2.decodeHTML;
exports.decodeHTML4Strict = decode_2.decodeHTMLStrict;
exports.decodeHTML5Strict = decode_2.decodeHTMLStrict;
exports.decodeXMLStrict = decode_2.decodeXML;

},{"./decode":197,"./encode":199}],201:[function(require,module,exports){
module.exports={ "0": 65533, "128": 8364, "130": 8218, "131": 402, "132": 8222, "133": 8230, "134": 8224, "135": 8225, "136": 710, "137": 8240, "138": 352, "139": 8249, "140": 338, "142": 381, "145": 8216, "146": 8217, "147": 8220, "148": 8221, "149": 8226, "150": 8211, "151": 8212, "152": 732, "153": 8482, "154": 353, "155": 8250, "156": 339, "158": 382, "159": 376 }

},{}],202:[function(require,module,exports){
module.exports={ "Aacute": "\u00C1", "aacute": "\u00E1", "Abreve": "\u0102", "abreve": "\u0103", "ac": "\u223E", "acd": "\u223F", "acE": "\u223E\u0333", "Acirc": "\u00C2", "acirc": "\u00E2", "acute": "\u00B4", "Acy": "\u0410", "acy": "\u0430", "AElig": "\u00C6", "aelig": "\u00E6", "af": "\u2061", "Afr": "\uD835\uDD04", "afr": "\uD835\uDD1E", "Agrave": "\u00C0", "agrave": "\u00E0", "alefsym": "\u2135", "aleph": "\u2135", "Alpha": "\u0391", "alpha": "\u03B1", "Amacr": "\u0100", "amacr": "\u0101", "amalg": "\u2A3F", "amp": "&", "AMP": "&", "andand": "\u2A55", "And": "\u2A53", "and": "\u2227", "andd": "\u2A5C", "andslope": "\u2A58", "andv": "\u2A5A", "ang": "\u2220", "ange": "\u29A4", "angle": "\u2220", "angmsdaa": "\u29A8", "angmsdab": "\u29A9", "angmsdac": "\u29AA", "angmsdad": "\u29AB", "angmsdae": "\u29AC", "angmsdaf": "\u29AD", "angmsdag": "\u29AE", "angmsdah": "\u29AF", "angmsd": "\u2221", "angrt": "\u221F", "angrtvb": "\u22BE", "angrtvbd": "\u299D", "angsph": "\u2222", "angst": "\u00C5", "angzarr": "\u237C", "Aogon": "\u0104", "aogon": "\u0105", "Aopf": "\uD835\uDD38", "aopf": "\uD835\uDD52", "apacir": "\u2A6F", "ap": "\u2248", "apE": "\u2A70", "ape": "\u224A", "apid": "\u224B", "apos": "'", "ApplyFunction": "\u2061", "approx": "\u2248", "approxeq": "\u224A", "Aring": "\u00C5", "aring": "\u00E5", "Ascr": "\uD835\uDC9C", "ascr": "\uD835\uDCB6", "Assign": "\u2254", "ast": "*", "asymp": "\u2248", "asympeq": "\u224D", "Atilde": "\u00C3", "atilde": "\u00E3", "Auml": "\u00C4", "auml": "\u00E4", "awconint": "\u2233", "awint": "\u2A11", "backcong": "\u224C", "backepsilon": "\u03F6", "backprime": "\u2035", "backsim": "\u223D", "backsimeq": "\u22CD", "Backslash": "\u2216", "Barv": "\u2AE7", "barvee": "\u22BD", "barwed": "\u2305", "Barwed": "\u2306", "barwedge": "\u2305", "bbrk": "\u23B5", "bbrktbrk": "\u23B6", "bcong": "\u224C", "Bcy": "\u0411", "bcy": "\u0431", "bdquo": "\u201E", "becaus": "\u2235", "because": "\u2235", "Because": "\u2235", "bemptyv": "\u29B0", "bepsi": "\u03F6", "bernou": "\u212C", "Bernoullis": "\u212C", "Beta": "\u0392", "beta": "\u03B2", "beth": "\u2136", "between": "\u226C", "Bfr": "\uD835\uDD05", "bfr": "\uD835\uDD1F", "bigcap": "\u22C2", "bigcirc": "\u25EF", "bigcup": "\u22C3", "bigodot": "\u2A00", "bigoplus": "\u2A01", "bigotimes": "\u2A02", "bigsqcup": "\u2A06", "bigstar": "\u2605", "bigtriangledown": "\u25BD", "bigtriangleup": "\u25B3", "biguplus": "\u2A04", "bigvee": "\u22C1", "bigwedge": "\u22C0", "bkarow": "\u290D", "blacklozenge": "\u29EB", "blacksquare": "\u25AA", "blacktriangle": "\u25B4", "blacktriangledown": "\u25BE", "blacktriangleleft": "\u25C2", "blacktriangleright": "\u25B8", "blank": "\u2423", "blk12": "\u2592", "blk14": "\u2591", "blk34": "\u2593", "block": "\u2588", "bne": "=\u20E5", "bnequiv": "\u2261\u20E5", "bNot": "\u2AED", "bnot": "\u2310", "Bopf": "\uD835\uDD39", "bopf": "\uD835\uDD53", "bot": "\u22A5", "bottom": "\u22A5", "bowtie": "\u22C8", "boxbox": "\u29C9", "boxdl": "\u2510", "boxdL": "\u2555", "boxDl": "\u2556", "boxDL": "\u2557", "boxdr": "\u250C", "boxdR": "\u2552", "boxDr": "\u2553", "boxDR": "\u2554", "boxh": "\u2500", "boxH": "\u2550", "boxhd": "\u252C", "boxHd": "\u2564", "boxhD": "\u2565", "boxHD": "\u2566", "boxhu": "\u2534", "boxHu": "\u2567", "boxhU": "\u2568", "boxHU": "\u2569", "boxminus": "\u229F", "boxplus": "\u229E", "boxtimes": "\u22A0", "boxul": "\u2518", "boxuL": "\u255B", "boxUl": "\u255C", "boxUL": "\u255D", "boxur": "\u2514", "boxuR": "\u2558", "boxUr": "\u2559", "boxUR": "\u255A", "boxv": "\u2502", "boxV": "\u2551", "boxvh": "\u253C", "boxvH": "\u256A", "boxVh": "\u256B", "boxVH": "\u256C", "boxvl": "\u2524", "boxvL": "\u2561", "boxVl": "\u2562", "boxVL": "\u2563", "boxvr": "\u251C", "boxvR": "\u255E", "boxVr": "\u255F", "boxVR": "\u2560", "bprime": "\u2035", "breve": "\u02D8", "Breve": "\u02D8", "brvbar": "\u00A6", "bscr": "\uD835\uDCB7", "Bscr": "\u212C", "bsemi": "\u204F", "bsim": "\u223D", "bsime": "\u22CD", "bsolb": "\u29C5", "bsol": "\\", "bsolhsub": "\u27C8", "bull": "\u2022", "bullet": "\u2022", "bump": "\u224E", "bumpE": "\u2AAE", "bumpe": "\u224F", "Bumpeq": "\u224E", "bumpeq": "\u224F", "Cacute": "\u0106", "cacute": "\u0107", "capand": "\u2A44", "capbrcup": "\u2A49", "capcap": "\u2A4B", "cap": "\u2229", "Cap": "\u22D2", "capcup": "\u2A47", "capdot": "\u2A40", "CapitalDifferentialD": "\u2145", "caps": "\u2229\uFE00", "caret": "\u2041", "caron": "\u02C7", "Cayleys": "\u212D", "ccaps": "\u2A4D", "Ccaron": "\u010C", "ccaron": "\u010D", "Ccedil": "\u00C7", "ccedil": "\u00E7", "Ccirc": "\u0108", "ccirc": "\u0109", "Cconint": "\u2230", "ccups": "\u2A4C", "ccupssm": "\u2A50", "Cdot": "\u010A", "cdot": "\u010B", "cedil": "\u00B8", "Cedilla": "\u00B8", "cemptyv": "\u29B2", "cent": "\u00A2", "centerdot": "\u00B7", "CenterDot": "\u00B7", "cfr": "\uD835\uDD20", "Cfr": "\u212D", "CHcy": "\u0427", "chcy": "\u0447", "check": "\u2713", "checkmark": "\u2713", "Chi": "\u03A7", "chi": "\u03C7", "circ": "\u02C6", "circeq": "\u2257", "circlearrowleft": "\u21BA", "circlearrowright": "\u21BB", "circledast": "\u229B", "circledcirc": "\u229A", "circleddash": "\u229D", "CircleDot": "\u2299", "circledR": "\u00AE", "circledS": "\u24C8", "CircleMinus": "\u2296", "CirclePlus": "\u2295", "CircleTimes": "\u2297", "cir": "\u25CB", "cirE": "\u29C3", "cire": "\u2257", "cirfnint": "\u2A10", "cirmid": "\u2AEF", "cirscir": "\u29C2", "ClockwiseContourIntegral": "\u2232", "CloseCurlyDoubleQuote": "\u201D", "CloseCurlyQuote": "\u2019", "clubs": "\u2663", "clubsuit": "\u2663", "colon": ":", "Colon": "\u2237", "Colone": "\u2A74", "colone": "\u2254", "coloneq": "\u2254", "comma": ",", "commat": "@", "comp": "\u2201", "compfn": "\u2218", "complement": "\u2201", "complexes": "\u2102", "cong": "\u2245", "congdot": "\u2A6D", "Congruent": "\u2261", "conint": "\u222E", "Conint": "\u222F", "ContourIntegral": "\u222E", "copf": "\uD835\uDD54", "Copf": "\u2102", "coprod": "\u2210", "Coproduct": "\u2210", "copy": "\u00A9", "COPY": "\u00A9", "copysr": "\u2117", "CounterClockwiseContourIntegral": "\u2233", "crarr": "\u21B5", "cross": "\u2717", "Cross": "\u2A2F", "Cscr": "\uD835\uDC9E", "cscr": "\uD835\uDCB8", "csub": "\u2ACF", "csube": "\u2AD1", "csup": "\u2AD0", "csupe": "\u2AD2", "ctdot": "\u22EF", "cudarrl": "\u2938", "cudarrr": "\u2935", "cuepr": "\u22DE", "cuesc": "\u22DF", "cularr": "\u21B6", "cularrp": "\u293D", "cupbrcap": "\u2A48", "cupcap": "\u2A46", "CupCap": "\u224D", "cup": "\u222A", "Cup": "\u22D3", "cupcup": "\u2A4A", "cupdot": "\u228D", "cupor": "\u2A45", "cups": "\u222A\uFE00", "curarr": "\u21B7", "curarrm": "\u293C", "curlyeqprec": "\u22DE", "curlyeqsucc": "\u22DF", "curlyvee": "\u22CE", "curlywedge": "\u22CF", "curren": "\u00A4", "curvearrowleft": "\u21B6", "curvearrowright": "\u21B7", "cuvee": "\u22CE", "cuwed": "\u22CF", "cwconint": "\u2232", "cwint": "\u2231", "cylcty": "\u232D", "dagger": "\u2020", "Dagger": "\u2021", "daleth": "\u2138", "darr": "\u2193", "Darr": "\u21A1", "dArr": "\u21D3", "dash": "\u2010", "Dashv": "\u2AE4", "dashv": "\u22A3", "dbkarow": "\u290F", "dblac": "\u02DD", "Dcaron": "\u010E", "dcaron": "\u010F", "Dcy": "\u0414", "dcy": "\u0434", "ddagger": "\u2021", "ddarr": "\u21CA", "DD": "\u2145", "dd": "\u2146", "DDotrahd": "\u2911", "ddotseq": "\u2A77", "deg": "\u00B0", "Del": "\u2207", "Delta": "\u0394", "delta": "\u03B4", "demptyv": "\u29B1", "dfisht": "\u297F", "Dfr": "\uD835\uDD07", "dfr": "\uD835\uDD21", "dHar": "\u2965", "dharl": "\u21C3", "dharr": "\u21C2", "DiacriticalAcute": "\u00B4", "DiacriticalDot": "\u02D9", "DiacriticalDoubleAcute": "\u02DD", "DiacriticalGrave": "`", "DiacriticalTilde": "\u02DC", "diam": "\u22C4", "diamond": "\u22C4", "Diamond": "\u22C4", "diamondsuit": "\u2666", "diams": "\u2666", "die": "\u00A8", "DifferentialD": "\u2146", "digamma": "\u03DD", "disin": "\u22F2", "div": "\u00F7", "divide": "\u00F7", "divideontimes": "\u22C7", "divonx": "\u22C7", "DJcy": "\u0402", "djcy": "\u0452", "dlcorn": "\u231E", "dlcrop": "\u230D", "dollar": "$", "Dopf": "\uD835\uDD3B", "dopf": "\uD835\uDD55", "Dot": "\u00A8", "dot": "\u02D9", "DotDot": "\u20DC", "doteq": "\u2250", "doteqdot": "\u2251", "DotEqual": "\u2250", "dotminus": "\u2238", "dotplus": "\u2214", "dotsquare": "\u22A1", "doublebarwedge": "\u2306", "DoubleContourIntegral": "\u222F", "DoubleDot": "\u00A8", "DoubleDownArrow": "\u21D3", "DoubleLeftArrow": "\u21D0", "DoubleLeftRightArrow": "\u21D4", "DoubleLeftTee": "\u2AE4", "DoubleLongLeftArrow": "\u27F8", "DoubleLongLeftRightArrow": "\u27FA", "DoubleLongRightArrow": "\u27F9", "DoubleRightArrow": "\u21D2", "DoubleRightTee": "\u22A8", "DoubleUpArrow": "\u21D1", "DoubleUpDownArrow": "\u21D5", "DoubleVerticalBar": "\u2225", "DownArrowBar": "\u2913", "downarrow": "\u2193", "DownArrow": "\u2193", "Downarrow": "\u21D3", "DownArrowUpArrow": "\u21F5", "DownBreve": "\u0311", "downdownarrows": "\u21CA", "downharpoonleft": "\u21C3", "downharpoonright": "\u21C2", "DownLeftRightVector": "\u2950", "DownLeftTeeVector": "\u295E", "DownLeftVectorBar": "\u2956", "DownLeftVector": "\u21BD", "DownRightTeeVector": "\u295F", "DownRightVectorBar": "\u2957", "DownRightVector": "\u21C1", "DownTeeArrow": "\u21A7", "DownTee": "\u22A4", "drbkarow": "\u2910", "drcorn": "\u231F", "drcrop": "\u230C", "Dscr": "\uD835\uDC9F", "dscr": "\uD835\uDCB9", "DScy": "\u0405", "dscy": "\u0455", "dsol": "\u29F6", "Dstrok": "\u0110", "dstrok": "\u0111", "dtdot": "\u22F1", "dtri": "\u25BF", "dtrif": "\u25BE", "duarr": "\u21F5", "duhar": "\u296F", "dwangle": "\u29A6", "DZcy": "\u040F", "dzcy": "\u045F", "dzigrarr": "\u27FF", "Eacute": "\u00C9", "eacute": "\u00E9", "easter": "\u2A6E", "Ecaron": "\u011A", "ecaron": "\u011B", "Ecirc": "\u00CA", "ecirc": "\u00EA", "ecir": "\u2256", "ecolon": "\u2255", "Ecy": "\u042D", "ecy": "\u044D", "eDDot": "\u2A77", "Edot": "\u0116", "edot": "\u0117", "eDot": "\u2251", "ee": "\u2147", "efDot": "\u2252", "Efr": "\uD835\uDD08", "efr": "\uD835\uDD22", "eg": "\u2A9A", "Egrave": "\u00C8", "egrave": "\u00E8", "egs": "\u2A96", "egsdot": "\u2A98", "el": "\u2A99", "Element": "\u2208", "elinters": "\u23E7", "ell": "\u2113", "els": "\u2A95", "elsdot": "\u2A97", "Emacr": "\u0112", "emacr": "\u0113", "empty": "\u2205", "emptyset": "\u2205", "EmptySmallSquare": "\u25FB", "emptyv": "\u2205", "EmptyVerySmallSquare": "\u25AB", "emsp13": "\u2004", "emsp14": "\u2005", "emsp": "\u2003", "ENG": "\u014A", "eng": "\u014B", "ensp": "\u2002", "Eogon": "\u0118", "eogon": "\u0119", "Eopf": "\uD835\uDD3C", "eopf": "\uD835\uDD56", "epar": "\u22D5", "eparsl": "\u29E3", "eplus": "\u2A71", "epsi": "\u03B5", "Epsilon": "\u0395", "epsilon": "\u03B5", "epsiv": "\u03F5", "eqcirc": "\u2256", "eqcolon": "\u2255", "eqsim": "\u2242", "eqslantgtr": "\u2A96", "eqslantless": "\u2A95", "Equal": "\u2A75", "equals": "=", "EqualTilde": "\u2242", "equest": "\u225F", "Equilibrium": "\u21CC", "equiv": "\u2261", "equivDD": "\u2A78", "eqvparsl": "\u29E5", "erarr": "\u2971", "erDot": "\u2253", "escr": "\u212F", "Escr": "\u2130", "esdot": "\u2250", "Esim": "\u2A73", "esim": "\u2242", "Eta": "\u0397", "eta": "\u03B7", "ETH": "\u00D0", "eth": "\u00F0", "Euml": "\u00CB", "euml": "\u00EB", "euro": "\u20AC", "excl": "!", "exist": "\u2203", "Exists": "\u2203", "expectation": "\u2130", "exponentiale": "\u2147", "ExponentialE": "\u2147", "fallingdotseq": "\u2252", "Fcy": "\u0424", "fcy": "\u0444", "female": "\u2640", "ffilig": "\uFB03", "fflig": "\uFB00", "ffllig": "\uFB04", "Ffr": "\uD835\uDD09", "ffr": "\uD835\uDD23", "filig": "\uFB01", "FilledSmallSquare": "\u25FC", "FilledVerySmallSquare": "\u25AA", "fjlig": "fj", "flat": "\u266D", "fllig": "\uFB02", "fltns": "\u25B1", "fnof": "\u0192", "Fopf": "\uD835\uDD3D", "fopf": "\uD835\uDD57", "forall": "\u2200", "ForAll": "\u2200", "fork": "\u22D4", "forkv": "\u2AD9", "Fouriertrf": "\u2131", "fpartint": "\u2A0D", "frac12": "\u00BD", "frac13": "\u2153", "frac14": "\u00BC", "frac15": "\u2155", "frac16": "\u2159", "frac18": "\u215B", "frac23": "\u2154", "frac25": "\u2156", "frac34": "\u00BE", "frac35": "\u2157", "frac38": "\u215C", "frac45": "\u2158", "frac56": "\u215A", "frac58": "\u215D", "frac78": "\u215E", "frasl": "\u2044", "frown": "\u2322", "fscr": "\uD835\uDCBB", "Fscr": "\u2131", "gacute": "\u01F5", "Gamma": "\u0393", "gamma": "\u03B3", "Gammad": "\u03DC", "gammad": "\u03DD", "gap": "\u2A86", "Gbreve": "\u011E", "gbreve": "\u011F", "Gcedil": "\u0122", "Gcirc": "\u011C", "gcirc": "\u011D", "Gcy": "\u0413", "gcy": "\u0433", "Gdot": "\u0120", "gdot": "\u0121", "ge": "\u2265", "gE": "\u2267", "gEl": "\u2A8C", "gel": "\u22DB", "geq": "\u2265", "geqq": "\u2267", "geqslant": "\u2A7E", "gescc": "\u2AA9", "ges": "\u2A7E", "gesdot": "\u2A80", "gesdoto": "\u2A82", "gesdotol": "\u2A84", "gesl": "\u22DB\uFE00", "gesles": "\u2A94", "Gfr": "\uD835\uDD0A", "gfr": "\uD835\uDD24", "gg": "\u226B", "Gg": "\u22D9", "ggg": "\u22D9", "gimel": "\u2137", "GJcy": "\u0403", "gjcy": "\u0453", "gla": "\u2AA5", "gl": "\u2277", "glE": "\u2A92", "glj": "\u2AA4", "gnap": "\u2A8A", "gnapprox": "\u2A8A", "gne": "\u2A88", "gnE": "\u2269", "gneq": "\u2A88", "gneqq": "\u2269", "gnsim": "\u22E7", "Gopf": "\uD835\uDD3E", "gopf": "\uD835\uDD58", "grave": "`", "GreaterEqual": "\u2265", "GreaterEqualLess": "\u22DB", "GreaterFullEqual": "\u2267", "GreaterGreater": "\u2AA2", "GreaterLess": "\u2277", "GreaterSlantEqual": "\u2A7E", "GreaterTilde": "\u2273", "Gscr": "\uD835\uDCA2", "gscr": "\u210A", "gsim": "\u2273", "gsime": "\u2A8E", "gsiml": "\u2A90", "gtcc": "\u2AA7", "gtcir": "\u2A7A", "gt": ">", "GT": ">", "Gt": "\u226B", "gtdot": "\u22D7", "gtlPar": "\u2995", "gtquest": "\u2A7C", "gtrapprox": "\u2A86", "gtrarr": "\u2978", "gtrdot": "\u22D7", "gtreqless": "\u22DB", "gtreqqless": "\u2A8C", "gtrless": "\u2277", "gtrsim": "\u2273", "gvertneqq": "\u2269\uFE00", "gvnE": "\u2269\uFE00", "Hacek": "\u02C7", "hairsp": "\u200A", "half": "\u00BD", "hamilt": "\u210B", "HARDcy": "\u042A", "hardcy": "\u044A", "harrcir": "\u2948", "harr": "\u2194", "hArr": "\u21D4", "harrw": "\u21AD", "Hat": "^", "hbar": "\u210F", "Hcirc": "\u0124", "hcirc": "\u0125", "hearts": "\u2665", "heartsuit": "\u2665", "hellip": "\u2026", "hercon": "\u22B9", "hfr": "\uD835\uDD25", "Hfr": "\u210C", "HilbertSpace": "\u210B", "hksearow": "\u2925", "hkswarow": "\u2926", "hoarr": "\u21FF", "homtht": "\u223B", "hookleftarrow": "\u21A9", "hookrightarrow": "\u21AA", "hopf": "\uD835\uDD59", "Hopf": "\u210D", "horbar": "\u2015", "HorizontalLine": "\u2500", "hscr": "\uD835\uDCBD", "Hscr": "\u210B", "hslash": "\u210F", "Hstrok": "\u0126", "hstrok": "\u0127", "HumpDownHump": "\u224E", "HumpEqual": "\u224F", "hybull": "\u2043", "hyphen": "\u2010", "Iacute": "\u00CD", "iacute": "\u00ED", "ic": "\u2063", "Icirc": "\u00CE", "icirc": "\u00EE", "Icy": "\u0418", "icy": "\u0438", "Idot": "\u0130", "IEcy": "\u0415", "iecy": "\u0435", "iexcl": "\u00A1", "iff": "\u21D4", "ifr": "\uD835\uDD26", "Ifr": "\u2111", "Igrave": "\u00CC", "igrave": "\u00EC", "ii": "\u2148", "iiiint": "\u2A0C", "iiint": "\u222D", "iinfin": "\u29DC", "iiota": "\u2129", "IJlig": "\u0132", "ijlig": "\u0133", "Imacr": "\u012A", "imacr": "\u012B", "image": "\u2111", "ImaginaryI": "\u2148", "imagline": "\u2110", "imagpart": "\u2111", "imath": "\u0131", "Im": "\u2111", "imof": "\u22B7", "imped": "\u01B5", "Implies": "\u21D2", "incare": "\u2105", "in": "\u2208", "infin": "\u221E", "infintie": "\u29DD", "inodot": "\u0131", "intcal": "\u22BA", "int": "\u222B", "Int": "\u222C", "integers": "\u2124", "Integral": "\u222B", "intercal": "\u22BA", "Intersection": "\u22C2", "intlarhk": "\u2A17", "intprod": "\u2A3C", "InvisibleComma": "\u2063", "InvisibleTimes": "\u2062", "IOcy": "\u0401", "iocy": "\u0451", "Iogon": "\u012E", "iogon": "\u012F", "Iopf": "\uD835\uDD40", "iopf": "\uD835\uDD5A", "Iota": "\u0399", "iota": "\u03B9", "iprod": "\u2A3C", "iquest": "\u00BF", "iscr": "\uD835\uDCBE", "Iscr": "\u2110", "isin": "\u2208", "isindot": "\u22F5", "isinE": "\u22F9", "isins": "\u22F4", "isinsv": "\u22F3", "isinv": "\u2208", "it": "\u2062", "Itilde": "\u0128", "itilde": "\u0129", "Iukcy": "\u0406", "iukcy": "\u0456", "Iuml": "\u00CF", "iuml": "\u00EF", "Jcirc": "\u0134", "jcirc": "\u0135", "Jcy": "\u0419", "jcy": "\u0439", "Jfr": "\uD835\uDD0D", "jfr": "\uD835\uDD27", "jmath": "\u0237", "Jopf": "\uD835\uDD41", "jopf": "\uD835\uDD5B", "Jscr": "\uD835\uDCA5", "jscr": "\uD835\uDCBF", "Jsercy": "\u0408", "jsercy": "\u0458", "Jukcy": "\u0404", "jukcy": "\u0454", "Kappa": "\u039A", "kappa": "\u03BA", "kappav": "\u03F0", "Kcedil": "\u0136", "kcedil": "\u0137", "Kcy": "\u041A", "kcy": "\u043A", "Kfr": "\uD835\uDD0E", "kfr": "\uD835\uDD28", "kgreen": "\u0138", "KHcy": "\u0425", "khcy": "\u0445", "KJcy": "\u040C", "kjcy": "\u045C", "Kopf": "\uD835\uDD42", "kopf": "\uD835\uDD5C", "Kscr": "\uD835\uDCA6", "kscr": "\uD835\uDCC0", "lAarr": "\u21DA", "Lacute": "\u0139", "lacute": "\u013A", "laemptyv": "\u29B4", "lagran": "\u2112", "Lambda": "\u039B", "lambda": "\u03BB", "lang": "\u27E8", "Lang": "\u27EA", "langd": "\u2991", "langle": "\u27E8", "lap": "\u2A85", "Laplacetrf": "\u2112", "laquo": "\u00AB", "larrb": "\u21E4", "larrbfs": "\u291F", "larr": "\u2190", "Larr": "\u219E", "lArr": "\u21D0", "larrfs": "\u291D", "larrhk": "\u21A9", "larrlp": "\u21AB", "larrpl": "\u2939", "larrsim": "\u2973", "larrtl": "\u21A2", "latail": "\u2919", "lAtail": "\u291B", "lat": "\u2AAB", "late": "\u2AAD", "lates": "\u2AAD\uFE00", "lbarr": "\u290C", "lBarr": "\u290E", "lbbrk": "\u2772", "lbrace": "{", "lbrack": "[", "lbrke": "\u298B", "lbrksld": "\u298F", "lbrkslu": "\u298D", "Lcaron": "\u013D", "lcaron": "\u013E", "Lcedil": "\u013B", "lcedil": "\u013C", "lceil": "\u2308", "lcub": "{", "Lcy": "\u041B", "lcy": "\u043B", "ldca": "\u2936", "ldquo": "\u201C", "ldquor": "\u201E", "ldrdhar": "\u2967", "ldrushar": "\u294B", "ldsh": "\u21B2", "le": "\u2264", "lE": "\u2266", "LeftAngleBracket": "\u27E8", "LeftArrowBar": "\u21E4", "leftarrow": "\u2190", "LeftArrow": "\u2190", "Leftarrow": "\u21D0", "LeftArrowRightArrow": "\u21C6", "leftarrowtail": "\u21A2", "LeftCeiling": "\u2308", "LeftDoubleBracket": "\u27E6", "LeftDownTeeVector": "\u2961", "LeftDownVectorBar": "\u2959", "LeftDownVector": "\u21C3", "LeftFloor": "\u230A", "leftharpoondown": "\u21BD", "leftharpoonup": "\u21BC", "leftleftarrows": "\u21C7", "leftrightarrow": "\u2194", "LeftRightArrow": "\u2194", "Leftrightarrow": "\u21D4", "leftrightarrows": "\u21C6", "leftrightharpoons": "\u21CB", "leftrightsquigarrow": "\u21AD", "LeftRightVector": "\u294E", "LeftTeeArrow": "\u21A4", "LeftTee": "\u22A3", "LeftTeeVector": "\u295A", "leftthreetimes": "\u22CB", "LeftTriangleBar": "\u29CF", "LeftTriangle": "\u22B2", "LeftTriangleEqual": "\u22B4", "LeftUpDownVector": "\u2951", "LeftUpTeeVector": "\u2960", "LeftUpVectorBar": "\u2958", "LeftUpVector": "\u21BF", "LeftVectorBar": "\u2952", "LeftVector": "\u21BC", "lEg": "\u2A8B", "leg": "\u22DA", "leq": "\u2264", "leqq": "\u2266", "leqslant": "\u2A7D", "lescc": "\u2AA8", "les": "\u2A7D", "lesdot": "\u2A7F", "lesdoto": "\u2A81", "lesdotor": "\u2A83", "lesg": "\u22DA\uFE00", "lesges": "\u2A93", "lessapprox": "\u2A85", "lessdot": "\u22D6", "lesseqgtr": "\u22DA", "lesseqqgtr": "\u2A8B", "LessEqualGreater": "\u22DA", "LessFullEqual": "\u2266", "LessGreater": "\u2276", "lessgtr": "\u2276", "LessLess": "\u2AA1", "lesssim": "\u2272", "LessSlantEqual": "\u2A7D", "LessTilde": "\u2272", "lfisht": "\u297C", "lfloor": "\u230A", "Lfr": "\uD835\uDD0F", "lfr": "\uD835\uDD29", "lg": "\u2276", "lgE": "\u2A91", "lHar": "\u2962", "lhard": "\u21BD", "lharu": "\u21BC", "lharul": "\u296A", "lhblk": "\u2584", "LJcy": "\u0409", "ljcy": "\u0459", "llarr": "\u21C7", "ll": "\u226A", "Ll": "\u22D8", "llcorner": "\u231E", "Lleftarrow": "\u21DA", "llhard": "\u296B", "lltri": "\u25FA", "Lmidot": "\u013F", "lmidot": "\u0140", "lmoustache": "\u23B0", "lmoust": "\u23B0", "lnap": "\u2A89", "lnapprox": "\u2A89", "lne": "\u2A87", "lnE": "\u2268", "lneq": "\u2A87", "lneqq": "\u2268", "lnsim": "\u22E6", "loang": "\u27EC", "loarr": "\u21FD", "lobrk": "\u27E6", "longleftarrow": "\u27F5", "LongLeftArrow": "\u27F5", "Longleftarrow": "\u27F8", "longleftrightarrow": "\u27F7", "LongLeftRightArrow": "\u27F7", "Longleftrightarrow": "\u27FA", "longmapsto": "\u27FC", "longrightarrow": "\u27F6", "LongRightArrow": "\u27F6", "Longrightarrow": "\u27F9", "looparrowleft": "\u21AB", "looparrowright": "\u21AC", "lopar": "\u2985", "Lopf": "\uD835\uDD43", "lopf": "\uD835\uDD5D", "loplus": "\u2A2D", "lotimes": "\u2A34", "lowast": "\u2217", "lowbar": "_", "LowerLeftArrow": "\u2199", "LowerRightArrow": "\u2198", "loz": "\u25CA", "lozenge": "\u25CA", "lozf": "\u29EB", "lpar": "(", "lparlt": "\u2993", "lrarr": "\u21C6", "lrcorner": "\u231F", "lrhar": "\u21CB", "lrhard": "\u296D", "lrm": "\u200E", "lrtri": "\u22BF", "lsaquo": "\u2039", "lscr": "\uD835\uDCC1", "Lscr": "\u2112", "lsh": "\u21B0", "Lsh": "\u21B0", "lsim": "\u2272", "lsime": "\u2A8D", "lsimg": "\u2A8F", "lsqb": "[", "lsquo": "\u2018", "lsquor": "\u201A", "Lstrok": "\u0141", "lstrok": "\u0142", "ltcc": "\u2AA6", "ltcir": "\u2A79", "lt": "<", "LT": "<", "Lt": "\u226A", "ltdot": "\u22D6", "lthree": "\u22CB", "ltimes": "\u22C9", "ltlarr": "\u2976", "ltquest": "\u2A7B", "ltri": "\u25C3", "ltrie": "\u22B4", "ltrif": "\u25C2", "ltrPar": "\u2996", "lurdshar": "\u294A", "luruhar": "\u2966", "lvertneqq": "\u2268\uFE00", "lvnE": "\u2268\uFE00", "macr": "\u00AF", "male": "\u2642", "malt": "\u2720", "maltese": "\u2720", "Map": "\u2905", "map": "\u21A6", "mapsto": "\u21A6", "mapstodown": "\u21A7", "mapstoleft": "\u21A4", "mapstoup": "\u21A5", "marker": "\u25AE", "mcomma": "\u2A29", "Mcy": "\u041C", "mcy": "\u043C", "mdash": "\u2014", "mDDot": "\u223A", "measuredangle": "\u2221", "MediumSpace": "\u205F", "Mellintrf": "\u2133", "Mfr": "\uD835\uDD10", "mfr": "\uD835\uDD2A", "mho": "\u2127", "micro": "\u00B5", "midast": "*", "midcir": "\u2AF0", "mid": "\u2223", "middot": "\u00B7", "minusb": "\u229F", "minus": "\u2212", "minusd": "\u2238", "minusdu": "\u2A2A", "MinusPlus": "\u2213", "mlcp": "\u2ADB", "mldr": "\u2026", "mnplus": "\u2213", "models": "\u22A7", "Mopf": "\uD835\uDD44", "mopf": "\uD835\uDD5E", "mp": "\u2213", "mscr": "\uD835\uDCC2", "Mscr": "\u2133", "mstpos": "\u223E", "Mu": "\u039C", "mu": "\u03BC", "multimap": "\u22B8", "mumap": "\u22B8", "nabla": "\u2207", "Nacute": "\u0143", "nacute": "\u0144", "nang": "\u2220\u20D2", "nap": "\u2249", "napE": "\u2A70\u0338", "napid": "\u224B\u0338", "napos": "\u0149", "napprox": "\u2249", "natural": "\u266E", "naturals": "\u2115", "natur": "\u266E", "nbsp": "\u00A0", "nbump": "\u224E\u0338", "nbumpe": "\u224F\u0338", "ncap": "\u2A43", "Ncaron": "\u0147", "ncaron": "\u0148", "Ncedil": "\u0145", "ncedil": "\u0146", "ncong": "\u2247", "ncongdot": "\u2A6D\u0338", "ncup": "\u2A42", "Ncy": "\u041D", "ncy": "\u043D", "ndash": "\u2013", "nearhk": "\u2924", "nearr": "\u2197", "neArr": "\u21D7", "nearrow": "\u2197", "ne": "\u2260", "nedot": "\u2250\u0338", "NegativeMediumSpace": "\u200B", "NegativeThickSpace": "\u200B", "NegativeThinSpace": "\u200B", "NegativeVeryThinSpace": "\u200B", "nequiv": "\u2262", "nesear": "\u2928", "nesim": "\u2242\u0338", "NestedGreaterGreater": "\u226B", "NestedLessLess": "\u226A", "NewLine": "\n", "nexist": "\u2204", "nexists": "\u2204", "Nfr": "\uD835\uDD11", "nfr": "\uD835\uDD2B", "ngE": "\u2267\u0338", "nge": "\u2271", "ngeq": "\u2271", "ngeqq": "\u2267\u0338", "ngeqslant": "\u2A7E\u0338", "nges": "\u2A7E\u0338", "nGg": "\u22D9\u0338", "ngsim": "\u2275", "nGt": "\u226B\u20D2", "ngt": "\u226F", "ngtr": "\u226F", "nGtv": "\u226B\u0338", "nharr": "\u21AE", "nhArr": "\u21CE", "nhpar": "\u2AF2", "ni": "\u220B", "nis": "\u22FC", "nisd": "\u22FA", "niv": "\u220B", "NJcy": "\u040A", "njcy": "\u045A", "nlarr": "\u219A", "nlArr": "\u21CD", "nldr": "\u2025", "nlE": "\u2266\u0338", "nle": "\u2270", "nleftarrow": "\u219A", "nLeftarrow": "\u21CD", "nleftrightarrow": "\u21AE", "nLeftrightarrow": "\u21CE", "nleq": "\u2270", "nleqq": "\u2266\u0338", "nleqslant": "\u2A7D\u0338", "nles": "\u2A7D\u0338", "nless": "\u226E", "nLl": "\u22D8\u0338", "nlsim": "\u2274", "nLt": "\u226A\u20D2", "nlt": "\u226E", "nltri": "\u22EA", "nltrie": "\u22EC", "nLtv": "\u226A\u0338", "nmid": "\u2224", "NoBreak": "\u2060", "NonBreakingSpace": "\u00A0", "nopf": "\uD835\uDD5F", "Nopf": "\u2115", "Not": "\u2AEC", "not": "\u00AC", "NotCongruent": "\u2262", "NotCupCap": "\u226D", "NotDoubleVerticalBar": "\u2226", "NotElement": "\u2209", "NotEqual": "\u2260", "NotEqualTilde": "\u2242\u0338", "NotExists": "\u2204", "NotGreater": "\u226F", "NotGreaterEqual": "\u2271", "NotGreaterFullEqual": "\u2267\u0338", "NotGreaterGreater": "\u226B\u0338", "NotGreaterLess": "\u2279", "NotGreaterSlantEqual": "\u2A7E\u0338", "NotGreaterTilde": "\u2275", "NotHumpDownHump": "\u224E\u0338", "NotHumpEqual": "\u224F\u0338", "notin": "\u2209", "notindot": "\u22F5\u0338", "notinE": "\u22F9\u0338", "notinva": "\u2209", "notinvb": "\u22F7", "notinvc": "\u22F6", "NotLeftTriangleBar": "\u29CF\u0338", "NotLeftTriangle": "\u22EA", "NotLeftTriangleEqual": "\u22EC", "NotLess": "\u226E", "NotLessEqual": "\u2270", "NotLessGreater": "\u2278", "NotLessLess": "\u226A\u0338", "NotLessSlantEqual": "\u2A7D\u0338", "NotLessTilde": "\u2274", "NotNestedGreaterGreater": "\u2AA2\u0338", "NotNestedLessLess": "\u2AA1\u0338", "notni": "\u220C", "notniva": "\u220C", "notnivb": "\u22FE", "notnivc": "\u22FD", "NotPrecedes": "\u2280", "NotPrecedesEqual": "\u2AAF\u0338", "NotPrecedesSlantEqual": "\u22E0", "NotReverseElement": "\u220C", "NotRightTriangleBar": "\u29D0\u0338", "NotRightTriangle": "\u22EB", "NotRightTriangleEqual": "\u22ED", "NotSquareSubset": "\u228F\u0338", "NotSquareSubsetEqual": "\u22E2", "NotSquareSuperset": "\u2290\u0338", "NotSquareSupersetEqual": "\u22E3", "NotSubset": "\u2282\u20D2", "NotSubsetEqual": "\u2288", "NotSucceeds": "\u2281", "NotSucceedsEqual": "\u2AB0\u0338", "NotSucceedsSlantEqual": "\u22E1", "NotSucceedsTilde": "\u227F\u0338", "NotSuperset": "\u2283\u20D2", "NotSupersetEqual": "\u2289", "NotTilde": "\u2241", "NotTildeEqual": "\u2244", "NotTildeFullEqual": "\u2247", "NotTildeTilde": "\u2249", "NotVerticalBar": "\u2224", "nparallel": "\u2226", "npar": "\u2226", "nparsl": "\u2AFD\u20E5", "npart": "\u2202\u0338", "npolint": "\u2A14", "npr": "\u2280", "nprcue": "\u22E0", "nprec": "\u2280", "npreceq": "\u2AAF\u0338", "npre": "\u2AAF\u0338", "nrarrc": "\u2933\u0338", "nrarr": "\u219B", "nrArr": "\u21CF", "nrarrw": "\u219D\u0338", "nrightarrow": "\u219B", "nRightarrow": "\u21CF", "nrtri": "\u22EB", "nrtrie": "\u22ED", "nsc": "\u2281", "nsccue": "\u22E1", "nsce": "\u2AB0\u0338", "Nscr": "\uD835\uDCA9", "nscr": "\uD835\uDCC3", "nshortmid": "\u2224", "nshortparallel": "\u2226", "nsim": "\u2241", "nsime": "\u2244", "nsimeq": "\u2244", "nsmid": "\u2224", "nspar": "\u2226", "nsqsube": "\u22E2", "nsqsupe": "\u22E3", "nsub": "\u2284", "nsubE": "\u2AC5\u0338", "nsube": "\u2288", "nsubset": "\u2282\u20D2", "nsubseteq": "\u2288", "nsubseteqq": "\u2AC5\u0338", "nsucc": "\u2281", "nsucceq": "\u2AB0\u0338", "nsup": "\u2285", "nsupE": "\u2AC6\u0338", "nsupe": "\u2289", "nsupset": "\u2283\u20D2", "nsupseteq": "\u2289", "nsupseteqq": "\u2AC6\u0338", "ntgl": "\u2279", "Ntilde": "\u00D1", "ntilde": "\u00F1", "ntlg": "\u2278", "ntriangleleft": "\u22EA", "ntrianglelefteq": "\u22EC", "ntriangleright": "\u22EB", "ntrianglerighteq": "\u22ED", "Nu": "\u039D", "nu": "\u03BD", "num": "#", "numero": "\u2116", "numsp": "\u2007", "nvap": "\u224D\u20D2", "nvdash": "\u22AC", "nvDash": "\u22AD", "nVdash": "\u22AE", "nVDash": "\u22AF", "nvge": "\u2265\u20D2", "nvgt": ">\u20D2", "nvHarr": "\u2904", "nvinfin": "\u29DE", "nvlArr": "\u2902", "nvle": "\u2264\u20D2", "nvlt": "<\u20D2", "nvltrie": "\u22B4\u20D2", "nvrArr": "\u2903", "nvrtrie": "\u22B5\u20D2", "nvsim": "\u223C\u20D2", "nwarhk": "\u2923", "nwarr": "\u2196", "nwArr": "\u21D6", "nwarrow": "\u2196", "nwnear": "\u2927", "Oacute": "\u00D3", "oacute": "\u00F3", "oast": "\u229B", "Ocirc": "\u00D4", "ocirc": "\u00F4", "ocir": "\u229A", "Ocy": "\u041E", "ocy": "\u043E", "odash": "\u229D", "Odblac": "\u0150", "odblac": "\u0151", "odiv": "\u2A38", "odot": "\u2299", "odsold": "\u29BC", "OElig": "\u0152", "oelig": "\u0153", "ofcir": "\u29BF", "Ofr": "\uD835\uDD12", "ofr": "\uD835\uDD2C", "ogon": "\u02DB", "Ograve": "\u00D2", "ograve": "\u00F2", "ogt": "\u29C1", "ohbar": "\u29B5", "ohm": "\u03A9", "oint": "\u222E", "olarr": "\u21BA", "olcir": "\u29BE", "olcross": "\u29BB", "oline": "\u203E", "olt": "\u29C0", "Omacr": "\u014C", "omacr": "\u014D", "Omega": "\u03A9", "omega": "\u03C9", "Omicron": "\u039F", "omicron": "\u03BF", "omid": "\u29B6", "ominus": "\u2296", "Oopf": "\uD835\uDD46", "oopf": "\uD835\uDD60", "opar": "\u29B7", "OpenCurlyDoubleQuote": "\u201C", "OpenCurlyQuote": "\u2018", "operp": "\u29B9", "oplus": "\u2295", "orarr": "\u21BB", "Or": "\u2A54", "or": "\u2228", "ord": "\u2A5D", "order": "\u2134", "orderof": "\u2134", "ordf": "\u00AA", "ordm": "\u00BA", "origof": "\u22B6", "oror": "\u2A56", "orslope": "\u2A57", "orv": "\u2A5B", "oS": "\u24C8", "Oscr": "\uD835\uDCAA", "oscr": "\u2134", "Oslash": "\u00D8", "oslash": "\u00F8", "osol": "\u2298", "Otilde": "\u00D5", "otilde": "\u00F5", "otimesas": "\u2A36", "Otimes": "\u2A37", "otimes": "\u2297", "Ouml": "\u00D6", "ouml": "\u00F6", "ovbar": "\u233D", "OverBar": "\u203E", "OverBrace": "\u23DE", "OverBracket": "\u23B4", "OverParenthesis": "\u23DC", "para": "\u00B6", "parallel": "\u2225", "par": "\u2225", "parsim": "\u2AF3", "parsl": "\u2AFD", "part": "\u2202", "PartialD": "\u2202", "Pcy": "\u041F", "pcy": "\u043F", "percnt": "%", "period": ".", "permil": "\u2030", "perp": "\u22A5", "pertenk": "\u2031", "Pfr": "\uD835\uDD13", "pfr": "\uD835\uDD2D", "Phi": "\u03A6", "phi": "\u03C6", "phiv": "\u03D5", "phmmat": "\u2133", "phone": "\u260E", "Pi": "\u03A0", "pi": "\u03C0", "pitchfork": "\u22D4", "piv": "\u03D6", "planck": "\u210F", "planckh": "\u210E", "plankv": "\u210F", "plusacir": "\u2A23", "plusb": "\u229E", "pluscir": "\u2A22", "plus": "+", "plusdo": "\u2214", "plusdu": "\u2A25", "pluse": "\u2A72", "PlusMinus": "\u00B1", "plusmn": "\u00B1", "plussim": "\u2A26", "plustwo": "\u2A27", "pm": "\u00B1", "Poincareplane": "\u210C", "pointint": "\u2A15", "popf": "\uD835\uDD61", "Popf": "\u2119", "pound": "\u00A3", "prap": "\u2AB7", "Pr": "\u2ABB", "pr": "\u227A", "prcue": "\u227C", "precapprox": "\u2AB7", "prec": "\u227A", "preccurlyeq": "\u227C", "Precedes": "\u227A", "PrecedesEqual": "\u2AAF", "PrecedesSlantEqual": "\u227C", "PrecedesTilde": "\u227E", "preceq": "\u2AAF", "precnapprox": "\u2AB9", "precneqq": "\u2AB5", "precnsim": "\u22E8", "pre": "\u2AAF", "prE": "\u2AB3", "precsim": "\u227E", "prime": "\u2032", "Prime": "\u2033", "primes": "\u2119", "prnap": "\u2AB9", "prnE": "\u2AB5", "prnsim": "\u22E8", "prod": "\u220F", "Product": "\u220F", "profalar": "\u232E", "profline": "\u2312", "profsurf": "\u2313", "prop": "\u221D", "Proportional": "\u221D", "Proportion": "\u2237", "propto": "\u221D", "prsim": "\u227E", "prurel": "\u22B0", "Pscr": "\uD835\uDCAB", "pscr": "\uD835\uDCC5", "Psi": "\u03A8", "psi": "\u03C8", "puncsp": "\u2008", "Qfr": "\uD835\uDD14", "qfr": "\uD835\uDD2E", "qint": "\u2A0C", "qopf": "\uD835\uDD62", "Qopf": "\u211A", "qprime": "\u2057", "Qscr": "\uD835\uDCAC", "qscr": "\uD835\uDCC6", "quaternions": "\u210D", "quatint": "\u2A16", "quest": "?", "questeq": "\u225F", "quot": "\"", "QUOT": "\"", "rAarr": "\u21DB", "race": "\u223D\u0331", "Racute": "\u0154", "racute": "\u0155", "radic": "\u221A", "raemptyv": "\u29B3", "rang": "\u27E9", "Rang": "\u27EB", "rangd": "\u2992", "range": "\u29A5", "rangle": "\u27E9", "raquo": "\u00BB", "rarrap": "\u2975", "rarrb": "\u21E5", "rarrbfs": "\u2920", "rarrc": "\u2933", "rarr": "\u2192", "Rarr": "\u21A0", "rArr": "\u21D2", "rarrfs": "\u291E", "rarrhk": "\u21AA", "rarrlp": "\u21AC", "rarrpl": "\u2945", "rarrsim": "\u2974", "Rarrtl": "\u2916", "rarrtl": "\u21A3", "rarrw": "\u219D", "ratail": "\u291A", "rAtail": "\u291C", "ratio": "\u2236", "rationals": "\u211A", "rbarr": "\u290D", "rBarr": "\u290F", "RBarr": "\u2910", "rbbrk": "\u2773", "rbrace": "}", "rbrack": "]", "rbrke": "\u298C", "rbrksld": "\u298E", "rbrkslu": "\u2990", "Rcaron": "\u0158", "rcaron": "\u0159", "Rcedil": "\u0156", "rcedil": "\u0157", "rceil": "\u2309", "rcub": "}", "Rcy": "\u0420", "rcy": "\u0440", "rdca": "\u2937", "rdldhar": "\u2969", "rdquo": "\u201D", "rdquor": "\u201D", "rdsh": "\u21B3", "real": "\u211C", "realine": "\u211B", "realpart": "\u211C", "reals": "\u211D", "Re": "\u211C", "rect": "\u25AD", "reg": "\u00AE", "REG": "\u00AE", "ReverseElement": "\u220B", "ReverseEquilibrium": "\u21CB", "ReverseUpEquilibrium": "\u296F", "rfisht": "\u297D", "rfloor": "\u230B", "rfr": "\uD835\uDD2F", "Rfr": "\u211C", "rHar": "\u2964", "rhard": "\u21C1", "rharu": "\u21C0", "rharul": "\u296C", "Rho": "\u03A1", "rho": "\u03C1", "rhov": "\u03F1", "RightAngleBracket": "\u27E9", "RightArrowBar": "\u21E5", "rightarrow": "\u2192", "RightArrow": "\u2192", "Rightarrow": "\u21D2", "RightArrowLeftArrow": "\u21C4", "rightarrowtail": "\u21A3", "RightCeiling": "\u2309", "RightDoubleBracket": "\u27E7", "RightDownTeeVector": "\u295D", "RightDownVectorBar": "\u2955", "RightDownVector": "\u21C2", "RightFloor": "\u230B", "rightharpoondown": "\u21C1", "rightharpoonup": "\u21C0", "rightleftarrows": "\u21C4", "rightleftharpoons": "\u21CC", "rightrightarrows": "\u21C9", "rightsquigarrow": "\u219D", "RightTeeArrow": "\u21A6", "RightTee": "\u22A2", "RightTeeVector": "\u295B", "rightthreetimes": "\u22CC", "RightTriangleBar": "\u29D0", "RightTriangle": "\u22B3", "RightTriangleEqual": "\u22B5", "RightUpDownVector": "\u294F", "RightUpTeeVector": "\u295C", "RightUpVectorBar": "\u2954", "RightUpVector": "\u21BE", "RightVectorBar": "\u2953", "RightVector": "\u21C0", "ring": "\u02DA", "risingdotseq": "\u2253", "rlarr": "\u21C4", "rlhar": "\u21CC", "rlm": "\u200F", "rmoustache": "\u23B1", "rmoust": "\u23B1", "rnmid": "\u2AEE", "roang": "\u27ED", "roarr": "\u21FE", "robrk": "\u27E7", "ropar": "\u2986", "ropf": "\uD835\uDD63", "Ropf": "\u211D", "roplus": "\u2A2E", "rotimes": "\u2A35", "RoundImplies": "\u2970", "rpar": ")", "rpargt": "\u2994", "rppolint": "\u2A12", "rrarr": "\u21C9", "Rrightarrow": "\u21DB", "rsaquo": "\u203A", "rscr": "\uD835\uDCC7", "Rscr": "\u211B", "rsh": "\u21B1", "Rsh": "\u21B1", "rsqb": "]", "rsquo": "\u2019", "rsquor": "\u2019", "rthree": "\u22CC", "rtimes": "\u22CA", "rtri": "\u25B9", "rtrie": "\u22B5", "rtrif": "\u25B8", "rtriltri": "\u29CE", "RuleDelayed": "\u29F4", "ruluhar": "\u2968", "rx": "\u211E", "Sacute": "\u015A", "sacute": "\u015B", "sbquo": "\u201A", "scap": "\u2AB8", "Scaron": "\u0160", "scaron": "\u0161", "Sc": "\u2ABC", "sc": "\u227B", "sccue": "\u227D", "sce": "\u2AB0", "scE": "\u2AB4", "Scedil": "\u015E", "scedil": "\u015F", "Scirc": "\u015C", "scirc": "\u015D", "scnap": "\u2ABA", "scnE": "\u2AB6", "scnsim": "\u22E9", "scpolint": "\u2A13", "scsim": "\u227F", "Scy": "\u0421", "scy": "\u0441", "sdotb": "\u22A1", "sdot": "\u22C5", "sdote": "\u2A66", "searhk": "\u2925", "searr": "\u2198", "seArr": "\u21D8", "searrow": "\u2198", "sect": "\u00A7", "semi": ";", "seswar": "\u2929", "setminus": "\u2216", "setmn": "\u2216", "sext": "\u2736", "Sfr": "\uD835\uDD16", "sfr": "\uD835\uDD30", "sfrown": "\u2322", "sharp": "\u266F", "SHCHcy": "\u0429", "shchcy": "\u0449", "SHcy": "\u0428", "shcy": "\u0448", "ShortDownArrow": "\u2193", "ShortLeftArrow": "\u2190", "shortmid": "\u2223", "shortparallel": "\u2225", "ShortRightArrow": "\u2192", "ShortUpArrow": "\u2191", "shy": "\u00AD", "Sigma": "\u03A3", "sigma": "\u03C3", "sigmaf": "\u03C2", "sigmav": "\u03C2", "sim": "\u223C", "simdot": "\u2A6A", "sime": "\u2243", "simeq": "\u2243", "simg": "\u2A9E", "simgE": "\u2AA0", "siml": "\u2A9D", "simlE": "\u2A9F", "simne": "\u2246", "simplus": "\u2A24", "simrarr": "\u2972", "slarr": "\u2190", "SmallCircle": "\u2218", "smallsetminus": "\u2216", "smashp": "\u2A33", "smeparsl": "\u29E4", "smid": "\u2223", "smile": "\u2323", "smt": "\u2AAA", "smte": "\u2AAC", "smtes": "\u2AAC\uFE00", "SOFTcy": "\u042C", "softcy": "\u044C", "solbar": "\u233F", "solb": "\u29C4", "sol": "/", "Sopf": "\uD835\uDD4A", "sopf": "\uD835\uDD64", "spades": "\u2660", "spadesuit": "\u2660", "spar": "\u2225", "sqcap": "\u2293", "sqcaps": "\u2293\uFE00", "sqcup": "\u2294", "sqcups": "\u2294\uFE00", "Sqrt": "\u221A", "sqsub": "\u228F", "sqsube": "\u2291", "sqsubset": "\u228F", "sqsubseteq": "\u2291", "sqsup": "\u2290", "sqsupe": "\u2292", "sqsupset": "\u2290", "sqsupseteq": "\u2292", "square": "\u25A1", "Square": "\u25A1", "SquareIntersection": "\u2293", "SquareSubset": "\u228F", "SquareSubsetEqual": "\u2291", "SquareSuperset": "\u2290", "SquareSupersetEqual": "\u2292", "SquareUnion": "\u2294", "squarf": "\u25AA", "squ": "\u25A1", "squf": "\u25AA", "srarr": "\u2192", "Sscr": "\uD835\uDCAE", "sscr": "\uD835\uDCC8", "ssetmn": "\u2216", "ssmile": "\u2323", "sstarf": "\u22C6", "Star": "\u22C6", "star": "\u2606", "starf": "\u2605", "straightepsilon": "\u03F5", "straightphi": "\u03D5", "strns": "\u00AF", "sub": "\u2282", "Sub": "\u22D0", "subdot": "\u2ABD", "subE": "\u2AC5", "sube": "\u2286", "subedot": "\u2AC3", "submult": "\u2AC1", "subnE": "\u2ACB", "subne": "\u228A", "subplus": "\u2ABF", "subrarr": "\u2979", "subset": "\u2282", "Subset": "\u22D0", "subseteq": "\u2286", "subseteqq": "\u2AC5", "SubsetEqual": "\u2286", "subsetneq": "\u228A", "subsetneqq": "\u2ACB", "subsim": "\u2AC7", "subsub": "\u2AD5", "subsup": "\u2AD3", "succapprox": "\u2AB8", "succ": "\u227B", "succcurlyeq": "\u227D", "Succeeds": "\u227B", "SucceedsEqual": "\u2AB0", "SucceedsSlantEqual": "\u227D", "SucceedsTilde": "\u227F", "succeq": "\u2AB0", "succnapprox": "\u2ABA", "succneqq": "\u2AB6", "succnsim": "\u22E9", "succsim": "\u227F", "SuchThat": "\u220B", "sum": "\u2211", "Sum": "\u2211", "sung": "\u266A", "sup1": "\u00B9", "sup2": "\u00B2", "sup3": "\u00B3", "sup": "\u2283", "Sup": "\u22D1", "supdot": "\u2ABE", "supdsub": "\u2AD8", "supE": "\u2AC6", "supe": "\u2287", "supedot": "\u2AC4", "Superset": "\u2283", "SupersetEqual": "\u2287", "suphsol": "\u27C9", "suphsub": "\u2AD7", "suplarr": "\u297B", "supmult": "\u2AC2", "supnE": "\u2ACC", "supne": "\u228B", "supplus": "\u2AC0", "supset": "\u2283", "Supset": "\u22D1", "supseteq": "\u2287", "supseteqq": "\u2AC6", "supsetneq": "\u228B", "supsetneqq": "\u2ACC", "supsim": "\u2AC8", "supsub": "\u2AD4", "supsup": "\u2AD6", "swarhk": "\u2926", "swarr": "\u2199", "swArr": "\u21D9", "swarrow": "\u2199", "swnwar": "\u292A", "szlig": "\u00DF", "Tab": "\t", "target": "\u2316", "Tau": "\u03A4", "tau": "\u03C4", "tbrk": "\u23B4", "Tcaron": "\u0164", "tcaron": "\u0165", "Tcedil": "\u0162", "tcedil": "\u0163", "Tcy": "\u0422", "tcy": "\u0442", "tdot": "\u20DB", "telrec": "\u2315", "Tfr": "\uD835\uDD17", "tfr": "\uD835\uDD31", "there4": "\u2234", "therefore": "\u2234", "Therefore": "\u2234", "Theta": "\u0398", "theta": "\u03B8", "thetasym": "\u03D1", "thetav": "\u03D1", "thickapprox": "\u2248", "thicksim": "\u223C", "ThickSpace": "\u205F\u200A", "ThinSpace": "\u2009", "thinsp": "\u2009", "thkap": "\u2248", "thksim": "\u223C", "THORN": "\u00DE", "thorn": "\u00FE", "tilde": "\u02DC", "Tilde": "\u223C", "TildeEqual": "\u2243", "TildeFullEqual": "\u2245", "TildeTilde": "\u2248", "timesbar": "\u2A31", "timesb": "\u22A0", "times": "\u00D7", "timesd": "\u2A30", "tint": "\u222D", "toea": "\u2928", "topbot": "\u2336", "topcir": "\u2AF1", "top": "\u22A4", "Topf": "\uD835\uDD4B", "topf": "\uD835\uDD65", "topfork": "\u2ADA", "tosa": "\u2929", "tprime": "\u2034", "trade": "\u2122", "TRADE": "\u2122", "triangle": "\u25B5", "triangledown": "\u25BF", "triangleleft": "\u25C3", "trianglelefteq": "\u22B4", "triangleq": "\u225C", "triangleright": "\u25B9", "trianglerighteq": "\u22B5", "tridot": "\u25EC", "trie": "\u225C", "triminus": "\u2A3A", "TripleDot": "\u20DB", "triplus": "\u2A39", "trisb": "\u29CD", "tritime": "\u2A3B", "trpezium": "\u23E2", "Tscr": "\uD835\uDCAF", "tscr": "\uD835\uDCC9", "TScy": "\u0426", "tscy": "\u0446", "TSHcy": "\u040B", "tshcy": "\u045B", "Tstrok": "\u0166", "tstrok": "\u0167", "twixt": "\u226C", "twoheadleftarrow": "\u219E", "twoheadrightarrow": "\u21A0", "Uacute": "\u00DA", "uacute": "\u00FA", "uarr": "\u2191", "Uarr": "\u219F", "uArr": "\u21D1", "Uarrocir": "\u2949", "Ubrcy": "\u040E", "ubrcy": "\u045E", "Ubreve": "\u016C", "ubreve": "\u016D", "Ucirc": "\u00DB", "ucirc": "\u00FB", "Ucy": "\u0423", "ucy": "\u0443", "udarr": "\u21C5", "Udblac": "\u0170", "udblac": "\u0171", "udhar": "\u296E", "ufisht": "\u297E", "Ufr": "\uD835\uDD18", "ufr": "\uD835\uDD32", "Ugrave": "\u00D9", "ugrave": "\u00F9", "uHar": "\u2963", "uharl": "\u21BF", "uharr": "\u21BE", "uhblk": "\u2580", "ulcorn": "\u231C", "ulcorner": "\u231C", "ulcrop": "\u230F", "ultri": "\u25F8", "Umacr": "\u016A", "umacr": "\u016B", "uml": "\u00A8", "UnderBar": "_", "UnderBrace": "\u23DF", "UnderBracket": "\u23B5", "UnderParenthesis": "\u23DD", "Union": "\u22C3", "UnionPlus": "\u228E", "Uogon": "\u0172", "uogon": "\u0173", "Uopf": "\uD835\uDD4C", "uopf": "\uD835\uDD66", "UpArrowBar": "\u2912", "uparrow": "\u2191", "UpArrow": "\u2191", "Uparrow": "\u21D1", "UpArrowDownArrow": "\u21C5", "updownarrow": "\u2195", "UpDownArrow": "\u2195", "Updownarrow": "\u21D5", "UpEquilibrium": "\u296E", "upharpoonleft": "\u21BF", "upharpoonright": "\u21BE", "uplus": "\u228E", "UpperLeftArrow": "\u2196", "UpperRightArrow": "\u2197", "upsi": "\u03C5", "Upsi": "\u03D2", "upsih": "\u03D2", "Upsilon": "\u03A5", "upsilon": "\u03C5", "UpTeeArrow": "\u21A5", "UpTee": "\u22A5", "upuparrows": "\u21C8", "urcorn": "\u231D", "urcorner": "\u231D", "urcrop": "\u230E", "Uring": "\u016E", "uring": "\u016F", "urtri": "\u25F9", "Uscr": "\uD835\uDCB0", "uscr": "\uD835\uDCCA", "utdot": "\u22F0", "Utilde": "\u0168", "utilde": "\u0169", "utri": "\u25B5", "utrif": "\u25B4", "uuarr": "\u21C8", "Uuml": "\u00DC", "uuml": "\u00FC", "uwangle": "\u29A7", "vangrt": "\u299C", "varepsilon": "\u03F5", "varkappa": "\u03F0", "varnothing": "\u2205", "varphi": "\u03D5", "varpi": "\u03D6", "varpropto": "\u221D", "varr": "\u2195", "vArr": "\u21D5", "varrho": "\u03F1", "varsigma": "\u03C2", "varsubsetneq": "\u228A\uFE00", "varsubsetneqq": "\u2ACB\uFE00", "varsupsetneq": "\u228B\uFE00", "varsupsetneqq": "\u2ACC\uFE00", "vartheta": "\u03D1", "vartriangleleft": "\u22B2", "vartriangleright": "\u22B3", "vBar": "\u2AE8", "Vbar": "\u2AEB", "vBarv": "\u2AE9", "Vcy": "\u0412", "vcy": "\u0432", "vdash": "\u22A2", "vDash": "\u22A8", "Vdash": "\u22A9", "VDash": "\u22AB", "Vdashl": "\u2AE6", "veebar": "\u22BB", "vee": "\u2228", "Vee": "\u22C1", "veeeq": "\u225A", "vellip": "\u22EE", "verbar": "|", "Verbar": "\u2016", "vert": "|", "Vert": "\u2016", "VerticalBar": "\u2223", "VerticalLine": "|", "VerticalSeparator": "\u2758", "VerticalTilde": "\u2240", "VeryThinSpace": "\u200A", "Vfr": "\uD835\uDD19", "vfr": "\uD835\uDD33", "vltri": "\u22B2", "vnsub": "\u2282\u20D2", "vnsup": "\u2283\u20D2", "Vopf": "\uD835\uDD4D", "vopf": "\uD835\uDD67", "vprop": "\u221D", "vrtri": "\u22B3", "Vscr": "\uD835\uDCB1", "vscr": "\uD835\uDCCB", "vsubnE": "\u2ACB\uFE00", "vsubne": "\u228A\uFE00", "vsupnE": "\u2ACC\uFE00", "vsupne": "\u228B\uFE00", "Vvdash": "\u22AA", "vzigzag": "\u299A", "Wcirc": "\u0174", "wcirc": "\u0175", "wedbar": "\u2A5F", "wedge": "\u2227", "Wedge": "\u22C0", "wedgeq": "\u2259", "weierp": "\u2118", "Wfr": "\uD835\uDD1A", "wfr": "\uD835\uDD34", "Wopf": "\uD835\uDD4E", "wopf": "\uD835\uDD68", "wp": "\u2118", "wr": "\u2240", "wreath": "\u2240", "Wscr": "\uD835\uDCB2", "wscr": "\uD835\uDCCC", "xcap": "\u22C2", "xcirc": "\u25EF", "xcup": "\u22C3", "xdtri": "\u25BD", "Xfr": "\uD835\uDD1B", "xfr": "\uD835\uDD35", "xharr": "\u27F7", "xhArr": "\u27FA", "Xi": "\u039E", "xi": "\u03BE", "xlarr": "\u27F5", "xlArr": "\u27F8", "xmap": "\u27FC", "xnis": "\u22FB", "xodot": "\u2A00", "Xopf": "\uD835\uDD4F", "xopf": "\uD835\uDD69", "xoplus": "\u2A01", "xotime": "\u2A02", "xrarr": "\u27F6", "xrArr": "\u27F9", "Xscr": "\uD835\uDCB3", "xscr": "\uD835\uDCCD", "xsqcup": "\u2A06", "xuplus": "\u2A04", "xutri": "\u25B3", "xvee": "\u22C1", "xwedge": "\u22C0", "Yacute": "\u00DD", "yacute": "\u00FD", "YAcy": "\u042F", "yacy": "\u044F", "Ycirc": "\u0176", "ycirc": "\u0177", "Ycy": "\u042B", "ycy": "\u044B", "yen": "\u00A5", "Yfr": "\uD835\uDD1C", "yfr": "\uD835\uDD36", "YIcy": "\u0407", "yicy": "\u0457", "Yopf": "\uD835\uDD50", "yopf": "\uD835\uDD6A", "Yscr": "\uD835\uDCB4", "yscr": "\uD835\uDCCE", "YUcy": "\u042E", "yucy": "\u044E", "yuml": "\u00FF", "Yuml": "\u0178", "Zacute": "\u0179", "zacute": "\u017A", "Zcaron": "\u017D", "zcaron": "\u017E", "Zcy": "\u0417", "zcy": "\u0437", "Zdot": "\u017B", "zdot": "\u017C", "zeetrf": "\u2128", "ZeroWidthSpace": "\u200B", "Zeta": "\u0396", "zeta": "\u03B6", "zfr": "\uD835\uDD37", "Zfr": "\u2128", "ZHcy": "\u0416", "zhcy": "\u0436", "zigrarr": "\u21DD", "zopf": "\uD835\uDD6B", "Zopf": "\u2124", "Zscr": "\uD835\uDCB5", "zscr": "\uD835\uDCCF", "zwj": "\u200D", "zwnj": "\u200C" }

},{}],203:[function(require,module,exports){
module.exports={ "Aacute": "\u00C1", "aacute": "\u00E1", "Acirc": "\u00C2", "acirc": "\u00E2", "acute": "\u00B4", "AElig": "\u00C6", "aelig": "\u00E6", "Agrave": "\u00C0", "agrave": "\u00E0", "amp": "&", "AMP": "&", "Aring": "\u00C5", "aring": "\u00E5", "Atilde": "\u00C3", "atilde": "\u00E3", "Auml": "\u00C4", "auml": "\u00E4", "brvbar": "\u00A6", "Ccedil": "\u00C7", "ccedil": "\u00E7", "cedil": "\u00B8", "cent": "\u00A2", "copy": "\u00A9", "COPY": "\u00A9", "curren": "\u00A4", "deg": "\u00B0", "divide": "\u00F7", "Eacute": "\u00C9", "eacute": "\u00E9", "Ecirc": "\u00CA", "ecirc": "\u00EA", "Egrave": "\u00C8", "egrave": "\u00E8", "ETH": "\u00D0", "eth": "\u00F0", "Euml": "\u00CB", "euml": "\u00EB", "frac12": "\u00BD", "frac14": "\u00BC", "frac34": "\u00BE", "gt": ">", "GT": ">", "Iacute": "\u00CD", "iacute": "\u00ED", "Icirc": "\u00CE", "icirc": "\u00EE", "iexcl": "\u00A1", "Igrave": "\u00CC", "igrave": "\u00EC", "iquest": "\u00BF", "Iuml": "\u00CF", "iuml": "\u00EF", "laquo": "\u00AB", "lt": "<", "LT": "<", "macr": "\u00AF", "micro": "\u00B5", "middot": "\u00B7", "nbsp": "\u00A0", "not": "\u00AC", "Ntilde": "\u00D1", "ntilde": "\u00F1", "Oacute": "\u00D3", "oacute": "\u00F3", "Ocirc": "\u00D4", "ocirc": "\u00F4", "Ograve": "\u00D2", "ograve": "\u00F2", "ordf": "\u00AA", "ordm": "\u00BA", "Oslash": "\u00D8", "oslash": "\u00F8", "Otilde": "\u00D5", "otilde": "\u00F5", "Ouml": "\u00D6", "ouml": "\u00F6", "para": "\u00B6", "plusmn": "\u00B1", "pound": "\u00A3", "quot": "\"", "QUOT": "\"", "raquo": "\u00BB", "reg": "\u00AE", "REG": "\u00AE", "sect": "\u00A7", "shy": "\u00AD", "sup1": "\u00B9", "sup2": "\u00B2", "sup3": "\u00B3", "szlig": "\u00DF", "THORN": "\u00DE", "thorn": "\u00FE", "times": "\u00D7", "Uacute": "\u00DA", "uacute": "\u00FA", "Ucirc": "\u00DB", "ucirc": "\u00FB", "Ugrave": "\u00D9", "ugrave": "\u00F9", "uml": "\u00A8", "Uuml": "\u00DC", "uuml": "\u00FC", "Yacute": "\u00DD", "yacute": "\u00FD", "yen": "\u00A5", "yuml": "\u00FF" }

},{}],204:[function(require,module,exports){
module.exports={ "amp": "&", "apos": "'", "gt": ">", "lt": "<", "quot": "\"" }

},{}],205:[function(require,module,exports){
/*! file-extension v4.0.5 | (c) silverwind | BSD license */
"use strict";

(function(m) {
  if (typeof exports === "object") {
    module.exports = m();
  } else if (typeof define === "function" && define.amd) {
    define([], m);
  } else {
    this.fileExtension = m();
  }
})(function() {
  return function fileExtension(filename, opts) {
    if (!opts) opts = {};
    if (!filename) return "";
    var ext = (/[^./\\]*$/.exec(filename) || [""])[0];
    return opts.preserveCase ? ext : ext.toLowerCase();
  };
});

},{}],206:[function(require,module,exports){
(function (Buffer){
'use strict';
const {PassThrough} = require('stream');

module.exports = options => {
	options = Object.assign({}, options);

	const {array} = options;
	let {encoding} = options;
	const buffer = encoding === 'buffer';
	let objectMode = false;

	if (array) {
		objectMode = !(encoding || buffer);
	} else {
		encoding = encoding || 'utf8';
	}

	if (buffer) {
		encoding = null;
	}

	let len = 0;
	const ret = [];
	const stream = new PassThrough({objectMode});

	if (encoding) {
		stream.setEncoding(encoding);
	}

	stream.on('data', chunk => {
		ret.push(chunk);

		if (objectMode) {
			len = ret.length;
		} else {
			len += chunk.length;
		}
	});

	stream.getBufferedValue = () => {
		if (array) {
			return ret;
		}

		return buffer ? Buffer.concat(ret, len) : ret.join('');
	};

	stream.getBufferedLength = () => len;

	return stream;
};

}).call(this,require("buffer").Buffer)
},{"buffer":4,"stream":37}],207:[function(require,module,exports){
'use strict';
const pump = require('pump');
const bufferStream = require('./buffer-stream');

class MaxBufferError extends Error {
	constructor() {
		super('maxBuffer exceeded');
		this.name = 'MaxBufferError';
	}
}

function getStream(inputStream, options) {
	if (!inputStream) {
		return Promise.reject(new Error('Expected a stream'));
	}

	options = Object.assign({maxBuffer: Infinity}, options);

	const {maxBuffer} = options;

	let stream;
	return new Promise((resolve, reject) => {
		const rejectPromise = error => {
			if (error) { // A null check
				error.bufferedData = stream.getBufferedValue();
			}
			reject(error);
		};

		stream = pump(inputStream, bufferStream(options), error => {
			if (error) {
				rejectPromise(error);
				return;
			}

			resolve();
		});

		stream.on('data', () => {
			if (stream.getBufferedLength() > maxBuffer) {
				rejectPromise(new MaxBufferError());
			}
		});
	}).then(() => stream.getBufferedValue());
}

module.exports = getStream;
module.exports.buffer = (stream, options) => getStream(stream, Object.assign({}, options, {encoding: 'buffer'}));
module.exports.array = (stream, options) => getStream(stream, Object.assign({}, options, {array: true}));
module.exports.MaxBufferError = MaxBufferError;

},{"./buffer-stream":206,"pump":518}],208:[function(require,module,exports){
module.exports={
  "_args": [
    [
      "got@9.6.0",
      "C:\\Users\\David Lee\\OneDrive - Northwestern University\\Classes\\Knight Lab\\studio-conversational-news-f19\\new_interface"
    ]
  ],
  "_from": "got@9.6.0",
  "_id": "got@9.6.0",
  "_inBundle": false,
  "_integrity": "sha512-R7eWptXuGYxwijs0eV+v3o6+XH1IqVK8dJOEecQfTmkncw9AV4dcw/Dhxi8MdlqPthxxpZyizMzyg8RTmEsG+Q==",
  "_location": "/got",
  "_phantomChildren": {
    "pump": "3.0.0"
  },
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "got@9.6.0",
    "name": "got",
    "escapedName": "got",
    "rawSpec": "9.6.0",
    "saveSpec": null,
    "fetchSpec": "9.6.0"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/got/-/got-9.6.0.tgz",
  "_spec": "9.6.0",
  "_where": "C:\\Users\\David Lee\\OneDrive - Northwestern University\\Classes\\Knight Lab\\studio-conversational-news-f19\\new_interface",
  "ava": {
    "concurrency": 4
  },
  "browser": {
    "decompress-response": false,
    "electron": false
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/got/issues"
  },
  "dependencies": {
    "@sindresorhus/is": "^0.14.0",
    "@szmarczak/http-timer": "^1.1.2",
    "cacheable-request": "^6.0.0",
    "decompress-response": "^3.3.0",
    "duplexer3": "^0.1.4",
    "get-stream": "^4.1.0",
    "lowercase-keys": "^1.0.1",
    "mimic-response": "^1.0.1",
    "p-cancelable": "^1.0.0",
    "to-readable-stream": "^1.0.0",
    "url-parse-lax": "^3.0.0"
  },
  "description": "Simplified HTTP requests",
  "devDependencies": {
    "ava": "^1.1.0",
    "coveralls": "^3.0.0",
    "delay": "^4.1.0",
    "form-data": "^2.3.3",
    "get-port": "^4.0.0",
    "np": "^3.1.0",
    "nyc": "^13.1.0",
    "p-event": "^2.1.0",
    "pem": "^1.13.2",
    "proxyquire": "^2.0.1",
    "sinon": "^7.2.2",
    "slow-stream": "0.0.4",
    "tempfile": "^2.0.0",
    "tempy": "^0.2.1",
    "tough-cookie": "^3.0.0",
    "xo": "^0.24.0"
  },
  "engines": {
    "node": ">=8.6"
  },
  "files": [
    "source"
  ],
  "homepage": "https://github.com/sindresorhus/got#readme",
  "keywords": [
    "http",
    "https",
    "get",
    "got",
    "url",
    "uri",
    "request",
    "util",
    "utility",
    "simple",
    "curl",
    "wget",
    "fetch",
    "net",
    "network",
    "electron"
  ],
  "license": "MIT",
  "main": "source",
  "name": "got",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/got.git"
  },
  "scripts": {
    "release": "np",
    "test": "xo && nyc ava"
  },
  "version": "9.6.0"
}

},{}],209:[function(require,module,exports){
'use strict';
const EventEmitter = require('events');
const getStream = require('get-stream');
const is = require('@sindresorhus/is');
const PCancelable = require('p-cancelable');
const requestAsEventEmitter = require('./request-as-event-emitter');
const {HTTPError, ParseError, ReadError} = require('./errors');
const {options: mergeOptions} = require('./merge');
const {reNormalize} = require('./normalize-arguments');

const asPromise = options => {
	const proxy = new EventEmitter();

	const promise = new PCancelable((resolve, reject, onCancel) => {
		const emitter = requestAsEventEmitter(options);

		onCancel(emitter.abort);

		emitter.on('response', async response => {
			proxy.emit('response', response);

			const stream = is.null(options.encoding) ? getStream.buffer(response) : getStream(response, options);

			let data;
			try {
				data = await stream;
			} catch (error) {
				reject(new ReadError(error, options));
				return;
			}

			const limitStatusCode = options.followRedirect ? 299 : 399;

			response.body = data;

			try {
				for (const [index, hook] of Object.entries(options.hooks.afterResponse)) {
					// eslint-disable-next-line no-await-in-loop
					response = await hook(response, updatedOptions => {
						updatedOptions = reNormalize(mergeOptions(options, {
							...updatedOptions,
							retry: 0,
							throwHttpErrors: false
						}));

						// Remove any further hooks for that request, because we we'll call them anyway.
						// The loop continues. We don't want duplicates (asPromise recursion).
						updatedOptions.hooks.afterResponse = options.hooks.afterResponse.slice(0, index);

						return asPromise(updatedOptions);
					});
				}
			} catch (error) {
				reject(error);
				return;
			}

			const {statusCode} = response;

			if (options.json && response.body) {
				try {
					response.body = JSON.parse(response.body);
				} catch (error) {
					if (statusCode >= 200 && statusCode < 300) {
						const parseError = new ParseError(error, statusCode, options, data);
						Object.defineProperty(parseError, 'response', {value: response});
						reject(parseError);
						return;
					}
				}
			}

			if (statusCode !== 304 && (statusCode < 200 || statusCode > limitStatusCode)) {
				const error = new HTTPError(response, options);
				Object.defineProperty(error, 'response', {value: response});
				if (emitter.retry(error) === false) {
					if (options.throwHttpErrors) {
						reject(error);
						return;
					}

					resolve(response);
				}

				return;
			}

			resolve(response);
		});

		emitter.once('error', reject);
		[
			'request',
			'redirect',
			'uploadProgress',
			'downloadProgress'
		].forEach(event => emitter.on(event, (...args) => proxy.emit(event, ...args)));
	});

	promise.on = (name, fn) => {
		proxy.on(name, fn);
		return promise;
	};

	return promise;
};

module.exports = asPromise;

},{"./errors":212,"./merge":216,"./normalize-arguments":217,"./request-as-event-emitter":219,"@sindresorhus/is":68,"events":7,"get-stream":207,"p-cancelable":489}],210:[function(require,module,exports){
'use strict';
const {PassThrough} = require('stream');
const duplexer3 = require('duplexer3');
const requestAsEventEmitter = require('./request-as-event-emitter');
const {HTTPError, ReadError} = require('./errors');

module.exports = options => {
	const input = new PassThrough();
	const output = new PassThrough();
	const proxy = duplexer3(input, output);
	const piped = new Set();
	let isFinished = false;

	options.retry.retries = () => 0;

	if (options.body) {
		proxy.write = () => {
			throw new Error('Got\'s stream is not writable when the `body` option is used');
		};
	}

	const emitter = requestAsEventEmitter(options, input);

	// Cancels the request
	proxy._destroy = emitter.abort;

	emitter.on('response', response => {
		const {statusCode} = response;

		response.on('error', error => {
			proxy.emit('error', new ReadError(error, options));
		});

		if (options.throwHttpErrors && statusCode !== 304 && (statusCode < 200 || statusCode > 299)) {
			proxy.emit('error', new HTTPError(response, options), null, response);
			return;
		}

		isFinished = true;

		response.pipe(output);

		for (const destination of piped) {
			if (destination.headersSent) {
				continue;
			}

			for (const [key, value] of Object.entries(response.headers)) {
				// Got gives *decompressed* data. Overriding `content-encoding` header would result in an error.
				// It's not possible to decompress already decompressed data, is it?
				const allowed = options.decompress ? key !== 'content-encoding' : true;
				if (allowed) {
					destination.setHeader(key, value);
				}
			}

			destination.statusCode = response.statusCode;
		}

		proxy.emit('response', response);
	});

	[
		'error',
		'request',
		'redirect',
		'uploadProgress',
		'downloadProgress'
	].forEach(event => emitter.on(event, (...args) => proxy.emit(event, ...args)));

	const pipe = proxy.pipe.bind(proxy);
	const unpipe = proxy.unpipe.bind(proxy);
	proxy.pipe = (destination, options) => {
		if (isFinished) {
			throw new Error('Failed to pipe. The response has been emitted already.');
		}

		const result = pipe(destination, options);

		if (Reflect.has(destination, 'setHeader')) {
			piped.add(destination);
		}

		return result;
	};

	proxy.unpipe = stream => {
		piped.delete(stream);
		return unpipe(stream);
	};

	return proxy;
};

},{"./errors":212,"./request-as-event-emitter":219,"duplexer3":195,"stream":37}],211:[function(require,module,exports){
'use strict';
const errors = require('./errors');
const asStream = require('./as-stream');
const asPromise = require('./as-promise');
const normalizeArguments = require('./normalize-arguments');
const merge = require('./merge');
const deepFreeze = require('./utils/deep-freeze');

const getPromiseOrStream = options => options.stream ? asStream(options) : asPromise(options);

const aliases = [
	'get',
	'post',
	'put',
	'patch',
	'head',
	'delete'
];

const create = defaults => {
	defaults = merge({}, defaults);
	normalizeArguments.preNormalize(defaults.options);

	if (!defaults.handler) {
		// This can't be getPromiseOrStream, because when merging
		// the chain would stop at this point and no further handlers would be called.
		defaults.handler = (options, next) => next(options);
	}

	function got(url, options) {
		try {
			return defaults.handler(normalizeArguments(url, options, defaults), getPromiseOrStream);
		} catch (error) {
			if (options && options.stream) {
				throw error;
			} else {
				return Promise.reject(error);
			}
		}
	}

	got.create = create;
	got.extend = options => {
		let mutableDefaults;
		if (options && Reflect.has(options, 'mutableDefaults')) {
			mutableDefaults = options.mutableDefaults;
			delete options.mutableDefaults;
		} else {
			mutableDefaults = defaults.mutableDefaults;
		}

		return create({
			options: merge.options(defaults.options, options),
			handler: defaults.handler,
			mutableDefaults
		});
	};

	got.mergeInstances = (...args) => create(merge.instances(args));

	got.stream = (url, options) => got(url, {...options, stream: true});

	for (const method of aliases) {
		got[method] = (url, options) => got(url, {...options, method});
		got.stream[method] = (url, options) => got.stream(url, {...options, method});
	}

	Object.assign(got, {...errors, mergeOptions: merge.options});
	Object.defineProperty(got, 'defaults', {
		value: defaults.mutableDefaults ? defaults : deepFreeze(defaults),
		writable: defaults.mutableDefaults,
		configurable: defaults.mutableDefaults,
		enumerable: true
	});

	return got;
};

module.exports = create;

},{"./as-promise":209,"./as-stream":210,"./errors":212,"./merge":216,"./normalize-arguments":217,"./utils/deep-freeze":220}],212:[function(require,module,exports){
'use strict';
const urlLib = require('url');
const http = require('http');
const PCancelable = require('p-cancelable');
const is = require('@sindresorhus/is');

class GotError extends Error {
	constructor(message, error, options) {
		super(message);
		Error.captureStackTrace(this, this.constructor);
		this.name = 'GotError';

		if (!is.undefined(error.code)) {
			this.code = error.code;
		}

		Object.assign(this, {
			host: options.host,
			hostname: options.hostname,
			method: options.method,
			path: options.path,
			socketPath: options.socketPath,
			protocol: options.protocol,
			url: options.href,
			gotOptions: options
		});
	}
}

module.exports.GotError = GotError;

module.exports.CacheError = class extends GotError {
	constructor(error, options) {
		super(error.message, error, options);
		this.name = 'CacheError';
	}
};

module.exports.RequestError = class extends GotError {
	constructor(error, options) {
		super(error.message, error, options);
		this.name = 'RequestError';
	}
};

module.exports.ReadError = class extends GotError {
	constructor(error, options) {
		super(error.message, error, options);
		this.name = 'ReadError';
	}
};

module.exports.ParseError = class extends GotError {
	constructor(error, statusCode, options, data) {
		super(`${error.message} in "${urlLib.format(options)}": \n${data.slice(0, 77)}...`, error, options);
		this.name = 'ParseError';
		this.statusCode = statusCode;
		this.statusMessage = http.STATUS_CODES[this.statusCode];
	}
};

module.exports.HTTPError = class extends GotError {
	constructor(response, options) {
		const {statusCode} = response;
		let {statusMessage} = response;

		if (statusMessage) {
			statusMessage = statusMessage.replace(/\r?\n/g, ' ').trim();
		} else {
			statusMessage = http.STATUS_CODES[statusCode];
		}

		super(`Response code ${statusCode} (${statusMessage})`, {}, options);
		this.name = 'HTTPError';
		this.statusCode = statusCode;
		this.statusMessage = statusMessage;
		this.headers = response.headers;
		this.body = response.body;
	}
};

module.exports.MaxRedirectsError = class extends GotError {
	constructor(statusCode, redirectUrls, options) {
		super('Redirected 10 times. Aborting.', {}, options);
		this.name = 'MaxRedirectsError';
		this.statusCode = statusCode;
		this.statusMessage = http.STATUS_CODES[this.statusCode];
		this.redirectUrls = redirectUrls;
	}
};

module.exports.UnsupportedProtocolError = class extends GotError {
	constructor(options) {
		super(`Unsupported protocol "${options.protocol}"`, {}, options);
		this.name = 'UnsupportedProtocolError';
	}
};

module.exports.TimeoutError = class extends GotError {
	constructor(error, options) {
		super(error.message, {code: 'ETIMEDOUT'}, options);
		this.name = 'TimeoutError';
		this.event = error.event;
	}
};

module.exports.CancelError = PCancelable.CancelError;

},{"@sindresorhus/is":68,"http":38,"p-cancelable":489,"url":59}],213:[function(require,module,exports){
'use strict';
const decompressResponse = require('decompress-response');
const is = require('@sindresorhus/is');
const mimicResponse = require('mimic-response');
const progress = require('./progress');

module.exports = (response, options, emitter) => {
	const downloadBodySize = Number(response.headers['content-length']) || null;

	const progressStream = progress.download(response, emitter, downloadBodySize);

	mimicResponse(response, progressStream);

	const newResponse = options.decompress === true &&
		is.function(decompressResponse) &&
		options.method !== 'HEAD' ? decompressResponse(progressStream) : progressStream;

	if (!options.decompress && ['gzip', 'deflate'].includes(response.headers['content-encoding'])) {
		options.encoding = null;
	}

	emitter.emit('response', newResponse);

	emitter.emit('downloadProgress', {
		percent: 0,
		transferred: 0,
		total: downloadBodySize
	});

	response.pipe(progressStream);
};

},{"./progress":218,"@sindresorhus/is":68,"decompress-response":3,"mimic-response":481}],214:[function(require,module,exports){
'use strict';
const pkg = require('../package.json');
const create = require('./create');

const defaults = {
	options: {
		retry: {
			retries: 2,
			methods: [
				'GET',
				'PUT',
				'HEAD',
				'DELETE',
				'OPTIONS',
				'TRACE'
			],
			statusCodes: [
				408,
				413,
				429,
				500,
				502,
				503,
				504
			],
			errorCodes: [
				'ETIMEDOUT',
				'ECONNRESET',
				'EADDRINUSE',
				'ECONNREFUSED',
				'EPIPE',
				'ENOTFOUND',
				'ENETUNREACH',
				'EAI_AGAIN'
			]
		},
		headers: {
			'user-agent': `${pkg.name}/${pkg.version} (https://github.com/sindresorhus/got)`
		},
		hooks: {
			beforeRequest: [],
			beforeRedirect: [],
			beforeRetry: [],
			afterResponse: []
		},
		decompress: true,
		throwHttpErrors: true,
		followRedirect: true,
		stream: false,
		form: false,
		json: false,
		cache: false,
		useElectronNet: false
	},
	mutableDefaults: false
};

const got = create(defaults);

module.exports = got;

},{"../package.json":208,"./create":211}],215:[function(require,module,exports){
'use strict';

module.exports = [
	'beforeError',
	'init',
	'beforeRequest',
	'beforeRedirect',
	'beforeRetry',
	'afterResponse'
];

},{}],216:[function(require,module,exports){
'use strict';
const {URL} = require('url');
const is = require('@sindresorhus/is');
const knownHookEvents = require('./known-hook-events');

const merge = (target, ...sources) => {
	for (const source of sources) {
		for (const [key, sourceValue] of Object.entries(source)) {
			if (is.undefined(sourceValue)) {
				continue;
			}

			const targetValue = target[key];
			if (is.urlInstance(targetValue) && (is.urlInstance(sourceValue) || is.string(sourceValue))) {
				target[key] = new URL(sourceValue, targetValue);
			} else if (is.plainObject(sourceValue)) {
				if (is.plainObject(targetValue)) {
					target[key] = merge({}, targetValue, sourceValue);
				} else {
					target[key] = merge({}, sourceValue);
				}
			} else if (is.array(sourceValue)) {
				target[key] = merge([], sourceValue);
			} else {
				target[key] = sourceValue;
			}
		}
	}

	return target;
};

const mergeOptions = (...sources) => {
	sources = sources.map(source => source || {});
	const merged = merge({}, ...sources);

	const hooks = {};
	for (const hook of knownHookEvents) {
		hooks[hook] = [];
	}

	for (const source of sources) {
		if (source.hooks) {
			for (const hook of knownHookEvents) {
				hooks[hook] = hooks[hook].concat(source.hooks[hook]);
			}
		}
	}

	merged.hooks = hooks;

	return merged;
};

const mergeInstances = (instances, methods) => {
	const handlers = instances.map(instance => instance.defaults.handler);
	const size = instances.length - 1;

	return {
		methods,
		options: mergeOptions(...instances.map(instance => instance.defaults.options)),
		handler: (options, next) => {
			let iteration = -1;
			const iterate = options => handlers[++iteration](options, iteration === size ? next : iterate);

			return iterate(options);
		}
	};
};

module.exports = merge;
module.exports.options = mergeOptions;
module.exports.instances = mergeInstances;

},{"./known-hook-events":215,"@sindresorhus/is":68,"url":59}],217:[function(require,module,exports){
'use strict';
const {URL, URLSearchParams} = require('url'); // TODO: Use the `URL` global when targeting Node.js 10
const urlLib = require('url');
const is = require('@sindresorhus/is');
const urlParseLax = require('url-parse-lax');
const lowercaseKeys = require('lowercase-keys');
const urlToOptions = require('./utils/url-to-options');
const isFormData = require('./utils/is-form-data');
const merge = require('./merge');
const knownHookEvents = require('./known-hook-events');

const retryAfterStatusCodes = new Set([413, 429, 503]);

// `preNormalize` handles static options (e.g. headers).
// For example, when you create a custom instance and make a request
// with no static changes, they won't be normalized again.
//
// `normalize` operates on dynamic options - they cannot be saved.
// For example, `body` is everytime different per request.
// When it's done normalizing the new options, it performs merge()
// on the prenormalized options and the normalized ones.

const preNormalize = (options, defaults) => {
	if (is.nullOrUndefined(options.headers)) {
		options.headers = {};
	} else {
		options.headers = lowercaseKeys(options.headers);
	}

	if (options.baseUrl && !options.baseUrl.toString().endsWith('/')) {
		options.baseUrl += '/';
	}

	if (options.stream) {
		options.json = false;
	}

	if (is.nullOrUndefined(options.hooks)) {
		options.hooks = {};
	} else if (!is.object(options.hooks)) {
		throw new TypeError(`Parameter \`hooks\` must be an object, not ${is(options.hooks)}`);
	}

	for (const event of knownHookEvents) {
		if (is.nullOrUndefined(options.hooks[event])) {
			if (defaults) {
				options.hooks[event] = [...defaults.hooks[event]];
			} else {
				options.hooks[event] = [];
			}
		}
	}

	if (is.number(options.timeout)) {
		options.gotTimeout = {request: options.timeout};
	} else if (is.object(options.timeout)) {
		options.gotTimeout = options.timeout;
	}

	delete options.timeout;

	const {retry} = options;
	options.retry = {
		retries: 0,
		methods: [],
		statusCodes: [],
		errorCodes: []
	};

	if (is.nonEmptyObject(defaults) && retry !== false) {
		options.retry = {...defaults.retry};
	}

	if (retry !== false) {
		if (is.number(retry)) {
			options.retry.retries = retry;
		} else {
			options.retry = {...options.retry, ...retry};
		}
	}

	if (options.gotTimeout) {
		options.retry.maxRetryAfter = Math.min(...[options.gotTimeout.request, options.gotTimeout.connection].filter(n => !is.nullOrUndefined(n)));
	}

	if (is.array(options.retry.methods)) {
		options.retry.methods = new Set(options.retry.methods.map(method => method.toUpperCase()));
	}

	if (is.array(options.retry.statusCodes)) {
		options.retry.statusCodes = new Set(options.retry.statusCodes);
	}

	if (is.array(options.retry.errorCodes)) {
		options.retry.errorCodes = new Set(options.retry.errorCodes);
	}

	return options;
};

const normalize = (url, options, defaults) => {
	if (is.plainObject(url)) {
		options = {...url, ...options};
		url = options.url || {};
		delete options.url;
	}

	if (defaults) {
		options = merge({}, defaults.options, options ? preNormalize(options, defaults.options) : {});
	} else {
		options = merge({}, preNormalize(options));
	}

	if (!is.string(url) && !is.object(url)) {
		throw new TypeError(`Parameter \`url\` must be a string or object, not ${is(url)}`);
	}

	if (is.string(url)) {
		if (options.baseUrl) {
			if (url.toString().startsWith('/')) {
				url = url.toString().slice(1);
			}

			url = urlToOptions(new URL(url, options.baseUrl));
		} else {
			url = url.replace(/^unix:/, 'http://$&');
			url = urlParseLax(url);
		}
	} else if (is(url) === 'URL') {
		url = urlToOptions(url);
	}

	// Override both null/undefined with default protocol
	options = merge({path: ''}, url, {protocol: url.protocol || 'https:'}, options);

	for (const hook of options.hooks.init) {
		const called = hook(options);

		if (is.promise(called)) {
			throw new TypeError('The `init` hook must be a synchronous function');
		}
	}

	const {baseUrl} = options;
	Object.defineProperty(options, 'baseUrl', {
		set: () => {
			throw new Error('Failed to set baseUrl. Options are normalized already.');
		},
		get: () => baseUrl
	});

	const {query} = options;
	if (is.nonEmptyString(query) || is.nonEmptyObject(query) || query instanceof URLSearchParams) {
		if (!is.string(query)) {
			options.query = (new URLSearchParams(query)).toString();
		}

		options.path = `${options.path.split('?')[0]}?${options.query}`;
		delete options.query;
	}

	if (options.hostname === 'unix') {
		const matches = /(.+?):(.+)/.exec(options.path);

		if (matches) {
			const [, socketPath, path] = matches;
			options = {
				...options,
				socketPath,
				path,
				host: null
			};
		}
	}

	const {headers} = options;
	for (const [key, value] of Object.entries(headers)) {
		if (is.nullOrUndefined(value)) {
			delete headers[key];
		}
	}

	if (options.json && is.undefined(headers.accept)) {
		headers.accept = 'application/json';
	}

	if (options.decompress && is.undefined(headers['accept-encoding'])) {
		headers['accept-encoding'] = 'gzip, deflate';
	}

	const {body} = options;
	if (is.nullOrUndefined(body)) {
		options.method = options.method ? options.method.toUpperCase() : 'GET';
	} else {
		const isObject = is.object(body) && !is.buffer(body) && !is.nodeStream(body);
		if (!is.nodeStream(body) && !is.string(body) && !is.buffer(body) && !(options.form || options.json)) {
			throw new TypeError('The `body` option must be a stream.Readable, string or Buffer');
		}

		if (options.json && !(isObject || is.array(body))) {
			throw new TypeError('The `body` option must be an Object or Array when the `json` option is used');
		}

		if (options.form && !isObject) {
			throw new TypeError('The `body` option must be an Object when the `form` option is used');
		}

		if (isFormData(body)) {
			// Special case for https://github.com/form-data/form-data
			headers['content-type'] = headers['content-type'] || `multipart/form-data; boundary=${body.getBoundary()}`;
		} else if (options.form) {
			headers['content-type'] = headers['content-type'] || 'application/x-www-form-urlencoded';
			options.body = (new URLSearchParams(body)).toString();
		} else if (options.json) {
			headers['content-type'] = headers['content-type'] || 'application/json';
			options.body = JSON.stringify(body);
		}

		options.method = options.method ? options.method.toUpperCase() : 'POST';
	}

	if (!is.function(options.retry.retries)) {
		const {retries} = options.retry;

		options.retry.retries = (iteration, error) => {
			if (iteration > retries) {
				return 0;
			}

			if ((!error || !options.retry.errorCodes.has(error.code)) && (!options.retry.methods.has(error.method) || !options.retry.statusCodes.has(error.statusCode))) {
				return 0;
			}

			if (Reflect.has(error, 'headers') && Reflect.has(error.headers, 'retry-after') && retryAfterStatusCodes.has(error.statusCode)) {
				let after = Number(error.headers['retry-after']);
				if (is.nan(after)) {
					after = Date.parse(error.headers['retry-after']) - Date.now();
				} else {
					after *= 1000;
				}

				if (after > options.retry.maxRetryAfter) {
					return 0;
				}

				return after;
			}

			if (error.statusCode === 413) {
				return 0;
			}

			const noise = Math.random() * 100;
			return ((2 ** (iteration - 1)) * 1000) + noise;
		};
	}

	return options;
};

const reNormalize = options => normalize(urlLib.format(options), options);

module.exports = normalize;
module.exports.preNormalize = preNormalize;
module.exports.reNormalize = reNormalize;

},{"./known-hook-events":215,"./merge":216,"./utils/is-form-data":222,"./utils/url-to-options":224,"@sindresorhus/is":68,"lowercase-keys":467,"url":59,"url-parse-lax":530}],218:[function(require,module,exports){
(function (Buffer){
'use strict';
const {Transform} = require('stream');

module.exports = {
	download(response, emitter, downloadBodySize) {
		let downloaded = 0;

		return new Transform({
			transform(chunk, encoding, callback) {
				downloaded += chunk.length;

				const percent = downloadBodySize ? downloaded / downloadBodySize : 0;

				// Let `flush()` be responsible for emitting the last event
				if (percent < 1) {
					emitter.emit('downloadProgress', {
						percent,
						transferred: downloaded,
						total: downloadBodySize
					});
				}

				callback(null, chunk);
			},

			flush(callback) {
				emitter.emit('downloadProgress', {
					percent: 1,
					transferred: downloaded,
					total: downloadBodySize
				});

				callback();
			}
		});
	},

	upload(request, emitter, uploadBodySize) {
		const uploadEventFrequency = 150;
		let uploaded = 0;
		let progressInterval;

		emitter.emit('uploadProgress', {
			percent: 0,
			transferred: 0,
			total: uploadBodySize
		});

		request.once('error', () => {
			clearInterval(progressInterval);
		});

		request.once('response', () => {
			clearInterval(progressInterval);

			emitter.emit('uploadProgress', {
				percent: 1,
				transferred: uploaded,
				total: uploadBodySize
			});
		});

		request.once('socket', socket => {
			const onSocketConnect = () => {
				progressInterval = setInterval(() => {
					const lastUploaded = uploaded;
					/* istanbul ignore next: see #490 (occurs randomly!) */
					const headersSize = request._header ? Buffer.byteLength(request._header) : 0;
					uploaded = socket.bytesWritten - headersSize;

					// Don't emit events with unchanged progress and
					// prevent last event from being emitted, because
					// it's emitted when `response` is emitted
					if (uploaded === lastUploaded || uploaded === uploadBodySize) {
						return;
					}

					emitter.emit('uploadProgress', {
						percent: uploadBodySize ? uploaded / uploadBodySize : 0,
						transferred: uploaded,
						total: uploadBodySize
					});
				}, uploadEventFrequency);
			};

			/* istanbul ignore next: hard to test */
			if (socket.connecting) {
				socket.once('connect', onSocketConnect);
			} else if (socket.writable) {
				// The socket is being reused from pool,
				// so the connect event will not be emitted
				onSocketConnect();
			}
		});
	}
};

}).call(this,require("buffer").Buffer)
},{"buffer":4,"stream":37}],219:[function(require,module,exports){
(function (process,Buffer,setImmediate){
'use strict';
const {URL} = require('url'); // TODO: Use the `URL` global when targeting Node.js 10
const util = require('util');
const EventEmitter = require('events');
const http = require('http');
const https = require('https');
const urlLib = require('url');
const CacheableRequest = require('cacheable-request');
const toReadableStream = require('to-readable-stream');
const is = require('@sindresorhus/is');
const timer = require('@szmarczak/http-timer');
const timedOut = require('./utils/timed-out');
const getBodySize = require('./utils/get-body-size');
const getResponse = require('./get-response');
const progress = require('./progress');
const {CacheError, UnsupportedProtocolError, MaxRedirectsError, RequestError, TimeoutError} = require('./errors');
const urlToOptions = require('./utils/url-to-options');

const getMethodRedirectCodes = new Set([300, 301, 302, 303, 304, 305, 307, 308]);
const allMethodRedirectCodes = new Set([300, 303, 307, 308]);

module.exports = (options, input) => {
	const emitter = new EventEmitter();
	const redirects = [];
	let currentRequest;
	let requestUrl;
	let redirectString;
	let uploadBodySize;
	let retryCount = 0;
	let shouldAbort = false;

	const setCookie = options.cookieJar ? util.promisify(options.cookieJar.setCookie.bind(options.cookieJar)) : null;
	const getCookieString = options.cookieJar ? util.promisify(options.cookieJar.getCookieString.bind(options.cookieJar)) : null;
	const agents = is.object(options.agent) ? options.agent : null;

	const emitError = async error => {
		try {
			for (const hook of options.hooks.beforeError) {
				// eslint-disable-next-line no-await-in-loop
				error = await hook(error);
			}

			emitter.emit('error', error);
		} catch (error2) {
			emitter.emit('error', error2);
		}
	};

	const get = async options => {
		const currentUrl = redirectString || requestUrl;

		if (options.protocol !== 'http:' && options.protocol !== 'https:') {
			throw new UnsupportedProtocolError(options);
		}

		decodeURI(currentUrl);

		let fn;
		if (is.function(options.request)) {
			fn = {request: options.request};
		} else {
			fn = options.protocol === 'https:' ? https : http;
		}

		if (agents) {
			const protocolName = options.protocol === 'https:' ? 'https' : 'http';
			options.agent = agents[protocolName] || options.agent;
		}

		/* istanbul ignore next: electron.net is broken */
		if (options.useElectronNet && process.versions.electron) {
			const r = ({x: require})['yx'.slice(1)]; // Trick webpack
			const electron = r('electron');
			fn = electron.net || electron.remote.net;
		}

		if (options.cookieJar) {
			const cookieString = await getCookieString(currentUrl, {});

			if (is.nonEmptyString(cookieString)) {
				options.headers.cookie = cookieString;
			}
		}

		let timings;
		const handleResponse = async response => {
			try {
				/* istanbul ignore next: fixes https://github.com/electron/electron/blob/cbb460d47628a7a146adf4419ed48550a98b2923/lib/browser/api/net.js#L59-L65 */
				if (options.useElectronNet) {
					response = new Proxy(response, {
						get: (target, name) => {
							if (name === 'trailers' || name === 'rawTrailers') {
								return [];
							}

							const value = target[name];
							return is.function(value) ? value.bind(target) : value;
						}
					});
				}

				const {statusCode} = response;
				response.url = currentUrl;
				response.requestUrl = requestUrl;
				response.retryCount = retryCount;
				response.timings = timings;
				response.redirectUrls = redirects;
				response.request = {
					gotOptions: options
				};

				const rawCookies = response.headers['set-cookie'];
				if (options.cookieJar && rawCookies) {
					await Promise.all(rawCookies.map(rawCookie => setCookie(rawCookie, response.url)));
				}

				if (options.followRedirect && 'location' in response.headers) {
					if (allMethodRedirectCodes.has(statusCode) || (getMethodRedirectCodes.has(statusCode) && (options.method === 'GET' || options.method === 'HEAD'))) {
						response.resume(); // We're being redirected, we don't care about the response.

						if (statusCode === 303) {
							// Server responded with "see other", indicating that the resource exists at another location,
							// and the client should request it from that location via GET or HEAD.
							options.method = 'GET';
						}

						if (redirects.length >= 10) {
							throw new MaxRedirectsError(statusCode, redirects, options);
						}

						// Handles invalid URLs. See https://github.com/sindresorhus/got/issues/604
						const redirectBuffer = Buffer.from(response.headers.location, 'binary').toString();
						const redirectURL = new URL(redirectBuffer, currentUrl);
						redirectString = redirectURL.toString();

						redirects.push(redirectString);

						const redirectOptions = {
							...options,
							...urlToOptions(redirectURL)
						};

						for (const hook of options.hooks.beforeRedirect) {
							// eslint-disable-next-line no-await-in-loop
							await hook(redirectOptions);
						}

						emitter.emit('redirect', response, redirectOptions);

						await get(redirectOptions);
						return;
					}
				}

				getResponse(response, options, emitter);
			} catch (error) {
				emitError(error);
			}
		};

		const handleRequest = request => {
			if (shouldAbort) {
				request.once('error', () => {});
				request.abort();
				return;
			}

			currentRequest = request;

			request.once('error', error => {
				if (request.aborted) {
					return;
				}

				if (error instanceof timedOut.TimeoutError) {
					error = new TimeoutError(error, options);
				} else {
					error = new RequestError(error, options);
				}

				if (emitter.retry(error) === false) {
					emitError(error);
				}
			});

			timings = timer(request);

			progress.upload(request, emitter, uploadBodySize);

			if (options.gotTimeout) {
				timedOut(request, options.gotTimeout, options);
			}

			emitter.emit('request', request);

			const uploadComplete = () => {
				request.emit('upload-complete');
			};

			try {
				if (is.nodeStream(options.body)) {
					options.body.once('end', uploadComplete);
					options.body.pipe(request);
					options.body = undefined;
				} else if (options.body) {
					request.end(options.body, uploadComplete);
				} else if (input && (options.method === 'POST' || options.method === 'PUT' || options.method === 'PATCH')) {
					input.once('end', uploadComplete);
					input.pipe(request);
				} else {
					request.end(uploadComplete);
				}
			} catch (error) {
				emitError(new RequestError(error, options));
			}
		};

		if (options.cache) {
			const cacheableRequest = new CacheableRequest(fn.request, options.cache);
			const cacheRequest = cacheableRequest(options, handleResponse);

			cacheRequest.once('error', error => {
				if (error instanceof CacheableRequest.RequestError) {
					emitError(new RequestError(error, options));
				} else {
					emitError(new CacheError(error, options));
				}
			});

			cacheRequest.once('request', handleRequest);
		} else {
			// Catches errors thrown by calling fn.request(...)
			try {
				handleRequest(fn.request(options, handleResponse));
			} catch (error) {
				emitError(new RequestError(error, options));
			}
		}
	};

	emitter.retry = error => {
		let backoff;

		try {
			backoff = options.retry.retries(++retryCount, error);
		} catch (error2) {
			emitError(error2);
			return;
		}

		if (backoff) {
			const retry = async options => {
				try {
					for (const hook of options.hooks.beforeRetry) {
						// eslint-disable-next-line no-await-in-loop
						await hook(options, error, retryCount);
					}

					await get(options);
				} catch (error) {
					emitError(error);
				}
			};

			setTimeout(retry, backoff, {...options, forceRefresh: true});
			return true;
		}

		return false;
	};

	emitter.abort = () => {
		if (currentRequest) {
			currentRequest.once('error', () => {});
			currentRequest.abort();
		} else {
			shouldAbort = true;
		}
	};

	setImmediate(async () => {
		try {
			// Convert buffer to stream to receive upload progress events (#322)
			const {body} = options;
			if (is.buffer(body)) {
				options.body = toReadableStream(body);
				uploadBodySize = body.length;
			} else {
				uploadBodySize = await getBodySize(options);
			}

			if (is.undefined(options.headers['content-length']) && is.undefined(options.headers['transfer-encoding'])) {
				if ((uploadBodySize > 0 || options.method === 'PUT') && !is.null(uploadBodySize)) {
					options.headers['content-length'] = uploadBodySize;
				}
			}

			for (const hook of options.hooks.beforeRequest) {
				// eslint-disable-next-line no-await-in-loop
				await hook(options);
			}

			requestUrl = options.href || (new URL(options.path, urlLib.format(options))).toString();

			await get(options);
		} catch (error) {
			emitError(error);
		}
	});

	return emitter;
};

}).call(this,require('_process'),require("buffer").Buffer,require("timers").setImmediate)
},{"./errors":212,"./get-response":213,"./progress":218,"./utils/get-body-size":221,"./utils/timed-out":223,"./utils/url-to-options":224,"@sindresorhus/is":68,"@szmarczak/http-timer":69,"_process":16,"buffer":4,"cacheable-request":75,"events":7,"http":38,"https":8,"timers":58,"to-readable-stream":528,"url":59,"util":64}],220:[function(require,module,exports){
'use strict';
const is = require('@sindresorhus/is');

module.exports = function deepFreeze(object) {
	for (const [key, value] of Object.entries(object)) {
		if (is.plainObject(value) || is.array(value)) {
			deepFreeze(object[key]);
		}
	}

	return Object.freeze(object);
};

},{"@sindresorhus/is":68}],221:[function(require,module,exports){
(function (Buffer){
'use strict';
const fs = require('fs');
const util = require('util');
const is = require('@sindresorhus/is');
const isFormData = require('./is-form-data');

module.exports = async options => {
	const {body} = options;

	if (options.headers['content-length']) {
		return Number(options.headers['content-length']);
	}

	if (!body && !options.stream) {
		return 0;
	}

	if (is.string(body)) {
		return Buffer.byteLength(body);
	}

	if (isFormData(body)) {
		return util.promisify(body.getLength.bind(body))();
	}

	if (body instanceof fs.ReadStream) {
		const {size} = await util.promisify(fs.stat)(body.path);
		return size;
	}

	return null;
};

}).call(this,require("buffer").Buffer)
},{"./is-form-data":222,"@sindresorhus/is":68,"buffer":4,"fs":1,"util":64}],222:[function(require,module,exports){
'use strict';
const is = require('@sindresorhus/is');

module.exports = body => is.nodeStream(body) && is.function(body.getBoundary);

},{"@sindresorhus/is":68}],223:[function(require,module,exports){
(function (setImmediate,clearImmediate){
'use strict';
const net = require('net');

class TimeoutError extends Error {
	constructor(threshold, event) {
		super(`Timeout awaiting '${event}' for ${threshold}ms`);
		this.name = 'TimeoutError';
		this.code = 'ETIMEDOUT';
		this.event = event;
	}
}

const reentry = Symbol('reentry');

const noop = () => {};

module.exports = (request, delays, options) => {
	/* istanbul ignore next: this makes sure timed-out isn't called twice */
	if (request[reentry]) {
		return;
	}

	request[reentry] = true;

	let stopNewTimeouts = false;

	const addTimeout = (delay, callback, ...args) => {
		// An error had been thrown before. Going further would result in uncaught errors.
		// See https://github.com/sindresorhus/got/issues/631#issuecomment-435675051
		if (stopNewTimeouts) {
			return noop;
		}

		// Event loop order is timers, poll, immediates.
		// The timed event may emit during the current tick poll phase, so
		// defer calling the handler until the poll phase completes.
		let immediate;
		const timeout = setTimeout(() => {
			immediate = setImmediate(callback, delay, ...args);
			/* istanbul ignore next: added in node v9.7.0 */
			if (immediate.unref) {
				immediate.unref();
			}
		}, delay);

		/* istanbul ignore next: in order to support electron renderer */
		if (timeout.unref) {
			timeout.unref();
		}

		const cancel = () => {
			clearTimeout(timeout);
			clearImmediate(immediate);
		};

		cancelers.push(cancel);

		return cancel;
	};

	const {host, hostname} = options;
	const timeoutHandler = (delay, event) => {
		request.emit('error', new TimeoutError(delay, event));
		request.once('error', () => {}); // Ignore the `socket hung up` error made by request.abort()

		request.abort();
	};

	const cancelers = [];
	const cancelTimeouts = () => {
		stopNewTimeouts = true;
		cancelers.forEach(cancelTimeout => cancelTimeout());
	};

	request.once('error', cancelTimeouts);
	request.once('response', response => {
		response.once('end', cancelTimeouts);
	});

	if (delays.request !== undefined) {
		addTimeout(delays.request, timeoutHandler, 'request');
	}

	if (delays.socket !== undefined) {
		const socketTimeoutHandler = () => {
			timeoutHandler(delays.socket, 'socket');
		};

		request.setTimeout(delays.socket, socketTimeoutHandler);

		// `request.setTimeout(0)` causes a memory leak.
		// We can just remove the listener and forget about the timer - it's unreffed.
		// See https://github.com/sindresorhus/got/issues/690
		cancelers.push(() => request.removeListener('timeout', socketTimeoutHandler));
	}

	if (delays.lookup !== undefined && !request.socketPath && !net.isIP(hostname || host)) {
		request.once('socket', socket => {
			/* istanbul ignore next: hard to test */
			if (socket.connecting) {
				const cancelTimeout = addTimeout(delays.lookup, timeoutHandler, 'lookup');
				socket.once('lookup', cancelTimeout);
			}
		});
	}

	if (delays.connect !== undefined) {
		request.once('socket', socket => {
			/* istanbul ignore next: hard to test */
			if (socket.connecting) {
				const timeConnect = () => addTimeout(delays.connect, timeoutHandler, 'connect');

				if (request.socketPath || net.isIP(hostname || host)) {
					socket.once('connect', timeConnect());
				} else {
					socket.once('lookup', error => {
						if (error === null) {
							socket.once('connect', timeConnect());
						}
					});
				}
			}
		});
	}

	if (delays.secureConnect !== undefined && options.protocol === 'https:') {
		request.once('socket', socket => {
			/* istanbul ignore next: hard to test */
			if (socket.connecting) {
				socket.once('connect', () => {
					const cancelTimeout = addTimeout(delays.secureConnect, timeoutHandler, 'secureConnect');
					socket.once('secureConnect', cancelTimeout);
				});
			}
		});
	}

	if (delays.send !== undefined) {
		request.once('socket', socket => {
			const timeRequest = () => addTimeout(delays.send, timeoutHandler, 'send');
			/* istanbul ignore next: hard to test */
			if (socket.connecting) {
				socket.once('connect', () => {
					request.once('upload-complete', timeRequest());
				});
			} else {
				request.once('upload-complete', timeRequest());
			}
		});
	}

	if (delays.response !== undefined) {
		request.once('upload-complete', () => {
			const cancelTimeout = addTimeout(delays.response, timeoutHandler, 'response');
			request.once('response', cancelTimeout);
		});
	}
};

module.exports.TimeoutError = TimeoutError;

}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"net":1,"timers":58}],224:[function(require,module,exports){
'use strict';
const is = require('@sindresorhus/is');

module.exports = url => {
	const options = {
		protocol: url.protocol,
		hostname: url.hostname.startsWith('[') ? url.hostname.slice(1, -1) : url.hostname,
		hash: url.hash,
		search: url.search,
		pathname: url.pathname,
		href: url.href
	};

	if (is.string(url.port) && url.port.length > 0) {
		options.port = Number(url.port);
	}

	if (url.username || url.password) {
		options.auth = `${url.username}:${url.password}`;
	}

	options.path = is.null(url.search) ? url.pathname : `${url.pathname}${url.search}`;

	return options;
};

},{"@sindresorhus/is":68}],225:[function(require,module,exports){
/*!
 * has-values <https://github.com/jonschlinkert/has-values>
 *
 * Copyright (c) 2014-2018, Jon Schlinkert.
 * Released under the MIT License.
 */

'use strict';

const typeOf = require('kind-of');

module.exports = function has(val) {
  switch (typeOf(val)) {
    case 'boolean':
    case 'date':
    case 'function':
    case 'null':
    case 'number':
      return true;
    case 'undefined':
      return false;
    case 'regexp':
      return val.source !== '(?:)' && val.source !== '';
    case 'buffer':
      return val.toString() !== '';
    case 'error':
      return val.message !== '';
    case 'string':
    case 'arguments':
      return val.length !== 0;
    case 'file':
    case 'map':
    case 'set':
      return val.size !== 0;
    case 'array':
    case 'object':
      for (const key of Object.keys(val)) {
        if (has(val[key])) {
          return true;
        }
      }
      return false;

    // everything else
    default: {
      return true;
    }
  }
};

},{"kind-of":250}],226:[function(require,module,exports){
module.exports = CollectingHandler;

function CollectingHandler(cbs) {
    this._cbs = cbs || {};
    this.events = [];
}

var EVENTS = require("./").EVENTS;
Object.keys(EVENTS).forEach(function(name) {
    if (EVENTS[name] === 0) {
        name = "on" + name;
        CollectingHandler.prototype[name] = function() {
            this.events.push([name]);
            if (this._cbs[name]) this._cbs[name]();
        };
    } else if (EVENTS[name] === 1) {
        name = "on" + name;
        CollectingHandler.prototype[name] = function(a) {
            this.events.push([name, a]);
            if (this._cbs[name]) this._cbs[name](a);
        };
    } else if (EVENTS[name] === 2) {
        name = "on" + name;
        CollectingHandler.prototype[name] = function(a, b) {
            this.events.push([name, a, b]);
            if (this._cbs[name]) this._cbs[name](a, b);
        };
    } else {
        throw Error("wrong number of arguments");
    }
});

CollectingHandler.prototype.onreset = function() {
    this.events = [];
    if (this._cbs.onreset) this._cbs.onreset();
};

CollectingHandler.prototype.restart = function() {
    if (this._cbs.onreset) this._cbs.onreset();

    for (var i = 0, len = this.events.length; i < len; i++) {
        if (this._cbs[this.events[i][0]]) {
            var num = this.events[i].length;

            if (num === 1) {
                this._cbs[this.events[i][0]]();
            } else if (num === 2) {
                this._cbs[this.events[i][0]](this.events[i][1]);
            } else {
                this._cbs[this.events[i][0]](
                    this.events[i][1],
                    this.events[i][2]
                );
            }
        }
    }
};

},{"./":233}],227:[function(require,module,exports){
var DomHandler = require("domhandler");
var DomUtils = require("domutils");

//TODO: make this a streamable handler
function FeedHandler(callback, options) {
    this.init(callback, options);
}

require("inherits")(FeedHandler, DomHandler);

FeedHandler.prototype.init = DomHandler;

function getElements(what, where) {
    return DomUtils.getElementsByTagName(what, where, true);
}
function getOneElement(what, where) {
    return DomUtils.getElementsByTagName(what, where, true, 1)[0];
}
function fetch(what, where, recurse) {
    return DomUtils.getText(
        DomUtils.getElementsByTagName(what, where, recurse, 1)
    ).trim();
}

function addConditionally(obj, prop, what, where, recurse) {
    var tmp = fetch(what, where, recurse);
    if (tmp) obj[prop] = tmp;
}

var isValidFeed = function(value) {
    return value === "rss" || value === "feed" || value === "rdf:RDF";
};

FeedHandler.prototype.onend = function() {
    var feed = {},
        feedRoot = getOneElement(isValidFeed, this.dom),
        tmp,
        childs;

    if (feedRoot) {
        if (feedRoot.name === "feed") {
            childs = feedRoot.children;

            feed.type = "atom";
            addConditionally(feed, "id", "id", childs);
            addConditionally(feed, "title", "title", childs);
            if (
                (tmp = getOneElement("link", childs)) &&
                (tmp = tmp.attribs) &&
                (tmp = tmp.href)
            )
                feed.link = tmp;
            addConditionally(feed, "description", "subtitle", childs);
            if ((tmp = fetch("updated", childs))) feed.updated = new Date(tmp);
            addConditionally(feed, "author", "email", childs, true);

            feed.items = getElements("entry", childs).map(function(item) {
                var entry = {},
                    tmp;

                item = item.children;

                addConditionally(entry, "id", "id", item);
                addConditionally(entry, "title", "title", item);
                if (
                    (tmp = getOneElement("link", item)) &&
                    (tmp = tmp.attribs) &&
                    (tmp = tmp.href)
                )
                    entry.link = tmp;
                if ((tmp = fetch("summary", item) || fetch("content", item)))
                    entry.description = tmp;
                if ((tmp = fetch("updated", item)))
                    entry.pubDate = new Date(tmp);
                return entry;
            });
        } else {
            childs = getOneElement("channel", feedRoot.children).children;

            feed.type = feedRoot.name.substr(0, 3);
            feed.id = "";
            addConditionally(feed, "title", "title", childs);
            addConditionally(feed, "link", "link", childs);
            addConditionally(feed, "description", "description", childs);
            if ((tmp = fetch("lastBuildDate", childs)))
                feed.updated = new Date(tmp);
            addConditionally(feed, "author", "managingEditor", childs, true);

            feed.items = getElements("item", feedRoot.children).map(function(
                item
            ) {
                var entry = {},
                    tmp;

                item = item.children;

                addConditionally(entry, "id", "guid", item);
                addConditionally(entry, "title", "title", item);
                addConditionally(entry, "link", "link", item);
                addConditionally(entry, "description", "description", item);
                if ((tmp = fetch("pubDate", item)))
                    entry.pubDate = new Date(tmp);
                return entry;
            });
        }
    }
    this.dom = feed;
    DomHandler.prototype._handleCallback.call(
        this,
        feedRoot ? null : Error("couldn't find root of feed")
    );
};

module.exports = FeedHandler;

},{"domhandler":185,"domutils":188,"inherits":241}],228:[function(require,module,exports){
var Tokenizer = require("./Tokenizer.js");

/*
	Options:

	xmlMode: Disables the special behavior for script/style tags (false by default)
	lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
	lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
*/

/*
	Callbacks:

	oncdataend,
	oncdatastart,
	onclosetag,
	oncomment,
	oncommentend,
	onerror,
	onopentag,
	onprocessinginstruction,
	onreset,
	ontext
*/

var formTags = {
    input: true,
    option: true,
    optgroup: true,
    select: true,
    button: true,
    datalist: true,
    textarea: true
};

var openImpliesClose = {
    tr: { tr: true, th: true, td: true },
    th: { th: true },
    td: { thead: true, th: true, td: true },
    body: { head: true, link: true, script: true },
    li: { li: true },
    p: { p: true },
    h1: { p: true },
    h2: { p: true },
    h3: { p: true },
    h4: { p: true },
    h5: { p: true },
    h6: { p: true },
    select: formTags,
    input: formTags,
    output: formTags,
    button: formTags,
    datalist: formTags,
    textarea: formTags,
    option: { option: true },
    optgroup: { optgroup: true }
};

var voidElements = {
    __proto__: null,
    area: true,
    base: true,
    basefont: true,
    br: true,
    col: true,
    command: true,
    embed: true,
    frame: true,
    hr: true,
    img: true,
    input: true,
    isindex: true,
    keygen: true,
    link: true,
    meta: true,
    param: true,
    source: true,
    track: true,
    wbr: true
};

var foreignContextElements = {
    __proto__: null,
    math: true,
    svg: true
};
var htmlIntegrationElements = {
    __proto__: null,
    mi: true,
    mo: true,
    mn: true,
    ms: true,
    mtext: true,
    "annotation-xml": true,
    foreignObject: true,
    desc: true,
    title: true
};

var re_nameEnd = /\s|\//;

function Parser(cbs, options) {
    this._options = options || {};
    this._cbs = cbs || {};

    this._tagname = "";
    this._attribname = "";
    this._attribvalue = "";
    this._attribs = null;
    this._stack = [];
    this._foreignContext = [];

    this.startIndex = 0;
    this.endIndex = null;

    this._lowerCaseTagNames =
        "lowerCaseTags" in this._options
            ? !!this._options.lowerCaseTags
            : !this._options.xmlMode;
    this._lowerCaseAttributeNames =
        "lowerCaseAttributeNames" in this._options
            ? !!this._options.lowerCaseAttributeNames
            : !this._options.xmlMode;

    if (this._options.Tokenizer) {
        Tokenizer = this._options.Tokenizer;
    }
    this._tokenizer = new Tokenizer(this._options, this);

    if (this._cbs.onparserinit) this._cbs.onparserinit(this);
}

require("inherits")(Parser, require("events").EventEmitter);

Parser.prototype._updatePosition = function(initialOffset) {
    if (this.endIndex === null) {
        if (this._tokenizer._sectionStart <= initialOffset) {
            this.startIndex = 0;
        } else {
            this.startIndex = this._tokenizer._sectionStart - initialOffset;
        }
    } else this.startIndex = this.endIndex + 1;
    this.endIndex = this._tokenizer.getAbsoluteIndex();
};

//Tokenizer event handlers
Parser.prototype.ontext = function(data) {
    this._updatePosition(1);
    this.endIndex--;

    if (this._cbs.ontext) this._cbs.ontext(data);
};

Parser.prototype.onopentagname = function(name) {
    if (this._lowerCaseTagNames) {
        name = name.toLowerCase();
    }

    this._tagname = name;

    if (!this._options.xmlMode && name in openImpliesClose) {
        for (
            var el;
            (el = this._stack[this._stack.length - 1]) in
            openImpliesClose[name];
            this.onclosetag(el)
        );
    }

    if (this._options.xmlMode || !(name in voidElements)) {
        this._stack.push(name);
        if (name in foreignContextElements) this._foreignContext.push(true);
        else if (name in htmlIntegrationElements)
            this._foreignContext.push(false);
    }

    if (this._cbs.onopentagname) this._cbs.onopentagname(name);
    if (this._cbs.onopentag) this._attribs = {};
};

Parser.prototype.onopentagend = function() {
    this._updatePosition(1);

    if (this._attribs) {
        if (this._cbs.onopentag)
            this._cbs.onopentag(this._tagname, this._attribs);
        this._attribs = null;
    }

    if (
        !this._options.xmlMode &&
        this._cbs.onclosetag &&
        this._tagname in voidElements
    ) {
        this._cbs.onclosetag(this._tagname);
    }

    this._tagname = "";
};

Parser.prototype.onclosetag = function(name) {
    this._updatePosition(1);

    if (this._lowerCaseTagNames) {
        name = name.toLowerCase();
    }
    
    if (name in foreignContextElements || name in htmlIntegrationElements) {
        this._foreignContext.pop();
    }

    if (
        this._stack.length &&
        (!(name in voidElements) || this._options.xmlMode)
    ) {
        var pos = this._stack.lastIndexOf(name);
        if (pos !== -1) {
            if (this._cbs.onclosetag) {
                pos = this._stack.length - pos;
                while (pos--) this._cbs.onclosetag(this._stack.pop());
            } else this._stack.length = pos;
        } else if (name === "p" && !this._options.xmlMode) {
            this.onopentagname(name);
            this._closeCurrentTag();
        }
    } else if (!this._options.xmlMode && (name === "br" || name === "p")) {
        this.onopentagname(name);
        this._closeCurrentTag();
    }
};

Parser.prototype.onselfclosingtag = function() {
    if (
        this._options.xmlMode ||
        this._options.recognizeSelfClosing ||
        this._foreignContext[this._foreignContext.length - 1]
    ) {
        this._closeCurrentTag();
    } else {
        this.onopentagend();
    }
};

Parser.prototype._closeCurrentTag = function() {
    var name = this._tagname;

    this.onopentagend();

    //self-closing tags will be on the top of the stack
    //(cheaper check than in onclosetag)
    if (this._stack[this._stack.length - 1] === name) {
        if (this._cbs.onclosetag) {
            this._cbs.onclosetag(name);
        }
        this._stack.pop();
        
    }
};

Parser.prototype.onattribname = function(name) {
    if (this._lowerCaseAttributeNames) {
        name = name.toLowerCase();
    }
    this._attribname = name;
};

Parser.prototype.onattribdata = function(value) {
    this._attribvalue += value;
};

Parser.prototype.onattribend = function() {
    if (this._cbs.onattribute)
        this._cbs.onattribute(this._attribname, this._attribvalue);
    if (
        this._attribs &&
        !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)
    ) {
        this._attribs[this._attribname] = this._attribvalue;
    }
    this._attribname = "";
    this._attribvalue = "";
};

Parser.prototype._getInstructionName = function(value) {
    var idx = value.search(re_nameEnd),
        name = idx < 0 ? value : value.substr(0, idx);

    if (this._lowerCaseTagNames) {
        name = name.toLowerCase();
    }

    return name;
};

Parser.prototype.ondeclaration = function(value) {
    if (this._cbs.onprocessinginstruction) {
        var name = this._getInstructionName(value);
        this._cbs.onprocessinginstruction("!" + name, "!" + value);
    }
};

Parser.prototype.onprocessinginstruction = function(value) {
    if (this._cbs.onprocessinginstruction) {
        var name = this._getInstructionName(value);
        this._cbs.onprocessinginstruction("?" + name, "?" + value);
    }
};

Parser.prototype.oncomment = function(value) {
    this._updatePosition(4);

    if (this._cbs.oncomment) this._cbs.oncomment(value);
    if (this._cbs.oncommentend) this._cbs.oncommentend();
};

Parser.prototype.oncdata = function(value) {
    this._updatePosition(1);

    if (this._options.xmlMode || this._options.recognizeCDATA) {
        if (this._cbs.oncdatastart) this._cbs.oncdatastart();
        if (this._cbs.ontext) this._cbs.ontext(value);
        if (this._cbs.oncdataend) this._cbs.oncdataend();
    } else {
        this.oncomment("[CDATA[" + value + "]]");
    }
};

Parser.prototype.onerror = function(err) {
    if (this._cbs.onerror) this._cbs.onerror(err);
};

Parser.prototype.onend = function() {
    if (this._cbs.onclosetag) {
        for (
            var i = this._stack.length;
            i > 0;
            this._cbs.onclosetag(this._stack[--i])
        );
    }
    if (this._cbs.onend) this._cbs.onend();
};

//Resets the parser to a blank state, ready to parse a new HTML document
Parser.prototype.reset = function() {
    if (this._cbs.onreset) this._cbs.onreset();
    this._tokenizer.reset();

    this._tagname = "";
    this._attribname = "";
    this._attribs = null;
    this._stack = [];

    if (this._cbs.onparserinit) this._cbs.onparserinit(this);
};

//Parses a complete HTML document and pushes it to the handler
Parser.prototype.parseComplete = function(data) {
    this.reset();
    this.end(data);
};

Parser.prototype.write = function(chunk) {
    this._tokenizer.write(chunk);
};

Parser.prototype.end = function(chunk) {
    this._tokenizer.end(chunk);
};

Parser.prototype.pause = function() {
    this._tokenizer.pause();
};

Parser.prototype.resume = function() {
    this._tokenizer.resume();
};

//alias for backwards compat
Parser.prototype.parseChunk = Parser.prototype.write;
Parser.prototype.done = Parser.prototype.end;

module.exports = Parser;

},{"./Tokenizer.js":231,"events":7,"inherits":241}],229:[function(require,module,exports){
module.exports = ProxyHandler;

function ProxyHandler(cbs) {
    this._cbs = cbs || {};
}

var EVENTS = require("./").EVENTS;
Object.keys(EVENTS).forEach(function(name) {
    if (EVENTS[name] === 0) {
        name = "on" + name;
        ProxyHandler.prototype[name] = function() {
            if (this._cbs[name]) this._cbs[name]();
        };
    } else if (EVENTS[name] === 1) {
        name = "on" + name;
        ProxyHandler.prototype[name] = function(a) {
            if (this._cbs[name]) this._cbs[name](a);
        };
    } else if (EVENTS[name] === 2) {
        name = "on" + name;
        ProxyHandler.prototype[name] = function(a, b) {
            if (this._cbs[name]) this._cbs[name](a, b);
        };
    } else {
        throw Error("wrong number of arguments");
    }
});

},{"./":233}],230:[function(require,module,exports){
module.exports = Stream;

var Parser = require("./WritableStream.js");

function Stream(options) {
    Parser.call(this, new Cbs(this), options);
}

require("inherits")(Stream, Parser);

Stream.prototype.readable = true;

function Cbs(scope) {
    this.scope = scope;
}

var EVENTS = require("../").EVENTS;

Object.keys(EVENTS).forEach(function(name) {
    if (EVENTS[name] === 0) {
        Cbs.prototype["on" + name] = function() {
            this.scope.emit(name);
        };
    } else if (EVENTS[name] === 1) {
        Cbs.prototype["on" + name] = function(a) {
            this.scope.emit(name, a);
        };
    } else if (EVENTS[name] === 2) {
        Cbs.prototype["on" + name] = function(a, b) {
            this.scope.emit(name, a, b);
        };
    } else {
        throw Error("wrong number of arguments!");
    }
});

},{"../":233,"./WritableStream.js":232,"inherits":241}],231:[function(require,module,exports){
module.exports = Tokenizer;

var decodeCodePoint = require("entities/lib/decode_codepoint.js");
var entityMap = require("entities/maps/entities.json");
var legacyMap = require("entities/maps/legacy.json");
var xmlMap = require("entities/maps/xml.json");

var i = 0;

var TEXT = i++;
var BEFORE_TAG_NAME = i++; //after <
var IN_TAG_NAME = i++;
var IN_SELF_CLOSING_TAG = i++;
var BEFORE_CLOSING_TAG_NAME = i++;
var IN_CLOSING_TAG_NAME = i++;
var AFTER_CLOSING_TAG_NAME = i++;

//attributes
var BEFORE_ATTRIBUTE_NAME = i++;
var IN_ATTRIBUTE_NAME = i++;
var AFTER_ATTRIBUTE_NAME = i++;
var BEFORE_ATTRIBUTE_VALUE = i++;
var IN_ATTRIBUTE_VALUE_DQ = i++; // "
var IN_ATTRIBUTE_VALUE_SQ = i++; // '
var IN_ATTRIBUTE_VALUE_NQ = i++;

//declarations
var BEFORE_DECLARATION = i++; // !
var IN_DECLARATION = i++;

//processing instructions
var IN_PROCESSING_INSTRUCTION = i++; // ?

//comments
var BEFORE_COMMENT = i++;
var IN_COMMENT = i++;
var AFTER_COMMENT_1 = i++;
var AFTER_COMMENT_2 = i++;

//cdata
var BEFORE_CDATA_1 = i++; // [
var BEFORE_CDATA_2 = i++; // C
var BEFORE_CDATA_3 = i++; // D
var BEFORE_CDATA_4 = i++; // A
var BEFORE_CDATA_5 = i++; // T
var BEFORE_CDATA_6 = i++; // A
var IN_CDATA = i++; // [
var AFTER_CDATA_1 = i++; // ]
var AFTER_CDATA_2 = i++; // ]

//special tags
var BEFORE_SPECIAL = i++; //S
var BEFORE_SPECIAL_END = i++; //S

var BEFORE_SCRIPT_1 = i++; //C
var BEFORE_SCRIPT_2 = i++; //R
var BEFORE_SCRIPT_3 = i++; //I
var BEFORE_SCRIPT_4 = i++; //P
var BEFORE_SCRIPT_5 = i++; //T
var AFTER_SCRIPT_1 = i++; //C
var AFTER_SCRIPT_2 = i++; //R
var AFTER_SCRIPT_3 = i++; //I
var AFTER_SCRIPT_4 = i++; //P
var AFTER_SCRIPT_5 = i++; //T

var BEFORE_STYLE_1 = i++; //T
var BEFORE_STYLE_2 = i++; //Y
var BEFORE_STYLE_3 = i++; //L
var BEFORE_STYLE_4 = i++; //E
var AFTER_STYLE_1 = i++; //T
var AFTER_STYLE_2 = i++; //Y
var AFTER_STYLE_3 = i++; //L
var AFTER_STYLE_4 = i++; //E

var BEFORE_ENTITY = i++; //&
var BEFORE_NUMERIC_ENTITY = i++; //#
var IN_NAMED_ENTITY = i++;
var IN_NUMERIC_ENTITY = i++;
var IN_HEX_ENTITY = i++; //X

var j = 0;

var SPECIAL_NONE = j++;
var SPECIAL_SCRIPT = j++;
var SPECIAL_STYLE = j++;

function whitespace(c) {
    return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function ifElseState(upper, SUCCESS, FAILURE) {
    var lower = upper.toLowerCase();

    if (upper === lower) {
        return function(c) {
            if (c === lower) {
                this._state = SUCCESS;
            } else {
                this._state = FAILURE;
                this._index--;
            }
        };
    } else {
        return function(c) {
            if (c === lower || c === upper) {
                this._state = SUCCESS;
            } else {
                this._state = FAILURE;
                this._index--;
            }
        };
    }
}

function consumeSpecialNameChar(upper, NEXT_STATE) {
    var lower = upper.toLowerCase();

    return function(c) {
        if (c === lower || c === upper) {
            this._state = NEXT_STATE;
        } else {
            this._state = IN_TAG_NAME;
            this._index--; //consume the token again
        }
    };
}

function Tokenizer(options, cbs) {
    this._state = TEXT;
    this._buffer = "";
    this._sectionStart = 0;
    this._index = 0;
    this._bufferOffset = 0; //chars removed from _buffer
    this._baseState = TEXT;
    this._special = SPECIAL_NONE;
    this._cbs = cbs;
    this._running = true;
    this._ended = false;
    this._xmlMode = !!(options && options.xmlMode);
    this._decodeEntities = !!(options && options.decodeEntities);
}

Tokenizer.prototype._stateText = function(c) {
    if (c === "<") {
        if (this._index > this._sectionStart) {
            this._cbs.ontext(this._getSection());
        }
        this._state = BEFORE_TAG_NAME;
        this._sectionStart = this._index;
    } else if (
        this._decodeEntities &&
        this._special === SPECIAL_NONE &&
        c === "&"
    ) {
        if (this._index > this._sectionStart) {
            this._cbs.ontext(this._getSection());
        }
        this._baseState = TEXT;
        this._state = BEFORE_ENTITY;
        this._sectionStart = this._index;
    }
};

Tokenizer.prototype._stateBeforeTagName = function(c) {
    if (c === "/") {
        this._state = BEFORE_CLOSING_TAG_NAME;
    } else if (c === "<") {
        this._cbs.ontext(this._getSection());
        this._sectionStart = this._index;
    } else if (c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
        this._state = TEXT;
    } else if (c === "!") {
        this._state = BEFORE_DECLARATION;
        this._sectionStart = this._index + 1;
    } else if (c === "?") {
        this._state = IN_PROCESSING_INSTRUCTION;
        this._sectionStart = this._index + 1;
    } else {
        this._state =
            !this._xmlMode && (c === "s" || c === "S")
                ? BEFORE_SPECIAL
                : IN_TAG_NAME;
        this._sectionStart = this._index;
    }
};

Tokenizer.prototype._stateInTagName = function(c) {
    if (c === "/" || c === ">" || whitespace(c)) {
        this._emitToken("onopentagname");
        this._state = BEFORE_ATTRIBUTE_NAME;
        this._index--;
    }
};

Tokenizer.prototype._stateBeforeCloseingTagName = function(c) {
    if (whitespace(c));
    else if (c === ">") {
        this._state = TEXT;
    } else if (this._special !== SPECIAL_NONE) {
        if (c === "s" || c === "S") {
            this._state = BEFORE_SPECIAL_END;
        } else {
            this._state = TEXT;
            this._index--;
        }
    } else {
        this._state = IN_CLOSING_TAG_NAME;
        this._sectionStart = this._index;
    }
};

Tokenizer.prototype._stateInCloseingTagName = function(c) {
    if (c === ">" || whitespace(c)) {
        this._emitToken("onclosetag");
        this._state = AFTER_CLOSING_TAG_NAME;
        this._index--;
    }
};

Tokenizer.prototype._stateAfterCloseingTagName = function(c) {
    //skip everything until ">"
    if (c === ">") {
        this._state = TEXT;
        this._sectionStart = this._index + 1;
    }
};

Tokenizer.prototype._stateBeforeAttributeName = function(c) {
    if (c === ">") {
        this._cbs.onopentagend();
        this._state = TEXT;
        this._sectionStart = this._index + 1;
    } else if (c === "/") {
        this._state = IN_SELF_CLOSING_TAG;
    } else if (!whitespace(c)) {
        this._state = IN_ATTRIBUTE_NAME;
        this._sectionStart = this._index;
    }
};

Tokenizer.prototype._stateInSelfClosingTag = function(c) {
    if (c === ">") {
        this._cbs.onselfclosingtag();
        this._state = TEXT;
        this._sectionStart = this._index + 1;
    } else if (!whitespace(c)) {
        this._state = BEFORE_ATTRIBUTE_NAME;
        this._index--;
    }
};

Tokenizer.prototype._stateInAttributeName = function(c) {
    if (c === "=" || c === "/" || c === ">" || whitespace(c)) {
        this._cbs.onattribname(this._getSection());
        this._sectionStart = -1;
        this._state = AFTER_ATTRIBUTE_NAME;
        this._index--;
    }
};

Tokenizer.prototype._stateAfterAttributeName = function(c) {
    if (c === "=") {
        this._state = BEFORE_ATTRIBUTE_VALUE;
    } else if (c === "/" || c === ">") {
        this._cbs.onattribend();
        this._state = BEFORE_ATTRIBUTE_NAME;
        this._index--;
    } else if (!whitespace(c)) {
        this._cbs.onattribend();
        this._state = IN_ATTRIBUTE_NAME;
        this._sectionStart = this._index;
    }
};

Tokenizer.prototype._stateBeforeAttributeValue = function(c) {
    if (c === '"') {
        this._state = IN_ATTRIBUTE_VALUE_DQ;
        this._sectionStart = this._index + 1;
    } else if (c === "'") {
        this._state = IN_ATTRIBUTE_VALUE_SQ;
        this._sectionStart = this._index + 1;
    } else if (!whitespace(c)) {
        this._state = IN_ATTRIBUTE_VALUE_NQ;
        this._sectionStart = this._index;
        this._index--; //reconsume token
    }
};

Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c) {
    if (c === '"') {
        this._emitToken("onattribdata");
        this._cbs.onattribend();
        this._state = BEFORE_ATTRIBUTE_NAME;
    } else if (this._decodeEntities && c === "&") {
        this._emitToken("onattribdata");
        this._baseState = this._state;
        this._state = BEFORE_ENTITY;
        this._sectionStart = this._index;
    }
};

Tokenizer.prototype._stateInAttributeValueSingleQuotes = function(c) {
    if (c === "'") {
        this._emitToken("onattribdata");
        this._cbs.onattribend();
        this._state = BEFORE_ATTRIBUTE_NAME;
    } else if (this._decodeEntities && c === "&") {
        this._emitToken("onattribdata");
        this._baseState = this._state;
        this._state = BEFORE_ENTITY;
        this._sectionStart = this._index;
    }
};

Tokenizer.prototype._stateInAttributeValueNoQuotes = function(c) {
    if (whitespace(c) || c === ">") {
        this._emitToken("onattribdata");
        this._cbs.onattribend();
        this._state = BEFORE_ATTRIBUTE_NAME;
        this._index--;
    } else if (this._decodeEntities && c === "&") {
        this._emitToken("onattribdata");
        this._baseState = this._state;
        this._state = BEFORE_ENTITY;
        this._sectionStart = this._index;
    }
};

Tokenizer.prototype._stateBeforeDeclaration = function(c) {
    this._state =
        c === "["
            ? BEFORE_CDATA_1
            : c === "-"
                ? BEFORE_COMMENT
                : IN_DECLARATION;
};

Tokenizer.prototype._stateInDeclaration = function(c) {
    if (c === ">") {
        this._cbs.ondeclaration(this._getSection());
        this._state = TEXT;
        this._sectionStart = this._index + 1;
    }
};

Tokenizer.prototype._stateInProcessingInstruction = function(c) {
    if (c === ">") {
        this._cbs.onprocessinginstruction(this._getSection());
        this._state = TEXT;
        this._sectionStart = this._index + 1;
    }
};

Tokenizer.prototype._stateBeforeComment = function(c) {
    if (c === "-") {
        this._state = IN_COMMENT;
        this._sectionStart = this._index + 1;
    } else {
        this._state = IN_DECLARATION;
    }
};

Tokenizer.prototype._stateInComment = function(c) {
    if (c === "-") this._state = AFTER_COMMENT_1;
};

Tokenizer.prototype._stateAfterComment1 = function(c) {
    if (c === "-") {
        this._state = AFTER_COMMENT_2;
    } else {
        this._state = IN_COMMENT;
    }
};

Tokenizer.prototype._stateAfterComment2 = function(c) {
    if (c === ">") {
        //remove 2 trailing chars
        this._cbs.oncomment(
            this._buffer.substring(this._sectionStart, this._index - 2)
        );
        this._state = TEXT;
        this._sectionStart = this._index + 1;
    } else if (c !== "-") {
        this._state = IN_COMMENT;
    }
    // else: stay in AFTER_COMMENT_2 (`--->`)
};

Tokenizer.prototype._stateBeforeCdata1 = ifElseState(
    "C",
    BEFORE_CDATA_2,
    IN_DECLARATION
);
Tokenizer.prototype._stateBeforeCdata2 = ifElseState(
    "D",
    BEFORE_CDATA_3,
    IN_DECLARATION
);
Tokenizer.prototype._stateBeforeCdata3 = ifElseState(
    "A",
    BEFORE_CDATA_4,
    IN_DECLARATION
);
Tokenizer.prototype._stateBeforeCdata4 = ifElseState(
    "T",
    BEFORE_CDATA_5,
    IN_DECLARATION
);
Tokenizer.prototype._stateBeforeCdata5 = ifElseState(
    "A",
    BEFORE_CDATA_6,
    IN_DECLARATION
);

Tokenizer.prototype._stateBeforeCdata6 = function(c) {
    if (c === "[") {
        this._state = IN_CDATA;
        this._sectionStart = this._index + 1;
    } else {
        this._state = IN_DECLARATION;
        this._index--;
    }
};

Tokenizer.prototype._stateInCdata = function(c) {
    if (c === "]") this._state = AFTER_CDATA_1;
};

Tokenizer.prototype._stateAfterCdata1 = function(c) {
    if (c === "]") this._state = AFTER_CDATA_2;
    else this._state = IN_CDATA;
};

Tokenizer.prototype._stateAfterCdata2 = function(c) {
    if (c === ">") {
        //remove 2 trailing chars
        this._cbs.oncdata(
            this._buffer.substring(this._sectionStart, this._index - 2)
        );
        this._state = TEXT;
        this._sectionStart = this._index + 1;
    } else if (c !== "]") {
        this._state = IN_CDATA;
    }
    //else: stay in AFTER_CDATA_2 (`]]]>`)
};

Tokenizer.prototype._stateBeforeSpecial = function(c) {
    if (c === "c" || c === "C") {
        this._state = BEFORE_SCRIPT_1;
    } else if (c === "t" || c === "T") {
        this._state = BEFORE_STYLE_1;
    } else {
        this._state = IN_TAG_NAME;
        this._index--; //consume the token again
    }
};

Tokenizer.prototype._stateBeforeSpecialEnd = function(c) {
    if (this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")) {
        this._state = AFTER_SCRIPT_1;
    } else if (this._special === SPECIAL_STYLE && (c === "t" || c === "T")) {
        this._state = AFTER_STYLE_1;
    } else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar(
    "R",
    BEFORE_SCRIPT_2
);
Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar(
    "I",
    BEFORE_SCRIPT_3
);
Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar(
    "P",
    BEFORE_SCRIPT_4
);
Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar(
    "T",
    BEFORE_SCRIPT_5
);

Tokenizer.prototype._stateBeforeScript5 = function(c) {
    if (c === "/" || c === ">" || whitespace(c)) {
        this._special = SPECIAL_SCRIPT;
    }
    this._state = IN_TAG_NAME;
    this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);

Tokenizer.prototype._stateAfterScript5 = function(c) {
    if (c === ">" || whitespace(c)) {
        this._special = SPECIAL_NONE;
        this._state = IN_CLOSING_TAG_NAME;
        this._sectionStart = this._index - 6;
        this._index--; //reconsume the token
    } else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar(
    "Y",
    BEFORE_STYLE_2
);
Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar(
    "L",
    BEFORE_STYLE_3
);
Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar(
    "E",
    BEFORE_STYLE_4
);

Tokenizer.prototype._stateBeforeStyle4 = function(c) {
    if (c === "/" || c === ">" || whitespace(c)) {
        this._special = SPECIAL_STYLE;
    }
    this._state = IN_TAG_NAME;
    this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);

Tokenizer.prototype._stateAfterStyle4 = function(c) {
    if (c === ">" || whitespace(c)) {
        this._special = SPECIAL_NONE;
        this._state = IN_CLOSING_TAG_NAME;
        this._sectionStart = this._index - 5;
        this._index--; //reconsume the token
    } else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeEntity = ifElseState(
    "#",
    BEFORE_NUMERIC_ENTITY,
    IN_NAMED_ENTITY
);
Tokenizer.prototype._stateBeforeNumericEntity = ifElseState(
    "X",
    IN_HEX_ENTITY,
    IN_NUMERIC_ENTITY
);

//for entities terminated with a semicolon
Tokenizer.prototype._parseNamedEntityStrict = function() {
    //offset = 1
    if (this._sectionStart + 1 < this._index) {
        var entity = this._buffer.substring(
                this._sectionStart + 1,
                this._index
            ),
            map = this._xmlMode ? xmlMap : entityMap;

        if (map.hasOwnProperty(entity)) {
            this._emitPartial(map[entity]);
            this._sectionStart = this._index + 1;
        }
    }
};

//parses legacy entities (without trailing semicolon)
Tokenizer.prototype._parseLegacyEntity = function() {
    var start = this._sectionStart + 1,
        limit = this._index - start;

    if (limit > 6) limit = 6; //the max length of legacy entities is 6

    while (limit >= 2) {
        //the min length of legacy entities is 2
        var entity = this._buffer.substr(start, limit);

        if (legacyMap.hasOwnProperty(entity)) {
            this._emitPartial(legacyMap[entity]);
            this._sectionStart += limit + 1;
            return;
        } else {
            limit--;
        }
    }
};

Tokenizer.prototype._stateInNamedEntity = function(c) {
    if (c === ";") {
        this._parseNamedEntityStrict();
        if (this._sectionStart + 1 < this._index && !this._xmlMode) {
            this._parseLegacyEntity();
        }
        this._state = this._baseState;
    } else if (
        (c < "a" || c > "z") &&
        (c < "A" || c > "Z") &&
        (c < "0" || c > "9")
    ) {
        if (this._xmlMode);
        else if (this._sectionStart + 1 === this._index);
        else if (this._baseState !== TEXT) {
            if (c !== "=") {
                this._parseNamedEntityStrict();
            }
        } else {
            this._parseLegacyEntity();
        }

        this._state = this._baseState;
        this._index--;
    }
};

Tokenizer.prototype._decodeNumericEntity = function(offset, base) {
    var sectionStart = this._sectionStart + offset;

    if (sectionStart !== this._index) {
        //parse entity
        var entity = this._buffer.substring(sectionStart, this._index);
        var parsed = parseInt(entity, base);

        this._emitPartial(decodeCodePoint(parsed));
        this._sectionStart = this._index;
    } else {
        this._sectionStart--;
    }

    this._state = this._baseState;
};

Tokenizer.prototype._stateInNumericEntity = function(c) {
    if (c === ";") {
        this._decodeNumericEntity(2, 10);
        this._sectionStart++;
    } else if (c < "0" || c > "9") {
        if (!this._xmlMode) {
            this._decodeNumericEntity(2, 10);
        } else {
            this._state = this._baseState;
        }
        this._index--;
    }
};

Tokenizer.prototype._stateInHexEntity = function(c) {
    if (c === ";") {
        this._decodeNumericEntity(3, 16);
        this._sectionStart++;
    } else if (
        (c < "a" || c > "f") &&
        (c < "A" || c > "F") &&
        (c < "0" || c > "9")
    ) {
        if (!this._xmlMode) {
            this._decodeNumericEntity(3, 16);
        } else {
            this._state = this._baseState;
        }
        this._index--;
    }
};

Tokenizer.prototype._cleanup = function() {
    if (this._sectionStart < 0) {
        this._buffer = "";
        this._bufferOffset += this._index;
        this._index = 0;
    } else if (this._running) {
        if (this._state === TEXT) {
            if (this._sectionStart !== this._index) {
                this._cbs.ontext(this._buffer.substr(this._sectionStart));
            }
            this._buffer = "";
            this._bufferOffset += this._index;
            this._index = 0;
        } else if (this._sectionStart === this._index) {
            //the section just started
            this._buffer = "";
            this._bufferOffset += this._index;
            this._index = 0;
        } else {
            //remove everything unnecessary
            this._buffer = this._buffer.substr(this._sectionStart);
            this._index -= this._sectionStart;
            this._bufferOffset += this._sectionStart;
        }

        this._sectionStart = 0;
    }
};

//TODO make events conditional
Tokenizer.prototype.write = function(chunk) {
    if (this._ended) this._cbs.onerror(Error(".write() after done!"));

    this._buffer += chunk;
    this._parse();
};

Tokenizer.prototype._parse = function() {
    while (this._index < this._buffer.length && this._running) {
        var c = this._buffer.charAt(this._index);
        if (this._state === TEXT) {
            this._stateText(c);
        } else if (this._state === BEFORE_TAG_NAME) {
            this._stateBeforeTagName(c);
        } else if (this._state === IN_TAG_NAME) {
            this._stateInTagName(c);
        } else if (this._state === BEFORE_CLOSING_TAG_NAME) {
            this._stateBeforeCloseingTagName(c);
        } else if (this._state === IN_CLOSING_TAG_NAME) {
            this._stateInCloseingTagName(c);
        } else if (this._state === AFTER_CLOSING_TAG_NAME) {
            this._stateAfterCloseingTagName(c);
        } else if (this._state === IN_SELF_CLOSING_TAG) {
            this._stateInSelfClosingTag(c);
        } else if (this._state === BEFORE_ATTRIBUTE_NAME) {

        /*
		*	attributes
		*/
            this._stateBeforeAttributeName(c);
        } else if (this._state === IN_ATTRIBUTE_NAME) {
            this._stateInAttributeName(c);
        } else if (this._state === AFTER_ATTRIBUTE_NAME) {
            this._stateAfterAttributeName(c);
        } else if (this._state === BEFORE_ATTRIBUTE_VALUE) {
            this._stateBeforeAttributeValue(c);
        } else if (this._state === IN_ATTRIBUTE_VALUE_DQ) {
            this._stateInAttributeValueDoubleQuotes(c);
        } else if (this._state === IN_ATTRIBUTE_VALUE_SQ) {
            this._stateInAttributeValueSingleQuotes(c);
        } else if (this._state === IN_ATTRIBUTE_VALUE_NQ) {
            this._stateInAttributeValueNoQuotes(c);
        } else if (this._state === BEFORE_DECLARATION) {

        /*
		*	declarations
		*/
            this._stateBeforeDeclaration(c);
        } else if (this._state === IN_DECLARATION) {
            this._stateInDeclaration(c);
        } else if (this._state === IN_PROCESSING_INSTRUCTION) {

        /*
		*	processing instructions
		*/
            this._stateInProcessingInstruction(c);
        } else if (this._state === BEFORE_COMMENT) {

        /*
		*	comments
		*/
            this._stateBeforeComment(c);
        } else if (this._state === IN_COMMENT) {
            this._stateInComment(c);
        } else if (this._state === AFTER_COMMENT_1) {
            this._stateAfterComment1(c);
        } else if (this._state === AFTER_COMMENT_2) {
            this._stateAfterComment2(c);
        } else if (this._state === BEFORE_CDATA_1) {

        /*
		*	cdata
		*/
            this._stateBeforeCdata1(c);
        } else if (this._state === BEFORE_CDATA_2) {
            this._stateBeforeCdata2(c);
        } else if (this._state === BEFORE_CDATA_3) {
            this._stateBeforeCdata3(c);
        } else if (this._state === BEFORE_CDATA_4) {
            this._stateBeforeCdata4(c);
        } else if (this._state === BEFORE_CDATA_5) {
            this._stateBeforeCdata5(c);
        } else if (this._state === BEFORE_CDATA_6) {
            this._stateBeforeCdata6(c);
        } else if (this._state === IN_CDATA) {
            this._stateInCdata(c);
        } else if (this._state === AFTER_CDATA_1) {
            this._stateAfterCdata1(c);
        } else if (this._state === AFTER_CDATA_2) {
            this._stateAfterCdata2(c);
        } else if (this._state === BEFORE_SPECIAL) {

        /*
		* special tags
		*/
            this._stateBeforeSpecial(c);
        } else if (this._state === BEFORE_SPECIAL_END) {
            this._stateBeforeSpecialEnd(c);
        } else if (this._state === BEFORE_SCRIPT_1) {

        /*
		* script
		*/
            this._stateBeforeScript1(c);
        } else if (this._state === BEFORE_SCRIPT_2) {
            this._stateBeforeScript2(c);
        } else if (this._state === BEFORE_SCRIPT_3) {
            this._stateBeforeScript3(c);
        } else if (this._state === BEFORE_SCRIPT_4) {
            this._stateBeforeScript4(c);
        } else if (this._state === BEFORE_SCRIPT_5) {
            this._stateBeforeScript5(c);
        } else if (this._state === AFTER_SCRIPT_1) {
            this._stateAfterScript1(c);
        } else if (this._state === AFTER_SCRIPT_2) {
            this._stateAfterScript2(c);
        } else if (this._state === AFTER_SCRIPT_3) {
            this._stateAfterScript3(c);
        } else if (this._state === AFTER_SCRIPT_4) {
            this._stateAfterScript4(c);
        } else if (this._state === AFTER_SCRIPT_5) {
            this._stateAfterScript5(c);
        } else if (this._state === BEFORE_STYLE_1) {

        /*
		* style
		*/
            this._stateBeforeStyle1(c);
        } else if (this._state === BEFORE_STYLE_2) {
            this._stateBeforeStyle2(c);
        } else if (this._state === BEFORE_STYLE_3) {
            this._stateBeforeStyle3(c);
        } else if (this._state === BEFORE_STYLE_4) {
            this._stateBeforeStyle4(c);
        } else if (this._state === AFTER_STYLE_1) {
            this._stateAfterStyle1(c);
        } else if (this._state === AFTER_STYLE_2) {
            this._stateAfterStyle2(c);
        } else if (this._state === AFTER_STYLE_3) {
            this._stateAfterStyle3(c);
        } else if (this._state === AFTER_STYLE_4) {
            this._stateAfterStyle4(c);
        } else if (this._state === BEFORE_ENTITY) {

        /*
		* entities
		*/
            this._stateBeforeEntity(c);
        } else if (this._state === BEFORE_NUMERIC_ENTITY) {
            this._stateBeforeNumericEntity(c);
        } else if (this._state === IN_NAMED_ENTITY) {
            this._stateInNamedEntity(c);
        } else if (this._state === IN_NUMERIC_ENTITY) {
            this._stateInNumericEntity(c);
        } else if (this._state === IN_HEX_ENTITY) {
            this._stateInHexEntity(c);
        } else {
            this._cbs.onerror(Error("unknown _state"), this._state);
        }

        this._index++;
    }

    this._cleanup();
};

Tokenizer.prototype.pause = function() {
    this._running = false;
};
Tokenizer.prototype.resume = function() {
    this._running = true;

    if (this._index < this._buffer.length) {
        this._parse();
    }
    if (this._ended) {
        this._finish();
    }
};

Tokenizer.prototype.end = function(chunk) {
    if (this._ended) this._cbs.onerror(Error(".end() after done!"));
    if (chunk) this.write(chunk);

    this._ended = true;

    if (this._running) this._finish();
};

Tokenizer.prototype._finish = function() {
    //if there is remaining data, emit it in a reasonable way
    if (this._sectionStart < this._index) {
        this._handleTrailingData();
    }

    this._cbs.onend();
};

Tokenizer.prototype._handleTrailingData = function() {
    var data = this._buffer.substr(this._sectionStart);

    if (
        this._state === IN_CDATA ||
        this._state === AFTER_CDATA_1 ||
        this._state === AFTER_CDATA_2
    ) {
        this._cbs.oncdata(data);
    } else if (
        this._state === IN_COMMENT ||
        this._state === AFTER_COMMENT_1 ||
        this._state === AFTER_COMMENT_2
    ) {
        this._cbs.oncomment(data);
    } else if (this._state === IN_NAMED_ENTITY && !this._xmlMode) {
        this._parseLegacyEntity();
        if (this._sectionStart < this._index) {
            this._state = this._baseState;
            this._handleTrailingData();
        }
    } else if (this._state === IN_NUMERIC_ENTITY && !this._xmlMode) {
        this._decodeNumericEntity(2, 10);
        if (this._sectionStart < this._index) {
            this._state = this._baseState;
            this._handleTrailingData();
        }
    } else if (this._state === IN_HEX_ENTITY && !this._xmlMode) {
        this._decodeNumericEntity(3, 16);
        if (this._sectionStart < this._index) {
            this._state = this._baseState;
            this._handleTrailingData();
        }
    } else if (
        this._state !== IN_TAG_NAME &&
        this._state !== BEFORE_ATTRIBUTE_NAME &&
        this._state !== BEFORE_ATTRIBUTE_VALUE &&
        this._state !== AFTER_ATTRIBUTE_NAME &&
        this._state !== IN_ATTRIBUTE_NAME &&
        this._state !== IN_ATTRIBUTE_VALUE_SQ &&
        this._state !== IN_ATTRIBUTE_VALUE_DQ &&
        this._state !== IN_ATTRIBUTE_VALUE_NQ &&
        this._state !== IN_CLOSING_TAG_NAME
    ) {
        this._cbs.ontext(data);
    }
    //else, ignore remaining data
    //TODO add a way to remove current tag
};

Tokenizer.prototype.reset = function() {
    Tokenizer.call(
        this,
        { xmlMode: this._xmlMode, decodeEntities: this._decodeEntities },
        this._cbs
    );
};

Tokenizer.prototype.getAbsoluteIndex = function() {
    return this._bufferOffset + this._index;
};

Tokenizer.prototype._getSection = function() {
    return this._buffer.substring(this._sectionStart, this._index);
};

Tokenizer.prototype._emitToken = function(name) {
    this._cbs[name](this._getSection());
    this._sectionStart = -1;
};

Tokenizer.prototype._emitPartial = function(value) {
    if (this._baseState !== TEXT) {
        this._cbs.onattribdata(value); //TODO implement the new event
    } else {
        this._cbs.ontext(value);
    }
};

},{"entities/lib/decode_codepoint.js":234,"entities/maps/entities.json":236,"entities/maps/legacy.json":237,"entities/maps/xml.json":238}],232:[function(require,module,exports){
module.exports = Stream;

var Parser = require("./Parser.js");
var WritableStream = require("readable-stream").Writable;
var StringDecoder = require("string_decoder").StringDecoder;
var Buffer = require("buffer").Buffer;

function Stream(cbs, options) {
    var parser = (this._parser = new Parser(cbs, options));
    var decoder = (this._decoder = new StringDecoder());

    WritableStream.call(this, { decodeStrings: false });

    this.once("finish", function() {
        parser.end(decoder.end());
    });
}

require("inherits")(Stream, WritableStream);

Stream.prototype._write = function(chunk, encoding, cb) {
    if (chunk instanceof Buffer) chunk = this._decoder.write(chunk);
    this._parser.write(chunk);
    cb();
};

},{"./Parser.js":228,"buffer":4,"inherits":241,"readable-stream":3,"string_decoder":57}],233:[function(require,module,exports){
var Parser = require("./Parser.js");
var DomHandler = require("domhandler");

function defineProp(name, value) {
    delete module.exports[name];
    module.exports[name] = value;
    return value;
}

module.exports = {
    Parser: Parser,
    Tokenizer: require("./Tokenizer.js"),
    ElementType: require("domelementtype"),
    DomHandler: DomHandler,
    get FeedHandler() {
        return defineProp("FeedHandler", require("./FeedHandler.js"));
    },
    get Stream() {
        return defineProp("Stream", require("./Stream.js"));
    },
    get WritableStream() {
        return defineProp("WritableStream", require("./WritableStream.js"));
    },
    get ProxyHandler() {
        return defineProp("ProxyHandler", require("./ProxyHandler.js"));
    },
    get DomUtils() {
        return defineProp("DomUtils", require("domutils"));
    },
    get CollectingHandler() {
        return defineProp(
            "CollectingHandler",
            require("./CollectingHandler.js")
        );
    },
    // For legacy support
    DefaultHandler: DomHandler,
    get RssHandler() {
        return defineProp("RssHandler", this.FeedHandler);
    },
    //helper methods
    parseDOM: function(data, options) {
        var handler = new DomHandler(options);
        new Parser(handler, options).end(data);
        return handler.dom;
    },
    parseFeed: function(feed, options) {
        var handler = new module.exports.FeedHandler(options);
        new Parser(handler, options).end(feed);
        return handler.dom;
    },
    createDomStream: function(cb, options, elementCb) {
        var handler = new DomHandler(cb, options, elementCb);
        return new Parser(handler, options);
    },
    // List of all events that the parser emits
    EVENTS: {
        /* Format: eventname: number of arguments */
        attribute: 2,
        cdatastart: 0,
        cdataend: 0,
        text: 1,
        processinginstruction: 2,
        comment: 1,
        commentend: 0,
        closetag: 1,
        opentag: 2,
        opentagname: 1,
        error: 1,
        end: 0
    }
};

},{"./CollectingHandler.js":226,"./FeedHandler.js":227,"./Parser.js":228,"./ProxyHandler.js":229,"./Stream.js":230,"./Tokenizer.js":231,"./WritableStream.js":232,"domelementtype":184,"domhandler":185,"domutils":188}],234:[function(require,module,exports){
arguments[4][178][0].apply(exports,arguments)
},{"../maps/decode.json":235,"dup":178}],235:[function(require,module,exports){
arguments[4][180][0].apply(exports,arguments)
},{"dup":180}],236:[function(require,module,exports){
arguments[4][181][0].apply(exports,arguments)
},{"dup":181}],237:[function(require,module,exports){
arguments[4][182][0].apply(exports,arguments)
},{"dup":182}],238:[function(require,module,exports){
arguments[4][183][0].apply(exports,arguments)
},{"dup":183}],239:[function(require,module,exports){
'use strict';
// rfc7231 6.1
const statusCodeCacheableByDefault = [
    200,
    203,
    204,
    206,
    300,
    301,
    404,
    405,
    410,
    414,
    501,
];

// This implementation does not understand partial responses (206)
const understoodStatuses = [
    200,
    203,
    204,
    300,
    301,
    302,
    303,
    307,
    308,
    404,
    405,
    410,
    414,
    501,
];

const hopByHopHeaders = {
    date: true, // included, because we add Age update Date
    connection: true,
    'keep-alive': true,
    'proxy-authenticate': true,
    'proxy-authorization': true,
    te: true,
    trailer: true,
    'transfer-encoding': true,
    upgrade: true,
};
const excludedFromRevalidationUpdate = {
    // Since the old body is reused, it doesn't make sense to change properties of the body
    'content-length': true,
    'content-encoding': true,
    'transfer-encoding': true,
    'content-range': true,
};

function parseCacheControl(header) {
    const cc = {};
    if (!header) return cc;

    // TODO: When there is more than one value present for a given directive (e.g., two Expires header fields, multiple Cache-Control: max-age directives),
    // the directive's value is considered invalid. Caches are encouraged to consider responses that have invalid freshness information to be stale
    const parts = header.trim().split(/\s*,\s*/); // TODO: lame parsing
    for (const part of parts) {
        const [k, v] = part.split(/\s*=\s*/, 2);
        cc[k] = v === undefined ? true : v.replace(/^"|"$/g, ''); // TODO: lame unquoting
    }

    return cc;
}

function formatCacheControl(cc) {
    let parts = [];
    for (const k in cc) {
        const v = cc[k];
        parts.push(v === true ? k : k + '=' + v);
    }
    if (!parts.length) {
        return undefined;
    }
    return parts.join(', ');
}

module.exports = class CachePolicy {
    constructor(
        req,
        res,
        {
            shared,
            cacheHeuristic,
            immutableMinTimeToLive,
            ignoreCargoCult,
            trustServerDate,
            _fromObject,
        } = {}
    ) {
        if (_fromObject) {
            this._fromObject(_fromObject);
            return;
        }

        if (!res || !res.headers) {
            throw Error('Response headers missing');
        }
        this._assertRequestHasHeaders(req);

        this._responseTime = this.now();
        this._isShared = shared !== false;
        this._trustServerDate =
            undefined !== trustServerDate ? trustServerDate : true;
        this._cacheHeuristic =
            undefined !== cacheHeuristic ? cacheHeuristic : 0.1; // 10% matches IE
        this._immutableMinTtl =
            undefined !== immutableMinTimeToLive
                ? immutableMinTimeToLive
                : 24 * 3600 * 1000;

        this._status = 'status' in res ? res.status : 200;
        this._resHeaders = res.headers;
        this._rescc = parseCacheControl(res.headers['cache-control']);
        this._method = 'method' in req ? req.method : 'GET';
        this._url = req.url;
        this._host = req.headers.host;
        this._noAuthorization = !req.headers.authorization;
        this._reqHeaders = res.headers.vary ? req.headers : null; // Don't keep all request headers if they won't be used
        this._reqcc = parseCacheControl(req.headers['cache-control']);

        // Assume that if someone uses legacy, non-standard uncecessary options they don't understand caching,
        // so there's no point stricly adhering to the blindly copy&pasted directives.
        if (
            ignoreCargoCult &&
            'pre-check' in this._rescc &&
            'post-check' in this._rescc
        ) {
            delete this._rescc['pre-check'];
            delete this._rescc['post-check'];
            delete this._rescc['no-cache'];
            delete this._rescc['no-store'];
            delete this._rescc['must-revalidate'];
            this._resHeaders = Object.assign({}, this._resHeaders, {
                'cache-control': formatCacheControl(this._rescc),
            });
            delete this._resHeaders.expires;
            delete this._resHeaders.pragma;
        }

        // When the Cache-Control header field is not present in a request, caches MUST consider the no-cache request pragma-directive
        // as having the same effect as if "Cache-Control: no-cache" were present (see Section 5.2.1).
        if (
            res.headers['cache-control'] == null &&
            /no-cache/.test(res.headers.pragma)
        ) {
            this._rescc['no-cache'] = true;
        }
    }

    now() {
        return Date.now();
    }

    storable() {
        // The "no-store" request directive indicates that a cache MUST NOT store any part of either this request or any response to it.
        return !!(
            !this._reqcc['no-store'] &&
            // A cache MUST NOT store a response to any request, unless:
            // The request method is understood by the cache and defined as being cacheable, and
            ('GET' === this._method ||
                'HEAD' === this._method ||
                ('POST' === this._method && this._hasExplicitExpiration())) &&
            // the response status code is understood by the cache, and
            understoodStatuses.indexOf(this._status) !== -1 &&
            // the "no-store" cache directive does not appear in request or response header fields, and
            !this._rescc['no-store'] &&
            // the "private" response directive does not appear in the response, if the cache is shared, and
            (!this._isShared || !this._rescc.private) &&
            // the Authorization header field does not appear in the request, if the cache is shared,
            (!this._isShared ||
                this._noAuthorization ||
                this._allowsStoringAuthenticated()) &&
            // the response either:
            // contains an Expires header field, or
            (this._resHeaders.expires ||
                // contains a max-age response directive, or
                // contains a s-maxage response directive and the cache is shared, or
                // contains a public response directive.
                this._rescc.public ||
                this._rescc['max-age'] ||
                this._rescc['s-maxage'] ||
                // has a status code that is defined as cacheable by default
                statusCodeCacheableByDefault.indexOf(this._status) !== -1)
        );
    }

    _hasExplicitExpiration() {
        // 4.2.1 Calculating Freshness Lifetime
        return (
            (this._isShared && this._rescc['s-maxage']) ||
            this._rescc['max-age'] ||
            this._resHeaders.expires
        );
    }

    _assertRequestHasHeaders(req) {
        if (!req || !req.headers) {
            throw Error('Request headers missing');
        }
    }

    satisfiesWithoutRevalidation(req) {
        this._assertRequestHasHeaders(req);

        // When presented with a request, a cache MUST NOT reuse a stored response, unless:
        // the presented request does not contain the no-cache pragma (Section 5.4), nor the no-cache cache directive,
        // unless the stored response is successfully validated (Section 4.3), and
        const requestCC = parseCacheControl(req.headers['cache-control']);
        if (requestCC['no-cache'] || /no-cache/.test(req.headers.pragma)) {
            return false;
        }

        if (requestCC['max-age'] && this.age() > requestCC['max-age']) {
            return false;
        }

        if (
            requestCC['min-fresh'] &&
            this.timeToLive() < 1000 * requestCC['min-fresh']
        ) {
            return false;
        }

        // the stored response is either:
        // fresh, or allowed to be served stale
        if (this.stale()) {
            const allowsStale =
                requestCC['max-stale'] &&
                !this._rescc['must-revalidate'] &&
                (true === requestCC['max-stale'] ||
                    requestCC['max-stale'] > this.age() - this.maxAge());
            if (!allowsStale) {
                return false;
            }
        }

        return this._requestMatches(req, false);
    }

    _requestMatches(req, allowHeadMethod) {
        // The presented effective request URI and that of the stored response match, and
        return (
            (!this._url || this._url === req.url) &&
            this._host === req.headers.host &&
            // the request method associated with the stored response allows it to be used for the presented request, and
            (!req.method ||
                this._method === req.method ||
                (allowHeadMethod && 'HEAD' === req.method)) &&
            // selecting header fields nominated by the stored response (if any) match those presented, and
            this._varyMatches(req)
        );
    }

    _allowsStoringAuthenticated() {
        //  following Cache-Control response directives (Section 5.2.2) have such an effect: must-revalidate, public, and s-maxage.
        return (
            this._rescc['must-revalidate'] ||
            this._rescc.public ||
            this._rescc['s-maxage']
        );
    }

    _varyMatches(req) {
        if (!this._resHeaders.vary) {
            return true;
        }

        // A Vary header field-value of "*" always fails to match
        if (this._resHeaders.vary === '*') {
            return false;
        }

        const fields = this._resHeaders.vary
            .trim()
            .toLowerCase()
            .split(/\s*,\s*/);
        for (const name of fields) {
            if (req.headers[name] !== this._reqHeaders[name]) return false;
        }
        return true;
    }

    _copyWithoutHopByHopHeaders(inHeaders) {
        const headers = {};
        for (const name in inHeaders) {
            if (hopByHopHeaders[name]) continue;
            headers[name] = inHeaders[name];
        }
        // 9.1.  Connection
        if (inHeaders.connection) {
            const tokens = inHeaders.connection.trim().split(/\s*,\s*/);
            for (const name of tokens) {
                delete headers[name];
            }
        }
        if (headers.warning) {
            const warnings = headers.warning.split(/,/).filter(warning => {
                return !/^\s*1[0-9][0-9]/.test(warning);
            });
            if (!warnings.length) {
                delete headers.warning;
            } else {
                headers.warning = warnings.join(',').trim();
            }
        }
        return headers;
    }

    responseHeaders() {
        const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);
        const age = this.age();

        // A cache SHOULD generate 113 warning if it heuristically chose a freshness
        // lifetime greater than 24 hours and the response's age is greater than 24 hours.
        if (
            age > 3600 * 24 &&
            !this._hasExplicitExpiration() &&
            this.maxAge() > 3600 * 24
        ) {
            headers.warning =
                (headers.warning ? `${headers.warning}, ` : '') +
                '113 - "rfc7234 5.5.4"';
        }
        headers.age = `${Math.round(age)}`;
        headers.date = new Date(this.now()).toUTCString();
        return headers;
    }

    /**
     * Value of the Date response header or current time if Date was demed invalid
     * @return timestamp
     */
    date() {
        if (this._trustServerDate) {
            return this._serverDate();
        }
        return this._responseTime;
    }

    _serverDate() {
        const dateValue = Date.parse(this._resHeaders.date);
        if (isFinite(dateValue)) {
            const maxClockDrift = 8 * 3600 * 1000;
            const clockDrift = Math.abs(this._responseTime - dateValue);
            if (clockDrift < maxClockDrift) {
                return dateValue;
            }
        }
        return this._responseTime;
    }

    /**
     * Value of the Age header, in seconds, updated for the current time.
     * May be fractional.
     *
     * @return Number
     */
    age() {
        let age = Math.max(0, (this._responseTime - this.date()) / 1000);
        if (this._resHeaders.age) {
            let ageValue = this._ageValue();
            if (ageValue > age) age = ageValue;
        }

        const residentTime = (this.now() - this._responseTime) / 1000;
        return age + residentTime;
    }

    _ageValue() {
        const ageValue = parseInt(this._resHeaders.age);
        return isFinite(ageValue) ? ageValue : 0;
    }

    /**
     * Value of applicable max-age (or heuristic equivalent) in seconds. This counts since response's `Date`.
     *
     * For an up-to-date value, see `timeToLive()`.
     *
     * @return Number
     */
    maxAge() {
        if (!this.storable() || this._rescc['no-cache']) {
            return 0;
        }

        // Shared responses with cookies are cacheable according to the RFC, but IMHO it'd be unwise to do so by default
        // so this implementation requires explicit opt-in via public header
        if (
            this._isShared &&
            (this._resHeaders['set-cookie'] &&
                !this._rescc.public &&
                !this._rescc.immutable)
        ) {
            return 0;
        }

        if (this._resHeaders.vary === '*') {
            return 0;
        }

        if (this._isShared) {
            if (this._rescc['proxy-revalidate']) {
                return 0;
            }
            // if a response includes the s-maxage directive, a shared cache recipient MUST ignore the Expires field.
            if (this._rescc['s-maxage']) {
                return parseInt(this._rescc['s-maxage'], 10);
            }
        }

        // If a response includes a Cache-Control field with the max-age directive, a recipient MUST ignore the Expires field.
        if (this._rescc['max-age']) {
            return parseInt(this._rescc['max-age'], 10);
        }

        const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;

        const dateValue = this._serverDate();
        if (this._resHeaders.expires) {
            const expires = Date.parse(this._resHeaders.expires);
            // A cache recipient MUST interpret invalid date formats, especially the value "0", as representing a time in the past (i.e., "already expired").
            if (Number.isNaN(expires) || expires < dateValue) {
                return 0;
            }
            return Math.max(defaultMinTtl, (expires - dateValue) / 1000);
        }

        if (this._resHeaders['last-modified']) {
            const lastModified = Date.parse(this._resHeaders['last-modified']);
            if (isFinite(lastModified) && dateValue > lastModified) {
                return Math.max(
                    defaultMinTtl,
                    ((dateValue - lastModified) / 1000) * this._cacheHeuristic
                );
            }
        }

        return defaultMinTtl;
    }

    timeToLive() {
        return Math.max(0, this.maxAge() - this.age()) * 1000;
    }

    stale() {
        return this.maxAge() <= this.age();
    }

    static fromObject(obj) {
        return new this(undefined, undefined, { _fromObject: obj });
    }

    _fromObject(obj) {
        if (this._responseTime) throw Error('Reinitialized');
        if (!obj || obj.v !== 1) throw Error('Invalid serialization');

        this._responseTime = obj.t;
        this._isShared = obj.sh;
        this._cacheHeuristic = obj.ch;
        this._immutableMinTtl =
            obj.imm !== undefined ? obj.imm : 24 * 3600 * 1000;
        this._status = obj.st;
        this._resHeaders = obj.resh;
        this._rescc = obj.rescc;
        this._method = obj.m;
        this._url = obj.u;
        this._host = obj.h;
        this._noAuthorization = obj.a;
        this._reqHeaders = obj.reqh;
        this._reqcc = obj.reqcc;
    }

    toObject() {
        return {
            v: 1,
            t: this._responseTime,
            sh: this._isShared,
            ch: this._cacheHeuristic,
            imm: this._immutableMinTtl,
            st: this._status,
            resh: this._resHeaders,
            rescc: this._rescc,
            m: this._method,
            u: this._url,
            h: this._host,
            a: this._noAuthorization,
            reqh: this._reqHeaders,
            reqcc: this._reqcc,
        };
    }

    /**
     * Headers for sending to the origin server to revalidate stale response.
     * Allows server to return 304 to allow reuse of the previous response.
     *
     * Hop by hop headers are always stripped.
     * Revalidation headers may be added or removed, depending on request.
     */
    revalidationHeaders(incomingReq) {
        this._assertRequestHasHeaders(incomingReq);
        const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers);

        // This implementation does not understand range requests
        delete headers['if-range'];

        if (!this._requestMatches(incomingReq, true) || !this.storable()) {
            // revalidation allowed via HEAD
            // not for the same resource, or wasn't allowed to be cached anyway
            delete headers['if-none-match'];
            delete headers['if-modified-since'];
            return headers;
        }

        /* MUST send that entity-tag in any cache validation request (using If-Match or If-None-Match) if an entity-tag has been provided by the origin server. */
        if (this._resHeaders.etag) {
            headers['if-none-match'] = headers['if-none-match']
                ? `${headers['if-none-match']}, ${this._resHeaders.etag}`
                : this._resHeaders.etag;
        }

        // Clients MAY issue simple (non-subrange) GET requests with either weak validators or strong validators. Clients MUST NOT use weak validators in other forms of request.
        const forbidsWeakValidators =
            headers['accept-ranges'] ||
            headers['if-match'] ||
            headers['if-unmodified-since'] ||
            (this._method && this._method != 'GET');

        /* SHOULD send the Last-Modified value in non-subrange cache validation requests (using If-Modified-Since) if only a Last-Modified value has been provided by the origin server.
        Note: This implementation does not understand partial responses (206) */
        if (forbidsWeakValidators) {
            delete headers['if-modified-since'];

            if (headers['if-none-match']) {
                const etags = headers['if-none-match']
                    .split(/,/)
                    .filter(etag => {
                        return !/^\s*W\//.test(etag);
                    });
                if (!etags.length) {
                    delete headers['if-none-match'];
                } else {
                    headers['if-none-match'] = etags.join(',').trim();
                }
            }
        } else if (
            this._resHeaders['last-modified'] &&
            !headers['if-modified-since']
        ) {
            headers['if-modified-since'] = this._resHeaders['last-modified'];
        }

        return headers;
    }

    /**
     * Creates new CachePolicy with information combined from the previews response,
     * and the new revalidation response.
     *
     * Returns {policy, modified} where modified is a boolean indicating
     * whether the response body has been modified, and old cached body can't be used.
     *
     * @return {Object} {policy: CachePolicy, modified: Boolean}
     */
    revalidatedPolicy(request, response) {
        this._assertRequestHasHeaders(request);
        if (!response || !response.headers) {
            throw Error('Response headers missing');
        }

        // These aren't going to be supported exactly, since one CachePolicy object
        // doesn't know about all the other cached objects.
        let matches = false;
        if (response.status !== undefined && response.status != 304) {
            matches = false;
        } else if (
            response.headers.etag &&
            !/^\s*W\//.test(response.headers.etag)
        ) {
            // "All of the stored responses with the same strong validator are selected.
            // If none of the stored responses contain the same strong validator,
            // then the cache MUST NOT use the new response to update any stored responses."
            matches =
                this._resHeaders.etag &&
                this._resHeaders.etag.replace(/^\s*W\//, '') ===
                    response.headers.etag;
        } else if (this._resHeaders.etag && response.headers.etag) {
            // "If the new response contains a weak validator and that validator corresponds
            // to one of the cache's stored responses,
            // then the most recent of those matching stored responses is selected for update."
            matches =
                this._resHeaders.etag.replace(/^\s*W\//, '') ===
                response.headers.etag.replace(/^\s*W\//, '');
        } else if (this._resHeaders['last-modified']) {
            matches =
                this._resHeaders['last-modified'] ===
                response.headers['last-modified'];
        } else {
            // If the new response does not include any form of validator (such as in the case where
            // a client generates an If-Modified-Since request from a source other than the Last-Modified
            // response header field), and there is only one stored response, and that stored response also
            // lacks a validator, then that stored response is selected for update.
            if (
                !this._resHeaders.etag &&
                !this._resHeaders['last-modified'] &&
                !response.headers.etag &&
                !response.headers['last-modified']
            ) {
                matches = true;
            }
        }

        if (!matches) {
            return {
                policy: new this.constructor(request, response),
                // Client receiving 304 without body, even if it's invalid/mismatched has no option
                // but to reuse a cached body. We don't have a good way to tell clients to do
                // error recovery in such case.
                modified: response.status != 304,
                matches: false,
            };
        }

        // use other header fields provided in the 304 (Not Modified) response to replace all instances
        // of the corresponding header fields in the stored response.
        const headers = {};
        for (const k in this._resHeaders) {
            headers[k] =
                k in response.headers && !excludedFromRevalidationUpdate[k]
                    ? response.headers[k]
                    : this._resHeaders[k];
        }

        const newResponse = Object.assign({}, response, {
            status: this._status,
            method: this._method,
            headers,
        });
        return {
            policy: new this.constructor(request, newResponse, {
                shared: this._isShared,
                cacheHeuristic: this._cacheHeuristic,
                immutableMinTimeToLive: this._immutableMinTtl,
                trustServerDate: this._trustServerDate,
            }),
            modified: false,
            matches: true,
        };
    }
};

},{}],240:[function(require,module,exports){
module.exports=[
	"ase",
	"art",
	"bmp",
	"blp",
	"cd5",
	"cit",
	"cpt",
	"cr2",
	"cut",
	"dds",
	"dib",
	"djvu",
	"egt",
	"exif",
	"gif",
	"gpl",
	"grf",
	"icns",
	"ico",
	"iff",
	"jng",
	"jpeg",
	"jpg",
	"jfif",
	"jp2",
	"jps",
	"lbm",
	"max",
	"miff",
	"mng",
	"msp",
	"nitf",
	"ota",
	"pbm",
	"pc1",
	"pc2",
	"pc3",
	"pcf",
	"pcx",
	"pdn",
	"pgm",
	"PI1",
	"PI2",
	"PI3",
	"pict",
	"pct",
	"pnm",
	"pns",
	"ppm",
	"psb",
	"psd",
	"pdd",
	"psp",
	"px",
	"pxm",
	"pxr",
	"qfx",
	"raw",
	"rle",
	"sct",
	"sgi",
	"rgb",
	"int",
	"bw",
	"tga",
	"tiff",
	"tif",
	"vtf",
	"xbm",
	"xcf",
	"xpm",
	"3dv",
	"amf",
	"ai",
	"awg",
	"cgm",
	"cdr",
	"cmx",
	"dxf",
	"e2d",
	"egt",
	"eps",
	"fs",
	"gbr",
	"odg",
	"svg",
	"stl",
	"vrml",
	"x3d",
	"sxd",
	"v2d",
	"vnd",
	"wmf",
	"emf",
	"art",
	"xar",
	"png",
	"webp",
	"jxr",
	"hdp",
	"wdp",
	"cur",
	"ecw",
	"iff",
	"lbm",
	"liff",
	"nrrd",
	"pam",
	"pcx",
	"pgf",
	"sgi",
	"rgb",
	"rgba",
	"bw",
	"int",
	"inta",
	"sid",
	"ras",
	"sun",
	"tga"
]

},{}],241:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10}],242:[function(require,module,exports){
'use strict';

const word = '[a-fA-F\\d:]';
const b = options => options && options.includeBoundaries ?
	`(?:(?<=\\s|^)(?=${word})|(?<=${word})(?=\\s|$))` :
	'';

const v4 = '(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}';

const v6seg = '[a-fA-F\\d]{1,4}';
const v6 = `
(
(?:${v6seg}:){7}(?:${v6seg}|:)|                                // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6seg}:){6}(?:${v4}|:${v6seg}|:)|                         // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6seg}:){5}(?::${v4}|(:${v6seg}){1,2}|:)|                 // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6seg}:){4}(?:(:${v6seg}){0,1}:${v4}|(:${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6seg}:){3}(?:(:${v6seg}){0,2}:${v4}|(:${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6seg}:){2}(?:(:${v6seg}){0,3}:${v4}|(:${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6seg}:){1}(?:(:${v6seg}){0,4}:${v4}|(:${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::((?::${v6seg}){0,5}:${v4}|(?::${v6seg}){1,7}|:))           // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(%[0-9a-zA-Z]{1,})?                                           // %eth0            %1
`.replace(/\s*\/\/.*$/gm, '').replace(/\n/g, '').trim();

const ip = options => options && options.exact ?
	new RegExp(`(?:^${v4}$)|(?:^${v6}$)`) :
	new RegExp(`(?:${b(options)}${v4}${b(options)})|(?:${b(options)}${v6}${b(options)})`, 'g');

ip.v4 = options => options && options.exact ? new RegExp(`^${v4}$`) : new RegExp(`${b(options)}${v4}${b(options)}`, 'g');
ip.v6 = options => options && options.exact ? new RegExp(`^${v6}$`) : new RegExp(`${b(options)}${v6}${b(options)}`, 'g');

module.exports = ip;

},{}],243:[function(require,module,exports){
'use strict';

module.exports = url => {
	if (typeof url !== 'string') {
		throw new TypeError(`Expected a \`string\`, got \`${typeof url}\``);
	}

	// Don't match Windows paths `c:\`
	if (/^[a-zA-Z]:\\/.test(url)) {
		return false;
	}

	// Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
	// Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
	return /^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(url);
};

},{}],244:[function(require,module,exports){
'use strict';
const isAbsoluteUrl = require('is-absolute-url');

module.exports = url => !isAbsoluteUrl(url);

},{"is-absolute-url":243}],245:[function(require,module,exports){
'use strict'

var parseURI = require('parse-uri')
var encode = require('punycode2/encode')

// Illegal characters (anything which is not in between the square brackets):
var ILLEGALS = /[^a-z0-9\:\/\?\#\[\]\@\!\$\&\'\(\)\*\+\,\;\=\.\-\_\~\%]/i

// Incomplete HEX escapes:
var HEX1 = /%[^0-9a-f]/i
var HEX2 = /%[0-9a-f](:?[^0-9a-f]|$)/i

// Scheme must begin with a letter, then consist of letters, digits, '+', '.', or '-' => e.g., 'http', 'https', 'ftp'
var PROTOCOL = /^[a-z][a-z0-9\+\-\.]*$/

// If authority is not present, path must not begin with '//'
var PATH = /^\/\//

module.exports = function isURI (uri, opts) {
  if (!uri) return false

  if (typeof uri !== 'object') {
    uri = encode(uri)
    if (ILLEGALS.test(uri)) return false
    if (HEX1.test(uri) || HEX2.test(uri)) return false
    uri = parseURI(uri, opts)
  }

  if (!uri.protocol || !PROTOCOL.test(uri.protocol.toLowerCase())) return false
  if (!uri.authority && PATH.test(uri.path)) return false

  return true
}

},{"parse-uri":490,"punycode2/encode":519}],246:[function(require,module,exports){
module.exports=[
  {
    "name": "Ghotuo",
    "type": "living",
    "scope": "individual",
    "iso6393": "aaa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alumu-Tesu",
    "type": "living",
    "scope": "individual",
    "iso6393": "aab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ari",
    "type": "living",
    "scope": "individual",
    "iso6393": "aac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amal",
    "type": "living",
    "scope": "individual",
    "iso6393": "aad",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arbëreshë Albanian",
    "type": "living",
    "scope": "individual",
    "iso6393": "aae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aranadan",
    "type": "living",
    "scope": "individual",
    "iso6393": "aaf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ambrak",
    "type": "living",
    "scope": "individual",
    "iso6393": "aag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abu' Arapesh",
    "type": "living",
    "scope": "individual",
    "iso6393": "aah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arifama-Miniafia",
    "type": "living",
    "scope": "individual",
    "iso6393": "aai",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ankave",
    "type": "living",
    "scope": "individual",
    "iso6393": "aak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Afade",
    "type": "living",
    "scope": "individual",
    "iso6393": "aal",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anambé",
    "type": "living",
    "scope": "individual",
    "iso6393": "aan",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Algerian Saharan Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "aao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pará Arára",
    "type": "living",
    "scope": "individual",
    "iso6393": "aap",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Abnaki",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "aaq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Afar",
    "type": "living",
    "scope": "individual",
    "iso6393": "aar",
    "iso6392B": "aar",
    "iso6392T": "aar",
    "iso6391": "aa"
  },
  {
    "name": "Aasáx",
    "type": "living",
    "scope": "individual",
    "iso6393": "aas",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arvanitika Albanian",
    "type": "living",
    "scope": "individual",
    "iso6393": "aat",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abau",
    "type": "living",
    "scope": "individual",
    "iso6393": "aau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Solong",
    "type": "living",
    "scope": "individual",
    "iso6393": "aaw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mandobo Atas",
    "type": "living",
    "scope": "individual",
    "iso6393": "aax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amarasi",
    "type": "living",
    "scope": "individual",
    "iso6393": "aaz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abé",
    "type": "living",
    "scope": "individual",
    "iso6393": "aba",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bankon",
    "type": "living",
    "scope": "individual",
    "iso6393": "abb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ambala Ayta",
    "type": "living",
    "scope": "individual",
    "iso6393": "abc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manide",
    "type": "living",
    "scope": "individual",
    "iso6393": "abd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Abnaki",
    "type": "living",
    "scope": "individual",
    "iso6393": "abe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abai Sungai",
    "type": "living",
    "scope": "individual",
    "iso6393": "abf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abaga",
    "type": "living",
    "scope": "individual",
    "iso6393": "abg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tajiki Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "abh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abidji",
    "type": "living",
    "scope": "individual",
    "iso6393": "abi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aka-Bea",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "abj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abkhazian",
    "type": "living",
    "scope": "individual",
    "iso6393": "abk",
    "iso6392B": "abk",
    "iso6392T": "abk",
    "iso6391": "ab"
  },
  {
    "name": "Lampung Nyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "abl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abanyom",
    "type": "living",
    "scope": "individual",
    "iso6393": "abm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abua",
    "type": "living",
    "scope": "individual",
    "iso6393": "abn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abon",
    "type": "living",
    "scope": "individual",
    "iso6393": "abo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abellen Ayta",
    "type": "living",
    "scope": "individual",
    "iso6393": "abp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abaza",
    "type": "living",
    "scope": "individual",
    "iso6393": "abq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abron",
    "type": "living",
    "scope": "individual",
    "iso6393": "abr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ambonese Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "abs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ambulas",
    "type": "living",
    "scope": "individual",
    "iso6393": "abt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abure",
    "type": "living",
    "scope": "individual",
    "iso6393": "abu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baharna Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "abv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pal",
    "type": "living",
    "scope": "individual",
    "iso6393": "abw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Inabaknon",
    "type": "living",
    "scope": "individual",
    "iso6393": "abx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aneme Wake",
    "type": "living",
    "scope": "individual",
    "iso6393": "aby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abui",
    "type": "living",
    "scope": "individual",
    "iso6393": "abz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Achagua",
    "type": "living",
    "scope": "individual",
    "iso6393": "aca",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Áncá",
    "type": "living",
    "scope": "individual",
    "iso6393": "acb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gikyode",
    "type": "living",
    "scope": "individual",
    "iso6393": "acd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Achinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "ace",
    "iso6392B": "ace",
    "iso6392T": "ace",
    "iso6391": null
  },
  {
    "name": "Saint Lucian Creole French",
    "type": "living",
    "scope": "individual",
    "iso6393": "acf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Acoli",
    "type": "living",
    "scope": "individual",
    "iso6393": "ach",
    "iso6392B": "ach",
    "iso6392T": "ach",
    "iso6391": null
  },
  {
    "name": "Aka-Cari",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "aci",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aka-Kora",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ack",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akar-Bale",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "acl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mesopotamian Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "acm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Achang",
    "type": "living",
    "scope": "individual",
    "iso6393": "acn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Acipa",
    "type": "living",
    "scope": "individual",
    "iso6393": "acp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ta'izzi-Adeni Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "acq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Achi",
    "type": "living",
    "scope": "individual",
    "iso6393": "acr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Acroá",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "acs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Achterhoeks",
    "type": "living",
    "scope": "individual",
    "iso6393": "act",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Achuar-Shiwiar",
    "type": "living",
    "scope": "individual",
    "iso6393": "acu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Achumawi",
    "type": "living",
    "scope": "individual",
    "iso6393": "acv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hijazi Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "acw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Omani Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "acx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cypriot Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "acy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Acheron",
    "type": "living",
    "scope": "individual",
    "iso6393": "acz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adangme",
    "type": "living",
    "scope": "individual",
    "iso6393": "ada",
    "iso6392B": "ada",
    "iso6392T": "ada",
    "iso6391": null
  },
  {
    "name": "Adabe",
    "type": "living",
    "scope": "individual",
    "iso6393": "adb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lidzonka",
    "type": "living",
    "scope": "individual",
    "iso6393": "add",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adele",
    "type": "living",
    "scope": "individual",
    "iso6393": "ade",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhofari Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "adf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Andegerebinha",
    "type": "living",
    "scope": "individual",
    "iso6393": "adg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adhola",
    "type": "living",
    "scope": "individual",
    "iso6393": "adh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adi",
    "type": "living",
    "scope": "individual",
    "iso6393": "adi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adioukrou",
    "type": "living",
    "scope": "individual",
    "iso6393": "adj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Galo",
    "type": "living",
    "scope": "individual",
    "iso6393": "adl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adang",
    "type": "living",
    "scope": "individual",
    "iso6393": "adn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ado",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adangbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "adq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adonara",
    "type": "living",
    "scope": "individual",
    "iso6393": "adr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adamorobe Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "ads",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adnyamathanha",
    "type": "living",
    "scope": "individual",
    "iso6393": "adt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aduge",
    "type": "living",
    "scope": "individual",
    "iso6393": "adu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amundava",
    "type": "living",
    "scope": "individual",
    "iso6393": "adw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amdo Tibetan",
    "type": "living",
    "scope": "individual",
    "iso6393": "adx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adyghe",
    "type": "living",
    "scope": "individual",
    "iso6393": "ady",
    "iso6392B": "ady",
    "iso6392T": "ady",
    "iso6391": null
  },
  {
    "name": "Adzera",
    "type": "living",
    "scope": "individual",
    "iso6393": "adz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Areba",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "aea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tunisian Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "aeb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saidi Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "aec",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Argentine Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "aed",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northeast Pashai",
    "type": "living",
    "scope": "individual",
    "iso6393": "aee",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Haeke",
    "type": "living",
    "scope": "individual",
    "iso6393": "aek",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ambele",
    "type": "living",
    "scope": "individual",
    "iso6393": "ael",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arem",
    "type": "living",
    "scope": "individual",
    "iso6393": "aem",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Armenian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "aen",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aer",
    "type": "living",
    "scope": "individual",
    "iso6393": "aeq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Arrernte",
    "type": "living",
    "scope": "individual",
    "iso6393": "aer",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alsea",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "aes",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akeu",
    "type": "living",
    "scope": "individual",
    "iso6393": "aeu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ambakich",
    "type": "living",
    "scope": "individual",
    "iso6393": "aew",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amele",
    "type": "living",
    "scope": "individual",
    "iso6393": "aey",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aeka",
    "type": "living",
    "scope": "individual",
    "iso6393": "aez",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gulf Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "afb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Andai",
    "type": "living",
    "scope": "individual",
    "iso6393": "afd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Putukwam",
    "type": "living",
    "scope": "individual",
    "iso6393": "afe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Afghan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "afg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Afrihili",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "afh",
    "iso6392B": "afh",
    "iso6392T": "afh",
    "iso6391": null
  },
  {
    "name": "Akrukay",
    "type": "living",
    "scope": "individual",
    "iso6393": "afi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nanubae",
    "type": "living",
    "scope": "individual",
    "iso6393": "afk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Defaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "afn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eloyi",
    "type": "living",
    "scope": "individual",
    "iso6393": "afo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tapei",
    "type": "living",
    "scope": "individual",
    "iso6393": "afp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Afrikaans",
    "type": "living",
    "scope": "individual",
    "iso6393": "afr",
    "iso6392B": "afr",
    "iso6392T": "afr",
    "iso6391": "af"
  },
  {
    "name": "Afro-Seminole Creole",
    "type": "living",
    "scope": "individual",
    "iso6393": "afs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Afitti",
    "type": "living",
    "scope": "individual",
    "iso6393": "aft",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awutu",
    "type": "living",
    "scope": "individual",
    "iso6393": "afu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Obokuitai",
    "type": "living",
    "scope": "individual",
    "iso6393": "afz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aguano",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "aga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Legbo",
    "type": "living",
    "scope": "individual",
    "iso6393": "agb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Agatu",
    "type": "living",
    "scope": "individual",
    "iso6393": "agc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Agarabi",
    "type": "living",
    "scope": "individual",
    "iso6393": "agd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Angal",
    "type": "living",
    "scope": "individual",
    "iso6393": "age",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arguni",
    "type": "living",
    "scope": "individual",
    "iso6393": "agf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Angor",
    "type": "living",
    "scope": "individual",
    "iso6393": "agg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngelima",
    "type": "living",
    "scope": "individual",
    "iso6393": "agh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Agariya",
    "type": "living",
    "scope": "individual",
    "iso6393": "agi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Argobba",
    "type": "living",
    "scope": "individual",
    "iso6393": "agj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isarog Agta",
    "type": "living",
    "scope": "individual",
    "iso6393": "agk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fembe",
    "type": "living",
    "scope": "individual",
    "iso6393": "agl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Angaataha",
    "type": "living",
    "scope": "individual",
    "iso6393": "agm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Agutaynen",
    "type": "living",
    "scope": "individual",
    "iso6393": "agn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tainae",
    "type": "living",
    "scope": "individual",
    "iso6393": "ago",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aghem",
    "type": "living",
    "scope": "individual",
    "iso6393": "agq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aguaruna",
    "type": "living",
    "scope": "individual",
    "iso6393": "agr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Esimbi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ags",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Cagayan Agta",
    "type": "living",
    "scope": "individual",
    "iso6393": "agt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aguacateco",
    "type": "living",
    "scope": "individual",
    "iso6393": "agu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Remontado Dumagat",
    "type": "living",
    "scope": "individual",
    "iso6393": "agv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kahua",
    "type": "living",
    "scope": "individual",
    "iso6393": "agw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aghul",
    "type": "living",
    "scope": "individual",
    "iso6393": "agx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Alta",
    "type": "living",
    "scope": "individual",
    "iso6393": "agy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mt. Iriga Agta",
    "type": "living",
    "scope": "individual",
    "iso6393": "agz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ahanta",
    "type": "living",
    "scope": "individual",
    "iso6393": "aha",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Axamb",
    "type": "living",
    "scope": "individual",
    "iso6393": "ahb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Qimant",
    "type": "living",
    "scope": "individual",
    "iso6393": "ahg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aghu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ahh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tiagbamrin Aizi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ahi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akha",
    "type": "living",
    "scope": "individual",
    "iso6393": "ahk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Igo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ahl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mobumrin Aizi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ahm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Àhàn",
    "type": "living",
    "scope": "individual",
    "iso6393": "ahn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ahom",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "aho",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aproumu Aizi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ahp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ahirani",
    "type": "living",
    "scope": "individual",
    "iso6393": "ahr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ashe",
    "type": "living",
    "scope": "individual",
    "iso6393": "ahs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ahtena",
    "type": "living",
    "scope": "individual",
    "iso6393": "aht",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arosi",
    "type": "living",
    "scope": "individual",
    "iso6393": "aia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ainu (China)",
    "type": "living",
    "scope": "individual",
    "iso6393": "aib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ainbai",
    "type": "living",
    "scope": "individual",
    "iso6393": "aic",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alngith",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "aid",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amara",
    "type": "living",
    "scope": "individual",
    "iso6393": "aie",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Agi",
    "type": "living",
    "scope": "individual",
    "iso6393": "aif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Antigua and Barbuda Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "aig",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ai-Cham",
    "type": "living",
    "scope": "individual",
    "iso6393": "aih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Assyrian Neo-Aramaic",
    "type": "living",
    "scope": "individual",
    "iso6393": "aii",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lishanid Noshan",
    "type": "living",
    "scope": "individual",
    "iso6393": "aij",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ake",
    "type": "living",
    "scope": "individual",
    "iso6393": "aik",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aimele",
    "type": "living",
    "scope": "individual",
    "iso6393": "ail",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aimol",
    "type": "living",
    "scope": "individual",
    "iso6393": "aim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ainu (Japan)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ain",
    "iso6392B": "ain",
    "iso6392T": "ain",
    "iso6391": null
  },
  {
    "name": "Aiton",
    "type": "living",
    "scope": "individual",
    "iso6393": "aio",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Burumakok",
    "type": "living",
    "scope": "individual",
    "iso6393": "aip",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aimaq",
    "type": "living",
    "scope": "individual",
    "iso6393": "aiq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Airoran",
    "type": "living",
    "scope": "individual",
    "iso6393": "air",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arikem",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ait",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aari",
    "type": "living",
    "scope": "individual",
    "iso6393": "aiw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aighon",
    "type": "living",
    "scope": "individual",
    "iso6393": "aix",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ali",
    "type": "living",
    "scope": "individual",
    "iso6393": "aiy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aja (South Sudan)",
    "type": "living",
    "scope": "individual",
    "iso6393": "aja",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aja (Benin)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ajg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ajië",
    "type": "living",
    "scope": "individual",
    "iso6393": "aji",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Andajin",
    "type": "living",
    "scope": "individual",
    "iso6393": "ajn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Levantine Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "ajp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Judeo-Tunisian Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "ajt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Judeo-Moroccan Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "aju",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ajawa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ajw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amri Karbi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ajz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akan",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "aka",
    "iso6392B": "aka",
    "iso6392T": "aka",
    "iso6391": "ak"
  },
  {
    "name": "Batak Angkola",
    "type": "living",
    "scope": "individual",
    "iso6393": "akb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mpur",
    "type": "living",
    "scope": "individual",
    "iso6393": "akc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ukpet-Ehom",
    "type": "living",
    "scope": "individual",
    "iso6393": "akd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akawaio",
    "type": "living",
    "scope": "individual",
    "iso6393": "ake",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akpa",
    "type": "living",
    "scope": "individual",
    "iso6393": "akf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anakalangu",
    "type": "living",
    "scope": "individual",
    "iso6393": "akg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Angal Heneng",
    "type": "living",
    "scope": "individual",
    "iso6393": "akh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aiome",
    "type": "living",
    "scope": "individual",
    "iso6393": "aki",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aka-Jeru",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "akj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akkadian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "akk",
    "iso6392B": "akk",
    "iso6392T": "akk",
    "iso6391": null
  },
  {
    "name": "Aklanon",
    "type": "living",
    "scope": "individual",
    "iso6393": "akl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aka-Bo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "akm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akurio",
    "type": "living",
    "scope": "individual",
    "iso6393": "ako",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siwu",
    "type": "living",
    "scope": "individual",
    "iso6393": "akp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ak",
    "type": "living",
    "scope": "individual",
    "iso6393": "akq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Araki",
    "type": "living",
    "scope": "individual",
    "iso6393": "akr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akaselem",
    "type": "living",
    "scope": "individual",
    "iso6393": "aks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akolet",
    "type": "living",
    "scope": "individual",
    "iso6393": "akt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akum",
    "type": "living",
    "scope": "individual",
    "iso6393": "aku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akhvakh",
    "type": "living",
    "scope": "individual",
    "iso6393": "akv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "akw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aka-Kede",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "akx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aka-Kol",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "aky",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alabama",
    "type": "living",
    "scope": "individual",
    "iso6393": "akz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alago",
    "type": "living",
    "scope": "individual",
    "iso6393": "ala",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Qawasqar",
    "type": "living",
    "scope": "individual",
    "iso6393": "alc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alladian",
    "type": "living",
    "scope": "individual",
    "iso6393": "ald",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aleut",
    "type": "living",
    "scope": "individual",
    "iso6393": "ale",
    "iso6392B": "ale",
    "iso6392T": "ale",
    "iso6391": null
  },
  {
    "name": "Alege",
    "type": "living",
    "scope": "individual",
    "iso6393": "alf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "alh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amaimon",
    "type": "living",
    "scope": "individual",
    "iso6393": "ali",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alangan",
    "type": "living",
    "scope": "individual",
    "iso6393": "alj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alak",
    "type": "living",
    "scope": "individual",
    "iso6393": "alk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Allar",
    "type": "living",
    "scope": "individual",
    "iso6393": "all",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amblong",
    "type": "living",
    "scope": "individual",
    "iso6393": "alm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gheg Albanian",
    "type": "living",
    "scope": "individual",
    "iso6393": "aln",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Larike-Wakasihu",
    "type": "living",
    "scope": "individual",
    "iso6393": "alo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alune",
    "type": "living",
    "scope": "individual",
    "iso6393": "alp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Algonquin",
    "type": "living",
    "scope": "individual",
    "iso6393": "alq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alutor",
    "type": "living",
    "scope": "individual",
    "iso6393": "alr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tosk Albanian",
    "type": "living",
    "scope": "individual",
    "iso6393": "als",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Altai",
    "type": "living",
    "scope": "individual",
    "iso6393": "alt",
    "iso6392B": "alt",
    "iso6392T": "alt",
    "iso6391": null
  },
  {
    "name": "'Are'are",
    "type": "living",
    "scope": "individual",
    "iso6393": "alu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alaba-K’abeena",
    "type": "living",
    "scope": "individual",
    "iso6393": "alw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amol",
    "type": "living",
    "scope": "individual",
    "iso6393": "alx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alyawarr",
    "type": "living",
    "scope": "individual",
    "iso6393": "aly",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alur",
    "type": "living",
    "scope": "individual",
    "iso6393": "alz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amanayé",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ama",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ambo",
    "type": "living",
    "scope": "individual",
    "iso6393": "amb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amahuaca",
    "type": "living",
    "scope": "individual",
    "iso6393": "amc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yanesha'",
    "type": "living",
    "scope": "individual",
    "iso6393": "ame",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hamer-Banna",
    "type": "living",
    "scope": "individual",
    "iso6393": "amf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amurdak",
    "type": "living",
    "scope": "individual",
    "iso6393": "amg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amharic",
    "type": "living",
    "scope": "individual",
    "iso6393": "amh",
    "iso6392B": "amh",
    "iso6392T": "amh",
    "iso6391": "am"
  },
  {
    "name": "Amis",
    "type": "living",
    "scope": "individual",
    "iso6393": "ami",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amdang",
    "type": "living",
    "scope": "individual",
    "iso6393": "amj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ambai",
    "type": "living",
    "scope": "individual",
    "iso6393": "amk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "War-Jaintia",
    "type": "living",
    "scope": "individual",
    "iso6393": "aml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ama (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "amm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amanab",
    "type": "living",
    "scope": "individual",
    "iso6393": "amn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amo",
    "type": "living",
    "scope": "individual",
    "iso6393": "amo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alamblak",
    "type": "living",
    "scope": "individual",
    "iso6393": "amp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amahai",
    "type": "living",
    "scope": "individual",
    "iso6393": "amq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amarakaeri",
    "type": "living",
    "scope": "individual",
    "iso6393": "amr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Amami-Oshima",
    "type": "living",
    "scope": "individual",
    "iso6393": "ams",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amto",
    "type": "living",
    "scope": "individual",
    "iso6393": "amt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guerrero Amuzgo",
    "type": "living",
    "scope": "individual",
    "iso6393": "amu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ambelau",
    "type": "living",
    "scope": "individual",
    "iso6393": "amv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Neo-Aramaic",
    "type": "living",
    "scope": "individual",
    "iso6393": "amw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anmatyerre",
    "type": "living",
    "scope": "individual",
    "iso6393": "amx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ami",
    "type": "living",
    "scope": "individual",
    "iso6393": "amy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Atampaya",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "amz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Andaqui",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ana",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Andoa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "anb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngas",
    "type": "living",
    "scope": "individual",
    "iso6393": "anc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ansus",
    "type": "living",
    "scope": "individual",
    "iso6393": "and",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xârâcùù",
    "type": "living",
    "scope": "individual",
    "iso6393": "ane",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Animere",
    "type": "living",
    "scope": "individual",
    "iso6393": "anf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old English (ca. 450-1100)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "ang",
    "iso6392B": "ang",
    "iso6392T": "ang",
    "iso6391": null
  },
  {
    "name": "Nend",
    "type": "living",
    "scope": "individual",
    "iso6393": "anh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Andi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ani",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anor",
    "type": "living",
    "scope": "individual",
    "iso6393": "anj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Goemai",
    "type": "living",
    "scope": "individual",
    "iso6393": "ank",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anu-Hkongso Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "anl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anal",
    "type": "living",
    "scope": "individual",
    "iso6393": "anm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Obolo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ann",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Andoque",
    "type": "living",
    "scope": "individual",
    "iso6393": "ano",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Angika",
    "type": "living",
    "scope": "individual",
    "iso6393": "anp",
    "iso6392B": "anp",
    "iso6392T": "anp",
    "iso6391": null
  },
  {
    "name": "Jarawa (India)",
    "type": "living",
    "scope": "individual",
    "iso6393": "anq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Andh",
    "type": "living",
    "scope": "individual",
    "iso6393": "anr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anserma",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ans",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Antakarinya",
    "type": "living",
    "scope": "individual",
    "iso6393": "ant",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anuak",
    "type": "living",
    "scope": "individual",
    "iso6393": "anu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Denya",
    "type": "living",
    "scope": "individual",
    "iso6393": "anv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anaang",
    "type": "living",
    "scope": "individual",
    "iso6393": "anw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Andra-Hus",
    "type": "living",
    "scope": "individual",
    "iso6393": "anx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anyin",
    "type": "living",
    "scope": "individual",
    "iso6393": "any",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anem",
    "type": "living",
    "scope": "individual",
    "iso6393": "anz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Angolar",
    "type": "living",
    "scope": "individual",
    "iso6393": "aoa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abom",
    "type": "living",
    "scope": "individual",
    "iso6393": "aob",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pemon",
    "type": "living",
    "scope": "individual",
    "iso6393": "aoc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Andarum",
    "type": "living",
    "scope": "individual",
    "iso6393": "aod",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Angal Enen",
    "type": "living",
    "scope": "individual",
    "iso6393": "aoe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bragat",
    "type": "living",
    "scope": "individual",
    "iso6393": "aof",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Angoram",
    "type": "living",
    "scope": "individual",
    "iso6393": "aog",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arma",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "aoh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anindilyakwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "aoi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mufian",
    "type": "living",
    "scope": "individual",
    "iso6393": "aoj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arhö",
    "type": "living",
    "scope": "individual",
    "iso6393": "aok",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alor",
    "type": "living",
    "scope": "individual",
    "iso6393": "aol",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ömie",
    "type": "living",
    "scope": "individual",
    "iso6393": "aom",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bumbita Arapesh",
    "type": "living",
    "scope": "individual",
    "iso6393": "aon",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aore",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "aor",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taikat",
    "type": "living",
    "scope": "individual",
    "iso6393": "aos",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Atong (India)",
    "type": "living",
    "scope": "individual",
    "iso6393": "aot",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "A'ou",
    "type": "living",
    "scope": "individual",
    "iso6393": "aou",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Atorada",
    "type": "living",
    "scope": "individual",
    "iso6393": "aox",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uab Meto",
    "type": "living",
    "scope": "individual",
    "iso6393": "aoz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sa'a",
    "type": "living",
    "scope": "individual",
    "iso6393": "apb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Levantine Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "apc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sudanese Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "apd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bukiyip",
    "type": "living",
    "scope": "individual",
    "iso6393": "ape",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pahanan Agta",
    "type": "living",
    "scope": "individual",
    "iso6393": "apf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ampanang",
    "type": "living",
    "scope": "individual",
    "iso6393": "apg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Athpariya",
    "type": "living",
    "scope": "individual",
    "iso6393": "aph",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Apiaká",
    "type": "living",
    "scope": "individual",
    "iso6393": "api",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jicarilla Apache",
    "type": "living",
    "scope": "individual",
    "iso6393": "apj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kiowa Apache",
    "type": "living",
    "scope": "individual",
    "iso6393": "apk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lipan Apache",
    "type": "living",
    "scope": "individual",
    "iso6393": "apl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mescalero-Chiricahua Apache",
    "type": "living",
    "scope": "individual",
    "iso6393": "apm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Apinayé",
    "type": "living",
    "scope": "individual",
    "iso6393": "apn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ambul",
    "type": "living",
    "scope": "individual",
    "iso6393": "apo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Apma",
    "type": "living",
    "scope": "individual",
    "iso6393": "app",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "A-Pucikwar",
    "type": "living",
    "scope": "individual",
    "iso6393": "apq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arop-Lokep",
    "type": "living",
    "scope": "individual",
    "iso6393": "apr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arop-Sissano",
    "type": "living",
    "scope": "individual",
    "iso6393": "aps",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Apatani",
    "type": "living",
    "scope": "individual",
    "iso6393": "apt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Apurinã",
    "type": "living",
    "scope": "individual",
    "iso6393": "apu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alapmunte",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "apv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Apache",
    "type": "living",
    "scope": "individual",
    "iso6393": "apw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aputai",
    "type": "living",
    "scope": "individual",
    "iso6393": "apx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Apalaí",
    "type": "living",
    "scope": "individual",
    "iso6393": "apy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Safeyoka",
    "type": "living",
    "scope": "individual",
    "iso6393": "apz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Archi",
    "type": "living",
    "scope": "individual",
    "iso6393": "aqc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ampari Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "aqd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arigidi",
    "type": "living",
    "scope": "individual",
    "iso6393": "aqg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Atohwaim",
    "type": "living",
    "scope": "individual",
    "iso6393": "aqm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Alta",
    "type": "living",
    "scope": "individual",
    "iso6393": "aqn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Atakapa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "aqp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arhâ",
    "type": "living",
    "scope": "individual",
    "iso6393": "aqr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Angaité",
    "type": "living",
    "scope": "individual",
    "iso6393": "aqt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akuntsu",
    "type": "living",
    "scope": "individual",
    "iso6393": "aqz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arabic",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "ara",
    "iso6392B": "ara",
    "iso6392T": "ara",
    "iso6391": "ar"
  },
  {
    "name": "Standard Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "arb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Official Aramaic (700-300 BCE)",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "arc",
    "iso6392B": "arc",
    "iso6392T": "arc",
    "iso6391": null
  },
  {
    "name": "Arabana",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ard",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Arrarnta",
    "type": "living",
    "scope": "individual",
    "iso6393": "are",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aragonese",
    "type": "living",
    "scope": "individual",
    "iso6393": "arg",
    "iso6392B": "arg",
    "iso6392T": "arg",
    "iso6391": "an"
  },
  {
    "name": "Arhuaco",
    "type": "living",
    "scope": "individual",
    "iso6393": "arh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arikara",
    "type": "living",
    "scope": "individual",
    "iso6393": "ari",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arapaso",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "arj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arikapú",
    "type": "living",
    "scope": "individual",
    "iso6393": "ark",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arabela",
    "type": "living",
    "scope": "individual",
    "iso6393": "arl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mapudungun",
    "type": "living",
    "scope": "individual",
    "iso6393": "arn",
    "iso6392B": "arn",
    "iso6392T": "arn",
    "iso6391": null
  },
  {
    "name": "Araona",
    "type": "living",
    "scope": "individual",
    "iso6393": "aro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arapaho",
    "type": "living",
    "scope": "individual",
    "iso6393": "arp",
    "iso6392B": "arp",
    "iso6392T": "arp",
    "iso6391": null
  },
  {
    "name": "Algerian Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "arq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karo (Brazil)",
    "type": "living",
    "scope": "individual",
    "iso6393": "arr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Najdi Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "ars",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aruá (Amazonas State)",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "aru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arbore",
    "type": "living",
    "scope": "individual",
    "iso6393": "arv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arawak",
    "type": "living",
    "scope": "individual",
    "iso6393": "arw",
    "iso6392B": "arw",
    "iso6392T": "arw",
    "iso6391": null
  },
  {
    "name": "Aruá (Rodonia State)",
    "type": "living",
    "scope": "individual",
    "iso6393": "arx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moroccan Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "ary",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Egyptian Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "arz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Asu (Tanzania)",
    "type": "living",
    "scope": "individual",
    "iso6393": "asa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Assiniboine",
    "type": "living",
    "scope": "individual",
    "iso6393": "asb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Casuarina Coast Asmat",
    "type": "living",
    "scope": "individual",
    "iso6393": "asc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "American Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "ase",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Auslan",
    "type": "living",
    "scope": "individual",
    "iso6393": "asf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cishingini",
    "type": "living",
    "scope": "individual",
    "iso6393": "asg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abishira",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ash",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buruwai",
    "type": "living",
    "scope": "individual",
    "iso6393": "asi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sari",
    "type": "living",
    "scope": "individual",
    "iso6393": "asj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ashkun",
    "type": "living",
    "scope": "individual",
    "iso6393": "ask",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Asilulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "asl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Assamese",
    "type": "living",
    "scope": "individual",
    "iso6393": "asm",
    "iso6392B": "asm",
    "iso6392T": "asm",
    "iso6391": "as"
  },
  {
    "name": "Xingú Asuriní",
    "type": "living",
    "scope": "individual",
    "iso6393": "asn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dano",
    "type": "living",
    "scope": "individual",
    "iso6393": "aso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Algerian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "asp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Austrian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "asq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Asuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "asr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ipulo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ass",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Asturian",
    "type": "living",
    "scope": "individual",
    "iso6393": "ast",
    "iso6392B": "ast",
    "iso6392T": "ast",
    "iso6391": null
  },
  {
    "name": "Tocantins Asurini",
    "type": "living",
    "scope": "individual",
    "iso6393": "asu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Asoa",
    "type": "living",
    "scope": "individual",
    "iso6393": "asv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Australian Aborigines Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "asw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muratayak",
    "type": "living",
    "scope": "individual",
    "iso6393": "asx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaosakor Asmat",
    "type": "living",
    "scope": "individual",
    "iso6393": "asy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "As",
    "type": "living",
    "scope": "individual",
    "iso6393": "asz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pele-Ata",
    "type": "living",
    "scope": "individual",
    "iso6393": "ata",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zaiwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "atb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Atsahuaca",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "atc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ata Manobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "atd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Atemble",
    "type": "living",
    "scope": "individual",
    "iso6393": "ate",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ivbie North-Okpela-Arhe",
    "type": "living",
    "scope": "individual",
    "iso6393": "atg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Attié",
    "type": "living",
    "scope": "individual",
    "iso6393": "ati",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Atikamekw",
    "type": "living",
    "scope": "individual",
    "iso6393": "atj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ati",
    "type": "living",
    "scope": "individual",
    "iso6393": "atk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mt. Iraya Agta",
    "type": "living",
    "scope": "individual",
    "iso6393": "atl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ata",
    "type": "living",
    "scope": "individual",
    "iso6393": "atm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ashtiani",
    "type": "living",
    "scope": "individual",
    "iso6393": "atn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Atong (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ato",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pudtol Atta",
    "type": "living",
    "scope": "individual",
    "iso6393": "atp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aralle-Tabulahan",
    "type": "living",
    "scope": "individual",
    "iso6393": "atq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waimiri-Atroari",
    "type": "living",
    "scope": "individual",
    "iso6393": "atr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gros Ventre",
    "type": "living",
    "scope": "individual",
    "iso6393": "ats",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pamplona Atta",
    "type": "living",
    "scope": "individual",
    "iso6393": "att",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Reel",
    "type": "living",
    "scope": "individual",
    "iso6393": "atu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Altai",
    "type": "living",
    "scope": "individual",
    "iso6393": "atv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Atsugewi",
    "type": "living",
    "scope": "individual",
    "iso6393": "atw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arutani",
    "type": "living",
    "scope": "individual",
    "iso6393": "atx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aneityum",
    "type": "living",
    "scope": "individual",
    "iso6393": "aty",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arta",
    "type": "living",
    "scope": "individual",
    "iso6393": "atz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Asumboa",
    "type": "living",
    "scope": "individual",
    "iso6393": "aua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alugu",
    "type": "living",
    "scope": "individual",
    "iso6393": "aub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waorani",
    "type": "living",
    "scope": "individual",
    "iso6393": "auc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anuta",
    "type": "living",
    "scope": "individual",
    "iso6393": "aud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aguna",
    "type": "living",
    "scope": "individual",
    "iso6393": "aug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aushi",
    "type": "living",
    "scope": "individual",
    "iso6393": "auh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anuki",
    "type": "living",
    "scope": "individual",
    "iso6393": "aui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awjilah",
    "type": "living",
    "scope": "individual",
    "iso6393": "auj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Heyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "auk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aulua",
    "type": "living",
    "scope": "individual",
    "iso6393": "aul",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Asu (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "aum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Molmo One",
    "type": "living",
    "scope": "individual",
    "iso6393": "aun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Auyokawa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "auo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makayam",
    "type": "living",
    "scope": "individual",
    "iso6393": "aup",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anus",
    "type": "living",
    "scope": "individual",
    "iso6393": "auq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aruek",
    "type": "living",
    "scope": "individual",
    "iso6393": "aur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Austral",
    "type": "living",
    "scope": "individual",
    "iso6393": "aut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Auye",
    "type": "living",
    "scope": "individual",
    "iso6393": "auu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awyi",
    "type": "living",
    "scope": "individual",
    "iso6393": "auw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aurá",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "aux",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awiyaana",
    "type": "living",
    "scope": "individual",
    "iso6393": "auy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uzbeki Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "auz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Avaric",
    "type": "living",
    "scope": "individual",
    "iso6393": "ava",
    "iso6392B": "ava",
    "iso6392T": "ava",
    "iso6391": "av"
  },
  {
    "name": "Avau",
    "type": "living",
    "scope": "individual",
    "iso6393": "avb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alviri-Vidari",
    "type": "living",
    "scope": "individual",
    "iso6393": "avd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Avestan",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "ave",
    "iso6392B": "ave",
    "iso6392T": "ave",
    "iso6391": "ae"
  },
  {
    "name": "Avikam",
    "type": "living",
    "scope": "individual",
    "iso6393": "avi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kotava",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "avk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Egyptian Bedawi Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "avl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Angkamuthi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "avm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Avatime",
    "type": "living",
    "scope": "individual",
    "iso6393": "avn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Agavotaguerra",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "avo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aushiri",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "avs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Au",
    "type": "living",
    "scope": "individual",
    "iso6393": "avt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Avokaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "avu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Avá-Canoeiro",
    "type": "living",
    "scope": "individual",
    "iso6393": "avv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awadhi",
    "type": "living",
    "scope": "individual",
    "iso6393": "awa",
    "iso6392B": "awa",
    "iso6392T": "awa",
    "iso6391": null
  },
  {
    "name": "Awa (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "awb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cicipu",
    "type": "living",
    "scope": "individual",
    "iso6393": "awc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awetí",
    "type": "living",
    "scope": "individual",
    "iso6393": "awe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anguthimri",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "awg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awbono",
    "type": "living",
    "scope": "individual",
    "iso6393": "awh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aekyom",
    "type": "living",
    "scope": "individual",
    "iso6393": "awi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awabakal",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "awk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arawum",
    "type": "living",
    "scope": "individual",
    "iso6393": "awm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awngi",
    "type": "living",
    "scope": "individual",
    "iso6393": "awn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awak",
    "type": "living",
    "scope": "individual",
    "iso6393": "awo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awera",
    "type": "living",
    "scope": "individual",
    "iso6393": "awr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Awyu",
    "type": "living",
    "scope": "individual",
    "iso6393": "aws",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Araweté",
    "type": "living",
    "scope": "individual",
    "iso6393": "awt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Awyu",
    "type": "living",
    "scope": "individual",
    "iso6393": "awu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jair Awyu",
    "type": "living",
    "scope": "individual",
    "iso6393": "awv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awun",
    "type": "living",
    "scope": "individual",
    "iso6393": "aww",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awara",
    "type": "living",
    "scope": "individual",
    "iso6393": "awx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Edera Awyu",
    "type": "living",
    "scope": "individual",
    "iso6393": "awy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abipon",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "axb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ayerrerenge",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "axe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mato Grosso Arára",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "axg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaka (Central African Republic)",
    "type": "living",
    "scope": "individual",
    "iso6393": "axk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lower Southern Aranda",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "axl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Middle Armenian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "axm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xârâgurè",
    "type": "living",
    "scope": "individual",
    "iso6393": "axx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awar",
    "type": "living",
    "scope": "individual",
    "iso6393": "aya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ayizo Gbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Aymara",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ayabadhu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ayd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ayere",
    "type": "living",
    "scope": "individual",
    "iso6393": "aye",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ginyanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hadrami Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Leyigha",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akuku",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Libyan Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aymara",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "aym",
    "iso6392B": "aym",
    "iso6392T": "aym",
    "iso6391": "ay"
  },
  {
    "name": "Sanaani Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ayoreo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Mesopotamian Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ayi (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Aymara",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sorsogon Ayta",
    "type": "living",
    "scope": "individual",
    "iso6393": "ays",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Magbukun Ayta",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ayu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tayabas Ayta",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ayy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mai Brat",
    "type": "living",
    "scope": "individual",
    "iso6393": "ayz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Azha",
    "type": "living",
    "scope": "individual",
    "iso6393": "aza",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Azerbaijani",
    "type": "living",
    "scope": "individual",
    "iso6393": "azb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Durango Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "azd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Azerbaijani",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "aze",
    "iso6392B": "aze",
    "iso6392T": "aze",
    "iso6391": "az"
  },
  {
    "name": "San Pedro Amuzgos Amuzgo",
    "type": "living",
    "scope": "individual",
    "iso6393": "azg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Azerbaijani",
    "type": "living",
    "scope": "individual",
    "iso6393": "azj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ipalapa Amuzgo",
    "type": "living",
    "scope": "individual",
    "iso6393": "azm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Durango Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "azn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awing",
    "type": "living",
    "scope": "individual",
    "iso6393": "azo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Faire Atta",
    "type": "living",
    "scope": "individual",
    "iso6393": "azt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Highland Puebla Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "azz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Babatana",
    "type": "living",
    "scope": "individual",
    "iso6393": "baa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bainouk-Gunyuño",
    "type": "living",
    "scope": "individual",
    "iso6393": "bab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Badui",
    "type": "living",
    "scope": "individual",
    "iso6393": "bac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baré",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nubaca",
    "type": "living",
    "scope": "individual",
    "iso6393": "baf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tuki",
    "type": "living",
    "scope": "individual",
    "iso6393": "bag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bahamas Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "bah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barakai",
    "type": "living",
    "scope": "individual",
    "iso6393": "baj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bashkir",
    "type": "living",
    "scope": "individual",
    "iso6393": "bak",
    "iso6392B": "bak",
    "iso6392T": "bak",
    "iso6391": "ba"
  },
  {
    "name": "Baluchi",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "bal",
    "iso6392B": "bal",
    "iso6392T": "bal",
    "iso6391": null
  },
  {
    "name": "Bambara",
    "type": "living",
    "scope": "individual",
    "iso6393": "bam",
    "iso6392B": "bam",
    "iso6392T": "bam",
    "iso6391": "bm"
  },
  {
    "name": "Balinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "ban",
    "iso6392B": "ban",
    "iso6392T": "ban",
    "iso6391": null
  },
  {
    "name": "Waimaha",
    "type": "living",
    "scope": "individual",
    "iso6393": "bao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bantawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "bap",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bavarian",
    "type": "living",
    "scope": "individual",
    "iso6393": "bar",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Basa (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bas",
    "iso6392B": "bas",
    "iso6392T": "bas",
    "iso6391": null
  },
  {
    "name": "Bada (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vengo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bambili-Bambui",
    "type": "living",
    "scope": "individual",
    "iso6393": "baw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bamun",
    "type": "living",
    "scope": "individual",
    "iso6393": "bax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Batuley",
    "type": "living",
    "scope": "individual",
    "iso6393": "bay",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baatonum",
    "type": "living",
    "scope": "individual",
    "iso6393": "bba",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barai",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Batak Toba",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bau",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bangba",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baibai",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barama",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bugan",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barombi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ghomálá'",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Babanki",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bats",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Babango",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uneapa",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Bobo Madaré",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Central Banda",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bamali",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Girawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bakpinka",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mburku",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kulung (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karnai",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baba",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bubia",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Befang",
    "type": "living",
    "scope": "individual",
    "iso6393": "bby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Babalia Creole Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "bbz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Bai",
    "type": "living",
    "scope": "individual",
    "iso6393": "bca",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bainouk-Samik",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Balochi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Babar",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bamenyam",
    "type": "living",
    "scope": "individual",
    "iso6393": "bce",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bamu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baga Pokur",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bariai",
    "type": "living",
    "scope": "individual",
    "iso6393": "bch",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baoulé",
    "type": "living",
    "scope": "individual",
    "iso6393": "bci",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bardi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bunuba",
    "type": "living",
    "scope": "individual",
    "iso6393": "bck",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Bikol",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bannoni",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bali (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaluli",
    "type": "living",
    "scope": "individual",
    "iso6393": "bco",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bali (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bench",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Babine",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kohumono",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bendi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bct",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awad Bing",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shoo-Minda-Nye",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bana",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bacama",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bainouk-Gunyaamolo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bcz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bayot",
    "type": "living",
    "scope": "individual",
    "iso6393": "bda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Basap",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Emberá-Baudó",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bunama",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bade",
    "type": "living",
    "scope": "individual",
    "iso6393": "bde",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biage",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bonggi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baka (South Sudan)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Burun",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bai (South Sudan)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Budukh",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Indonesian Bajau",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buduma",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baldemu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Morom",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bende",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bahnar",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Coast Bajau",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Burunge",
    "type": "living",
    "scope": "individual",
    "iso6393": "bds",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bokoto",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oroko",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bodo Parja",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baham",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Budong-Budong",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bandjalang",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Badeshi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bdz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Beaver",
    "type": "living",
    "scope": "individual",
    "iso6393": "bea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bebele",
    "type": "living",
    "scope": "individual",
    "iso6393": "beb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iceve-Maci",
    "type": "living",
    "scope": "individual",
    "iso6393": "bec",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bedoanas",
    "type": "living",
    "scope": "individual",
    "iso6393": "bed",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Byangsi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bee",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Benabena",
    "type": "living",
    "scope": "individual",
    "iso6393": "bef",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Belait",
    "type": "living",
    "scope": "individual",
    "iso6393": "beg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biali",
    "type": "living",
    "scope": "individual",
    "iso6393": "beh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bekati'",
    "type": "living",
    "scope": "individual",
    "iso6393": "bei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Beja",
    "type": "living",
    "scope": "individual",
    "iso6393": "bej",
    "iso6392B": "bej",
    "iso6392T": "bej",
    "iso6391": null
  },
  {
    "name": "Bebeli",
    "type": "living",
    "scope": "individual",
    "iso6393": "bek",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Belarusian",
    "type": "living",
    "scope": "individual",
    "iso6393": "bel",
    "iso6392B": "bel",
    "iso6392T": "bel",
    "iso6391": "be"
  },
  {
    "name": "Bemba (Zambia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bem",
    "iso6392B": "bem",
    "iso6392T": "bem",
    "iso6391": null
  },
  {
    "name": "Bengali",
    "type": "living",
    "scope": "individual",
    "iso6393": "ben",
    "iso6392B": "ben",
    "iso6392T": "ben",
    "iso6391": "bn"
  },
  {
    "name": "Beami",
    "type": "living",
    "scope": "individual",
    "iso6393": "beo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Besoa",
    "type": "living",
    "scope": "individual",
    "iso6393": "bep",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Beembe",
    "type": "living",
    "scope": "individual",
    "iso6393": "beq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Besme",
    "type": "living",
    "scope": "individual",
    "iso6393": "bes",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guiberoua Béte",
    "type": "living",
    "scope": "individual",
    "iso6393": "bet",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Blagar",
    "type": "living",
    "scope": "individual",
    "iso6393": "beu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Daloa Bété",
    "type": "living",
    "scope": "individual",
    "iso6393": "bev",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Betawi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bew",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jur Modo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bex",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Beli (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bey",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bena (Tanzania)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bez",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bari",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pauri Bareli",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Panyi Bai",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bafut",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Betaf",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bofi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bff",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Busang Kayan",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Blafe",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "British Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bafanji",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ban Khor Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Banda-Ndélé",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mmen",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bunak",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malba Birifor",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Beba",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Badaga",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bazigar",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Bai",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Balti",
    "type": "living",
    "scope": "individual",
    "iso6393": "bft",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gahri",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bondo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bantayanon",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bagheli",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mahasu Pahari",
    "type": "living",
    "scope": "individual",
    "iso6393": "bfz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gwamhi-Wuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "bga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bobongko",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Haryanvi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rathwi Bareli",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bauria",
    "type": "living",
    "scope": "individual",
    "iso6393": "bge",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bangandu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bugun",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Giangan",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bangolan",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bit",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bo (Laos)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Balochi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baga Koga",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Balochi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bagri",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bawm Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tagabawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bughotu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbongno",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Warkay-Bipim",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bhatri",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Balkan Gagauz Turkish",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Benggoi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Banggai",
    "type": "living",
    "scope": "individual",
    "iso6393": "bgz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bharia",
    "type": "living",
    "scope": "individual",
    "iso6393": "bha",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bhili",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biga",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bhadrawahi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bhaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Odiai",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Binandere",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bukharic",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bhilali",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bahing",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bimin",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bathari",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bohtan Neo-Aramaic",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bhojpuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "bho",
    "iso6392B": "bho",
    "iso6392T": "bho",
    "iso6391": null
  },
  {
    "name": "Bima",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tukang Besi South",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bara Malagasy",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buwal",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bhattiyali",
    "type": "living",
    "scope": "individual",
    "iso6393": "bht",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bhunjia",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bahau",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biak",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bhalay",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bhele",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bada (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bhz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Badimaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "bia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bissa",
    "type": "living",
    "scope": "individual",
    "iso6393": "bib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bikaru",
    "type": "living",
    "scope": "individual",
    "iso6393": "bic",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bidiyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bid",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bepour",
    "type": "living",
    "scope": "individual",
    "iso6393": "bie",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biafada",
    "type": "living",
    "scope": "individual",
    "iso6393": "bif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biangai",
    "type": "living",
    "scope": "individual",
    "iso6393": "big",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vaghat-Ya-Bijim-Legeri",
    "type": "living",
    "scope": "individual",
    "iso6393": "bij",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bikol",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "bik",
    "iso6392B": "bik",
    "iso6392T": "bik",
    "iso6391": null
  },
  {
    "name": "Bile",
    "type": "living",
    "scope": "individual",
    "iso6393": "bil",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bimoba",
    "type": "living",
    "scope": "individual",
    "iso6393": "bim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bini",
    "type": "living",
    "scope": "individual",
    "iso6393": "bin",
    "iso6392B": "bin",
    "iso6392T": "bin",
    "iso6391": null
  },
  {
    "name": "Nai",
    "type": "living",
    "scope": "individual",
    "iso6393": "bio",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bila",
    "type": "living",
    "scope": "individual",
    "iso6393": "bip",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bipi",
    "type": "living",
    "scope": "individual",
    "iso6393": "biq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bisorio",
    "type": "living",
    "scope": "individual",
    "iso6393": "bir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bislama",
    "type": "living",
    "scope": "individual",
    "iso6393": "bis",
    "iso6392B": "bis",
    "iso6392T": "bis",
    "iso6391": "bi"
  },
  {
    "name": "Berinomo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bit",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biete",
    "type": "living",
    "scope": "individual",
    "iso6393": "biu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Birifor",
    "type": "living",
    "scope": "individual",
    "iso6393": "biv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kol (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "biw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bijori",
    "type": "living",
    "scope": "individual",
    "iso6393": "bix",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Birhor",
    "type": "living",
    "scope": "individual",
    "iso6393": "biy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baloi",
    "type": "living",
    "scope": "individual",
    "iso6393": "biz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Budza",
    "type": "living",
    "scope": "individual",
    "iso6393": "bja",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Banggarla",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bjb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bariji",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biao-Jiao Mien",
    "type": "living",
    "scope": "individual",
    "iso6393": "bje",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barzani Jewish Neo-Aramaic",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bidyogo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bahinemo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Burji",
    "type": "living",
    "scope": "individual",
    "iso6393": "bji",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanauji",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barok",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bulu (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bajelani",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Banjar",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mid-Southern Banda",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fanamaket",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Binumarien",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bajan",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Balanta-Ganja",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Busuu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bju",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bedjond",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bakwé",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Banao Itneg",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bayali",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bjy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baruga",
    "type": "living",
    "scope": "individual",
    "iso6393": "bjz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kyak",
    "type": "living",
    "scope": "individual",
    "iso6393": "bka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baka (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Binukid",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Beeke",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buraka",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bakoko",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baki",
    "type": "living",
    "scope": "individual",
    "iso6393": "bki",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pande",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Brokskat",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Berik",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kom (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bukitan",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwa'",
    "type": "living",
    "scope": "individual",
    "iso6393": "bko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boko (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bakairí",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bakumpai",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Sorsoganon",
    "type": "living",
    "scope": "individual",
    "iso6393": "bks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boloki",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buhid",
    "type": "living",
    "scope": "individual",
    "iso6393": "bku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bekwarra",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bekwel",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baikeno",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bokyi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bky",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bungku",
    "type": "living",
    "scope": "individual",
    "iso6393": "bkz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siksika",
    "type": "living",
    "scope": "individual",
    "iso6393": "bla",
    "iso6392B": "bla",
    "iso6392T": "bla",
    "iso6391": null
  },
  {
    "name": "Bilua",
    "type": "living",
    "scope": "individual",
    "iso6393": "blb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bella Coola",
    "type": "living",
    "scope": "individual",
    "iso6393": "blc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bolango",
    "type": "living",
    "scope": "individual",
    "iso6393": "bld",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Balanta-Kentohe",
    "type": "living",
    "scope": "individual",
    "iso6393": "ble",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buol",
    "type": "living",
    "scope": "individual",
    "iso6393": "blf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Balau",
    "type": "living",
    "scope": "individual",
    "iso6393": "blg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuwaa",
    "type": "living",
    "scope": "individual",
    "iso6393": "blh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bolia",
    "type": "living",
    "scope": "individual",
    "iso6393": "bli",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bolongan",
    "type": "living",
    "scope": "individual",
    "iso6393": "blj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pa'o Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "blk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biloxi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bll",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Beli (South Sudan)",
    "type": "living",
    "scope": "individual",
    "iso6393": "blm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Catanduanes Bikol",
    "type": "living",
    "scope": "individual",
    "iso6393": "bln",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anii",
    "type": "living",
    "scope": "individual",
    "iso6393": "blo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Blablanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "blp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baluan-Pam",
    "type": "living",
    "scope": "individual",
    "iso6393": "blq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Blang",
    "type": "living",
    "scope": "individual",
    "iso6393": "blr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Balaesang",
    "type": "living",
    "scope": "individual",
    "iso6393": "bls",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tai Dam",
    "type": "living",
    "scope": "individual",
    "iso6393": "blt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kibala",
    "type": "living",
    "scope": "individual",
    "iso6393": "blv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Balangao",
    "type": "living",
    "scope": "individual",
    "iso6393": "blw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mag-Indi Ayta",
    "type": "living",
    "scope": "individual",
    "iso6393": "blx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Notre",
    "type": "living",
    "scope": "individual",
    "iso6393": "bly",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Balantak",
    "type": "living",
    "scope": "individual",
    "iso6393": "blz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lame",
    "type": "living",
    "scope": "individual",
    "iso6393": "bma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bembe",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biem",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baga Manduri",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Limassa",
    "type": "living",
    "scope": "individual",
    "iso6393": "bme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bom-Kim",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bamwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kein",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bagirmi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bote-Majhi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ghayavi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bomboli",
    "type": "living",
    "scope": "individual",
    "iso6393": "bml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Betsimisaraka Malagasy",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bina (Papua New Guinea)",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bmn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bambalang",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bulgebi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bomu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muinane",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bilma Kanuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "bms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biao Mon",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Somba-Siawari",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bum",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bomwali",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baimak",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baramu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bmz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bonerate",
    "type": "living",
    "scope": "individual",
    "iso6393": "bna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bookan",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bontok",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "bnc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Banda (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bintauna",
    "type": "living",
    "scope": "individual",
    "iso6393": "bne",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Masiwang",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Benga",
    "type": "living",
    "scope": "individual",
    "iso6393": "bng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bangi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Tawbuid",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bierebo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boon",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Batanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bunun",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bantoanon",
    "type": "living",
    "scope": "individual",
    "iso6393": "bno",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bola",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bantik",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Butmas-Tur",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bundeli",
    "type": "living",
    "scope": "individual",
    "iso6393": "bns",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bentong",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bonerif",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bisis",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bangubangu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bintulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bny",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Beezen",
    "type": "living",
    "scope": "individual",
    "iso6393": "bnz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bora",
    "type": "living",
    "scope": "individual",
    "iso6393": "boa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aweer",
    "type": "living",
    "scope": "individual",
    "iso6393": "bob",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tibetan",
    "type": "living",
    "scope": "individual",
    "iso6393": "bod",
    "iso6392B": "tib",
    "iso6392T": "bod",
    "iso6391": "bo"
  },
  {
    "name": "Mundabli",
    "type": "living",
    "scope": "individual",
    "iso6393": "boe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bolon",
    "type": "living",
    "scope": "individual",
    "iso6393": "bof",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bamako Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "bog",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boma",
    "type": "living",
    "scope": "individual",
    "iso6393": "boh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barbareño",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "boi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anjam",
    "type": "living",
    "scope": "individual",
    "iso6393": "boj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bonjo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bok",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bole",
    "type": "living",
    "scope": "individual",
    "iso6393": "bol",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Berom",
    "type": "living",
    "scope": "individual",
    "iso6393": "bom",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bine",
    "type": "living",
    "scope": "individual",
    "iso6393": "bon",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tiemacèwè Bozo",
    "type": "living",
    "scope": "individual",
    "iso6393": "boo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bonkiman",
    "type": "living",
    "scope": "individual",
    "iso6393": "bop",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bogaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "boq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Borôro",
    "type": "living",
    "scope": "individual",
    "iso6393": "bor",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bosnian",
    "type": "living",
    "scope": "individual",
    "iso6393": "bos",
    "iso6392B": "bos",
    "iso6392T": "bos",
    "iso6391": "bs"
  },
  {
    "name": "Bongo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bot",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bondei",
    "type": "living",
    "scope": "individual",
    "iso6393": "bou",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tuwuli",
    "type": "living",
    "scope": "individual",
    "iso6393": "bov",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rema",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bow",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buamu",
    "type": "living",
    "scope": "individual",
    "iso6393": "box",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bodo (Central African Republic)",
    "type": "living",
    "scope": "individual",
    "iso6393": "boy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tiéyaxo Bozo",
    "type": "living",
    "scope": "individual",
    "iso6393": "boz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Daakaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barbacoas",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bpb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Banda-Banda",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bonggo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Botlikh",
    "type": "living",
    "scope": "individual",
    "iso6393": "bph",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bagupi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Binji",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Orowe",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Broome Pearling Lugger Pidgin",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biyom",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dzao Min",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anasi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaure",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Banda Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koronadal Blaan",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sarangani Blaan",
    "type": "living",
    "scope": "individual",
    "iso6393": "bps",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barrow Point",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bpt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bongu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bian Marind",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bo (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Palya Bareli",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bishnupriya",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bilba",
    "type": "living",
    "scope": "individual",
    "iso6393": "bpz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tchumbuli",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bagusa",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boko (Benin)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bung",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baga Kaloum",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bqf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bago-Kusuntu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baima",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bakhtiari",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bandial",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Banda-Mbrès",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bilakura",
    "type": "living",
    "scope": "individual",
    "iso6393": "bql",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wumboko",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bulgarian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Balo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Busa",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biritai",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Burusu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bosngun",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bamukumbit",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boguru",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koro Wachi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buru (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baangi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bengkala Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bakaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "bqz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Braj",
    "type": "living",
    "scope": "individual",
    "iso6393": "bra",
    "iso6392B": "bra",
    "iso6392T": "bra",
    "iso6391": null
  },
  {
    "name": "Lave",
    "type": "living",
    "scope": "individual",
    "iso6393": "brb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Berbice Creole Dutch",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "brc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baraamu",
    "type": "living",
    "scope": "individual",
    "iso6393": "brd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Breton",
    "type": "living",
    "scope": "individual",
    "iso6393": "bre",
    "iso6392B": "bre",
    "iso6392T": "bre",
    "iso6391": "br"
  },
  {
    "name": "Bera",
    "type": "living",
    "scope": "individual",
    "iso6393": "brf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baure",
    "type": "living",
    "scope": "individual",
    "iso6393": "brg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Brahui",
    "type": "living",
    "scope": "individual",
    "iso6393": "brh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mokpwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "bri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bieria",
    "type": "living",
    "scope": "individual",
    "iso6393": "brj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Birked",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "brk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Birwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "brl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barambu",
    "type": "living",
    "scope": "individual",
    "iso6393": "brm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boruca",
    "type": "living",
    "scope": "individual",
    "iso6393": "brn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Brokkat",
    "type": "living",
    "scope": "individual",
    "iso6393": "bro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barapasi",
    "type": "living",
    "scope": "individual",
    "iso6393": "brp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Breri",
    "type": "living",
    "scope": "individual",
    "iso6393": "brq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Birao",
    "type": "living",
    "scope": "individual",
    "iso6393": "brr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baras",
    "type": "living",
    "scope": "individual",
    "iso6393": "brs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bitare",
    "type": "living",
    "scope": "individual",
    "iso6393": "brt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Bru",
    "type": "living",
    "scope": "individual",
    "iso6393": "bru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Bru",
    "type": "living",
    "scope": "individual",
    "iso6393": "brv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bellari",
    "type": "living",
    "scope": "individual",
    "iso6393": "brw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bodo (India)",
    "type": "living",
    "scope": "individual",
    "iso6393": "brx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Burui",
    "type": "living",
    "scope": "individual",
    "iso6393": "bry",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bilbil",
    "type": "living",
    "scope": "individual",
    "iso6393": "brz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abinomn",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Brunei Bisaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bassari",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wushi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bse",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bauchi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bashkardi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kati",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bassossi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bangwinji",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Burushaski",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Basa-Gumna",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bsl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Busami",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barasana-Eduria",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buso",
    "type": "living",
    "scope": "individual",
    "iso6393": "bso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baga Sitemu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bassa",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bassa-Kontagora",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akoose",
    "type": "living",
    "scope": "individual",
    "iso6393": "bss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Basketo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bst",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bahonsuai",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baga Sobané",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bsv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baiso",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yangkam",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sabah Bisaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "bsy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bata",
    "type": "living",
    "scope": "individual",
    "iso6393": "bta",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bati (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "btc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Batak Dairi",
    "type": "living",
    "scope": "individual",
    "iso6393": "btd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gamo-Ningi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bte",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Birgit",
    "type": "living",
    "scope": "individual",
    "iso6393": "btf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gagnoa Bété",
    "type": "living",
    "scope": "individual",
    "iso6393": "btg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biatah Bidayuh",
    "type": "living",
    "scope": "individual",
    "iso6393": "bth",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Burate",
    "type": "living",
    "scope": "individual",
    "iso6393": "bti",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bacanese Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "btj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Batak Mandailing",
    "type": "living",
    "scope": "individual",
    "iso6393": "btm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ratagnon",
    "type": "living",
    "scope": "individual",
    "iso6393": "btn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rinconada Bikol",
    "type": "living",
    "scope": "individual",
    "iso6393": "bto",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Budibud",
    "type": "living",
    "scope": "individual",
    "iso6393": "btp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Batek",
    "type": "living",
    "scope": "individual",
    "iso6393": "btq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baetora",
    "type": "living",
    "scope": "individual",
    "iso6393": "btr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Batak Simalungun",
    "type": "living",
    "scope": "individual",
    "iso6393": "bts",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bete-Bendi",
    "type": "living",
    "scope": "individual",
    "iso6393": "btt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Batu",
    "type": "living",
    "scope": "individual",
    "iso6393": "btu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bateri",
    "type": "living",
    "scope": "individual",
    "iso6393": "btv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Butuanon",
    "type": "living",
    "scope": "individual",
    "iso6393": "btw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Batak Karo",
    "type": "living",
    "scope": "individual",
    "iso6393": "btx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bobot",
    "type": "living",
    "scope": "individual",
    "iso6393": "bty",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Batak Alas-Kluet",
    "type": "living",
    "scope": "individual",
    "iso6393": "btz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buriat",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "bua",
    "iso6392B": "bua",
    "iso6392T": "bua",
    "iso6391": null
  },
  {
    "name": "Bua",
    "type": "living",
    "scope": "individual",
    "iso6393": "bub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bushi",
    "type": "living",
    "scope": "individual",
    "iso6393": "buc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ntcham",
    "type": "living",
    "scope": "individual",
    "iso6393": "bud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Beothuk",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bue",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bushoong",
    "type": "living",
    "scope": "individual",
    "iso6393": "buf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buginese",
    "type": "living",
    "scope": "individual",
    "iso6393": "bug",
    "iso6392B": "bug",
    "iso6392T": "bug",
    "iso6391": null
  },
  {
    "name": "Younuo Bunu",
    "type": "living",
    "scope": "individual",
    "iso6393": "buh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bongili",
    "type": "living",
    "scope": "individual",
    "iso6393": "bui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Basa-Gurmana",
    "type": "living",
    "scope": "individual",
    "iso6393": "buj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bugawac",
    "type": "living",
    "scope": "individual",
    "iso6393": "buk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bulgarian",
    "type": "living",
    "scope": "individual",
    "iso6393": "bul",
    "iso6392B": "bul",
    "iso6392T": "bul",
    "iso6391": "bg"
  },
  {
    "name": "Bulu (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sherbro",
    "type": "living",
    "scope": "individual",
    "iso6393": "bun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Terei",
    "type": "living",
    "scope": "individual",
    "iso6393": "buo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Busoa",
    "type": "living",
    "scope": "individual",
    "iso6393": "bup",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Brem",
    "type": "living",
    "scope": "individual",
    "iso6393": "buq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bokobaru",
    "type": "living",
    "scope": "individual",
    "iso6393": "bus",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bungain",
    "type": "living",
    "scope": "individual",
    "iso6393": "but",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Budu",
    "type": "living",
    "scope": "individual",
    "iso6393": "buu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bun",
    "type": "living",
    "scope": "individual",
    "iso6393": "buv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bubi",
    "type": "living",
    "scope": "individual",
    "iso6393": "buw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boghom",
    "type": "living",
    "scope": "individual",
    "iso6393": "bux",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bullom So",
    "type": "living",
    "scope": "individual",
    "iso6393": "buy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bukwen",
    "type": "living",
    "scope": "individual",
    "iso6393": "buz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barein",
    "type": "living",
    "scope": "individual",
    "iso6393": "bva",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bube",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baelelea",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baeggu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Berau Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "bve",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boor",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bonkeng",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bure",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Belanda Viri",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baan",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bukat",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bolivian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bamunka",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buna",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bolgo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bumang",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Birri",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Burarra",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bati (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bukit Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baniva",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bvv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boga",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dibole",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baybayanon",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bauzi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bvz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bwatoo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Namosi-Naitasiri-Serua",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bwile",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bwaidoka",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bwe Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boselewa",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bishuo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baniwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Láá Láá Bwamu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bauwaki",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bwela",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biwat",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wunai Bunu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boro (Ethiopia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mandobo Bawah",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Bobo Madaré",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bura-Pabir",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bomboma",
    "type": "living",
    "scope": "individual",
    "iso6393": "bws",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bafaw-Balong",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buli (Ghana)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "bww",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bu-Nao Bunu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cwi Bwamu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bwisi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bwz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tairaha",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Belanda Bor",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Molengue",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pela",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Birale",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bilur",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bangala",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buhutu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pirlatapa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bxi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bayungu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bukusu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jalkunan",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mongolia Buriat",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Burduna",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barikanchi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bebil",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Beele",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Russia Buriat",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Busam",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "China Buriat",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Berakou",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bankagooma",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Binahari",
    "type": "living",
    "scope": "individual",
    "iso6393": "bxz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Batak",
    "type": "living",
    "scope": "individual",
    "iso6393": "bya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bikya",
    "type": "living",
    "scope": "individual",
    "iso6393": "byb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ubaghara",
    "type": "living",
    "scope": "individual",
    "iso6393": "byc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Benyadu'",
    "type": "living",
    "scope": "individual",
    "iso6393": "byd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pouye",
    "type": "living",
    "scope": "individual",
    "iso6393": "bye",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bete",
    "type": "living",
    "scope": "individual",
    "iso6393": "byf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baygo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "byg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bhujel",
    "type": "living",
    "scope": "individual",
    "iso6393": "byh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buyu",
    "type": "living",
    "scope": "individual",
    "iso6393": "byi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bina (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "byj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biao",
    "type": "living",
    "scope": "individual",
    "iso6393": "byk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bayono",
    "type": "living",
    "scope": "individual",
    "iso6393": "byl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bidjara",
    "type": "living",
    "scope": "individual",
    "iso6393": "bym",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bilin",
    "type": "living",
    "scope": "individual",
    "iso6393": "byn",
    "iso6392B": "byn",
    "iso6392T": "byn",
    "iso6391": null
  },
  {
    "name": "Biyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "byo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bumaji",
    "type": "living",
    "scope": "individual",
    "iso6393": "byp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Basay",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "byq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baruya",
    "type": "living",
    "scope": "individual",
    "iso6393": "byr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Burak",
    "type": "living",
    "scope": "individual",
    "iso6393": "bys",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Berti",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "byt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Medumba",
    "type": "living",
    "scope": "individual",
    "iso6393": "byv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Belhariya",
    "type": "living",
    "scope": "individual",
    "iso6393": "byw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Qaqet",
    "type": "living",
    "scope": "individual",
    "iso6393": "byx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Banaro",
    "type": "living",
    "scope": "individual",
    "iso6393": "byz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bandi",
    "type": "living",
    "scope": "individual",
    "iso6393": "bza",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Andio",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Betsimisaraka Malagasy",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bribri",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jenaama Bozo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bze",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boikin",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Babuza",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mapos Buang",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bisu",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Belize Kriol English",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nicaragua Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boano (Sulawesi)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bolondo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boano (Maluku)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bozaba",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kemberano",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buli (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biri",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "bzr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Brazilian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Brithenig",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "bzt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Burmeso",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Naami",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Basa (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kɛlɛngaxo Bozo",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Obanliku",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Evant",
    "type": "living",
    "scope": "individual",
    "iso6393": "bzz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chortí",
    "type": "living",
    "scope": "individual",
    "iso6393": "caa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Garifuna",
    "type": "living",
    "scope": "individual",
    "iso6393": "cab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chuj",
    "type": "living",
    "scope": "individual",
    "iso6393": "cac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Caddo",
    "type": "living",
    "scope": "individual",
    "iso6393": "cad",
    "iso6392B": "cad",
    "iso6392T": "cad",
    "iso6391": null
  },
  {
    "name": "Lehar",
    "type": "living",
    "scope": "individual",
    "iso6393": "cae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Carrier",
    "type": "living",
    "scope": "individual",
    "iso6393": "caf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nivaclé",
    "type": "living",
    "scope": "individual",
    "iso6393": "cag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cahuarano",
    "type": "living",
    "scope": "individual",
    "iso6393": "cah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chané",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "caj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaqchikel",
    "type": "living",
    "scope": "individual",
    "iso6393": "cak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Carolinian",
    "type": "living",
    "scope": "individual",
    "iso6393": "cal",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cemuhî",
    "type": "living",
    "scope": "individual",
    "iso6393": "cam",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chambri",
    "type": "living",
    "scope": "individual",
    "iso6393": "can",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chácobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "cao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chipaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "cap",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Car Nicobarese",
    "type": "living",
    "scope": "individual",
    "iso6393": "caq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Galibi Carib",
    "type": "living",
    "scope": "individual",
    "iso6393": "car",
    "iso6392B": "car",
    "iso6392T": "car",
    "iso6391": null
  },
  {
    "name": "Tsimané",
    "type": "living",
    "scope": "individual",
    "iso6393": "cas",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Catalan",
    "type": "living",
    "scope": "individual",
    "iso6393": "cat",
    "iso6392B": "cat",
    "iso6392T": "cat",
    "iso6391": "ca"
  },
  {
    "name": "Cavineña",
    "type": "living",
    "scope": "individual",
    "iso6393": "cav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Callawalla",
    "type": "living",
    "scope": "individual",
    "iso6393": "caw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chiquitano",
    "type": "living",
    "scope": "individual",
    "iso6393": "cax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cayuga",
    "type": "living",
    "scope": "individual",
    "iso6393": "cay",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Canichana",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "caz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cabiyarí",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Carapana",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Carijona",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chimila",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chachi",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ede Cabe",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chavacano",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bualkhaw Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyahkur",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Izora",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsucuba",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cashibo-Cacataibo",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cashinahua",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chayahuita",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Candoshi-Shapra",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cacua",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kinabalian",
    "type": "living",
    "scope": "individual",
    "iso6393": "cbw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Carabayo",
    "type": "living",
    "scope": "individual",
    "iso6393": "cby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cauca",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "cca",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chamicuro",
    "type": "living",
    "scope": "individual",
    "iso6393": "ccc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cafundo Creole",
    "type": "living",
    "scope": "individual",
    "iso6393": "ccd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chopi",
    "type": "living",
    "scope": "individual",
    "iso6393": "cce",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samba Daka",
    "type": "living",
    "scope": "individual",
    "iso6393": "ccg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Atsam",
    "type": "living",
    "scope": "individual",
    "iso6393": "cch",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kasanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "ccj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cutchi-Swahili",
    "type": "living",
    "scope": "individual",
    "iso6393": "ccl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malaccan Creole Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "ccm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Comaltepec Chinantec",
    "type": "living",
    "scope": "individual",
    "iso6393": "cco",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chakma",
    "type": "living",
    "scope": "individual",
    "iso6393": "ccp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cacaopera",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ccr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Choni",
    "type": "living",
    "scope": "individual",
    "iso6393": "cda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chenchu",
    "type": "living",
    "scope": "individual",
    "iso6393": "cde",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chiru",
    "type": "living",
    "scope": "individual",
    "iso6393": "cdf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chamari",
    "type": "living",
    "scope": "individual",
    "iso6393": "cdg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chambeali",
    "type": "living",
    "scope": "individual",
    "iso6393": "cdh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chodri",
    "type": "living",
    "scope": "individual",
    "iso6393": "cdi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Churahi",
    "type": "living",
    "scope": "individual",
    "iso6393": "cdj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chepang",
    "type": "living",
    "scope": "individual",
    "iso6393": "cdm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chaudangsi",
    "type": "living",
    "scope": "individual",
    "iso6393": "cdn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Min Dong Chinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "cdo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cinda-Regi-Tiyal",
    "type": "living",
    "scope": "individual",
    "iso6393": "cdr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chadian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "cds",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chadong",
    "type": "living",
    "scope": "individual",
    "iso6393": "cdy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koda",
    "type": "living",
    "scope": "individual",
    "iso6393": "cdz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lower Chehalis",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "cea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cebuano",
    "type": "living",
    "scope": "individual",
    "iso6393": "ceb",
    "iso6392B": "ceb",
    "iso6392T": "ceb",
    "iso6391": null
  },
  {
    "name": "Chamacoco",
    "type": "living",
    "scope": "individual",
    "iso6393": "ceg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Khumi Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "cek",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cen",
    "type": "living",
    "scope": "individual",
    "iso6393": "cen",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Czech",
    "type": "living",
    "scope": "individual",
    "iso6393": "ces",
    "iso6392B": "cze",
    "iso6392T": "ces",
    "iso6391": "cs"
  },
  {
    "name": "Centúúm",
    "type": "living",
    "scope": "individual",
    "iso6393": "cet",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ekai Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "cey",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dijim-Bwilim",
    "type": "living",
    "scope": "individual",
    "iso6393": "cfa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cara",
    "type": "living",
    "scope": "individual",
    "iso6393": "cfd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Como Karim",
    "type": "living",
    "scope": "individual",
    "iso6393": "cfg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Falam Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "cfm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Changriwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "cga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kagayanen",
    "type": "living",
    "scope": "individual",
    "iso6393": "cgc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chiga",
    "type": "living",
    "scope": "individual",
    "iso6393": "cgg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chocangacakha",
    "type": "living",
    "scope": "individual",
    "iso6393": "cgk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chamorro",
    "type": "living",
    "scope": "individual",
    "iso6393": "cha",
    "iso6392B": "cha",
    "iso6392T": "cha",
    "iso6391": "ch"
  },
  {
    "name": "Chibcha",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "chb",
    "iso6392B": "chb",
    "iso6392T": "chb",
    "iso6391": null
  },
  {
    "name": "Catawba",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "chc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Highland Oaxaca Chontal",
    "type": "living",
    "scope": "individual",
    "iso6393": "chd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chechen",
    "type": "living",
    "scope": "individual",
    "iso6393": "che",
    "iso6392B": "che",
    "iso6392T": "che",
    "iso6391": "ce"
  },
  {
    "name": "Tabasco Chontal",
    "type": "living",
    "scope": "individual",
    "iso6393": "chf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chagatai",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "chg",
    "iso6392B": "chg",
    "iso6392T": "chg",
    "iso6391": null
  },
  {
    "name": "Chinook",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "chh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ojitlán Chinantec",
    "type": "living",
    "scope": "individual",
    "iso6393": "chj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chuukese",
    "type": "living",
    "scope": "individual",
    "iso6393": "chk",
    "iso6392B": "chk",
    "iso6392T": "chk",
    "iso6391": null
  },
  {
    "name": "Cahuilla",
    "type": "living",
    "scope": "individual",
    "iso6393": "chl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mari (Russia)",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "chm",
    "iso6392B": "chm",
    "iso6392T": "chm",
    "iso6391": null
  },
  {
    "name": "Chinook jargon",
    "type": "living",
    "scope": "individual",
    "iso6393": "chn",
    "iso6392B": "chn",
    "iso6392T": "chn",
    "iso6391": null
  },
  {
    "name": "Choctaw",
    "type": "living",
    "scope": "individual",
    "iso6393": "cho",
    "iso6392B": "cho",
    "iso6392T": "cho",
    "iso6391": null
  },
  {
    "name": "Chipewyan",
    "type": "living",
    "scope": "individual",
    "iso6393": "chp",
    "iso6392B": "chp",
    "iso6392T": "chp",
    "iso6391": null
  },
  {
    "name": "Quiotepec Chinantec",
    "type": "living",
    "scope": "individual",
    "iso6393": "chq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cherokee",
    "type": "living",
    "scope": "individual",
    "iso6393": "chr",
    "iso6392B": "chr",
    "iso6392T": "chr",
    "iso6391": null
  },
  {
    "name": "Cholón",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "cht",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Church Slavic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "chu",
    "iso6392B": "chu",
    "iso6392T": "chu",
    "iso6391": "cu"
  },
  {
    "name": "Chuvash",
    "type": "living",
    "scope": "individual",
    "iso6393": "chv",
    "iso6392B": "chv",
    "iso6392T": "chv",
    "iso6391": "cv"
  },
  {
    "name": "Chuwabu",
    "type": "living",
    "scope": "individual",
    "iso6393": "chw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chantyal",
    "type": "living",
    "scope": "individual",
    "iso6393": "chx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cheyenne",
    "type": "living",
    "scope": "individual",
    "iso6393": "chy",
    "iso6392B": "chy",
    "iso6392T": "chy",
    "iso6391": null
  },
  {
    "name": "Ozumacín Chinantec",
    "type": "living",
    "scope": "individual",
    "iso6393": "chz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cia-Cia",
    "type": "living",
    "scope": "individual",
    "iso6393": "cia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ci Gbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "cib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chickasaw",
    "type": "living",
    "scope": "individual",
    "iso6393": "cic",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chimariko",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "cid",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cineni",
    "type": "living",
    "scope": "individual",
    "iso6393": "cie",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chinali",
    "type": "living",
    "scope": "individual",
    "iso6393": "cih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chitkuli Kinnauri",
    "type": "living",
    "scope": "individual",
    "iso6393": "cik",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cimbrian",
    "type": "living",
    "scope": "individual",
    "iso6393": "cim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cinta Larga",
    "type": "living",
    "scope": "individual",
    "iso6393": "cin",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chiapanec",
    "type": "living",
    "scope": "individual",
    "iso6393": "cip",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tiri",
    "type": "living",
    "scope": "individual",
    "iso6393": "cir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chippewa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ciw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chaima",
    "type": "living",
    "scope": "individual",
    "iso6393": "ciy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Cham",
    "type": "living",
    "scope": "individual",
    "iso6393": "cja",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chru",
    "type": "living",
    "scope": "individual",
    "iso6393": "cje",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Upper Chehalis",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "cjh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chamalal",
    "type": "living",
    "scope": "individual",
    "iso6393": "cji",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chokwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "cjk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Cham",
    "type": "living",
    "scope": "individual",
    "iso6393": "cjm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chenapian",
    "type": "living",
    "scope": "individual",
    "iso6393": "cjn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ashéninka Pajonal",
    "type": "living",
    "scope": "individual",
    "iso6393": "cjo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cabécar",
    "type": "living",
    "scope": "individual",
    "iso6393": "cjp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shor",
    "type": "living",
    "scope": "individual",
    "iso6393": "cjs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chuave",
    "type": "living",
    "scope": "individual",
    "iso6393": "cjv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jinyu Chinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "cjy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Kurdish",
    "type": "living",
    "scope": "individual",
    "iso6393": "ckb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chak",
    "type": "living",
    "scope": "individual",
    "iso6393": "ckh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cibak",
    "type": "living",
    "scope": "individual",
    "iso6393": "ckl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaang Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "ckn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anufo",
    "type": "living",
    "scope": "individual",
    "iso6393": "cko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kajakse",
    "type": "living",
    "scope": "individual",
    "iso6393": "ckq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kairak",
    "type": "living",
    "scope": "individual",
    "iso6393": "ckr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tayo",
    "type": "living",
    "scope": "individual",
    "iso6393": "cks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chukot",
    "type": "living",
    "scope": "individual",
    "iso6393": "ckt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koasati",
    "type": "living",
    "scope": "individual",
    "iso6393": "cku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kavalan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ckv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Caka",
    "type": "living",
    "scope": "individual",
    "iso6393": "ckx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cakfem-Mushere",
    "type": "living",
    "scope": "individual",
    "iso6393": "cky",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cakchiquel-Quiché Mixed Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "ckz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ron",
    "type": "living",
    "scope": "individual",
    "iso6393": "cla",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chilcotin",
    "type": "living",
    "scope": "individual",
    "iso6393": "clc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chaldean Neo-Aramaic",
    "type": "living",
    "scope": "individual",
    "iso6393": "cld",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lealao Chinantec",
    "type": "living",
    "scope": "individual",
    "iso6393": "cle",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chilisso",
    "type": "living",
    "scope": "individual",
    "iso6393": "clh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chakali",
    "type": "living",
    "scope": "individual",
    "iso6393": "cli",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laitu Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "clj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Idu-Mishmi",
    "type": "living",
    "scope": "individual",
    "iso6393": "clk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chala",
    "type": "living",
    "scope": "individual",
    "iso6393": "cll",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Clallam",
    "type": "living",
    "scope": "individual",
    "iso6393": "clm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lowland Oaxaca Chontal",
    "type": "living",
    "scope": "individual",
    "iso6393": "clo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lautu Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "clt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Caluyanun",
    "type": "living",
    "scope": "individual",
    "iso6393": "clu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chulym",
    "type": "living",
    "scope": "individual",
    "iso6393": "clw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Highland Chatino",
    "type": "living",
    "scope": "individual",
    "iso6393": "cly",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maa",
    "type": "living",
    "scope": "individual",
    "iso6393": "cma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cerma",
    "type": "living",
    "scope": "individual",
    "iso6393": "cme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Classical Mongolian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "cmg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Emberá-Chamí",
    "type": "living",
    "scope": "individual",
    "iso6393": "cmi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Campalagian",
    "type": "living",
    "scope": "individual",
    "iso6393": "cml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Michigamea",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "cmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mandarin Chinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "cmn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Mnong",
    "type": "living",
    "scope": "individual",
    "iso6393": "cmo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mro-Khimi Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "cmr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Messapic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "cms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Camtho",
    "type": "living",
    "scope": "individual",
    "iso6393": "cmt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Changthang",
    "type": "living",
    "scope": "individual",
    "iso6393": "cna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chinbon Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "cnb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Côông",
    "type": "living",
    "scope": "individual",
    "iso6393": "cnc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Qiang",
    "type": "living",
    "scope": "individual",
    "iso6393": "cng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hakha Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "cnh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Asháninka",
    "type": "living",
    "scope": "individual",
    "iso6393": "cni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khumi Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "cnk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lalana Chinantec",
    "type": "living",
    "scope": "individual",
    "iso6393": "cnl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Con",
    "type": "living",
    "scope": "individual",
    "iso6393": "cno",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Montenegrin",
    "type": "living",
    "scope": "individual",
    "iso6393": "cnr",
    "iso6392B": "cnr",
    "iso6392T": "cnr",
    "iso6391": null
  },
  {
    "name": "Central Asmat",
    "type": "living",
    "scope": "individual",
    "iso6393": "cns",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tepetotutla Chinantec",
    "type": "living",
    "scope": "individual",
    "iso6393": "cnt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chenoua",
    "type": "living",
    "scope": "individual",
    "iso6393": "cnu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngawn Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "cnw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Middle Cornish",
    "type": "historical",
    "scope": "individual",
    "iso6393": "cnx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cocos Islands Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "coa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chicomuceltec",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "cob",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cocopa",
    "type": "living",
    "scope": "individual",
    "iso6393": "coc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cocama-Cocamilla",
    "type": "living",
    "scope": "individual",
    "iso6393": "cod",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koreguaje",
    "type": "living",
    "scope": "individual",
    "iso6393": "coe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Colorado",
    "type": "living",
    "scope": "individual",
    "iso6393": "cof",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chong",
    "type": "living",
    "scope": "individual",
    "iso6393": "cog",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chonyi-Dzihana-Kauma",
    "type": "living",
    "scope": "individual",
    "iso6393": "coh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cochimi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "coj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Santa Teresa Cora",
    "type": "living",
    "scope": "individual",
    "iso6393": "cok",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Columbia-Wenatchi",
    "type": "living",
    "scope": "individual",
    "iso6393": "col",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Comanche",
    "type": "living",
    "scope": "individual",
    "iso6393": "com",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cofán",
    "type": "living",
    "scope": "individual",
    "iso6393": "con",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Comox",
    "type": "living",
    "scope": "individual",
    "iso6393": "coo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Coptic",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "cop",
    "iso6392B": "cop",
    "iso6392T": "cop",
    "iso6391": null
  },
  {
    "name": "Coquille",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "coq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cornish",
    "type": "living",
    "scope": "individual",
    "iso6393": "cor",
    "iso6392B": "cor",
    "iso6392T": "cor",
    "iso6391": "kw"
  },
  {
    "name": "Corsican",
    "type": "living",
    "scope": "individual",
    "iso6393": "cos",
    "iso6392B": "cos",
    "iso6392T": "cos",
    "iso6391": "co"
  },
  {
    "name": "Caquinte",
    "type": "living",
    "scope": "individual",
    "iso6393": "cot",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wamey",
    "type": "living",
    "scope": "individual",
    "iso6393": "cou",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cao Miao",
    "type": "living",
    "scope": "individual",
    "iso6393": "cov",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cowlitz",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "cow",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nanti",
    "type": "living",
    "scope": "individual",
    "iso6393": "cox",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chochotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "coz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Palantla Chinantec",
    "type": "living",
    "scope": "individual",
    "iso6393": "cpa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ucayali-Yurúa Ashéninka",
    "type": "living",
    "scope": "individual",
    "iso6393": "cpb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ajyíninka Apurucayali",
    "type": "living",
    "scope": "individual",
    "iso6393": "cpc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cappadocian Greek",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "cpg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chinese Pidgin English",
    "type": "living",
    "scope": "individual",
    "iso6393": "cpi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cherepon",
    "type": "living",
    "scope": "individual",
    "iso6393": "cpn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kpeego",
    "type": "living",
    "scope": "individual",
    "iso6393": "cpo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Capiznon",
    "type": "living",
    "scope": "individual",
    "iso6393": "cps",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pichis Ashéninka",
    "type": "living",
    "scope": "individual",
    "iso6393": "cpu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pu-Xian Chinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "cpx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Ucayali Ashéninka",
    "type": "living",
    "scope": "individual",
    "iso6393": "cpy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chuanqiandian Cluster Miao",
    "type": "living",
    "scope": "individual",
    "iso6393": "cqd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chara",
    "type": "living",
    "scope": "individual",
    "iso6393": "cra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Island Carib",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "crb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lonwolwol",
    "type": "living",
    "scope": "individual",
    "iso6393": "crc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Coeur d'Alene",
    "type": "living",
    "scope": "individual",
    "iso6393": "crd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cree",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "cre",
    "iso6392B": "cre",
    "iso6392T": "cre",
    "iso6391": "cr"
  },
  {
    "name": "Caramanta",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "crf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Michif",
    "type": "living",
    "scope": "individual",
    "iso6393": "crg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Crimean Tatar",
    "type": "living",
    "scope": "individual",
    "iso6393": "crh",
    "iso6392B": "crh",
    "iso6392T": "crh",
    "iso6391": null
  },
  {
    "name": "Sãotomense",
    "type": "living",
    "scope": "individual",
    "iso6393": "cri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern East Cree",
    "type": "living",
    "scope": "individual",
    "iso6393": "crj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Plains Cree",
    "type": "living",
    "scope": "individual",
    "iso6393": "crk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern East Cree",
    "type": "living",
    "scope": "individual",
    "iso6393": "crl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moose Cree",
    "type": "living",
    "scope": "individual",
    "iso6393": "crm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "El Nayar Cora",
    "type": "living",
    "scope": "individual",
    "iso6393": "crn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Crow",
    "type": "living",
    "scope": "individual",
    "iso6393": "cro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iyo'wujwa Chorote",
    "type": "living",
    "scope": "individual",
    "iso6393": "crq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Carolina Algonquian",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "crr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seselwa Creole French",
    "type": "living",
    "scope": "individual",
    "iso6393": "crs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iyojwa'ja Chorote",
    "type": "living",
    "scope": "individual",
    "iso6393": "crt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chaura",
    "type": "living",
    "scope": "individual",
    "iso6393": "crv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chrau",
    "type": "living",
    "scope": "individual",
    "iso6393": "crw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Carrier",
    "type": "living",
    "scope": "individual",
    "iso6393": "crx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cori",
    "type": "living",
    "scope": "individual",
    "iso6393": "cry",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cruzeño",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "crz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chiltepec Chinantec",
    "type": "living",
    "scope": "individual",
    "iso6393": "csa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kashubian",
    "type": "living",
    "scope": "individual",
    "iso6393": "csb",
    "iso6392B": "csb",
    "iso6392T": "csb",
    "iso6391": null
  },
  {
    "name": "Catalan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "csc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chiangmai Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "csd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Czech Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "cse",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cuba Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "csf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chilean Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "csg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Asho Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "csh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Coast Miwok",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "csi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Songlai Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "csj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jola-Kasa",
    "type": "living",
    "scope": "individual",
    "iso6393": "csk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chinese Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "csl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Sierra Miwok",
    "type": "living",
    "scope": "individual",
    "iso6393": "csm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Colombian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "csn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sochiapam Chinantec",
    "type": "living",
    "scope": "individual",
    "iso6393": "cso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Croatia Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "csq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Costa Rican Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "csr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Ohlone",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "css",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Ohlone",
    "type": "living",
    "scope": "individual",
    "iso6393": "cst",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sumtu Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "csv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Swampy Cree",
    "type": "living",
    "scope": "individual",
    "iso6393": "csw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siyin Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "csy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Coos",
    "type": "living",
    "scope": "individual",
    "iso6393": "csz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tataltepec Chatino",
    "type": "living",
    "scope": "individual",
    "iso6393": "cta",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chetco",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ctc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tedim Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "ctd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tepinapa Chinantec",
    "type": "living",
    "scope": "individual",
    "iso6393": "cte",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chittagonian",
    "type": "living",
    "scope": "individual",
    "iso6393": "ctg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thaiphum Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "cth",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tlacoatzintepec Chinantec",
    "type": "living",
    "scope": "individual",
    "iso6393": "ctl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chitimacha",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ctm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chhintange",
    "type": "living",
    "scope": "individual",
    "iso6393": "ctn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Emberá-Catío",
    "type": "living",
    "scope": "individual",
    "iso6393": "cto",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Highland Chatino",
    "type": "living",
    "scope": "individual",
    "iso6393": "ctp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Catanduanes Bikol",
    "type": "living",
    "scope": "individual",
    "iso6393": "cts",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wayanad Chetti",
    "type": "living",
    "scope": "individual",
    "iso6393": "ctt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chol",
    "type": "living",
    "scope": "individual",
    "iso6393": "ctu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zacatepec Chatino",
    "type": "living",
    "scope": "individual",
    "iso6393": "ctz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cua",
    "type": "living",
    "scope": "individual",
    "iso6393": "cua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cubeo",
    "type": "living",
    "scope": "individual",
    "iso6393": "cub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Usila Chinantec",
    "type": "living",
    "scope": "individual",
    "iso6393": "cuc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chungmboko",
    "type": "living",
    "scope": "individual",
    "iso6393": "cug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chuka",
    "type": "living",
    "scope": "individual",
    "iso6393": "cuh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cuiba",
    "type": "living",
    "scope": "individual",
    "iso6393": "cui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mashco Piro",
    "type": "living",
    "scope": "individual",
    "iso6393": "cuj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Blas Kuna",
    "type": "living",
    "scope": "individual",
    "iso6393": "cuk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Culina",
    "type": "living",
    "scope": "individual",
    "iso6393": "cul",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cumanagoto",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "cuo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cupeño",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "cup",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cun",
    "type": "living",
    "scope": "individual",
    "iso6393": "cuq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chhulung",
    "type": "living",
    "scope": "individual",
    "iso6393": "cur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teutila Cuicatec",
    "type": "living",
    "scope": "individual",
    "iso6393": "cut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tai Ya",
    "type": "living",
    "scope": "individual",
    "iso6393": "cuu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cuvok",
    "type": "living",
    "scope": "individual",
    "iso6393": "cuv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chukwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "cuw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tepeuxila Cuicatec",
    "type": "living",
    "scope": "individual",
    "iso6393": "cux",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cuitlatec",
    "type": "living",
    "scope": "individual",
    "iso6393": "cuy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chug",
    "type": "living",
    "scope": "individual",
    "iso6393": "cvg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Valle Nacional Chinantec",
    "type": "living",
    "scope": "individual",
    "iso6393": "cvn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kabwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "cwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maindo",
    "type": "living",
    "scope": "individual",
    "iso6393": "cwb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Woods Cree",
    "type": "living",
    "scope": "individual",
    "iso6393": "cwd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwere",
    "type": "living",
    "scope": "individual",
    "iso6393": "cwe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chewong",
    "type": "living",
    "scope": "individual",
    "iso6393": "cwg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuwaataay",
    "type": "living",
    "scope": "individual",
    "iso6393": "cwt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nopala Chatino",
    "type": "living",
    "scope": "individual",
    "iso6393": "cya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cayubaba",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "cyb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Welsh",
    "type": "living",
    "scope": "individual",
    "iso6393": "cym",
    "iso6392B": "wel",
    "iso6392T": "cym",
    "iso6391": "cy"
  },
  {
    "name": "Cuyonon",
    "type": "living",
    "scope": "individual",
    "iso6393": "cyo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huizhou Chinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "czh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Knaanic",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "czk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zenzontepec Chatino",
    "type": "living",
    "scope": "individual",
    "iso6393": "czn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Min Zhong Chinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "czo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zotung Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "czt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dangaléat",
    "type": "living",
    "scope": "individual",
    "iso6393": "daa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dambi",
    "type": "living",
    "scope": "individual",
    "iso6393": "dac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marik",
    "type": "living",
    "scope": "individual",
    "iso6393": "dad",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duupa",
    "type": "living",
    "scope": "individual",
    "iso6393": "dae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dagbani",
    "type": "living",
    "scope": "individual",
    "iso6393": "dag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gwahatike",
    "type": "living",
    "scope": "individual",
    "iso6393": "dah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Day",
    "type": "living",
    "scope": "individual",
    "iso6393": "dai",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dar Fur Daju",
    "type": "living",
    "scope": "individual",
    "iso6393": "daj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dakota",
    "type": "living",
    "scope": "individual",
    "iso6393": "dak",
    "iso6392B": "dak",
    "iso6392T": "dak",
    "iso6391": null
  },
  {
    "name": "Dahalo",
    "type": "living",
    "scope": "individual",
    "iso6393": "dal",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Damakawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "dam",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Danish",
    "type": "living",
    "scope": "individual",
    "iso6393": "dan",
    "iso6392B": "dan",
    "iso6392T": "dan",
    "iso6391": "da"
  },
  {
    "name": "Daai Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "dao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dandami Maria",
    "type": "living",
    "scope": "individual",
    "iso6393": "daq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dargwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "dar",
    "iso6392B": "dar",
    "iso6392T": "dar",
    "iso6391": null
  },
  {
    "name": "Daho-Doo",
    "type": "living",
    "scope": "individual",
    "iso6393": "das",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dar Sila Daju",
    "type": "living",
    "scope": "individual",
    "iso6393": "dau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taita",
    "type": "living",
    "scope": "individual",
    "iso6393": "dav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Davawenyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "daw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dayi",
    "type": "living",
    "scope": "individual",
    "iso6393": "dax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dao",
    "type": "living",
    "scope": "individual",
    "iso6393": "daz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bangime",
    "type": "living",
    "scope": "individual",
    "iso6393": "dba",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Deno",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dadiya",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dabe",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Edopi",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dogul Dom Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Doka",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ida'an",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dyirbal",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duguri",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duriankere",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dulbu",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duwai",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Daba",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dabarre",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ben Tey Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bondum Dom Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dungu",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bankan Tey Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dbw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dibiyaso",
    "type": "living",
    "scope": "individual",
    "iso6393": "dby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Deccan",
    "type": "living",
    "scope": "individual",
    "iso6393": "dcc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Negerhollands",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dcr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dadi Dadi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dongotono",
    "type": "living",
    "scope": "individual",
    "iso6393": "ddd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Doondo",
    "type": "living",
    "scope": "individual",
    "iso6393": "dde",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fataluku",
    "type": "living",
    "scope": "individual",
    "iso6393": "ddg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Goodenough",
    "type": "living",
    "scope": "individual",
    "iso6393": "ddi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jaru",
    "type": "living",
    "scope": "individual",
    "iso6393": "ddj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dendi (Benin)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ddn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dido",
    "type": "living",
    "scope": "individual",
    "iso6393": "ddo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhudhuroa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ddr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Donno So Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dds",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dawera-Daweloor",
    "type": "living",
    "scope": "individual",
    "iso6393": "ddw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dagik",
    "type": "living",
    "scope": "individual",
    "iso6393": "dec",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dedua",
    "type": "living",
    "scope": "individual",
    "iso6393": "ded",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dewoin",
    "type": "living",
    "scope": "individual",
    "iso6393": "dee",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dezfuli",
    "type": "living",
    "scope": "individual",
    "iso6393": "def",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Degema",
    "type": "living",
    "scope": "individual",
    "iso6393": "deg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dehwari",
    "type": "living",
    "scope": "individual",
    "iso6393": "deh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Demisa",
    "type": "living",
    "scope": "individual",
    "iso6393": "dei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dek",
    "type": "living",
    "scope": "individual",
    "iso6393": "dek",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Delaware",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "del",
    "iso6392B": "del",
    "iso6392T": "del",
    "iso6391": null
  },
  {
    "name": "Dem",
    "type": "living",
    "scope": "individual",
    "iso6393": "dem",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Slave (Athapascan)",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "den",
    "iso6392B": "den",
    "iso6392T": "den",
    "iso6391": null
  },
  {
    "name": "Pidgin Delaware",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dep",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dendi (Central African Republic)",
    "type": "living",
    "scope": "individual",
    "iso6393": "deq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Deori",
    "type": "living",
    "scope": "individual",
    "iso6393": "der",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Desano",
    "type": "living",
    "scope": "individual",
    "iso6393": "des",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "German",
    "type": "living",
    "scope": "individual",
    "iso6393": "deu",
    "iso6392B": "ger",
    "iso6392T": "deu",
    "iso6391": "de"
  },
  {
    "name": "Domung",
    "type": "living",
    "scope": "individual",
    "iso6393": "dev",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dengese",
    "type": "living",
    "scope": "individual",
    "iso6393": "dez",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Dagaare",
    "type": "living",
    "scope": "individual",
    "iso6393": "dga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bunoge Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dgb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Casiguran Dumagat Agta",
    "type": "living",
    "scope": "individual",
    "iso6393": "dgc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dagaari Dioula",
    "type": "living",
    "scope": "individual",
    "iso6393": "dgd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Degenan",
    "type": "living",
    "scope": "individual",
    "iso6393": "dge",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Doga",
    "type": "living",
    "scope": "individual",
    "iso6393": "dgg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dghwede",
    "type": "living",
    "scope": "individual",
    "iso6393": "dgh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Dagara",
    "type": "living",
    "scope": "individual",
    "iso6393": "dgi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dagba",
    "type": "living",
    "scope": "individual",
    "iso6393": "dgk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Andaandi",
    "type": "living",
    "scope": "individual",
    "iso6393": "dgl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dagoman",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dgn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dogri (individual language)",
    "type": "living",
    "scope": "individual",
    "iso6393": "dgo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dogrib",
    "type": "living",
    "scope": "individual",
    "iso6393": "dgr",
    "iso6392B": "dgr",
    "iso6392T": "dgr",
    "iso6391": null
  },
  {
    "name": "Dogoso",
    "type": "living",
    "scope": "individual",
    "iso6393": "dgs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndra'ngith",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dgt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Degaru",
    "type": "living",
    "scope": "individual",
    "iso6393": "dgu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Daungwurrung",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dgw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Doghoro",
    "type": "living",
    "scope": "individual",
    "iso6393": "dgx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Daga",
    "type": "living",
    "scope": "individual",
    "iso6393": "dgz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhundari",
    "type": "living",
    "scope": "individual",
    "iso6393": "dhd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhangu-Djangu",
    "type": "living",
    "scope": "individual",
    "iso6393": "dhg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhimal",
    "type": "living",
    "scope": "individual",
    "iso6393": "dhi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhalandji",
    "type": "living",
    "scope": "individual",
    "iso6393": "dhl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zemba",
    "type": "living",
    "scope": "individual",
    "iso6393": "dhm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhanki",
    "type": "living",
    "scope": "individual",
    "iso6393": "dhn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhodia",
    "type": "living",
    "scope": "individual",
    "iso6393": "dho",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhargari",
    "type": "living",
    "scope": "individual",
    "iso6393": "dhr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhaiso",
    "type": "living",
    "scope": "individual",
    "iso6393": "dhs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhurga",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dhu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dehu",
    "type": "living",
    "scope": "individual",
    "iso6393": "dhv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhanwar (Nepal)",
    "type": "living",
    "scope": "individual",
    "iso6393": "dhw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhungaloo",
    "type": "living",
    "scope": "individual",
    "iso6393": "dhx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dia",
    "type": "living",
    "scope": "individual",
    "iso6393": "dia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Central Dinka",
    "type": "living",
    "scope": "individual",
    "iso6393": "dib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lakota Dida",
    "type": "living",
    "scope": "individual",
    "iso6393": "dic",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Didinga",
    "type": "living",
    "scope": "individual",
    "iso6393": "did",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dieri",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Digo",
    "type": "living",
    "scope": "individual",
    "iso6393": "dig",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kumiai",
    "type": "living",
    "scope": "individual",
    "iso6393": "dih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dimbong",
    "type": "living",
    "scope": "individual",
    "iso6393": "dii",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dai",
    "type": "living",
    "scope": "individual",
    "iso6393": "dij",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southwestern Dinka",
    "type": "living",
    "scope": "individual",
    "iso6393": "dik",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dilling",
    "type": "living",
    "scope": "individual",
    "iso6393": "dil",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dime",
    "type": "living",
    "scope": "individual",
    "iso6393": "dim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dinka",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "din",
    "iso6392B": "din",
    "iso6392T": "din",
    "iso6391": null
  },
  {
    "name": "Dibo",
    "type": "living",
    "scope": "individual",
    "iso6393": "dio",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northeastern Dinka",
    "type": "living",
    "scope": "individual",
    "iso6393": "dip",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dimli (individual language)",
    "type": "living",
    "scope": "individual",
    "iso6393": "diq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dirim",
    "type": "living",
    "scope": "individual",
    "iso6393": "dir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dimasa",
    "type": "living",
    "scope": "individual",
    "iso6393": "dis",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Diriku",
    "type": "living",
    "scope": "individual",
    "iso6393": "diu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhivehi",
    "type": "living",
    "scope": "individual",
    "iso6393": "div",
    "iso6392B": "div",
    "iso6392T": "div",
    "iso6391": "dv"
  },
  {
    "name": "Northwestern Dinka",
    "type": "living",
    "scope": "individual",
    "iso6393": "diw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dixon Reef",
    "type": "living",
    "scope": "individual",
    "iso6393": "dix",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Diuwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "diy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ding",
    "type": "living",
    "scope": "individual",
    "iso6393": "diz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Djadjawurrung",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dja",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Djinba",
    "type": "living",
    "scope": "individual",
    "iso6393": "djb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dar Daju Daju",
    "type": "living",
    "scope": "individual",
    "iso6393": "djc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Djamindjung",
    "type": "living",
    "scope": "individual",
    "iso6393": "djd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zarma",
    "type": "living",
    "scope": "individual",
    "iso6393": "dje",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Djangun",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "djf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Djinang",
    "type": "living",
    "scope": "individual",
    "iso6393": "dji",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Djeebbana",
    "type": "living",
    "scope": "individual",
    "iso6393": "djj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Maroon Creole",
    "type": "living",
    "scope": "individual",
    "iso6393": "djk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jamsay Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "djm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jawoyn",
    "type": "living",
    "scope": "individual",
    "iso6393": "djn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jangkang",
    "type": "living",
    "scope": "individual",
    "iso6393": "djo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Djambarrpuyngu",
    "type": "living",
    "scope": "individual",
    "iso6393": "djr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kapriman",
    "type": "living",
    "scope": "individual",
    "iso6393": "dju",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Djawi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "djw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dakpakha",
    "type": "living",
    "scope": "individual",
    "iso6393": "dka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dakka",
    "type": "living",
    "scope": "individual",
    "iso6393": "dkk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuijau",
    "type": "living",
    "scope": "individual",
    "iso6393": "dkr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southeastern Dinka",
    "type": "living",
    "scope": "individual",
    "iso6393": "dks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mazagway",
    "type": "living",
    "scope": "individual",
    "iso6393": "dkx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dolgan",
    "type": "living",
    "scope": "individual",
    "iso6393": "dlg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dahalik",
    "type": "living",
    "scope": "individual",
    "iso6393": "dlk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dalmatian",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dlm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Darlong",
    "type": "living",
    "scope": "individual",
    "iso6393": "dln",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duma",
    "type": "living",
    "scope": "individual",
    "iso6393": "dma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mombo Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gavak",
    "type": "living",
    "scope": "individual",
    "iso6393": "dmc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Madhi Madhi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dugwor",
    "type": "living",
    "scope": "individual",
    "iso6393": "dme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Upper Kinabatangan",
    "type": "living",
    "scope": "individual",
    "iso6393": "dmg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Domaaki",
    "type": "living",
    "scope": "individual",
    "iso6393": "dmk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dameli",
    "type": "living",
    "scope": "individual",
    "iso6393": "dml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dama",
    "type": "living",
    "scope": "individual",
    "iso6393": "dmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kemedzung",
    "type": "living",
    "scope": "individual",
    "iso6393": "dmo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "East Damar",
    "type": "living",
    "scope": "individual",
    "iso6393": "dmr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dampelas",
    "type": "living",
    "scope": "individual",
    "iso6393": "dms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dubu",
    "type": "living",
    "scope": "individual",
    "iso6393": "dmu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dumpas",
    "type": "living",
    "scope": "individual",
    "iso6393": "dmv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mudburra",
    "type": "living",
    "scope": "individual",
    "iso6393": "dmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dema",
    "type": "living",
    "scope": "individual",
    "iso6393": "dmx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Demta",
    "type": "living",
    "scope": "individual",
    "iso6393": "dmy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Upper Grand Valley Dani",
    "type": "living",
    "scope": "individual",
    "iso6393": "dna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Daonda",
    "type": "living",
    "scope": "individual",
    "iso6393": "dnd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndendeule",
    "type": "living",
    "scope": "individual",
    "iso6393": "dne",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dungan",
    "type": "living",
    "scope": "individual",
    "iso6393": "dng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lower Grand Valley Dani",
    "type": "living",
    "scope": "individual",
    "iso6393": "dni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dan",
    "type": "living",
    "scope": "individual",
    "iso6393": "dnj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dengka",
    "type": "living",
    "scope": "individual",
    "iso6393": "dnk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dzùùngoo",
    "type": "living",
    "scope": "individual",
    "iso6393": "dnn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndrulo",
    "type": "living",
    "scope": "individual",
    "iso6393": "dno",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Danaru",
    "type": "living",
    "scope": "individual",
    "iso6393": "dnr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mid Grand Valley Dani",
    "type": "living",
    "scope": "individual",
    "iso6393": "dnt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Danau",
    "type": "living",
    "scope": "individual",
    "iso6393": "dnu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Danu",
    "type": "living",
    "scope": "individual",
    "iso6393": "dnv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Dani",
    "type": "living",
    "scope": "individual",
    "iso6393": "dnw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dení",
    "type": "living",
    "scope": "individual",
    "iso6393": "dny",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dom",
    "type": "living",
    "scope": "individual",
    "iso6393": "doa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dobu",
    "type": "living",
    "scope": "individual",
    "iso6393": "dob",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Dong",
    "type": "living",
    "scope": "individual",
    "iso6393": "doc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Doe",
    "type": "living",
    "scope": "individual",
    "iso6393": "doe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Domu",
    "type": "living",
    "scope": "individual",
    "iso6393": "dof",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dong",
    "type": "living",
    "scope": "individual",
    "iso6393": "doh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dogri (macrolanguage)",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "doi",
    "iso6392B": "doi",
    "iso6392T": "doi",
    "iso6391": null
  },
  {
    "name": "Dondo",
    "type": "living",
    "scope": "individual",
    "iso6393": "dok",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Doso",
    "type": "living",
    "scope": "individual",
    "iso6393": "dol",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toura (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "don",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dongo",
    "type": "living",
    "scope": "individual",
    "iso6393": "doo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lukpa",
    "type": "living",
    "scope": "individual",
    "iso6393": "dop",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dominican Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "doq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dori'o",
    "type": "living",
    "scope": "individual",
    "iso6393": "dor",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dogosé",
    "type": "living",
    "scope": "individual",
    "iso6393": "dos",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dass",
    "type": "living",
    "scope": "individual",
    "iso6393": "dot",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dombe",
    "type": "living",
    "scope": "individual",
    "iso6393": "dov",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Doyayo",
    "type": "living",
    "scope": "individual",
    "iso6393": "dow",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bussa",
    "type": "living",
    "scope": "individual",
    "iso6393": "dox",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dompo",
    "type": "living",
    "scope": "individual",
    "iso6393": "doy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dorze",
    "type": "living",
    "scope": "individual",
    "iso6393": "doz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Papar",
    "type": "living",
    "scope": "individual",
    "iso6393": "dpp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dair",
    "type": "living",
    "scope": "individual",
    "iso6393": "drb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Minderico",
    "type": "living",
    "scope": "individual",
    "iso6393": "drc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Darmiya",
    "type": "living",
    "scope": "individual",
    "iso6393": "drd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dolpo",
    "type": "living",
    "scope": "individual",
    "iso6393": "dre",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rungus",
    "type": "living",
    "scope": "individual",
    "iso6393": "drg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "C'Lela",
    "type": "living",
    "scope": "individual",
    "iso6393": "dri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paakantyi",
    "type": "living",
    "scope": "individual",
    "iso6393": "drl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Damar",
    "type": "living",
    "scope": "individual",
    "iso6393": "drn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Daro-Matu Melanau",
    "type": "living",
    "scope": "individual",
    "iso6393": "dro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dura",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "drq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dororo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "drr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gedeo",
    "type": "living",
    "scope": "individual",
    "iso6393": "drs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Drents",
    "type": "living",
    "scope": "individual",
    "iso6393": "drt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rukai",
    "type": "living",
    "scope": "individual",
    "iso6393": "dru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Darai",
    "type": "living",
    "scope": "individual",
    "iso6393": "dry",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lower Sorbian",
    "type": "living",
    "scope": "individual",
    "iso6393": "dsb",
    "iso6392B": "dsb",
    "iso6392T": "dsb",
    "iso6391": null
  },
  {
    "name": "Dutch Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "dse",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Daasanach",
    "type": "living",
    "scope": "individual",
    "iso6393": "dsh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Disa",
    "type": "living",
    "scope": "individual",
    "iso6393": "dsi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Danish Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "dsl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dusner",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dsn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Desiya",
    "type": "living",
    "scope": "individual",
    "iso6393": "dso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tadaksahak",
    "type": "living",
    "scope": "individual",
    "iso6393": "dsq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Daur",
    "type": "living",
    "scope": "individual",
    "iso6393": "dta",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Labuk-Kinabatangan Kadazan",
    "type": "living",
    "scope": "individual",
    "iso6393": "dtb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ditidaht",
    "type": "living",
    "scope": "individual",
    "iso6393": "dtd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adithinngithigh",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dth",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ana Tinga Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dti",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tene Kan Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dtk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tomo Kan Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dtm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Daatsʼíin",
    "type": "living",
    "scope": "individual",
    "iso6393": "dtn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tommo So Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dto",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kadazan Dusun",
    "type": "living",
    "scope": "individual",
    "iso6393": "dtp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lotud",
    "type": "living",
    "scope": "individual",
    "iso6393": "dtr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toro So Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dts",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toro Tegu Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dtt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tebul Ure Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dtu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dotyali",
    "type": "living",
    "scope": "individual",
    "iso6393": "dty",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duala",
    "type": "living",
    "scope": "individual",
    "iso6393": "dua",
    "iso6392B": "dua",
    "iso6392T": "dua",
    "iso6391": null
  },
  {
    "name": "Dubli",
    "type": "living",
    "scope": "individual",
    "iso6393": "dub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duna",
    "type": "living",
    "scope": "individual",
    "iso6393": "duc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Umiray Dumaget Agta",
    "type": "living",
    "scope": "individual",
    "iso6393": "due",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dumbea",
    "type": "living",
    "scope": "individual",
    "iso6393": "duf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duruma",
    "type": "living",
    "scope": "individual",
    "iso6393": "dug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dungra Bhil",
    "type": "living",
    "scope": "individual",
    "iso6393": "duh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dumun",
    "type": "living",
    "scope": "individual",
    "iso6393": "dui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uyajitaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "duk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alabat Island Agta",
    "type": "living",
    "scope": "individual",
    "iso6393": "dul",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Middle Dutch (ca. 1050-1350)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "dum",
    "iso6392B": "dum",
    "iso6392T": "dum",
    "iso6391": null
  },
  {
    "name": "Dusun Deyah",
    "type": "living",
    "scope": "individual",
    "iso6393": "dun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dupaninan Agta",
    "type": "living",
    "scope": "individual",
    "iso6393": "duo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duano",
    "type": "living",
    "scope": "individual",
    "iso6393": "dup",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dusun Malang",
    "type": "living",
    "scope": "individual",
    "iso6393": "duq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dii",
    "type": "living",
    "scope": "individual",
    "iso6393": "dur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dumi",
    "type": "living",
    "scope": "individual",
    "iso6393": "dus",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Drung",
    "type": "living",
    "scope": "individual",
    "iso6393": "duu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duvle",
    "type": "living",
    "scope": "individual",
    "iso6393": "duv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dusun Witu",
    "type": "living",
    "scope": "individual",
    "iso6393": "duw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duungooma",
    "type": "living",
    "scope": "individual",
    "iso6393": "dux",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dicamay Agta",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "duy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duli-Gey",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "duz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duau",
    "type": "living",
    "scope": "individual",
    "iso6393": "dva",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Diri",
    "type": "living",
    "scope": "individual",
    "iso6393": "dwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dawro",
    "type": "living",
    "scope": "individual",
    "iso6393": "dwr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dutton World Speedwords",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "dws",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhuwal",
    "type": "living",
    "scope": "individual",
    "iso6393": "dwu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dawawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "dww",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhuwaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "dwy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dewas Rai",
    "type": "living",
    "scope": "individual",
    "iso6393": "dwz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dyan",
    "type": "living",
    "scope": "individual",
    "iso6393": "dya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dyaberdyaber",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dyb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dyugun",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dyd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Villa Viciosa Agta",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dyg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Djimini Senoufo",
    "type": "living",
    "scope": "individual",
    "iso6393": "dyi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yanda Dom Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "dym",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dyangadi",
    "type": "living",
    "scope": "individual",
    "iso6393": "dyn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jola-Fonyi",
    "type": "living",
    "scope": "individual",
    "iso6393": "dyo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dyula",
    "type": "living",
    "scope": "individual",
    "iso6393": "dyu",
    "iso6392B": "dyu",
    "iso6392T": "dyu",
    "iso6391": null
  },
  {
    "name": "Djabugay",
    "type": "living",
    "scope": "individual",
    "iso6393": "dyy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tunzu",
    "type": "living",
    "scope": "individual",
    "iso6393": "dza",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Djiwarli",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "dze",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dazaga",
    "type": "living",
    "scope": "individual",
    "iso6393": "dzg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dzalakha",
    "type": "living",
    "scope": "individual",
    "iso6393": "dzl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dzando",
    "type": "living",
    "scope": "individual",
    "iso6393": "dzn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dzongkha",
    "type": "living",
    "scope": "individual",
    "iso6393": "dzo",
    "iso6392B": "dzo",
    "iso6392T": "dzo",
    "iso6391": "dz"
  },
  {
    "name": "Karenggapa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "eaa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ebughu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ebg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Bontok",
    "type": "living",
    "scope": "individual",
    "iso6393": "ebk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teke-Ebo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ebo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ebrié",
    "type": "living",
    "scope": "individual",
    "iso6393": "ebr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Embu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ebu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eteocretan",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "ecr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ecuadorian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "ecs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eteocypriot",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "ecy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "E",
    "type": "living",
    "scope": "individual",
    "iso6393": "eee",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Efai",
    "type": "living",
    "scope": "individual",
    "iso6393": "efa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Efe",
    "type": "living",
    "scope": "individual",
    "iso6393": "efe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Efik",
    "type": "living",
    "scope": "individual",
    "iso6393": "efi",
    "iso6392B": "efi",
    "iso6392T": "efi",
    "iso6391": null
  },
  {
    "name": "Ega",
    "type": "living",
    "scope": "individual",
    "iso6393": "ega",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Emilian",
    "type": "living",
    "scope": "individual",
    "iso6393": "egl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eggon",
    "type": "living",
    "scope": "individual",
    "iso6393": "ego",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Egyptian (Ancient)",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "egy",
    "iso6392B": "egy",
    "iso6392T": "egy",
    "iso6391": null
  },
  {
    "name": "Ehueun",
    "type": "living",
    "scope": "individual",
    "iso6393": "ehu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eipomek",
    "type": "living",
    "scope": "individual",
    "iso6393": "eip",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eitiep",
    "type": "living",
    "scope": "individual",
    "iso6393": "eit",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Askopan",
    "type": "living",
    "scope": "individual",
    "iso6393": "eiv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ejamat",
    "type": "living",
    "scope": "individual",
    "iso6393": "eja",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ekajuk",
    "type": "living",
    "scope": "individual",
    "iso6393": "eka",
    "iso6392B": "eka",
    "iso6392T": "eka",
    "iso6391": null
  },
  {
    "name": "Eastern Karnic",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ekc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ekit",
    "type": "living",
    "scope": "individual",
    "iso6393": "eke",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ekari",
    "type": "living",
    "scope": "individual",
    "iso6393": "ekg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eki",
    "type": "living",
    "scope": "individual",
    "iso6393": "eki",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Standard Estonian",
    "type": "living",
    "scope": "individual",
    "iso6393": "ekk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kol (Bangladesh)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ekl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Elip",
    "type": "living",
    "scope": "individual",
    "iso6393": "ekm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koti",
    "type": "living",
    "scope": "individual",
    "iso6393": "eko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ekpeye",
    "type": "living",
    "scope": "individual",
    "iso6393": "ekp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yace",
    "type": "living",
    "scope": "individual",
    "iso6393": "ekr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Kayah",
    "type": "living",
    "scope": "individual",
    "iso6393": "eky",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Elepi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ele",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "El Hugeirat",
    "type": "living",
    "scope": "individual",
    "iso6393": "elh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nding",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "eli",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Elkei",
    "type": "living",
    "scope": "individual",
    "iso6393": "elk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Modern Greek (1453-)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ell",
    "iso6392B": "gre",
    "iso6392T": "ell",
    "iso6391": "el"
  },
  {
    "name": "Eleme",
    "type": "living",
    "scope": "individual",
    "iso6393": "elm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "El Molo",
    "type": "living",
    "scope": "individual",
    "iso6393": "elo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Elu",
    "type": "living",
    "scope": "individual",
    "iso6393": "elu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Elamite",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "elx",
    "iso6392B": "elx",
    "iso6392T": "elx",
    "iso6391": null
  },
  {
    "name": "Emai-Iuleha-Ora",
    "type": "living",
    "scope": "individual",
    "iso6393": "ema",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Embaloh",
    "type": "living",
    "scope": "individual",
    "iso6393": "emb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Emerillon",
    "type": "living",
    "scope": "individual",
    "iso6393": "eme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Meohang",
    "type": "living",
    "scope": "individual",
    "iso6393": "emg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mussau-Emira",
    "type": "living",
    "scope": "individual",
    "iso6393": "emi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Maninkakan",
    "type": "living",
    "scope": "individual",
    "iso6393": "emk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mamulique",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "emm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eman",
    "type": "living",
    "scope": "individual",
    "iso6393": "emn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Emberá",
    "type": "living",
    "scope": "individual",
    "iso6393": "emp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pacific Gulf Yupik",
    "type": "living",
    "scope": "individual",
    "iso6393": "ems",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Muria",
    "type": "living",
    "scope": "individual",
    "iso6393": "emu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Emplawas",
    "type": "living",
    "scope": "individual",
    "iso6393": "emw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Erromintxela",
    "type": "living",
    "scope": "individual",
    "iso6393": "emx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Epigraphic Mayan",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "emy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Apali",
    "type": "living",
    "scope": "individual",
    "iso6393": "ena",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Markweeta",
    "type": "living",
    "scope": "individual",
    "iso6393": "enb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "En",
    "type": "living",
    "scope": "individual",
    "iso6393": "enc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ende",
    "type": "living",
    "scope": "individual",
    "iso6393": "end",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Forest Enets",
    "type": "living",
    "scope": "individual",
    "iso6393": "enf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "English",
    "type": "living",
    "scope": "individual",
    "iso6393": "eng",
    "iso6392B": "eng",
    "iso6392T": "eng",
    "iso6391": "en"
  },
  {
    "name": "Tundra Enets",
    "type": "living",
    "scope": "individual",
    "iso6393": "enh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Enlhet",
    "type": "living",
    "scope": "individual",
    "iso6393": "enl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Middle English (1100-1500)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "enm",
    "iso6392B": "enm",
    "iso6392T": "enm",
    "iso6391": null
  },
  {
    "name": "Engenni",
    "type": "living",
    "scope": "individual",
    "iso6393": "enn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Enggano",
    "type": "living",
    "scope": "individual",
    "iso6393": "eno",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Enga",
    "type": "living",
    "scope": "individual",
    "iso6393": "enq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Emumu",
    "type": "living",
    "scope": "individual",
    "iso6393": "enr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Enu",
    "type": "living",
    "scope": "individual",
    "iso6393": "enu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Enwan (Edu State)",
    "type": "living",
    "scope": "individual",
    "iso6393": "env",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Enwan (Akwa Ibom State)",
    "type": "living",
    "scope": "individual",
    "iso6393": "enw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Enxet",
    "type": "living",
    "scope": "individual",
    "iso6393": "enx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Beti (Côte d'Ivoire)",
    "type": "living",
    "scope": "individual",
    "iso6393": "eot",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Epie",
    "type": "living",
    "scope": "individual",
    "iso6393": "epi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Esperanto",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "epo",
    "iso6392B": "epo",
    "iso6392T": "epo",
    "iso6391": "eo"
  },
  {
    "name": "Eravallan",
    "type": "living",
    "scope": "individual",
    "iso6393": "era",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sie",
    "type": "living",
    "scope": "individual",
    "iso6393": "erg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eruwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "erh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ogea",
    "type": "living",
    "scope": "individual",
    "iso6393": "eri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Efate",
    "type": "living",
    "scope": "individual",
    "iso6393": "erk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Horpa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ero",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Erre",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "err",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ersu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ers",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eritai",
    "type": "living",
    "scope": "individual",
    "iso6393": "ert",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Erokwanas",
    "type": "living",
    "scope": "individual",
    "iso6393": "erw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ese Ejja",
    "type": "living",
    "scope": "individual",
    "iso6393": "ese",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aheri Gondi",
    "type": "living",
    "scope": "individual",
    "iso6393": "esg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eshtehardi",
    "type": "living",
    "scope": "individual",
    "iso6393": "esh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Alaskan Inupiatun",
    "type": "living",
    "scope": "individual",
    "iso6393": "esi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northwest Alaska Inupiatun",
    "type": "living",
    "scope": "individual",
    "iso6393": "esk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Egypt Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "esl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Esuma",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "esm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Salvadoran Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "esn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Estonian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "eso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Esselen",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "esq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Siberian Yupik",
    "type": "living",
    "scope": "individual",
    "iso6393": "ess",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Estonian",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "est",
    "iso6392B": "est",
    "iso6392T": "est",
    "iso6391": "et"
  },
  {
    "name": "Central Yupik",
    "type": "living",
    "scope": "individual",
    "iso6393": "esu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eskayan",
    "type": "living",
    "scope": "individual",
    "iso6393": "esy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Etebi",
    "type": "living",
    "scope": "individual",
    "iso6393": "etb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Etchemin",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "etc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ethiopian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "eth",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eton (Vanuatu)",
    "type": "living",
    "scope": "individual",
    "iso6393": "etn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eton (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "eto",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Edolo",
    "type": "living",
    "scope": "individual",
    "iso6393": "etr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yekhee",
    "type": "living",
    "scope": "individual",
    "iso6393": "ets",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Etruscan",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "ett",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ejagham",
    "type": "living",
    "scope": "individual",
    "iso6393": "etu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eten",
    "type": "living",
    "scope": "individual",
    "iso6393": "etx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Semimi",
    "type": "living",
    "scope": "individual",
    "iso6393": "etz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Basque",
    "type": "living",
    "scope": "individual",
    "iso6393": "eus",
    "iso6392B": "baq",
    "iso6392T": "eus",
    "iso6391": "eu"
  },
  {
    "name": "Even",
    "type": "living",
    "scope": "individual",
    "iso6393": "eve",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uvbie",
    "type": "living",
    "scope": "individual",
    "iso6393": "evh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Evenki",
    "type": "living",
    "scope": "individual",
    "iso6393": "evn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ewe",
    "type": "living",
    "scope": "individual",
    "iso6393": "ewe",
    "iso6392B": "ewe",
    "iso6392T": "ewe",
    "iso6391": "ee"
  },
  {
    "name": "Ewondo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ewo",
    "iso6392B": "ewo",
    "iso6392T": "ewo",
    "iso6391": null
  },
  {
    "name": "Extremaduran",
    "type": "living",
    "scope": "individual",
    "iso6393": "ext",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eyak",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "eya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Keiyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "eyo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ezaa",
    "type": "living",
    "scope": "individual",
    "iso6393": "eza",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uzekwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "eze",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fasu",
    "type": "living",
    "scope": "individual",
    "iso6393": "faa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fa d'Ambu",
    "type": "living",
    "scope": "individual",
    "iso6393": "fab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wagi",
    "type": "living",
    "scope": "individual",
    "iso6393": "fad",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fagani",
    "type": "living",
    "scope": "individual",
    "iso6393": "faf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Finongan",
    "type": "living",
    "scope": "individual",
    "iso6393": "fag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baissa Fali",
    "type": "living",
    "scope": "individual",
    "iso6393": "fah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Faiwol",
    "type": "living",
    "scope": "individual",
    "iso6393": "fai",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Faita",
    "type": "living",
    "scope": "individual",
    "iso6393": "faj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fang (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "fak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Fali",
    "type": "living",
    "scope": "individual",
    "iso6393": "fal",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fam",
    "type": "living",
    "scope": "individual",
    "iso6393": "fam",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fang (Equatorial Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "fan",
    "iso6392B": "fan",
    "iso6392T": "fan",
    "iso6391": null
  },
  {
    "name": "Faroese",
    "type": "living",
    "scope": "individual",
    "iso6393": "fao",
    "iso6392B": "fao",
    "iso6392T": "fao",
    "iso6391": "fo"
  },
  {
    "name": "Paloor",
    "type": "living",
    "scope": "individual",
    "iso6393": "fap",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fataleka",
    "type": "living",
    "scope": "individual",
    "iso6393": "far",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Persian",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "fas",
    "iso6392B": "per",
    "iso6392T": "fas",
    "iso6391": "fa"
  },
  {
    "name": "Fanti",
    "type": "living",
    "scope": "individual",
    "iso6393": "fat",
    "iso6392B": "fat",
    "iso6392T": "fat",
    "iso6391": null
  },
  {
    "name": "Fayu",
    "type": "living",
    "scope": "individual",
    "iso6393": "fau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fala",
    "type": "living",
    "scope": "individual",
    "iso6393": "fax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southwestern Fars",
    "type": "living",
    "scope": "individual",
    "iso6393": "fay",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northwestern Fars",
    "type": "living",
    "scope": "individual",
    "iso6393": "faz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Albay Bikol",
    "type": "living",
    "scope": "individual",
    "iso6393": "fbl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Quebec Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "fcs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Feroge",
    "type": "living",
    "scope": "individual",
    "iso6393": "fer",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Foia Foia",
    "type": "living",
    "scope": "individual",
    "iso6393": "ffi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maasina Fulfulde",
    "type": "living",
    "scope": "individual",
    "iso6393": "ffm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fongoro",
    "type": "living",
    "scope": "individual",
    "iso6393": "fgr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nobiin",
    "type": "living",
    "scope": "individual",
    "iso6393": "fia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fyer",
    "type": "living",
    "scope": "individual",
    "iso6393": "fie",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fijian",
    "type": "living",
    "scope": "individual",
    "iso6393": "fij",
    "iso6392B": "fij",
    "iso6392T": "fij",
    "iso6391": "fj"
  },
  {
    "name": "Filipino",
    "type": "living",
    "scope": "individual",
    "iso6393": "fil",
    "iso6392B": "fil",
    "iso6392T": "fil",
    "iso6391": null
  },
  {
    "name": "Finnish",
    "type": "living",
    "scope": "individual",
    "iso6393": "fin",
    "iso6392B": "fin",
    "iso6392T": "fin",
    "iso6391": "fi"
  },
  {
    "name": "Fipa",
    "type": "living",
    "scope": "individual",
    "iso6393": "fip",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Firan",
    "type": "living",
    "scope": "individual",
    "iso6393": "fir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tornedalen Finnish",
    "type": "living",
    "scope": "individual",
    "iso6393": "fit",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fiwaga",
    "type": "living",
    "scope": "individual",
    "iso6393": "fiw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kirya-Konzəl",
    "type": "living",
    "scope": "individual",
    "iso6393": "fkk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kven Finnish",
    "type": "living",
    "scope": "individual",
    "iso6393": "fkv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalispel-Pend d'Oreille",
    "type": "living",
    "scope": "individual",
    "iso6393": "fla",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Foau",
    "type": "living",
    "scope": "individual",
    "iso6393": "flh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fali",
    "type": "living",
    "scope": "individual",
    "iso6393": "fli",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Fali",
    "type": "living",
    "scope": "individual",
    "iso6393": "fll",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Flinders Island",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "fln",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fuliiru",
    "type": "living",
    "scope": "individual",
    "iso6393": "flr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Flaaitaal",
    "type": "living",
    "scope": "individual",
    "iso6393": "fly",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fe'fe'",
    "type": "living",
    "scope": "individual",
    "iso6393": "fmp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Far Western Muria",
    "type": "living",
    "scope": "individual",
    "iso6393": "fmu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fanbak",
    "type": "living",
    "scope": "individual",
    "iso6393": "fnb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fanagalo",
    "type": "living",
    "scope": "individual",
    "iso6393": "fng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fania",
    "type": "living",
    "scope": "individual",
    "iso6393": "fni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Foodo",
    "type": "living",
    "scope": "individual",
    "iso6393": "fod",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Foi",
    "type": "living",
    "scope": "individual",
    "iso6393": "foi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Foma",
    "type": "living",
    "scope": "individual",
    "iso6393": "fom",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fon",
    "type": "living",
    "scope": "individual",
    "iso6393": "fon",
    "iso6392B": "fon",
    "iso6392T": "fon",
    "iso6391": null
  },
  {
    "name": "Fore",
    "type": "living",
    "scope": "individual",
    "iso6393": "for",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siraya",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "fos",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fernando Po Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "fpe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fas",
    "type": "living",
    "scope": "individual",
    "iso6393": "fqs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "French",
    "type": "living",
    "scope": "individual",
    "iso6393": "fra",
    "iso6392B": "fre",
    "iso6392T": "fra",
    "iso6391": "fr"
  },
  {
    "name": "Cajun French",
    "type": "living",
    "scope": "individual",
    "iso6393": "frc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fordata",
    "type": "living",
    "scope": "individual",
    "iso6393": "frd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Frankish",
    "type": "historical",
    "scope": "individual",
    "iso6393": "frk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Middle French (ca. 1400-1600)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "frm",
    "iso6392B": "frm",
    "iso6392T": "frm",
    "iso6391": null
  },
  {
    "name": "Old French (842-ca. 1400)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "fro",
    "iso6392B": "fro",
    "iso6392T": "fro",
    "iso6391": null
  },
  {
    "name": "Arpitan",
    "type": "living",
    "scope": "individual",
    "iso6393": "frp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Forak",
    "type": "living",
    "scope": "individual",
    "iso6393": "frq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Frisian",
    "type": "living",
    "scope": "individual",
    "iso6393": "frr",
    "iso6392B": "frr",
    "iso6392T": "frr",
    "iso6391": null
  },
  {
    "name": "Eastern Frisian",
    "type": "living",
    "scope": "individual",
    "iso6393": "frs",
    "iso6392B": "frs",
    "iso6392T": "frs",
    "iso6391": null
  },
  {
    "name": "Fortsenal",
    "type": "living",
    "scope": "individual",
    "iso6393": "frt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Frisian",
    "type": "living",
    "scope": "individual",
    "iso6393": "fry",
    "iso6392B": "fry",
    "iso6392T": "fry",
    "iso6391": "fy"
  },
  {
    "name": "Finnish Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "fse",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "French Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "fsl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Finland-Swedish Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "fss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adamawa Fulfulde",
    "type": "living",
    "scope": "individual",
    "iso6393": "fub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pulaar",
    "type": "living",
    "scope": "individual",
    "iso6393": "fuc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "East Futuna",
    "type": "living",
    "scope": "individual",
    "iso6393": "fud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Borgu Fulfulde",
    "type": "living",
    "scope": "individual",
    "iso6393": "fue",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pular",
    "type": "living",
    "scope": "individual",
    "iso6393": "fuf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Niger Fulfulde",
    "type": "living",
    "scope": "individual",
    "iso6393": "fuh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bagirmi Fulfulde",
    "type": "living",
    "scope": "individual",
    "iso6393": "fui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ko",
    "type": "living",
    "scope": "individual",
    "iso6393": "fuj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fulah",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "ful",
    "iso6392B": "ful",
    "iso6392T": "ful",
    "iso6391": "ff"
  },
  {
    "name": "Fum",
    "type": "living",
    "scope": "individual",
    "iso6393": "fum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fulniô",
    "type": "living",
    "scope": "individual",
    "iso6393": "fun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central-Eastern Niger Fulfulde",
    "type": "living",
    "scope": "individual",
    "iso6393": "fuq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Friulian",
    "type": "living",
    "scope": "individual",
    "iso6393": "fur",
    "iso6392B": "fur",
    "iso6392T": "fur",
    "iso6391": null
  },
  {
    "name": "Futuna-Aniwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "fut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Furu",
    "type": "living",
    "scope": "individual",
    "iso6393": "fuu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nigerian Fulfulde",
    "type": "living",
    "scope": "individual",
    "iso6393": "fuv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fuyug",
    "type": "living",
    "scope": "individual",
    "iso6393": "fuy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fur",
    "type": "living",
    "scope": "individual",
    "iso6393": "fvr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fwâi",
    "type": "living",
    "scope": "individual",
    "iso6393": "fwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "fwe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ga",
    "type": "living",
    "scope": "individual",
    "iso6393": "gaa",
    "iso6392B": "gaa",
    "iso6392T": "gaa",
    "iso6391": null
  },
  {
    "name": "Gabri",
    "type": "living",
    "scope": "individual",
    "iso6393": "gab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mixed Great Andamanese",
    "type": "living",
    "scope": "individual",
    "iso6393": "gac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gaddang",
    "type": "living",
    "scope": "individual",
    "iso6393": "gad",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guarequena",
    "type": "living",
    "scope": "individual",
    "iso6393": "gae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gende",
    "type": "living",
    "scope": "individual",
    "iso6393": "gaf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gagauz",
    "type": "living",
    "scope": "individual",
    "iso6393": "gag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alekano",
    "type": "living",
    "scope": "individual",
    "iso6393": "gah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Borei",
    "type": "living",
    "scope": "individual",
    "iso6393": "gai",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gadsup",
    "type": "living",
    "scope": "individual",
    "iso6393": "gaj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gamkonora",
    "type": "living",
    "scope": "individual",
    "iso6393": "gak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Galolen",
    "type": "living",
    "scope": "individual",
    "iso6393": "gal",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kandawo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gam",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gan Chinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "gan",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gants",
    "type": "living",
    "scope": "individual",
    "iso6393": "gao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gal",
    "type": "living",
    "scope": "individual",
    "iso6393": "gap",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gata'",
    "type": "living",
    "scope": "individual",
    "iso6393": "gaq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Galeya",
    "type": "living",
    "scope": "individual",
    "iso6393": "gar",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adiwasi Garasia",
    "type": "living",
    "scope": "individual",
    "iso6393": "gas",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kenati",
    "type": "living",
    "scope": "individual",
    "iso6393": "gat",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mudhili Gadaba",
    "type": "living",
    "scope": "individual",
    "iso6393": "gau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nobonob",
    "type": "living",
    "scope": "individual",
    "iso6393": "gaw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Borana-Arsi-Guji Oromo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gayo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gay",
    "iso6392B": "gay",
    "iso6392T": "gay",
    "iso6391": null
  },
  {
    "name": "West Central Oromo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gaz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gbaya (Central African Republic)",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "gba",
    "iso6392B": "gba",
    "iso6392T": "gba",
    "iso6391": null
  },
  {
    "name": "Kaytetye",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karajarri",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Niksek",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gaikundi",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gbanziri",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Defi Gbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Galela",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bodo Gadaba",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gaddi",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gamit",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Garhwali",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mo'da",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Grebo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gbaya-Bossangoa",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gbaya-Bozoum",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gbagyi",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gbesi Gbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gagadu",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gbanu",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gabi-Gabi",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Xwla Gbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gbari",
    "type": "living",
    "scope": "individual",
    "iso6393": "gby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zoroastrian Dari",
    "type": "living",
    "scope": "individual",
    "iso6393": "gbz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mali",
    "type": "living",
    "scope": "individual",
    "iso6393": "gcc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ganggalida",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gcd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Galice",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gce",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guadeloupean Creole French",
    "type": "living",
    "scope": "individual",
    "iso6393": "gcf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Grenadian Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "gcl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gaina",
    "type": "living",
    "scope": "individual",
    "iso6393": "gcn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guianese Creole French",
    "type": "living",
    "scope": "individual",
    "iso6393": "gcr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Colonia Tovar German",
    "type": "living",
    "scope": "individual",
    "iso6393": "gct",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gade Lohar",
    "type": "living",
    "scope": "individual",
    "iso6393": "gda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pottangi Ollar Gadaba",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gugu Badhun",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gdc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gedaged",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gude",
    "type": "living",
    "scope": "individual",
    "iso6393": "gde",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guduf-Gava",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ga'dang",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gadjerawang",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gundi",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gurdjar",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gadang",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dirasha",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laal",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Umanakaina",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ghodoberi",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mehri",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wipi",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ghandruk Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "gds",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kungardutyi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gdt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gudu",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Godwari",
    "type": "living",
    "scope": "individual",
    "iso6393": "gdx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Geruma",
    "type": "living",
    "scope": "individual",
    "iso6393": "gea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kire",
    "type": "living",
    "scope": "individual",
    "iso6393": "geb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gboloo Grebo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gec",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gade",
    "type": "living",
    "scope": "individual",
    "iso6393": "ged",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gengle",
    "type": "living",
    "scope": "individual",
    "iso6393": "geg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hutterite German",
    "type": "living",
    "scope": "individual",
    "iso6393": "geh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gebe",
    "type": "living",
    "scope": "individual",
    "iso6393": "gei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gen",
    "type": "living",
    "scope": "individual",
    "iso6393": "gej",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ywom",
    "type": "living",
    "scope": "individual",
    "iso6393": "gek",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "ut-Ma'in",
    "type": "living",
    "scope": "individual",
    "iso6393": "gel",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Geme",
    "type": "living",
    "scope": "individual",
    "iso6393": "geq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Geser-Gorom",
    "type": "living",
    "scope": "individual",
    "iso6393": "ges",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eviya",
    "type": "living",
    "scope": "individual",
    "iso6393": "gev",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gera",
    "type": "living",
    "scope": "individual",
    "iso6393": "gew",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Garre",
    "type": "living",
    "scope": "individual",
    "iso6393": "gex",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Enya",
    "type": "living",
    "scope": "individual",
    "iso6393": "gey",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Geez",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "gez",
    "iso6392B": "gez",
    "iso6392T": "gez",
    "iso6391": null
  },
  {
    "name": "Patpatar",
    "type": "living",
    "scope": "individual",
    "iso6393": "gfk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gafat",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gft",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gao",
    "type": "living",
    "scope": "individual",
    "iso6393": "gga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gbii",
    "type": "living",
    "scope": "individual",
    "iso6393": "ggb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gugadj",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ggd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gurr-goni",
    "type": "living",
    "scope": "individual",
    "iso6393": "gge",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gurgula",
    "type": "living",
    "scope": "individual",
    "iso6393": "ggg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kungarakany",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ggk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ganglau",
    "type": "living",
    "scope": "individual",
    "iso6393": "ggl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gitua",
    "type": "living",
    "scope": "individual",
    "iso6393": "ggt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gagu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ggu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gogodala",
    "type": "living",
    "scope": "individual",
    "iso6393": "ggw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ghadamès",
    "type": "living",
    "scope": "individual",
    "iso6393": "gha",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hiberno-Scottish Gaelic",
    "type": "historical",
    "scope": "individual",
    "iso6393": "ghc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Ghale",
    "type": "living",
    "scope": "individual",
    "iso6393": "ghe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Ghale",
    "type": "living",
    "scope": "individual",
    "iso6393": "ghh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Geko Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "ghk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ghulfan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ghl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ghanongga",
    "type": "living",
    "scope": "individual",
    "iso6393": "ghn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ghomara",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gho",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ghera",
    "type": "living",
    "scope": "individual",
    "iso6393": "ghr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guhu-Samane",
    "type": "living",
    "scope": "individual",
    "iso6393": "ghs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuke",
    "type": "living",
    "scope": "individual",
    "iso6393": "ght",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kija",
    "type": "living",
    "scope": "individual",
    "iso6393": "gia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gibanawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "gib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gail",
    "type": "living",
    "scope": "individual",
    "iso6393": "gic",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gidar",
    "type": "living",
    "scope": "individual",
    "iso6393": "gid",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gaɓogbo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gie",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Goaria",
    "type": "living",
    "scope": "individual",
    "iso6393": "gig",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Githabul",
    "type": "living",
    "scope": "individual",
    "iso6393": "gih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gilbertese",
    "type": "living",
    "scope": "individual",
    "iso6393": "gil",
    "iso6392B": "gil",
    "iso6392T": "gil",
    "iso6391": null
  },
  {
    "name": "Gimi (Eastern Highlands)",
    "type": "living",
    "scope": "individual",
    "iso6393": "gim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hinukh",
    "type": "living",
    "scope": "individual",
    "iso6393": "gin",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gimi (West New Britain)",
    "type": "living",
    "scope": "individual",
    "iso6393": "gip",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Green Gelao",
    "type": "living",
    "scope": "individual",
    "iso6393": "giq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Red Gelao",
    "type": "living",
    "scope": "individual",
    "iso6393": "gir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Giziga",
    "type": "living",
    "scope": "individual",
    "iso6393": "gis",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gitxsan",
    "type": "living",
    "scope": "individual",
    "iso6393": "git",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mulao",
    "type": "living",
    "scope": "individual",
    "iso6393": "giu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "White Gelao",
    "type": "living",
    "scope": "individual",
    "iso6393": "giw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gilima",
    "type": "living",
    "scope": "individual",
    "iso6393": "gix",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Giyug",
    "type": "living",
    "scope": "individual",
    "iso6393": "giy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Giziga",
    "type": "living",
    "scope": "individual",
    "iso6393": "giz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Geji",
    "type": "living",
    "scope": "individual",
    "iso6393": "gji",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kachi Koli",
    "type": "living",
    "scope": "individual",
    "iso6393": "gjk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gunditjmara",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gjm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gonja",
    "type": "living",
    "scope": "individual",
    "iso6393": "gjn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gurindji Kriol",
    "type": "living",
    "scope": "individual",
    "iso6393": "gjr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gujari",
    "type": "living",
    "scope": "individual",
    "iso6393": "gju",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guya",
    "type": "living",
    "scope": "individual",
    "iso6393": "gka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Magɨ (Madang Province)",
    "type": "living",
    "scope": "individual",
    "iso6393": "gkd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndai",
    "type": "living",
    "scope": "individual",
    "iso6393": "gke",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gokana",
    "type": "living",
    "scope": "individual",
    "iso6393": "gkn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kok-Nar",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guinea Kpelle",
    "type": "living",
    "scope": "individual",
    "iso6393": "gkp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "ǂUngkue",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Scottish Gaelic",
    "type": "living",
    "scope": "individual",
    "iso6393": "gla",
    "iso6392B": "gla",
    "iso6392T": "gla",
    "iso6391": "gd"
  },
  {
    "name": "Bon Gula",
    "type": "living",
    "scope": "individual",
    "iso6393": "glc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nanai",
    "type": "living",
    "scope": "individual",
    "iso6393": "gld",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Irish",
    "type": "living",
    "scope": "individual",
    "iso6393": "gle",
    "iso6392B": "gle",
    "iso6392T": "gle",
    "iso6391": "ga"
  },
  {
    "name": "Galician",
    "type": "living",
    "scope": "individual",
    "iso6393": "glg",
    "iso6392B": "glg",
    "iso6392T": "glg",
    "iso6391": "gl"
  },
  {
    "name": "Northwest Pashai",
    "type": "living",
    "scope": "individual",
    "iso6393": "glh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guliguli",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gli",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gula Iro",
    "type": "living",
    "scope": "individual",
    "iso6393": "glj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gilaki",
    "type": "living",
    "scope": "individual",
    "iso6393": "glk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Garlali",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gll",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Galambu",
    "type": "living",
    "scope": "individual",
    "iso6393": "glo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Glaro-Twabo",
    "type": "living",
    "scope": "individual",
    "iso6393": "glr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gula (Chad)",
    "type": "living",
    "scope": "individual",
    "iso6393": "glu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manx",
    "type": "living",
    "scope": "individual",
    "iso6393": "glv",
    "iso6392B": "glv",
    "iso6392T": "glv",
    "iso6391": "gv"
  },
  {
    "name": "Glavda",
    "type": "living",
    "scope": "individual",
    "iso6393": "glw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gule",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gly",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gambera",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gula'alaa",
    "type": "living",
    "scope": "individual",
    "iso6393": "gmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mághdì",
    "type": "living",
    "scope": "individual",
    "iso6393": "gmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Magɨyi",
    "type": "living",
    "scope": "individual",
    "iso6393": "gmg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Middle High German (ca. 1050-1500)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "gmh",
    "iso6392B": "gmh",
    "iso6392T": "gmh",
    "iso6391": null
  },
  {
    "name": "Middle Low German",
    "type": "historical",
    "scope": "individual",
    "iso6393": "gml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gbaya-Mbodomo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gimnime",
    "type": "living",
    "scope": "individual",
    "iso6393": "gmn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gumalu",
    "type": "living",
    "scope": "individual",
    "iso6393": "gmu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gamo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gmv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Magoma",
    "type": "living",
    "scope": "individual",
    "iso6393": "gmx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mycenaean Greek",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "gmy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mgbolizhia",
    "type": "living",
    "scope": "individual",
    "iso6393": "gmz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaansa",
    "type": "living",
    "scope": "individual",
    "iso6393": "gna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gangte",
    "type": "living",
    "scope": "individual",
    "iso6393": "gnb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guanche",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gnc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zulgo-Gemzek",
    "type": "living",
    "scope": "individual",
    "iso6393": "gnd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ganang",
    "type": "living",
    "scope": "individual",
    "iso6393": "gne",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngangam",
    "type": "living",
    "scope": "individual",
    "iso6393": "gng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lere",
    "type": "living",
    "scope": "individual",
    "iso6393": "gnh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gooniyandi",
    "type": "living",
    "scope": "individual",
    "iso6393": "gni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngen",
    "type": "living",
    "scope": "individual",
    "iso6393": "gnj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "ǁGana",
    "type": "living",
    "scope": "individual",
    "iso6393": "gnk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gangulu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gnl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ginuman",
    "type": "living",
    "scope": "individual",
    "iso6393": "gnm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gumatj",
    "type": "living",
    "scope": "individual",
    "iso6393": "gnn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Gondi",
    "type": "living",
    "scope": "individual",
    "iso6393": "gno",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gana",
    "type": "living",
    "scope": "individual",
    "iso6393": "gnq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gureng Gureng",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gnr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guntai",
    "type": "living",
    "scope": "individual",
    "iso6393": "gnt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gnau",
    "type": "living",
    "scope": "individual",
    "iso6393": "gnu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Bolivian Guaraní",
    "type": "living",
    "scope": "individual",
    "iso6393": "gnw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ganzi",
    "type": "living",
    "scope": "individual",
    "iso6393": "gnz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guro",
    "type": "living",
    "scope": "individual",
    "iso6393": "goa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Playero",
    "type": "living",
    "scope": "individual",
    "iso6393": "gob",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gorakor",
    "type": "living",
    "scope": "individual",
    "iso6393": "goc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Godié",
    "type": "living",
    "scope": "individual",
    "iso6393": "god",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gongduk",
    "type": "living",
    "scope": "individual",
    "iso6393": "goe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gofa",
    "type": "living",
    "scope": "individual",
    "iso6393": "gof",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gogo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gog",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old High German (ca. 750-1050)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "goh",
    "iso6392B": "goh",
    "iso6392T": "goh",
    "iso6391": null
  },
  {
    "name": "Gobasi",
    "type": "living",
    "scope": "individual",
    "iso6393": "goi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gowlan",
    "type": "living",
    "scope": "individual",
    "iso6393": "goj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gowli",
    "type": "living",
    "scope": "individual",
    "iso6393": "gok",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gola",
    "type": "living",
    "scope": "individual",
    "iso6393": "gol",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Goan Konkani",
    "type": "living",
    "scope": "individual",
    "iso6393": "gom",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gondi",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "gon",
    "iso6392B": "gon",
    "iso6392T": "gon",
    "iso6391": null
  },
  {
    "name": "Gone Dau",
    "type": "living",
    "scope": "individual",
    "iso6393": "goo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yeretuar",
    "type": "living",
    "scope": "individual",
    "iso6393": "gop",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gorap",
    "type": "living",
    "scope": "individual",
    "iso6393": "goq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gorontalo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gor",
    "iso6392B": "gor",
    "iso6392T": "gor",
    "iso6391": null
  },
  {
    "name": "Gronings",
    "type": "living",
    "scope": "individual",
    "iso6393": "gos",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gothic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "got",
    "iso6392B": "got",
    "iso6392T": "got",
    "iso6391": null
  },
  {
    "name": "Gavar",
    "type": "living",
    "scope": "individual",
    "iso6393": "gou",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gorowa",
    "type": "living",
    "scope": "individual",
    "iso6393": "gow",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gobu",
    "type": "living",
    "scope": "individual",
    "iso6393": "gox",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Goundo",
    "type": "living",
    "scope": "individual",
    "iso6393": "goy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gozarkhani",
    "type": "living",
    "scope": "individual",
    "iso6393": "goz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gupa-Abawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "gpa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ghanaian Pidgin English",
    "type": "living",
    "scope": "individual",
    "iso6393": "gpe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taiap",
    "type": "living",
    "scope": "individual",
    "iso6393": "gpn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ga'anda",
    "type": "living",
    "scope": "individual",
    "iso6393": "gqa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guiqiong",
    "type": "living",
    "scope": "individual",
    "iso6393": "gqi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guana (Brazil)",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gqn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gor",
    "type": "living",
    "scope": "individual",
    "iso6393": "gqr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Qau",
    "type": "living",
    "scope": "individual",
    "iso6393": "gqu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rajput Garasia",
    "type": "living",
    "scope": "individual",
    "iso6393": "gra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Grebo",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "grb",
    "iso6392B": "grb",
    "iso6392T": "grb",
    "iso6391": null
  },
  {
    "name": "Ancient Greek (to 1453)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "grc",
    "iso6392B": "grc",
    "iso6392T": "grc",
    "iso6391": null
  },
  {
    "name": "Guruntum-Mbaaru",
    "type": "living",
    "scope": "individual",
    "iso6393": "grd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Madi",
    "type": "living",
    "scope": "individual",
    "iso6393": "grg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gbiri-Niragu",
    "type": "living",
    "scope": "individual",
    "iso6393": "grh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ghari",
    "type": "living",
    "scope": "individual",
    "iso6393": "gri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Grebo",
    "type": "living",
    "scope": "individual",
    "iso6393": "grj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kota Marudu Talantang",
    "type": "living",
    "scope": "individual",
    "iso6393": "grm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guarani",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "grn",
    "iso6392B": "grn",
    "iso6392T": "grn",
    "iso6391": "gn"
  },
  {
    "name": "Groma",
    "type": "living",
    "scope": "individual",
    "iso6393": "gro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gorovu",
    "type": "living",
    "scope": "individual",
    "iso6393": "grq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taznatit",
    "type": "living",
    "scope": "individual",
    "iso6393": "grr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gresi",
    "type": "living",
    "scope": "individual",
    "iso6393": "grs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Garo",
    "type": "living",
    "scope": "individual",
    "iso6393": "grt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kistane",
    "type": "living",
    "scope": "individual",
    "iso6393": "gru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Grebo",
    "type": "living",
    "scope": "individual",
    "iso6393": "grv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gweda",
    "type": "living",
    "scope": "individual",
    "iso6393": "grw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guriaso",
    "type": "living",
    "scope": "individual",
    "iso6393": "grx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barclayville Grebo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gry",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guramalum",
    "type": "living",
    "scope": "individual",
    "iso6393": "grz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ghanaian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "gse",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "German Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "gsg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gusilay",
    "type": "living",
    "scope": "individual",
    "iso6393": "gsl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guatemalan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "gsm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nema",
    "type": "living",
    "scope": "individual",
    "iso6393": "gsn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southwest Gbaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "gso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wasembo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gsp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Greek Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "gss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Swiss German",
    "type": "living",
    "scope": "individual",
    "iso6393": "gsw",
    "iso6392B": "gsw",
    "iso6392T": "gsw",
    "iso6391": null
  },
  {
    "name": "Guató",
    "type": "living",
    "scope": "individual",
    "iso6393": "gta",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aghu-Tharnggala",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gtu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shiki",
    "type": "living",
    "scope": "individual",
    "iso6393": "gua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guajajára",
    "type": "living",
    "scope": "individual",
    "iso6393": "gub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wayuu",
    "type": "living",
    "scope": "individual",
    "iso6393": "guc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yocoboué Dida",
    "type": "living",
    "scope": "individual",
    "iso6393": "gud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gurindji",
    "type": "living",
    "scope": "individual",
    "iso6393": "gue",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gupapuyngu",
    "type": "living",
    "scope": "individual",
    "iso6393": "guf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paraguayan Guaraní",
    "type": "living",
    "scope": "individual",
    "iso6393": "gug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guahibo",
    "type": "living",
    "scope": "individual",
    "iso6393": "guh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Bolivian Guaraní",
    "type": "living",
    "scope": "individual",
    "iso6393": "gui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gujarati",
    "type": "living",
    "scope": "individual",
    "iso6393": "guj",
    "iso6392B": "guj",
    "iso6392T": "guj",
    "iso6391": "gu"
  },
  {
    "name": "Gumuz",
    "type": "living",
    "scope": "individual",
    "iso6393": "guk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sea Island Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "gul",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guambiano",
    "type": "living",
    "scope": "individual",
    "iso6393": "gum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbyá Guaraní",
    "type": "living",
    "scope": "individual",
    "iso6393": "gun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guayabero",
    "type": "living",
    "scope": "individual",
    "iso6393": "guo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gunwinggu",
    "type": "living",
    "scope": "individual",
    "iso6393": "gup",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aché",
    "type": "living",
    "scope": "individual",
    "iso6393": "guq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Farefare",
    "type": "living",
    "scope": "individual",
    "iso6393": "gur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guinean Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "gus",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maléku Jaíka",
    "type": "living",
    "scope": "individual",
    "iso6393": "gut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yanomamö",
    "type": "living",
    "scope": "individual",
    "iso6393": "guu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gun",
    "type": "living",
    "scope": "individual",
    "iso6393": "guw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gourmanchéma",
    "type": "living",
    "scope": "individual",
    "iso6393": "gux",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gusii",
    "type": "living",
    "scope": "individual",
    "iso6393": "guz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guana (Paraguay)",
    "type": "living",
    "scope": "individual",
    "iso6393": "gva",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guanano",
    "type": "living",
    "scope": "individual",
    "iso6393": "gvc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duwet",
    "type": "living",
    "scope": "individual",
    "iso6393": "gve",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Golin",
    "type": "living",
    "scope": "individual",
    "iso6393": "gvf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guajá",
    "type": "living",
    "scope": "individual",
    "iso6393": "gvj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gulay",
    "type": "living",
    "scope": "individual",
    "iso6393": "gvl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gurmana",
    "type": "living",
    "scope": "individual",
    "iso6393": "gvm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuku-Yalanji",
    "type": "living",
    "scope": "individual",
    "iso6393": "gvn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gavião Do Jiparaná",
    "type": "living",
    "scope": "individual",
    "iso6393": "gvo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pará Gavião",
    "type": "living",
    "scope": "individual",
    "iso6393": "gvp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gurung",
    "type": "living",
    "scope": "individual",
    "iso6393": "gvr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gumawana",
    "type": "living",
    "scope": "individual",
    "iso6393": "gvs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guyani",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gvy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbato",
    "type": "living",
    "scope": "individual",
    "iso6393": "gwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "gwb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalami",
    "type": "living",
    "scope": "individual",
    "iso6393": "gwc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gawwada",
    "type": "living",
    "scope": "individual",
    "iso6393": "gwd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gweno",
    "type": "living",
    "scope": "individual",
    "iso6393": "gwe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gowro",
    "type": "living",
    "scope": "individual",
    "iso6393": "gwf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gwg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gwichʼin",
    "type": "living",
    "scope": "individual",
    "iso6393": "gwi",
    "iso6392B": "gwi",
    "iso6392T": "gwi",
    "iso6391": null
  },
  {
    "name": "ǀGwi",
    "type": "living",
    "scope": "individual",
    "iso6393": "gwj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awngthim",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gwm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gwandara",
    "type": "living",
    "scope": "individual",
    "iso6393": "gwn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gwere",
    "type": "living",
    "scope": "individual",
    "iso6393": "gwr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gawar-Bati",
    "type": "living",
    "scope": "individual",
    "iso6393": "gwt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guwamu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gwu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwini",
    "type": "living",
    "scope": "individual",
    "iso6393": "gww",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gua",
    "type": "living",
    "scope": "individual",
    "iso6393": "gwx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wè Southern",
    "type": "living",
    "scope": "individual",
    "iso6393": "gxx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northwest Gbaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "gya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Garus",
    "type": "living",
    "scope": "individual",
    "iso6393": "gyb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kayardild",
    "type": "living",
    "scope": "individual",
    "iso6393": "gyd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gyem",
    "type": "living",
    "scope": "individual",
    "iso6393": "gye",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gungabula",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gyf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gbayi",
    "type": "living",
    "scope": "individual",
    "iso6393": "gyg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gyele",
    "type": "living",
    "scope": "individual",
    "iso6393": "gyi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gayil",
    "type": "living",
    "scope": "individual",
    "iso6393": "gyl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngäbere",
    "type": "living",
    "scope": "individual",
    "iso6393": "gym",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guyanese Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "gyn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gyalsumdo",
    "type": "living",
    "scope": "individual",
    "iso6393": "gyo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guarayu",
    "type": "living",
    "scope": "individual",
    "iso6393": "gyr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gunya",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "gyy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ganza",
    "type": "living",
    "scope": "individual",
    "iso6393": "gza",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gazi",
    "type": "living",
    "scope": "individual",
    "iso6393": "gzi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gane",
    "type": "living",
    "scope": "individual",
    "iso6393": "gzn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Han",
    "type": "living",
    "scope": "individual",
    "iso6393": "haa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hanoi Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "hab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gurani",
    "type": "living",
    "scope": "individual",
    "iso6393": "hac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hatam",
    "type": "living",
    "scope": "individual",
    "iso6393": "had",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Oromo",
    "type": "living",
    "scope": "individual",
    "iso6393": "hae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Haiphong Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "haf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "hag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hahon",
    "type": "living",
    "scope": "individual",
    "iso6393": "hah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Haida",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "hai",
    "iso6392B": "hai",
    "iso6392T": "hai",
    "iso6391": null
  },
  {
    "name": "Hajong",
    "type": "living",
    "scope": "individual",
    "iso6393": "haj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hakka Chinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "hak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Halang",
    "type": "living",
    "scope": "individual",
    "iso6393": "hal",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hewa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ham",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hangaza",
    "type": "living",
    "scope": "individual",
    "iso6393": "han",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hakö",
    "type": "living",
    "scope": "individual",
    "iso6393": "hao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hupla",
    "type": "living",
    "scope": "individual",
    "iso6393": "hap",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ha",
    "type": "living",
    "scope": "individual",
    "iso6393": "haq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Harari",
    "type": "living",
    "scope": "individual",
    "iso6393": "har",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Haisla",
    "type": "living",
    "scope": "individual",
    "iso6393": "has",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Haitian",
    "type": "living",
    "scope": "individual",
    "iso6393": "hat",
    "iso6392B": "hat",
    "iso6392T": "hat",
    "iso6391": "ht"
  },
  {
    "name": "Hausa",
    "type": "living",
    "scope": "individual",
    "iso6393": "hau",
    "iso6392B": "hau",
    "iso6392T": "hau",
    "iso6391": "ha"
  },
  {
    "name": "Havu",
    "type": "living",
    "scope": "individual",
    "iso6393": "hav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hawaiian",
    "type": "living",
    "scope": "individual",
    "iso6393": "haw",
    "iso6392B": "haw",
    "iso6392T": "haw",
    "iso6391": null
  },
  {
    "name": "Southern Haida",
    "type": "living",
    "scope": "individual",
    "iso6393": "hax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Haya",
    "type": "living",
    "scope": "individual",
    "iso6393": "hay",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hazaragi",
    "type": "living",
    "scope": "individual",
    "iso6393": "haz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hamba",
    "type": "living",
    "scope": "individual",
    "iso6393": "hba",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huba",
    "type": "living",
    "scope": "individual",
    "iso6393": "hbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Heiban",
    "type": "living",
    "scope": "individual",
    "iso6393": "hbn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ancient Hebrew",
    "type": "historical",
    "scope": "individual",
    "iso6393": "hbo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Serbo-Croatian",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "hbs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": "sh"
  },
  {
    "name": "Habu",
    "type": "living",
    "scope": "individual",
    "iso6393": "hbu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Andaman Creole Hindi",
    "type": "living",
    "scope": "individual",
    "iso6393": "hca",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huichol",
    "type": "living",
    "scope": "individual",
    "iso6393": "hch",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Haida",
    "type": "living",
    "scope": "individual",
    "iso6393": "hdn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Honduras Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "hds",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hadiyya",
    "type": "living",
    "scope": "individual",
    "iso6393": "hdy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Qiandong Miao",
    "type": "living",
    "scope": "individual",
    "iso6393": "hea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hebrew",
    "type": "living",
    "scope": "individual",
    "iso6393": "heb",
    "iso6392B": "heb",
    "iso6392T": "heb",
    "iso6391": "he"
  },
  {
    "name": "Herdé",
    "type": "living",
    "scope": "individual",
    "iso6393": "hed",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Helong",
    "type": "living",
    "scope": "individual",
    "iso6393": "heg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hehe",
    "type": "living",
    "scope": "individual",
    "iso6393": "heh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Heiltsuk",
    "type": "living",
    "scope": "individual",
    "iso6393": "hei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hemba",
    "type": "living",
    "scope": "individual",
    "iso6393": "hem",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Herero",
    "type": "living",
    "scope": "individual",
    "iso6393": "her",
    "iso6392B": "her",
    "iso6392T": "her",
    "iso6391": "hz"
  },
  {
    "name": "Haiǁom",
    "type": "living",
    "scope": "individual",
    "iso6393": "hgm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Haigwai",
    "type": "living",
    "scope": "individual",
    "iso6393": "hgw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hoia Hoia",
    "type": "living",
    "scope": "individual",
    "iso6393": "hhi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kerak",
    "type": "living",
    "scope": "individual",
    "iso6393": "hhr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hoyahoya",
    "type": "living",
    "scope": "individual",
    "iso6393": "hhy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lamang",
    "type": "living",
    "scope": "individual",
    "iso6393": "hia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hibito",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "hib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hidatsa",
    "type": "living",
    "scope": "individual",
    "iso6393": "hid",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fiji Hindi",
    "type": "living",
    "scope": "individual",
    "iso6393": "hif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "hig",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pamosu",
    "type": "living",
    "scope": "individual",
    "iso6393": "hih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hinduri",
    "type": "living",
    "scope": "individual",
    "iso6393": "hii",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hijuk",
    "type": "living",
    "scope": "individual",
    "iso6393": "hij",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seit-Kaitetu",
    "type": "living",
    "scope": "individual",
    "iso6393": "hik",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hiligaynon",
    "type": "living",
    "scope": "individual",
    "iso6393": "hil",
    "iso6392B": "hil",
    "iso6392T": "hil",
    "iso6391": null
  },
  {
    "name": "Hindi",
    "type": "living",
    "scope": "individual",
    "iso6393": "hin",
    "iso6392B": "hin",
    "iso6392T": "hin",
    "iso6391": "hi"
  },
  {
    "name": "Tsoa",
    "type": "living",
    "scope": "individual",
    "iso6393": "hio",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Himarimã",
    "type": "living",
    "scope": "individual",
    "iso6393": "hir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hittite",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "hit",
    "iso6392B": "hit",
    "iso6392T": "hit",
    "iso6391": null
  },
  {
    "name": "Hiw",
    "type": "living",
    "scope": "individual",
    "iso6393": "hiw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hixkaryána",
    "type": "living",
    "scope": "individual",
    "iso6393": "hix",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Haji",
    "type": "living",
    "scope": "individual",
    "iso6393": "hji",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kahe",
    "type": "living",
    "scope": "individual",
    "iso6393": "hka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hunde",
    "type": "living",
    "scope": "individual",
    "iso6393": "hke",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hunjara-Kaina Ke",
    "type": "living",
    "scope": "individual",
    "iso6393": "hkk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mel-Khaonh",
    "type": "living",
    "scope": "individual",
    "iso6393": "hkn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hong Kong Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "hks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Halia",
    "type": "living",
    "scope": "individual",
    "iso6393": "hla",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Halbi",
    "type": "living",
    "scope": "individual",
    "iso6393": "hlb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Halang Doan",
    "type": "living",
    "scope": "individual",
    "iso6393": "hld",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hlersu",
    "type": "living",
    "scope": "individual",
    "iso6393": "hle",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Matu Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "hlt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hieroglyphic Luwian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "hlu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Mashan Hmong",
    "type": "living",
    "scope": "individual",
    "iso6393": "hma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Humburi Senni Songhay",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Huishui Hmong",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Large Flowery Miao",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Huishui Hmong",
    "type": "living",
    "scope": "individual",
    "iso6393": "hme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hmong Don",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southwestern Guiyang Hmong",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southwestern Huishui Hmong",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Huishui Hmong",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ge",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maek",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "hmk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Luopohe Hmong",
    "type": "living",
    "scope": "individual",
    "iso6393": "hml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Mashan Hmong",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hmong",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "hmn",
    "iso6392B": "hmn",
    "iso6392T": "hmn",
    "iso6391": null
  },
  {
    "name": "Hiri Motu",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmo",
    "iso6392B": "hmo",
    "iso6392T": "hmo",
    "iso6391": "ho"
  },
  {
    "name": "Northern Mashan Hmong",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Qiandong Miao",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hmar",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Qiandong Miao",
    "type": "living",
    "scope": "individual",
    "iso6393": "hms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hamtai",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hamap",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hmong Dô",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Mashan Hmong",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Guiyang Hmong",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hmong Shua",
    "type": "living",
    "scope": "individual",
    "iso6393": "hmz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mina (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "hna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Hindko",
    "type": "living",
    "scope": "individual",
    "iso6393": "hnd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chhattisgarhi",
    "type": "living",
    "scope": "individual",
    "iso6393": "hne",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "ǁAni",
    "type": "living",
    "scope": "individual",
    "iso6393": "hnh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hani",
    "type": "living",
    "scope": "individual",
    "iso6393": "hni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hmong Njua",
    "type": "living",
    "scope": "individual",
    "iso6393": "hnj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hanunoo",
    "type": "living",
    "scope": "individual",
    "iso6393": "hnn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Hindko",
    "type": "living",
    "scope": "individual",
    "iso6393": "hno",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Caribbean Hindustani",
    "type": "living",
    "scope": "individual",
    "iso6393": "hns",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hung",
    "type": "living",
    "scope": "individual",
    "iso6393": "hnu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hoava",
    "type": "living",
    "scope": "individual",
    "iso6393": "hoa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mari (Madang Province)",
    "type": "living",
    "scope": "individual",
    "iso6393": "hob",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ho",
    "type": "living",
    "scope": "individual",
    "iso6393": "hoc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Holma",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "hod",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Horom",
    "type": "living",
    "scope": "individual",
    "iso6393": "hoe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hobyót",
    "type": "living",
    "scope": "individual",
    "iso6393": "hoh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Holikachuk",
    "type": "living",
    "scope": "individual",
    "iso6393": "hoi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hadothi",
    "type": "living",
    "scope": "individual",
    "iso6393": "hoj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Holu",
    "type": "living",
    "scope": "individual",
    "iso6393": "hol",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Homa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "hom",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Holoholo",
    "type": "living",
    "scope": "individual",
    "iso6393": "hoo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hopi",
    "type": "living",
    "scope": "individual",
    "iso6393": "hop",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Horo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "hor",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ho Chi Minh City Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "hos",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hote",
    "type": "living",
    "scope": "individual",
    "iso6393": "hot",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hovongan",
    "type": "living",
    "scope": "individual",
    "iso6393": "hov",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Honi",
    "type": "living",
    "scope": "individual",
    "iso6393": "how",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Holiya",
    "type": "living",
    "scope": "individual",
    "iso6393": "hoy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hozo",
    "type": "living",
    "scope": "individual",
    "iso6393": "hoz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hpon",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "hpo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hawai'i Sign Language (HSL)",
    "type": "living",
    "scope": "individual",
    "iso6393": "hps",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hrangkhol",
    "type": "living",
    "scope": "individual",
    "iso6393": "hra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Niwer Mil",
    "type": "living",
    "scope": "individual",
    "iso6393": "hrc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hre",
    "type": "living",
    "scope": "individual",
    "iso6393": "hre",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Haruku",
    "type": "living",
    "scope": "individual",
    "iso6393": "hrk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Horned Miao",
    "type": "living",
    "scope": "individual",
    "iso6393": "hrm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Haroi",
    "type": "living",
    "scope": "individual",
    "iso6393": "hro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nhirrpi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "hrp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hértevin",
    "type": "living",
    "scope": "individual",
    "iso6393": "hrt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hruso",
    "type": "living",
    "scope": "individual",
    "iso6393": "hru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Croatian",
    "type": "living",
    "scope": "individual",
    "iso6393": "hrv",
    "iso6392B": "hrv",
    "iso6392T": "hrv",
    "iso6391": "hr"
  },
  {
    "name": "Warwar Feni",
    "type": "living",
    "scope": "individual",
    "iso6393": "hrw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hunsrik",
    "type": "living",
    "scope": "individual",
    "iso6393": "hrx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Harzani",
    "type": "living",
    "scope": "individual",
    "iso6393": "hrz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Upper Sorbian",
    "type": "living",
    "scope": "individual",
    "iso6393": "hsb",
    "iso6392B": "hsb",
    "iso6392T": "hsb",
    "iso6391": null
  },
  {
    "name": "Hungarian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "hsh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hausa Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "hsl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xiang Chinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "hsn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Harsusi",
    "type": "living",
    "scope": "individual",
    "iso6393": "hss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hoti",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "hti",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Minica Huitoto",
    "type": "living",
    "scope": "individual",
    "iso6393": "hto",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hadza",
    "type": "living",
    "scope": "individual",
    "iso6393": "hts",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hitu",
    "type": "living",
    "scope": "individual",
    "iso6393": "htu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Middle Hittite",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "htx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huambisa",
    "type": "living",
    "scope": "individual",
    "iso6393": "hub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "ǂHua",
    "type": "living",
    "scope": "individual",
    "iso6393": "huc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huaulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "hud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Francisco Del Mar Huave",
    "type": "living",
    "scope": "individual",
    "iso6393": "hue",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Humene",
    "type": "living",
    "scope": "individual",
    "iso6393": "huf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huachipaeri",
    "type": "living",
    "scope": "individual",
    "iso6393": "hug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huilliche",
    "type": "living",
    "scope": "individual",
    "iso6393": "huh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huli",
    "type": "living",
    "scope": "individual",
    "iso6393": "hui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Guiyang Hmong",
    "type": "living",
    "scope": "individual",
    "iso6393": "huj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hulung",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "huk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hula",
    "type": "living",
    "scope": "individual",
    "iso6393": "hul",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hungana",
    "type": "living",
    "scope": "individual",
    "iso6393": "hum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hungarian",
    "type": "living",
    "scope": "individual",
    "iso6393": "hun",
    "iso6392B": "hun",
    "iso6392T": "hun",
    "iso6391": "hu"
  },
  {
    "name": "Hu",
    "type": "living",
    "scope": "individual",
    "iso6393": "huo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hupa",
    "type": "living",
    "scope": "individual",
    "iso6393": "hup",
    "iso6392B": "hup",
    "iso6392T": "hup",
    "iso6391": null
  },
  {
    "name": "Tsat",
    "type": "living",
    "scope": "individual",
    "iso6393": "huq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Halkomelem",
    "type": "living",
    "scope": "individual",
    "iso6393": "hur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huastec",
    "type": "living",
    "scope": "individual",
    "iso6393": "hus",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Humla",
    "type": "living",
    "scope": "individual",
    "iso6393": "hut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Murui Huitoto",
    "type": "living",
    "scope": "individual",
    "iso6393": "huu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Mateo Del Mar Huave",
    "type": "living",
    "scope": "individual",
    "iso6393": "huv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hukumina",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "huw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nüpode Huitoto",
    "type": "living",
    "scope": "individual",
    "iso6393": "hux",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hulaulá",
    "type": "living",
    "scope": "individual",
    "iso6393": "huy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hunzib",
    "type": "living",
    "scope": "individual",
    "iso6393": "huz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Haitian Vodoun Culture Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "hvc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Dionisio Del Mar Huave",
    "type": "living",
    "scope": "individual",
    "iso6393": "hve",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Haveke",
    "type": "living",
    "scope": "individual",
    "iso6393": "hvk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sabu",
    "type": "living",
    "scope": "individual",
    "iso6393": "hvn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Santa María Del Mar Huave",
    "type": "living",
    "scope": "individual",
    "iso6393": "hvv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wané",
    "type": "living",
    "scope": "individual",
    "iso6393": "hwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hawai'i Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "hwc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hwana",
    "type": "living",
    "scope": "individual",
    "iso6393": "hwo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hya",
    "type": "living",
    "scope": "individual",
    "iso6393": "hya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Armenian",
    "type": "living",
    "scope": "individual",
    "iso6393": "hye",
    "iso6392B": "arm",
    "iso6392T": "hye",
    "iso6391": "hy"
  },
  {
    "name": "Western Armenian",
    "type": "living",
    "scope": "individual",
    "iso6393": "hyw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iaai",
    "type": "living",
    "scope": "individual",
    "iso6393": "iai",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iatmul",
    "type": "living",
    "scope": "individual",
    "iso6393": "ian",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Purari",
    "type": "living",
    "scope": "individual",
    "iso6393": "iar",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iban",
    "type": "living",
    "scope": "individual",
    "iso6393": "iba",
    "iso6392B": "iba",
    "iso6392T": "iba",
    "iso6391": null
  },
  {
    "name": "Ibibio",
    "type": "living",
    "scope": "individual",
    "iso6393": "ibb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iwaidja",
    "type": "living",
    "scope": "individual",
    "iso6393": "ibd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akpes",
    "type": "living",
    "scope": "individual",
    "iso6393": "ibe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ibanag",
    "type": "living",
    "scope": "individual",
    "iso6393": "ibg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bih",
    "type": "living",
    "scope": "individual",
    "iso6393": "ibh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ibaloi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ibl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Agoi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ibm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ibino",
    "type": "living",
    "scope": "individual",
    "iso6393": "ibn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Igbo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ibo",
    "iso6392B": "ibo",
    "iso6392T": "ibo",
    "iso6391": "ig"
  },
  {
    "name": "Ibuoro",
    "type": "living",
    "scope": "individual",
    "iso6393": "ibr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ibu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ibu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ibani",
    "type": "living",
    "scope": "individual",
    "iso6393": "iby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ede Ica",
    "type": "living",
    "scope": "individual",
    "iso6393": "ica",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Etkywan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ich",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Icelandic Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "icl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Islander Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "icr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Idakho-Isukha-Tiriki",
    "type": "living",
    "scope": "individual",
    "iso6393": "ida",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Indo-Portuguese",
    "type": "living",
    "scope": "individual",
    "iso6393": "idb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Idon",
    "type": "living",
    "scope": "individual",
    "iso6393": "idc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ede Idaca",
    "type": "living",
    "scope": "individual",
    "iso6393": "idd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Idere",
    "type": "living",
    "scope": "individual",
    "iso6393": "ide",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Idi",
    "type": "living",
    "scope": "individual",
    "iso6393": "idi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ido",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "ido",
    "iso6392B": "ido",
    "iso6392T": "ido",
    "iso6391": "io"
  },
  {
    "name": "Indri",
    "type": "living",
    "scope": "individual",
    "iso6393": "idr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Idesa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ids",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Idaté",
    "type": "living",
    "scope": "individual",
    "iso6393": "idt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Idoma",
    "type": "living",
    "scope": "individual",
    "iso6393": "idu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amganad Ifugao",
    "type": "living",
    "scope": "individual",
    "iso6393": "ifa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Batad Ifugao",
    "type": "living",
    "scope": "individual",
    "iso6393": "ifb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ifè",
    "type": "living",
    "scope": "individual",
    "iso6393": "ife",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ifo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "iff",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tuwali Ifugao",
    "type": "living",
    "scope": "individual",
    "iso6393": "ifk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teke-Fuumu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ifm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mayoyao Ifugao",
    "type": "living",
    "scope": "individual",
    "iso6393": "ifu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Keley-I Kallahan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ify",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ebira",
    "type": "living",
    "scope": "individual",
    "iso6393": "igb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Igede",
    "type": "living",
    "scope": "individual",
    "iso6393": "ige",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Igana",
    "type": "living",
    "scope": "individual",
    "iso6393": "igg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Igala",
    "type": "living",
    "scope": "individual",
    "iso6393": "igl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanggape",
    "type": "living",
    "scope": "individual",
    "iso6393": "igm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ignaciano",
    "type": "living",
    "scope": "individual",
    "iso6393": "ign",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isebe",
    "type": "living",
    "scope": "individual",
    "iso6393": "igo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Interglossa",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "igs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Igwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "igw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iha Based Pidgin",
    "type": "living",
    "scope": "individual",
    "iso6393": "ihb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ihievbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "ihi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iha",
    "type": "living",
    "scope": "individual",
    "iso6393": "ihp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bidhawal",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ihw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sichuan Yi",
    "type": "living",
    "scope": "individual",
    "iso6393": "iii",
    "iso6392B": "iii",
    "iso6392T": "iii",
    "iso6391": "ii"
  },
  {
    "name": "Thiin",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "iin",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Izon",
    "type": "living",
    "scope": "individual",
    "iso6393": "ijc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Biseni",
    "type": "living",
    "scope": "individual",
    "iso6393": "ije",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ede Ije",
    "type": "living",
    "scope": "individual",
    "iso6393": "ijj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalabari",
    "type": "living",
    "scope": "individual",
    "iso6393": "ijn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southeast Ijo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ijs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Canadian Inuktitut",
    "type": "living",
    "scope": "individual",
    "iso6393": "ike",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iko",
    "type": "living",
    "scope": "individual",
    "iso6393": "iki",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ika",
    "type": "living",
    "scope": "individual",
    "iso6393": "ikk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ikulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ikl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Olulumo-Ikom",
    "type": "living",
    "scope": "individual",
    "iso6393": "iko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ikpeshi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ikp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ikaranggal",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ikr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Inuit Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "iks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Inuinnaqtun",
    "type": "living",
    "scope": "individual",
    "iso6393": "ikt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Inuktitut",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "iku",
    "iso6392B": "iku",
    "iso6392T": "iku",
    "iso6391": "iu"
  },
  {
    "name": "Iku-Gora-Ankwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ikv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ikwere",
    "type": "living",
    "scope": "individual",
    "iso6393": "ikw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ik",
    "type": "living",
    "scope": "individual",
    "iso6393": "ikx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ikizu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ikz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ile Ape",
    "type": "living",
    "scope": "individual",
    "iso6393": "ila",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ila",
    "type": "living",
    "scope": "individual",
    "iso6393": "ilb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Interlingue",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "ile",
    "iso6392B": "ile",
    "iso6392T": "ile",
    "iso6391": "ie"
  },
  {
    "name": "Garig-Ilgar",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ilg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ili Turki",
    "type": "living",
    "scope": "individual",
    "iso6393": "ili",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ilongot",
    "type": "living",
    "scope": "individual",
    "iso6393": "ilk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iranun (Malaysia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ilm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iloko",
    "type": "living",
    "scope": "individual",
    "iso6393": "ilo",
    "iso6392B": "ilo",
    "iso6392T": "ilo",
    "iso6391": null
  },
  {
    "name": "Iranun (Philippines)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ilp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "International Sign",
    "type": "living",
    "scope": "individual",
    "iso6393": "ils",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ili'uun",
    "type": "living",
    "scope": "individual",
    "iso6393": "ilu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ilue",
    "type": "living",
    "scope": "individual",
    "iso6393": "ilv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mala Malasar",
    "type": "living",
    "scope": "individual",
    "iso6393": "ima",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anamgura",
    "type": "living",
    "scope": "individual",
    "iso6393": "imi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miluk",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "iml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Imonda",
    "type": "living",
    "scope": "individual",
    "iso6393": "imn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Imbongu",
    "type": "living",
    "scope": "individual",
    "iso6393": "imo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Imroing",
    "type": "living",
    "scope": "individual",
    "iso6393": "imr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marsian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "ims",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Milyan",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "imy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Interlingua (International Auxiliary Language Association)",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "ina",
    "iso6392B": "ina",
    "iso6392T": "ina",
    "iso6391": "ia"
  },
  {
    "name": "Inga",
    "type": "living",
    "scope": "individual",
    "iso6393": "inb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Indonesian",
    "type": "living",
    "scope": "individual",
    "iso6393": "ind",
    "iso6392B": "ind",
    "iso6392T": "ind",
    "iso6391": "id"
  },
  {
    "name": "Degexit'an",
    "type": "living",
    "scope": "individual",
    "iso6393": "ing",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ingush",
    "type": "living",
    "scope": "individual",
    "iso6393": "inh",
    "iso6392B": "inh",
    "iso6392T": "inh",
    "iso6391": null
  },
  {
    "name": "Jungle Inga",
    "type": "living",
    "scope": "individual",
    "iso6393": "inj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Indonesian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "inl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Minaean",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "inm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isinai",
    "type": "living",
    "scope": "individual",
    "iso6393": "inn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Inoke-Yate",
    "type": "living",
    "scope": "individual",
    "iso6393": "ino",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iñapari",
    "type": "living",
    "scope": "individual",
    "iso6393": "inp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Indian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "ins",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Intha",
    "type": "living",
    "scope": "individual",
    "iso6393": "int",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ineseño",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "inz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Inor",
    "type": "living",
    "scope": "individual",
    "iso6393": "ior",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tuma-Irumu",
    "type": "living",
    "scope": "individual",
    "iso6393": "iou",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iowa-Oto",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "iow",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ipili",
    "type": "living",
    "scope": "individual",
    "iso6393": "ipi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Inupiaq",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "ipk",
    "iso6392B": "ipk",
    "iso6392T": "ipk",
    "iso6391": "ik"
  },
  {
    "name": "Ipiko",
    "type": "living",
    "scope": "individual",
    "iso6393": "ipo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iquito",
    "type": "living",
    "scope": "individual",
    "iso6393": "iqu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ikwo",
    "type": "living",
    "scope": "individual",
    "iso6393": "iqw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iresim",
    "type": "living",
    "scope": "individual",
    "iso6393": "ire",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Irarutu",
    "type": "living",
    "scope": "individual",
    "iso6393": "irh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rigwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "iri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iraqw",
    "type": "living",
    "scope": "individual",
    "iso6393": "irk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Irántxe",
    "type": "living",
    "scope": "individual",
    "iso6393": "irn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ir",
    "type": "living",
    "scope": "individual",
    "iso6393": "irr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Irula",
    "type": "living",
    "scope": "individual",
    "iso6393": "iru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamberau",
    "type": "living",
    "scope": "individual",
    "iso6393": "irx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iraya",
    "type": "living",
    "scope": "individual",
    "iso6393": "iry",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isabi",
    "type": "living",
    "scope": "individual",
    "iso6393": "isa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isconahua",
    "type": "living",
    "scope": "individual",
    "iso6393": "isc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isnag",
    "type": "living",
    "scope": "individual",
    "iso6393": "isd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Italian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "ise",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Irish Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "isg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Esan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ish",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nkem-Nkum",
    "type": "living",
    "scope": "individual",
    "iso6393": "isi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ishkashimi",
    "type": "living",
    "scope": "individual",
    "iso6393": "isk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Icelandic",
    "type": "living",
    "scope": "individual",
    "iso6393": "isl",
    "iso6392B": "ice",
    "iso6392T": "isl",
    "iso6391": "is"
  },
  {
    "name": "Masimasi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ism",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isanzu",
    "type": "living",
    "scope": "individual",
    "iso6393": "isn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isoko",
    "type": "living",
    "scope": "individual",
    "iso6393": "iso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Israeli Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "isr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Istriot",
    "type": "living",
    "scope": "individual",
    "iso6393": "ist",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isu (Menchum Division)",
    "type": "living",
    "scope": "individual",
    "iso6393": "isu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Italian",
    "type": "living",
    "scope": "individual",
    "iso6393": "ita",
    "iso6392B": "ita",
    "iso6392T": "ita",
    "iso6391": "it"
  },
  {
    "name": "Binongan Itneg",
    "type": "living",
    "scope": "individual",
    "iso6393": "itb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Tidung",
    "type": "living",
    "scope": "individual",
    "iso6393": "itd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Itene",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ite",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Inlaod Itneg",
    "type": "living",
    "scope": "individual",
    "iso6393": "iti",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Judeo-Italian",
    "type": "living",
    "scope": "individual",
    "iso6393": "itk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Itelmen",
    "type": "living",
    "scope": "individual",
    "iso6393": "itl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Itu Mbon Uzo",
    "type": "living",
    "scope": "individual",
    "iso6393": "itm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Itonama",
    "type": "living",
    "scope": "individual",
    "iso6393": "ito",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iteri",
    "type": "living",
    "scope": "individual",
    "iso6393": "itr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isekiri",
    "type": "living",
    "scope": "individual",
    "iso6393": "its",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maeng Itneg",
    "type": "living",
    "scope": "individual",
    "iso6393": "itt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Itawit",
    "type": "living",
    "scope": "individual",
    "iso6393": "itv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ito",
    "type": "living",
    "scope": "individual",
    "iso6393": "itw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Itik",
    "type": "living",
    "scope": "individual",
    "iso6393": "itx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moyadan Itneg",
    "type": "living",
    "scope": "individual",
    "iso6393": "ity",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Itzá",
    "type": "living",
    "scope": "individual",
    "iso6393": "itz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iu Mien",
    "type": "living",
    "scope": "individual",
    "iso6393": "ium",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ibatan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ivb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ivatan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ivv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "I-Wak",
    "type": "living",
    "scope": "individual",
    "iso6393": "iwk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iwam",
    "type": "living",
    "scope": "individual",
    "iso6393": "iwm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iwur",
    "type": "living",
    "scope": "individual",
    "iso6393": "iwo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sepik Iwam",
    "type": "living",
    "scope": "individual",
    "iso6393": "iws",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ixcatec",
    "type": "living",
    "scope": "individual",
    "iso6393": "ixc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ixil",
    "type": "living",
    "scope": "individual",
    "iso6393": "ixl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iyayu",
    "type": "living",
    "scope": "individual",
    "iso6393": "iya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mesaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "iyo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaka (Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "iyx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ingrian",
    "type": "living",
    "scope": "individual",
    "iso6393": "izh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Izere",
    "type": "living",
    "scope": "individual",
    "iso6393": "izr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Izii",
    "type": "living",
    "scope": "individual",
    "iso6393": "izz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jamamadí",
    "type": "living",
    "scope": "individual",
    "iso6393": "jaa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hyam",
    "type": "living",
    "scope": "individual",
    "iso6393": "jab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Popti'",
    "type": "living",
    "scope": "individual",
    "iso6393": "jac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jahanka",
    "type": "living",
    "scope": "individual",
    "iso6393": "jad",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yabem",
    "type": "living",
    "scope": "individual",
    "iso6393": "jae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jara",
    "type": "living",
    "scope": "individual",
    "iso6393": "jaf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jah Hut",
    "type": "living",
    "scope": "individual",
    "iso6393": "jah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zazao",
    "type": "living",
    "scope": "individual",
    "iso6393": "jaj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jakun",
    "type": "living",
    "scope": "individual",
    "iso6393": "jak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yalahatan",
    "type": "living",
    "scope": "individual",
    "iso6393": "jal",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jamaican Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "jam",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jandai",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "jan",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yanyuwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "jao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaqay",
    "type": "living",
    "scope": "individual",
    "iso6393": "jaq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "New Caledonian Javanese",
    "type": "living",
    "scope": "individual",
    "iso6393": "jas",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jakati",
    "type": "living",
    "scope": "individual",
    "iso6393": "jat",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaur",
    "type": "living",
    "scope": "individual",
    "iso6393": "jau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Javanese",
    "type": "living",
    "scope": "individual",
    "iso6393": "jav",
    "iso6392B": "jav",
    "iso6392T": "jav",
    "iso6391": "jv"
  },
  {
    "name": "Jambi Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "jax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yan-nhangu",
    "type": "living",
    "scope": "individual",
    "iso6393": "jay",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jawe",
    "type": "living",
    "scope": "individual",
    "iso6393": "jaz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Judeo-Berber",
    "type": "living",
    "scope": "individual",
    "iso6393": "jbe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Badjiri",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "jbi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arandai",
    "type": "living",
    "scope": "individual",
    "iso6393": "jbj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barikewa",
    "type": "living",
    "scope": "individual",
    "iso6393": "jbk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nafusi",
    "type": "living",
    "scope": "individual",
    "iso6393": "jbn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lojban",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "jbo",
    "iso6392B": "jbo",
    "iso6392T": "jbo",
    "iso6391": null
  },
  {
    "name": "Jofotek-Bromnya",
    "type": "living",
    "scope": "individual",
    "iso6393": "jbr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jabutí",
    "type": "living",
    "scope": "individual",
    "iso6393": "jbt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jukun Takum",
    "type": "living",
    "scope": "individual",
    "iso6393": "jbu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yawijibaya",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "jbw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jamaican Country Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "jcs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Krymchak",
    "type": "living",
    "scope": "individual",
    "iso6393": "jct",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jad",
    "type": "living",
    "scope": "individual",
    "iso6393": "jda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jadgali",
    "type": "living",
    "scope": "individual",
    "iso6393": "jdg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Judeo-Tat",
    "type": "living",
    "scope": "individual",
    "iso6393": "jdt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jebero",
    "type": "living",
    "scope": "individual",
    "iso6393": "jeb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jerung",
    "type": "living",
    "scope": "individual",
    "iso6393": "jee",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jeh",
    "type": "living",
    "scope": "individual",
    "iso6393": "jeh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yei",
    "type": "living",
    "scope": "individual",
    "iso6393": "jei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jeri Kuo",
    "type": "living",
    "scope": "individual",
    "iso6393": "jek",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yelmek",
    "type": "living",
    "scope": "individual",
    "iso6393": "jel",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dza",
    "type": "living",
    "scope": "individual",
    "iso6393": "jen",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jere",
    "type": "living",
    "scope": "individual",
    "iso6393": "jer",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manem",
    "type": "living",
    "scope": "individual",
    "iso6393": "jet",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jonkor Bourmataguil",
    "type": "living",
    "scope": "individual",
    "iso6393": "jeu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngbee",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "jgb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Judeo-Georgian",
    "type": "living",
    "scope": "individual",
    "iso6393": "jge",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gwak",
    "type": "living",
    "scope": "individual",
    "iso6393": "jgk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngomba",
    "type": "living",
    "scope": "individual",
    "iso6393": "jgo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jehai",
    "type": "living",
    "scope": "individual",
    "iso6393": "jhi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jhankot Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "jhs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jina",
    "type": "living",
    "scope": "individual",
    "iso6393": "jia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jibu",
    "type": "living",
    "scope": "individual",
    "iso6393": "jib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tol",
    "type": "living",
    "scope": "individual",
    "iso6393": "jic",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bu",
    "type": "living",
    "scope": "individual",
    "iso6393": "jid",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jilbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "jie",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jingulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "jig",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "sTodsde",
    "type": "living",
    "scope": "individual",
    "iso6393": "jih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jiiddu",
    "type": "living",
    "scope": "individual",
    "iso6393": "jii",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jilim",
    "type": "living",
    "scope": "individual",
    "iso6393": "jil",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jimi (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "jim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jiamao",
    "type": "living",
    "scope": "individual",
    "iso6393": "jio",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guanyinqiao",
    "type": "living",
    "scope": "individual",
    "iso6393": "jiq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jita",
    "type": "living",
    "scope": "individual",
    "iso6393": "jit",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Youle Jinuo",
    "type": "living",
    "scope": "individual",
    "iso6393": "jiu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shuar",
    "type": "living",
    "scope": "individual",
    "iso6393": "jiv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buyuan Jinuo",
    "type": "living",
    "scope": "individual",
    "iso6393": "jiy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jejueo",
    "type": "living",
    "scope": "individual",
    "iso6393": "jje",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bankal",
    "type": "living",
    "scope": "individual",
    "iso6393": "jjr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaera",
    "type": "living",
    "scope": "individual",
    "iso6393": "jka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mobwa Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "jkm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kubo",
    "type": "living",
    "scope": "individual",
    "iso6393": "jko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paku Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "jkp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koro (India)",
    "type": "living",
    "scope": "individual",
    "iso6393": "jkr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Labir",
    "type": "living",
    "scope": "individual",
    "iso6393": "jku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngile",
    "type": "living",
    "scope": "individual",
    "iso6393": "jle",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jamaican Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "jls",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dima",
    "type": "living",
    "scope": "individual",
    "iso6393": "jma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zumbun",
    "type": "living",
    "scope": "individual",
    "iso6393": "jmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Machame",
    "type": "living",
    "scope": "individual",
    "iso6393": "jmc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yamdena",
    "type": "living",
    "scope": "individual",
    "iso6393": "jmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jimi (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "jmi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jumli",
    "type": "living",
    "scope": "individual",
    "iso6393": "jml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makuri Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "jmn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamara",
    "type": "living",
    "scope": "individual",
    "iso6393": "jmr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mashi (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "jms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mouwase",
    "type": "living",
    "scope": "individual",
    "iso6393": "jmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Juxtlahuaca Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "jmx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jangshung",
    "type": "living",
    "scope": "individual",
    "iso6393": "jna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jandavra",
    "type": "living",
    "scope": "individual",
    "iso6393": "jnd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yangman",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "jng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Janji",
    "type": "living",
    "scope": "individual",
    "iso6393": "jni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yemsa",
    "type": "living",
    "scope": "individual",
    "iso6393": "jnj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rawat",
    "type": "living",
    "scope": "individual",
    "iso6393": "jnl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jaunsari",
    "type": "living",
    "scope": "individual",
    "iso6393": "jns",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Joba",
    "type": "living",
    "scope": "individual",
    "iso6393": "job",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wojenaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "jod",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jogi",
    "type": "living",
    "scope": "individual",
    "iso6393": "jog",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jorá",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "jor",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jordanian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "jos",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jowulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "jow",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jewish Palestinian Aramaic",
    "type": "historical",
    "scope": "individual",
    "iso6393": "jpa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Japanese",
    "type": "living",
    "scope": "individual",
    "iso6393": "jpn",
    "iso6392B": "jpn",
    "iso6392T": "jpn",
    "iso6391": "ja"
  },
  {
    "name": "Judeo-Persian",
    "type": "living",
    "scope": "individual",
    "iso6393": "jpr",
    "iso6392B": "jpr",
    "iso6392T": "jpr",
    "iso6391": null
  },
  {
    "name": "Jaqaru",
    "type": "living",
    "scope": "individual",
    "iso6393": "jqr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jarai",
    "type": "living",
    "scope": "individual",
    "iso6393": "jra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Judeo-Arabic",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "jrb",
    "iso6392B": "jrb",
    "iso6392T": "jrb",
    "iso6391": null
  },
  {
    "name": "Jiru",
    "type": "living",
    "scope": "individual",
    "iso6393": "jrr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jorto",
    "type": "living",
    "scope": "individual",
    "iso6393": "jrt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Japrería",
    "type": "living",
    "scope": "individual",
    "iso6393": "jru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Japanese Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "jsl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Júma",
    "type": "living",
    "scope": "individual",
    "iso6393": "jua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wannu",
    "type": "living",
    "scope": "individual",
    "iso6393": "jub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jurchen",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "juc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Worodougou",
    "type": "living",
    "scope": "individual",
    "iso6393": "jud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hõne",
    "type": "living",
    "scope": "individual",
    "iso6393": "juh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngadjuri",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "jui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wapan",
    "type": "living",
    "scope": "individual",
    "iso6393": "juk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jirel",
    "type": "living",
    "scope": "individual",
    "iso6393": "jul",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jumjum",
    "type": "living",
    "scope": "individual",
    "iso6393": "jum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Juang",
    "type": "living",
    "scope": "individual",
    "iso6393": "jun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jiba",
    "type": "living",
    "scope": "individual",
    "iso6393": "juo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hupdë",
    "type": "living",
    "scope": "individual",
    "iso6393": "jup",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jurúna",
    "type": "living",
    "scope": "individual",
    "iso6393": "jur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jumla Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "jus",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jutish",
    "type": "historical",
    "scope": "individual",
    "iso6393": "jut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ju",
    "type": "living",
    "scope": "individual",
    "iso6393": "juu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wãpha",
    "type": "living",
    "scope": "individual",
    "iso6393": "juw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Juray",
    "type": "living",
    "scope": "individual",
    "iso6393": "juy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Javindo",
    "type": "living",
    "scope": "individual",
    "iso6393": "jvd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Caribbean Javanese",
    "type": "living",
    "scope": "individual",
    "iso6393": "jvn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jwira-Pepesa",
    "type": "living",
    "scope": "individual",
    "iso6393": "jwi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jiarong",
    "type": "living",
    "scope": "individual",
    "iso6393": "jya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Judeo-Yemeni Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "jye",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "jyy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kara-Kalpak",
    "type": "living",
    "scope": "individual",
    "iso6393": "kaa",
    "iso6392B": "kaa",
    "iso6392T": "kaa",
    "iso6391": null
  },
  {
    "name": "Kabyle",
    "type": "living",
    "scope": "individual",
    "iso6393": "kab",
    "iso6392B": "kab",
    "iso6392T": "kab",
    "iso6391": null
  },
  {
    "name": "Kachin",
    "type": "living",
    "scope": "individual",
    "iso6393": "kac",
    "iso6392B": "kac",
    "iso6392T": "kac",
    "iso6391": null
  },
  {
    "name": "Adara",
    "type": "living",
    "scope": "individual",
    "iso6393": "kad",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ketangalan",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Katso",
    "type": "living",
    "scope": "individual",
    "iso6393": "kaf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kajaman",
    "type": "living",
    "scope": "individual",
    "iso6393": "kag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kara (Central African Republic)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karekare",
    "type": "living",
    "scope": "individual",
    "iso6393": "kai",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jju",
    "type": "living",
    "scope": "individual",
    "iso6393": "kaj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalanguya",
    "type": "living",
    "scope": "individual",
    "iso6393": "kak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalaallisut",
    "type": "living",
    "scope": "individual",
    "iso6393": "kal",
    "iso6392B": "kal",
    "iso6392T": "kal",
    "iso6391": "kl"
  },
  {
    "name": "Kamba (Kenya)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kam",
    "iso6392B": "kam",
    "iso6392T": "kam",
    "iso6391": null
  },
  {
    "name": "Kannada",
    "type": "living",
    "scope": "individual",
    "iso6393": "kan",
    "iso6392B": "kan",
    "iso6392T": "kan",
    "iso6391": "kn"
  },
  {
    "name": "Xaasongaxango",
    "type": "living",
    "scope": "individual",
    "iso6393": "kao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bezhta",
    "type": "living",
    "scope": "individual",
    "iso6393": "kap",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Capanahua",
    "type": "living",
    "scope": "individual",
    "iso6393": "kaq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kashmiri",
    "type": "living",
    "scope": "individual",
    "iso6393": "kas",
    "iso6392B": "kas",
    "iso6392T": "kas",
    "iso6391": "ks"
  },
  {
    "name": "Georgian",
    "type": "living",
    "scope": "individual",
    "iso6393": "kat",
    "iso6392B": "geo",
    "iso6392T": "kat",
    "iso6391": "ka"
  },
  {
    "name": "Kanuri",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "kau",
    "iso6392B": "kau",
    "iso6392T": "kau",
    "iso6391": "kr"
  },
  {
    "name": "Katukína",
    "type": "living",
    "scope": "individual",
    "iso6393": "kav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kawi",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "kaw",
    "iso6392B": "kaw",
    "iso6392T": "kaw",
    "iso6391": null
  },
  {
    "name": "Kao",
    "type": "living",
    "scope": "individual",
    "iso6393": "kax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamayurá",
    "type": "living",
    "scope": "individual",
    "iso6393": "kay",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kazakh",
    "type": "living",
    "scope": "individual",
    "iso6393": "kaz",
    "iso6392B": "kaz",
    "iso6392T": "kaz",
    "iso6391": "kk"
  },
  {
    "name": "Kalarko",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kba",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaxuiâna",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kadiwéu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kabardian",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbd",
    "iso6392B": "kbd",
    "iso6392T": "kbd",
    "iso6391": null
  },
  {
    "name": "Kanju",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khamba",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Camsá",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaptiau",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kari",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Grass Koiari",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanembu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iwal",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kare (Central African Republic)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Keliko",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kabiyè",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamano",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kafa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kande",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abadi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kabutra",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dera (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaiep",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ap Ma",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manga Kanuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "kby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duhwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kbz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khanty",
    "type": "living",
    "scope": "individual",
    "iso6393": "kca",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kawacha",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lubila",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngkâlmpw Kanum",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaivi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kce",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ukaan",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tyap",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vono",
    "type": "living",
    "scope": "individual",
    "iso6393": "kch",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamantan",
    "type": "living",
    "scope": "individual",
    "iso6393": "kci",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kobiana",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kck",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kela (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gula (Central African Republic)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nubi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kinalakna",
    "type": "living",
    "scope": "individual",
    "iso6393": "kco",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Katla",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koenoem",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaian",
    "type": "living",
    "scope": "individual",
    "iso6393": "kct",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kami (Tanzania)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kete",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kabwari",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kachama-Ganjule",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Korandje",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Konongo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kcz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Worimi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kutu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yankunytjatjara",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makonde",
    "type": "living",
    "scope": "individual",
    "iso6393": "kde",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mamusi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seba",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tem",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kumam",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karamojong",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Numèè",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsikimba",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kagoma",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kunda",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaningdon-Nindem",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koch",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karaim",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuy",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kadaru",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koneraw",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kam",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Keder",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwaja",
    "type": "living",
    "scope": "individual",
    "iso6393": "kdz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kabuverdianu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kélé",
    "type": "living",
    "scope": "individual",
    "iso6393": "keb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Keiga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kec",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kerewe",
    "type": "living",
    "scope": "individual",
    "iso6393": "ked",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Keres",
    "type": "living",
    "scope": "individual",
    "iso6393": "kee",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kpessi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kef",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tese",
    "type": "living",
    "scope": "individual",
    "iso6393": "keg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Keak",
    "type": "living",
    "scope": "individual",
    "iso6393": "keh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kei",
    "type": "living",
    "scope": "individual",
    "iso6393": "kei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kadar",
    "type": "living",
    "scope": "individual",
    "iso6393": "kej",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kekchí",
    "type": "living",
    "scope": "individual",
    "iso6393": "kek",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kela (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kel",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kemak",
    "type": "living",
    "scope": "individual",
    "iso6393": "kem",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kenyang",
    "type": "living",
    "scope": "individual",
    "iso6393": "ken",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kakwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "keo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaikadi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kep",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamar",
    "type": "living",
    "scope": "individual",
    "iso6393": "keq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kera",
    "type": "living",
    "scope": "individual",
    "iso6393": "ker",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kugbo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kes",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ket",
    "type": "living",
    "scope": "individual",
    "iso6393": "ket",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akebu",
    "type": "living",
    "scope": "individual",
    "iso6393": "keu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanikkaran",
    "type": "living",
    "scope": "individual",
    "iso6393": "kev",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Kewa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kew",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kukna",
    "type": "living",
    "scope": "individual",
    "iso6393": "kex",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kupia",
    "type": "living",
    "scope": "individual",
    "iso6393": "key",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kukele",
    "type": "living",
    "scope": "individual",
    "iso6393": "kez",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kodava",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northwestern Kolami",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Konda-Dora",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Korra Koraga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kota (India)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koya",
    "type": "living",
    "scope": "individual",
    "iso6393": "kff",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kudiya",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kurichiya",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kannada Kurumba",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kemiehua",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kinnauri",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kung",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khunsari",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuk",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koro (Côte d'Ivoire)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Korwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Korku",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kachhi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bilaspuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanjari",
    "type": "living",
    "scope": "individual",
    "iso6393": "kft",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Katkari",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kurmukar",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kharam Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kullu Pahari",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kumaoni",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koromfé",
    "type": "living",
    "scope": "individual",
    "iso6393": "kfz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koyaga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kawe",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Komering",
    "type": "living",
    "scope": "individual",
    "iso6393": "kge",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kube",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kusunda",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Selangor Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gamale Kham",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaiwá",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kunggari",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kgl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karipúna",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kgm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karingani",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Krongo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaingang",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamoro",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abun",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kumbainggar",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Somyev",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kobol",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karas",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karon Dori",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamaru",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kyerung",
    "type": "living",
    "scope": "individual",
    "iso6393": "kgy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khasi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kha",
    "iso6392B": "kha",
    "iso6392T": "kha",
    "iso6391": null
  },
  {
    "name": "Lü",
    "type": "living",
    "scope": "individual",
    "iso6393": "khb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tukang Besi North",
    "type": "living",
    "scope": "individual",
    "iso6393": "khc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bädi Kanum",
    "type": "living",
    "scope": "individual",
    "iso6393": "khd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Korowai",
    "type": "living",
    "scope": "individual",
    "iso6393": "khe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khuen",
    "type": "living",
    "scope": "individual",
    "iso6393": "khf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khams Tibetan",
    "type": "living",
    "scope": "individual",
    "iso6393": "khg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kehu",
    "type": "living",
    "scope": "individual",
    "iso6393": "khh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuturmi",
    "type": "living",
    "scope": "individual",
    "iso6393": "khj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Halh Mongolian",
    "type": "living",
    "scope": "individual",
    "iso6393": "khk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lusi",
    "type": "living",
    "scope": "individual",
    "iso6393": "khl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khmer",
    "type": "living",
    "scope": "individual",
    "iso6393": "khm",
    "iso6392B": "khm",
    "iso6392T": "khm",
    "iso6391": "km"
  },
  {
    "name": "Khandesi",
    "type": "living",
    "scope": "individual",
    "iso6393": "khn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khotanese",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "kho",
    "iso6392B": "kho",
    "iso6392T": "kho",
    "iso6391": null
  },
  {
    "name": "Kapori",
    "type": "living",
    "scope": "individual",
    "iso6393": "khp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koyra Chiini Songhay",
    "type": "living",
    "scope": "individual",
    "iso6393": "khq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kharia",
    "type": "living",
    "scope": "individual",
    "iso6393": "khr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kasua",
    "type": "living",
    "scope": "individual",
    "iso6393": "khs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khamti",
    "type": "living",
    "scope": "individual",
    "iso6393": "kht",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nkhumbi",
    "type": "living",
    "scope": "individual",
    "iso6393": "khu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khvarshi",
    "type": "living",
    "scope": "individual",
    "iso6393": "khv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khowar",
    "type": "living",
    "scope": "individual",
    "iso6393": "khw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanu",
    "type": "living",
    "scope": "individual",
    "iso6393": "khx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kele (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "khy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Keapara",
    "type": "living",
    "scope": "individual",
    "iso6393": "khz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kim",
    "type": "living",
    "scope": "individual",
    "iso6393": "kia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koalib",
    "type": "living",
    "scope": "individual",
    "iso6393": "kib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kickapoo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kic",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koshin",
    "type": "living",
    "scope": "individual",
    "iso6393": "kid",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kibet",
    "type": "living",
    "scope": "individual",
    "iso6393": "kie",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Parbate Kham",
    "type": "living",
    "scope": "individual",
    "iso6393": "kif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kimaama",
    "type": "living",
    "scope": "individual",
    "iso6393": "kig",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kilmeri",
    "type": "living",
    "scope": "individual",
    "iso6393": "kih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kitsai",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kii",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kilivila",
    "type": "living",
    "scope": "individual",
    "iso6393": "kij",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kikuyu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kik",
    "iso6392B": "kik",
    "iso6392T": "kik",
    "iso6391": "ki"
  },
  {
    "name": "Kariya",
    "type": "living",
    "scope": "individual",
    "iso6393": "kil",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karagas",
    "type": "living",
    "scope": "individual",
    "iso6393": "kim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kinyarwanda",
    "type": "living",
    "scope": "individual",
    "iso6393": "kin",
    "iso6392B": "kin",
    "iso6392T": "kin",
    "iso6391": "rw"
  },
  {
    "name": "Kiowa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kio",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sheshi Kham",
    "type": "living",
    "scope": "individual",
    "iso6393": "kip",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kosadle",
    "type": "living",
    "scope": "individual",
    "iso6393": "kiq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kirghiz",
    "type": "living",
    "scope": "individual",
    "iso6393": "kir",
    "iso6392B": "kir",
    "iso6392T": "kir",
    "iso6391": "ky"
  },
  {
    "name": "Kis",
    "type": "living",
    "scope": "individual",
    "iso6393": "kis",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Agob",
    "type": "living",
    "scope": "individual",
    "iso6393": "kit",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kirmanjki (individual language)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kiu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kimbu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kiv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northeast Kiwai",
    "type": "living",
    "scope": "individual",
    "iso6393": "kiw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khiamniungan Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kix",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kirikiri",
    "type": "living",
    "scope": "individual",
    "iso6393": "kiy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kisi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kiz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mlap",
    "type": "living",
    "scope": "individual",
    "iso6393": "kja",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Q'anjob'al",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Coastal Konjo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Kiwai",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kisar",
    "type": "living",
    "scope": "individual",
    "iso6393": "kje",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khalaj",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khmu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khakas",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zabana",
    "type": "living",
    "scope": "individual",
    "iso6393": "kji",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khinalugh",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Highland Konjo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Parbate Kham",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kháng",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kunjen",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Harijan Kinnauri",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pwo Eastern Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Keres",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kurudu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "East Kewa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phrae Pwo Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kashaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "kju",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaikavian Literary Language",
    "type": "historical",
    "scope": "individual",
    "iso6393": "kjv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ramopa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Erave",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bumthangkha",
    "type": "living",
    "scope": "individual",
    "iso6393": "kjz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kakanda",
    "type": "living",
    "scope": "individual",
    "iso6393": "kka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwerisa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Odoodee",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kinuku",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kakabe",
    "type": "living",
    "scope": "individual",
    "iso6393": "kke",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalaktang Monpa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mabaka Valley Kalinga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khün",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kagulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kki",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kako",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kokota",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kosarek Yale",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kiong",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kon Keu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karko",
    "type": "living",
    "scope": "individual",
    "iso6393": "kko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gugubera",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaiku",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kir-Balar",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Giiwo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tumi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kangean",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teke-Kukuya",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kohin",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guugu Yimidhirr",
    "type": "living",
    "scope": "individual",
    "iso6393": "kky",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaska",
    "type": "living",
    "scope": "individual",
    "iso6393": "kkz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Klamath-Modoc",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kla",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kiliwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "klb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kolbila",
    "type": "living",
    "scope": "individual",
    "iso6393": "klc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gamilaraay",
    "type": "living",
    "scope": "individual",
    "iso6393": "kld",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kulung (Nepal)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kle",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kendeje",
    "type": "living",
    "scope": "individual",
    "iso6393": "klf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tagakaulo",
    "type": "living",
    "scope": "individual",
    "iso6393": "klg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Weliki",
    "type": "living",
    "scope": "individual",
    "iso6393": "klh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalumpang",
    "type": "living",
    "scope": "individual",
    "iso6393": "kli",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Turkic Khalaj",
    "type": "living",
    "scope": "individual",
    "iso6393": "klj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kono (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "klk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kagan Kalagan",
    "type": "living",
    "scope": "individual",
    "iso6393": "kll",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Migum",
    "type": "living",
    "scope": "individual",
    "iso6393": "klm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalenjin",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "kln",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kapya",
    "type": "living",
    "scope": "individual",
    "iso6393": "klo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamasa",
    "type": "living",
    "scope": "individual",
    "iso6393": "klp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rumu",
    "type": "living",
    "scope": "individual",
    "iso6393": "klq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khaling",
    "type": "living",
    "scope": "individual",
    "iso6393": "klr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalasha",
    "type": "living",
    "scope": "individual",
    "iso6393": "kls",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nukna",
    "type": "living",
    "scope": "individual",
    "iso6393": "klt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Klao",
    "type": "living",
    "scope": "individual",
    "iso6393": "klu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maskelynes",
    "type": "living",
    "scope": "individual",
    "iso6393": "klv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tado",
    "type": "living",
    "scope": "individual",
    "iso6393": "klw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koluwawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "klx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalao",
    "type": "living",
    "scope": "individual",
    "iso6393": "kly",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kabola",
    "type": "living",
    "scope": "individual",
    "iso6393": "klz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Konni",
    "type": "living",
    "scope": "individual",
    "iso6393": "kma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kimbundu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmb",
    "iso6392B": "kmb",
    "iso6392T": "kmb",
    "iso6391": null
  },
  {
    "name": "Southern Dong",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Majukayang Kalinga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bakole",
    "type": "living",
    "scope": "individual",
    "iso6393": "kme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kare (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kâte",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalam",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kami (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kumarbhag Paharia",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Limos Kalinga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tanudan Kalinga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kom (India)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awtuw",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwoma",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gimme",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwama",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Kurdish",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamasau",
    "type": "living",
    "scope": "individual",
    "iso6393": "kms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kemtuik",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanite",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karipúna Creole French",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Komo (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waboda",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koma",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khorasani Turkish",
    "type": "living",
    "scope": "individual",
    "iso6393": "kmz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dera (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lubuagan Kalinga",
    "type": "living",
    "scope": "individual",
    "iso6393": "knb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Kanuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "knc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Konda",
    "type": "living",
    "scope": "individual",
    "iso6393": "knd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kankanaey",
    "type": "living",
    "scope": "individual",
    "iso6393": "kne",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mankanya",
    "type": "living",
    "scope": "individual",
    "iso6393": "knf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koongo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanufi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Kanjobal",
    "type": "living",
    "scope": "individual",
    "iso6393": "knj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuranko",
    "type": "living",
    "scope": "individual",
    "iso6393": "knk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Keninjal",
    "type": "living",
    "scope": "individual",
    "iso6393": "knl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanamarí",
    "type": "living",
    "scope": "individual",
    "iso6393": "knm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Konkani (individual language)",
    "type": "living",
    "scope": "individual",
    "iso6393": "knn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kono (Sierra Leone)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kno",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwanja",
    "type": "living",
    "scope": "individual",
    "iso6393": "knp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kintaq",
    "type": "living",
    "scope": "individual",
    "iso6393": "knq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaningra",
    "type": "living",
    "scope": "individual",
    "iso6393": "knr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kensiu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kns",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Panoan Katukína",
    "type": "living",
    "scope": "individual",
    "iso6393": "knt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kono (Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "knu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tabo",
    "type": "living",
    "scope": "individual",
    "iso6393": "knv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kung-Ekoka",
    "type": "living",
    "scope": "individual",
    "iso6393": "knw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kendayan",
    "type": "living",
    "scope": "individual",
    "iso6393": "knx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanyok",
    "type": "living",
    "scope": "individual",
    "iso6393": "kny",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalamsé",
    "type": "living",
    "scope": "individual",
    "iso6393": "knz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Konomala",
    "type": "living",
    "scope": "individual",
    "iso6393": "koa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kpati",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "koc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kodi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kod",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kacipo-Balesi",
    "type": "living",
    "scope": "individual",
    "iso6393": "koe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kubi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kof",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cogui",
    "type": "living",
    "scope": "individual",
    "iso6393": "kog",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "koh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Komi-Permyak",
    "type": "living",
    "scope": "individual",
    "iso6393": "koi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Konkani (macrolanguage)",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "kok",
    "iso6392B": "kok",
    "iso6392T": "kok",
    "iso6391": null
  },
  {
    "name": "Kol (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kol",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Komi",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "kom",
    "iso6392B": "kom",
    "iso6392T": "kom",
    "iso6391": "kv"
  },
  {
    "name": "Kongo",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "kon",
    "iso6392B": "kon",
    "iso6392T": "kon",
    "iso6391": "kg"
  },
  {
    "name": "Konzo",
    "type": "living",
    "scope": "individual",
    "iso6393": "koo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waube",
    "type": "living",
    "scope": "individual",
    "iso6393": "kop",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kota (Gabon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "koq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Korean",
    "type": "living",
    "scope": "individual",
    "iso6393": "kor",
    "iso6392B": "kor",
    "iso6392T": "kor",
    "iso6391": "ko"
  },
  {
    "name": "Kosraean",
    "type": "living",
    "scope": "individual",
    "iso6393": "kos",
    "iso6392B": "kos",
    "iso6392T": "kos",
    "iso6391": null
  },
  {
    "name": "Lagwan",
    "type": "living",
    "scope": "individual",
    "iso6393": "kot",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koke",
    "type": "living",
    "scope": "individual",
    "iso6393": "kou",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kudu-Camo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kov",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kugama",
    "type": "living",
    "scope": "individual",
    "iso6393": "kow",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koyukon",
    "type": "living",
    "scope": "individual",
    "iso6393": "koy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Korak",
    "type": "living",
    "scope": "individual",
    "iso6393": "koz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kutto",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mullu Kurumba",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Curripaco",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koba",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kpelle",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "kpe",
    "iso6392B": "kpe",
    "iso6392T": "kpe",
    "iso6391": null
  },
  {
    "name": "Komba",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kapingamarangi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kplang",
    "type": "living",
    "scope": "individual",
    "iso6393": "kph",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kofei",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karajá",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kpan",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kpala",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koho",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kepkiriwát",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kpn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ikposo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Korupun-Sela",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Korafe-Yegha",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tehit",
    "type": "living",
    "scope": "individual",
    "iso6393": "kps",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karata",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kafoa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Komi-Zyrian",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kobon",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mountain Koiali",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koryak",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kupsabiny",
    "type": "living",
    "scope": "individual",
    "iso6393": "kpz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mum",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kovai",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Doromu-Koki",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koy Sanjaq Surat",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalagan",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kakabai",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khe",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kisankasa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koitabu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koromira",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kotafon Gbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kyenele",
    "type": "living",
    "scope": "individual",
    "iso6393": "kql",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khisa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaonde",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Krahn",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kimré",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Krenak",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kimaragang",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Kissi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Klias River Kadazan",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seroa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kqu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Okolod",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kandas",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mser",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koorete",
    "type": "living",
    "scope": "individual",
    "iso6393": "kqy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Korana",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kqz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kumhali",
    "type": "living",
    "scope": "individual",
    "iso6393": "kra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karkin",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "krb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karachay-Balkar",
    "type": "living",
    "scope": "individual",
    "iso6393": "krc",
    "iso6392B": "krc",
    "iso6392T": "krc",
    "iso6391": null
  },
  {
    "name": "Kairui-Midiki",
    "type": "living",
    "scope": "individual",
    "iso6393": "krd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Panará",
    "type": "living",
    "scope": "individual",
    "iso6393": "kre",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koro (Vanuatu)",
    "type": "living",
    "scope": "individual",
    "iso6393": "krf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kurama",
    "type": "living",
    "scope": "individual",
    "iso6393": "krh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Krio",
    "type": "living",
    "scope": "individual",
    "iso6393": "kri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kinaray-A",
    "type": "living",
    "scope": "individual",
    "iso6393": "krj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kerek",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "krk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karelian",
    "type": "living",
    "scope": "individual",
    "iso6393": "krl",
    "iso6392B": "krl",
    "iso6392T": "krl",
    "iso6391": null
  },
  {
    "name": "Sapo",
    "type": "living",
    "scope": "individual",
    "iso6393": "krn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Korop",
    "type": "living",
    "scope": "individual",
    "iso6393": "krp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Krung",
    "type": "living",
    "scope": "individual",
    "iso6393": "krr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gbaya (Sudan)",
    "type": "living",
    "scope": "individual",
    "iso6393": "krs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tumari Kanuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "krt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kurukh",
    "type": "living",
    "scope": "individual",
    "iso6393": "kru",
    "iso6392B": "kru",
    "iso6392T": "kru",
    "iso6391": null
  },
  {
    "name": "Kavet",
    "type": "living",
    "scope": "individual",
    "iso6393": "krv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Krahn",
    "type": "living",
    "scope": "individual",
    "iso6393": "krw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karon",
    "type": "living",
    "scope": "individual",
    "iso6393": "krx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kryts",
    "type": "living",
    "scope": "individual",
    "iso6393": "kry",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sota Kanum",
    "type": "living",
    "scope": "individual",
    "iso6393": "krz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shuwa-Zamani",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shambala",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Kalinga",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuanua",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuni",
    "type": "living",
    "scope": "individual",
    "iso6393": "kse",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bafia",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kusaghe",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kölsch",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Krisa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uare",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kansa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kumalu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kumba",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kasiguranin",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kofa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaba",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwaami",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Borong",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Kisi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Winyé",
    "type": "living",
    "scope": "individual",
    "iso6393": "kst",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khamyang",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kusu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "S'gaw Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kedang",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kharia Thar",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kodaku",
    "type": "living",
    "scope": "individual",
    "iso6393": "ksz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Katua",
    "type": "living",
    "scope": "individual",
    "iso6393": "kta",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kambaata",
    "type": "living",
    "scope": "individual",
    "iso6393": "ktb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kholok",
    "type": "living",
    "scope": "individual",
    "iso6393": "ktc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kokata",
    "type": "living",
    "scope": "individual",
    "iso6393": "ktd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nubri",
    "type": "living",
    "scope": "individual",
    "iso6393": "kte",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwami",
    "type": "living",
    "scope": "individual",
    "iso6393": "ktf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalkutung",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ktg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kth",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Muyu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kti",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Plapo Krumen",
    "type": "living",
    "scope": "individual",
    "iso6393": "ktj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaniet",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ktk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koroshi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ktl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kurti",
    "type": "living",
    "scope": "individual",
    "iso6393": "ktm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karitiâna",
    "type": "living",
    "scope": "individual",
    "iso6393": "ktn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuot",
    "type": "living",
    "scope": "individual",
    "iso6393": "kto",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaduo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ktp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Katabaga",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ktq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Muyu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kts",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ketum",
    "type": "living",
    "scope": "individual",
    "iso6393": "ktt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kituba (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ktu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Katu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ktv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kato",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ktw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaxararí",
    "type": "living",
    "scope": "individual",
    "iso6393": "ktx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kango (Bas-Uélé District)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kty",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Juǀʼhoan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ktz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuanyama",
    "type": "living",
    "scope": "individual",
    "iso6393": "kua",
    "iso6392B": "kua",
    "iso6392T": "kua",
    "iso6391": "kj"
  },
  {
    "name": "Kutep",
    "type": "living",
    "scope": "individual",
    "iso6393": "kub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwinsu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kuc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "'Auhelawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuman (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kue",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Katu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kuf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kupa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kushi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kuh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuikúro-Kalapálo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuria",
    "type": "living",
    "scope": "individual",
    "iso6393": "kuj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kepo'",
    "type": "living",
    "scope": "individual",
    "iso6393": "kuk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kulere",
    "type": "living",
    "scope": "individual",
    "iso6393": "kul",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kumyk",
    "type": "living",
    "scope": "individual",
    "iso6393": "kum",
    "iso6392B": "kum",
    "iso6392T": "kum",
    "iso6391": null
  },
  {
    "name": "Kunama",
    "type": "living",
    "scope": "individual",
    "iso6393": "kun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kumukio",
    "type": "living",
    "scope": "individual",
    "iso6393": "kuo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kunimaipa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kup",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karipuna",
    "type": "living",
    "scope": "individual",
    "iso6393": "kuq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kurdish",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "kur",
    "iso6392B": "kur",
    "iso6392T": "kur",
    "iso6391": "ku"
  },
  {
    "name": "Kusaal",
    "type": "living",
    "scope": "individual",
    "iso6393": "kus",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kutenai",
    "type": "living",
    "scope": "individual",
    "iso6393": "kut",
    "iso6392B": "kut",
    "iso6392T": "kut",
    "iso6391": null
  },
  {
    "name": "Upper Kuskokwim",
    "type": "living",
    "scope": "individual",
    "iso6393": "kuu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kur",
    "type": "living",
    "scope": "individual",
    "iso6393": "kuv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kpagua",
    "type": "living",
    "scope": "individual",
    "iso6393": "kuw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kukatja",
    "type": "living",
    "scope": "individual",
    "iso6393": "kux",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuuku-Ya'u",
    "type": "living",
    "scope": "individual",
    "iso6393": "kuy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kunza",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kuz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bagvalal",
    "type": "living",
    "scope": "individual",
    "iso6393": "kva",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kubu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kove",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kui (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalabakan",
    "type": "living",
    "scope": "individual",
    "iso6393": "kve",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kabalai",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuni-Boazi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Komodo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwang",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Psikye",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Korean Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kayaw",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kendem",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Border Kuna",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dobel",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kompane",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Geba Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kerinci",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lahta Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yinbaw Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kola",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wersing",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Parkari Koli",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yintale Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsakwambo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kvz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dâw",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Likwala",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwaio",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwerba",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwara'ae",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sara Kaba Deme",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kowiai",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awa-Cuaiquer",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwakiutl",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kofyar",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwambi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwangali",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwomtari",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kodia",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwer",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwese",
    "type": "living",
    "scope": "individual",
    "iso6393": "kws",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwesten",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwakum",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sara Kaba Náà",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwinti",
    "type": "living",
    "scope": "individual",
    "iso6393": "kww",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khirwar",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Salvador Kongo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kwy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwadi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kwz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kairiru",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Krobu",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Konso",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Brunei",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manumanaw Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karo (Ethiopia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Keningau Murut",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kulfa",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zayein Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nepali Kurux",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Khmer",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanowit-Tanjong Melanau",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanoé",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kxo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wadiyara Koli",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Smärky Kanum",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koro (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kangjia",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koiwat",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kui (India)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuvi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Konai",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Likuba",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kayong",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kerewo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kxz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "kya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Butbut Kalinga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kyaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karey",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Krache",
    "type": "living",
    "scope": "individual",
    "iso6393": "kye",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kouya",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Keyagana",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karok",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kiput",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karao",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamayo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalapuya",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kpatili",
    "type": "living",
    "scope": "individual",
    "iso6393": "kym",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Binukidnon",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kelon",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kang",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kenga",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuruáya",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baram Kayan",
    "type": "living",
    "scope": "individual",
    "iso6393": "kys",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kayagar",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Kayah",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kayort",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kudmali",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rapoisi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kambaira",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kayabí",
    "type": "living",
    "scope": "individual",
    "iso6393": "kyz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Karaboro",
    "type": "living",
    "scope": "individual",
    "iso6393": "kza",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaibobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bondoukou Kulango",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kadai",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kosena",
    "type": "living",
    "scope": "individual",
    "iso6393": "kze",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Da'a Kaili",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kikai",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kelabit",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kazukuru",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kzk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kayeli",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kais",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kokola",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaningi",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaidipang",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaike",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karang",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sugut Dusun",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kayupulau",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Komyandaret",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karirí-Xocó",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kzw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamarian",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "kzx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kango (Tshopo District)",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalabra",
    "type": "living",
    "scope": "individual",
    "iso6393": "kzz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Subanen",
    "type": "living",
    "scope": "individual",
    "iso6393": "laa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Linear A",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "lab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lacandon",
    "type": "living",
    "scope": "individual",
    "iso6393": "lac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ladino",
    "type": "living",
    "scope": "individual",
    "iso6393": "lad",
    "iso6392B": "lad",
    "iso6392T": "lad",
    "iso6391": null
  },
  {
    "name": "Pattani",
    "type": "living",
    "scope": "individual",
    "iso6393": "lae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lafofa",
    "type": "living",
    "scope": "individual",
    "iso6393": "laf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Langi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lahnda",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "lah",
    "iso6392B": "lah",
    "iso6392T": "lah",
    "iso6391": null
  },
  {
    "name": "Lambya",
    "type": "living",
    "scope": "individual",
    "iso6393": "lai",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lango (Uganda)",
    "type": "living",
    "scope": "individual",
    "iso6393": "laj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laka (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "lak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lalia",
    "type": "living",
    "scope": "individual",
    "iso6393": "lal",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lamba",
    "type": "living",
    "scope": "individual",
    "iso6393": "lam",
    "iso6392B": "lam",
    "iso6392T": "lam",
    "iso6391": null
  },
  {
    "name": "Laru",
    "type": "living",
    "scope": "individual",
    "iso6393": "lan",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lao",
    "type": "living",
    "scope": "individual",
    "iso6393": "lao",
    "iso6392B": "lao",
    "iso6392T": "lao",
    "iso6391": "lo"
  },
  {
    "name": "Laka (Chad)",
    "type": "living",
    "scope": "individual",
    "iso6393": "lap",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Qabiao",
    "type": "living",
    "scope": "individual",
    "iso6393": "laq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Larteh",
    "type": "living",
    "scope": "individual",
    "iso6393": "lar",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lama (Togo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "las",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Latin",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "lat",
    "iso6392B": "lat",
    "iso6392T": "lat",
    "iso6391": "la"
  },
  {
    "name": "Laba",
    "type": "living",
    "scope": "individual",
    "iso6393": "lau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Latvian",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "lav",
    "iso6392B": "lav",
    "iso6392T": "lav",
    "iso6391": "lv"
  },
  {
    "name": "Lauje",
    "type": "living",
    "scope": "individual",
    "iso6393": "law",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tiwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "lax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lama Bai",
    "type": "living",
    "scope": "individual",
    "iso6393": "lay",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aribwatsa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "laz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Label",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lakkia",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lak",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tinani",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laopang",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "La'bi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ladakhi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Bontok",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Libon Bikol",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lodhi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rmeet",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laven",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wampar",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lohorung",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Libyan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lachi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Labu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lavatbura-Lamusong",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tolaki",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lawangan",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lamalama",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "lby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lardil",
    "type": "living",
    "scope": "individual",
    "iso6393": "lbz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Legenyem",
    "type": "living",
    "scope": "individual",
    "iso6393": "lcc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lola",
    "type": "living",
    "scope": "individual",
    "iso6393": "lcd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Loncong",
    "type": "living",
    "scope": "individual",
    "iso6393": "lce",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lubu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lcf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Luchazi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lch",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lisela",
    "type": "living",
    "scope": "individual",
    "iso6393": "lcl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tungag",
    "type": "living",
    "scope": "individual",
    "iso6393": "lcm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Lawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "lcp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Luhu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lcq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lisabata-Nuniali",
    "type": "living",
    "scope": "individual",
    "iso6393": "lcs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kla-Dan",
    "type": "living",
    "scope": "individual",
    "iso6393": "lda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dũya",
    "type": "living",
    "scope": "individual",
    "iso6393": "ldb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Luri",
    "type": "living",
    "scope": "individual",
    "iso6393": "ldd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lenyima",
    "type": "living",
    "scope": "individual",
    "iso6393": "ldg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lamja-Dengsa-Tola",
    "type": "living",
    "scope": "individual",
    "iso6393": "ldh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laari",
    "type": "living",
    "scope": "individual",
    "iso6393": "ldi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lemoro",
    "type": "living",
    "scope": "individual",
    "iso6393": "ldj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Leelau",
    "type": "living",
    "scope": "individual",
    "iso6393": "ldk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ldl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Landoma",
    "type": "living",
    "scope": "individual",
    "iso6393": "ldm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Láadan",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "ldn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Loo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ldo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tso",
    "type": "living",
    "scope": "individual",
    "iso6393": "ldp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lufu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ldq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lega-Shabunda",
    "type": "living",
    "scope": "individual",
    "iso6393": "lea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lala-Bisa",
    "type": "living",
    "scope": "individual",
    "iso6393": "leb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Leco",
    "type": "living",
    "scope": "individual",
    "iso6393": "lec",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lendu",
    "type": "living",
    "scope": "individual",
    "iso6393": "led",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lyélé",
    "type": "living",
    "scope": "individual",
    "iso6393": "lee",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lelemi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lef",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lenje",
    "type": "living",
    "scope": "individual",
    "iso6393": "leh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lemio",
    "type": "living",
    "scope": "individual",
    "iso6393": "lei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lengola",
    "type": "living",
    "scope": "individual",
    "iso6393": "lej",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Leipon",
    "type": "living",
    "scope": "individual",
    "iso6393": "lek",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lele (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "lel",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nomaande",
    "type": "living",
    "scope": "individual",
    "iso6393": "lem",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lenca",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "len",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Leti (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "leo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lepcha",
    "type": "living",
    "scope": "individual",
    "iso6393": "lep",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lembena",
    "type": "living",
    "scope": "individual",
    "iso6393": "leq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lenkau",
    "type": "living",
    "scope": "individual",
    "iso6393": "ler",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lese",
    "type": "living",
    "scope": "individual",
    "iso6393": "les",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lesing-Gelimi",
    "type": "living",
    "scope": "individual",
    "iso6393": "let",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kara (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "leu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lamma",
    "type": "living",
    "scope": "individual",
    "iso6393": "lev",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ledo Kaili",
    "type": "living",
    "scope": "individual",
    "iso6393": "lew",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Luang",
    "type": "living",
    "scope": "individual",
    "iso6393": "lex",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lemolang",
    "type": "living",
    "scope": "individual",
    "iso6393": "ley",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lezghian",
    "type": "living",
    "scope": "individual",
    "iso6393": "lez",
    "iso6392B": "lez",
    "iso6392T": "lez",
    "iso6391": null
  },
  {
    "name": "Lefa",
    "type": "living",
    "scope": "individual",
    "iso6393": "lfa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lingua Franca Nova",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "lfn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lungga",
    "type": "living",
    "scope": "individual",
    "iso6393": "lga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laghu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lgb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lugbara",
    "type": "living",
    "scope": "individual",
    "iso6393": "lgg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laghuu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lgh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lengilu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lgi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lingarak",
    "type": "living",
    "scope": "individual",
    "iso6393": "lgk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wala",
    "type": "living",
    "scope": "individual",
    "iso6393": "lgl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lega-Mwenga",
    "type": "living",
    "scope": "individual",
    "iso6393": "lgm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "T'apo",
    "type": "living",
    "scope": "individual",
    "iso6393": "lgn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Logba",
    "type": "living",
    "scope": "individual",
    "iso6393": "lgq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lengo",
    "type": "living",
    "scope": "individual",
    "iso6393": "lgr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pahi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lgt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Longgu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lgu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ligenza",
    "type": "living",
    "scope": "individual",
    "iso6393": "lgz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laha (Viet Nam)",
    "type": "living",
    "scope": "individual",
    "iso6393": "lha",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laha (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "lhh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lahu Shi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lhi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lahul Lohar",
    "type": "living",
    "scope": "individual",
    "iso6393": "lhl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lhomi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lhm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lahanan",
    "type": "living",
    "scope": "individual",
    "iso6393": "lhn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lhokpu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lhp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mlahsö",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "lhs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lo-Toga",
    "type": "living",
    "scope": "individual",
    "iso6393": "lht",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lahu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lhu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West-Central Limba",
    "type": "living",
    "scope": "individual",
    "iso6393": "lia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Likum",
    "type": "living",
    "scope": "individual",
    "iso6393": "lib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hlai",
    "type": "living",
    "scope": "individual",
    "iso6393": "lic",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyindrou",
    "type": "living",
    "scope": "individual",
    "iso6393": "lid",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Likila",
    "type": "living",
    "scope": "individual",
    "iso6393": "lie",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Limbu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ligbi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lig",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lihir",
    "type": "living",
    "scope": "individual",
    "iso6393": "lih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ligurian",
    "type": "living",
    "scope": "individual",
    "iso6393": "lij",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lika",
    "type": "living",
    "scope": "individual",
    "iso6393": "lik",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lillooet",
    "type": "living",
    "scope": "individual",
    "iso6393": "lil",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Limburgan",
    "type": "living",
    "scope": "individual",
    "iso6393": "lim",
    "iso6392B": "lim",
    "iso6392T": "lim",
    "iso6391": "li"
  },
  {
    "name": "Lingala",
    "type": "living",
    "scope": "individual",
    "iso6393": "lin",
    "iso6392B": "lin",
    "iso6392T": "lin",
    "iso6391": "ln"
  },
  {
    "name": "Liki",
    "type": "living",
    "scope": "individual",
    "iso6393": "lio",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sekpele",
    "type": "living",
    "scope": "individual",
    "iso6393": "lip",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Libido",
    "type": "living",
    "scope": "individual",
    "iso6393": "liq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Liberian English",
    "type": "living",
    "scope": "individual",
    "iso6393": "lir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lisu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lis",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lithuanian",
    "type": "living",
    "scope": "individual",
    "iso6393": "lit",
    "iso6392B": "lit",
    "iso6392T": "lit",
    "iso6391": "lt"
  },
  {
    "name": "Logorik",
    "type": "living",
    "scope": "individual",
    "iso6393": "liu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Liv",
    "type": "living",
    "scope": "individual",
    "iso6393": "liv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Col",
    "type": "living",
    "scope": "individual",
    "iso6393": "liw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Liabuku",
    "type": "living",
    "scope": "individual",
    "iso6393": "lix",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Banda-Bambari",
    "type": "living",
    "scope": "individual",
    "iso6393": "liy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Libinza",
    "type": "living",
    "scope": "individual",
    "iso6393": "liz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Golpa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "lja",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rampi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lje",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laiyolo",
    "type": "living",
    "scope": "individual",
    "iso6393": "lji",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Li'o",
    "type": "living",
    "scope": "individual",
    "iso6393": "ljl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lampung Api",
    "type": "living",
    "scope": "individual",
    "iso6393": "ljp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yirandali",
    "type": "living",
    "scope": "individual",
    "iso6393": "ljw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yuru",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ljx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lakalei",
    "type": "living",
    "scope": "individual",
    "iso6393": "lka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kabras",
    "type": "living",
    "scope": "individual",
    "iso6393": "lkb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kucong",
    "type": "living",
    "scope": "individual",
    "iso6393": "lkc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lakondê",
    "type": "living",
    "scope": "individual",
    "iso6393": "lkd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kenyi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lke",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lakha",
    "type": "living",
    "scope": "individual",
    "iso6393": "lkh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laki",
    "type": "living",
    "scope": "individual",
    "iso6393": "lki",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Remun",
    "type": "living",
    "scope": "individual",
    "iso6393": "lkj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laeko-Libuat",
    "type": "living",
    "scope": "individual",
    "iso6393": "lkl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalaamaya",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "lkm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lakon",
    "type": "living",
    "scope": "individual",
    "iso6393": "lkn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khayo",
    "type": "living",
    "scope": "individual",
    "iso6393": "lko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Päri",
    "type": "living",
    "scope": "individual",
    "iso6393": "lkr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kisa",
    "type": "living",
    "scope": "individual",
    "iso6393": "lks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lakota",
    "type": "living",
    "scope": "individual",
    "iso6393": "lkt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kungkari",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "lku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lokoya",
    "type": "living",
    "scope": "individual",
    "iso6393": "lky",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lala-Roba",
    "type": "living",
    "scope": "individual",
    "iso6393": "lla",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lolo",
    "type": "living",
    "scope": "individual",
    "iso6393": "llb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lele (Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "llc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ladin",
    "type": "living",
    "scope": "individual",
    "iso6393": "lld",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lele (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "lle",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hermit",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "llf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lole",
    "type": "living",
    "scope": "individual",
    "iso6393": "llg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lamu",
    "type": "living",
    "scope": "individual",
    "iso6393": "llh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teke-Laali",
    "type": "living",
    "scope": "individual",
    "iso6393": "lli",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ladji Ladji",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "llj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lelak",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "llk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lilau",
    "type": "living",
    "scope": "individual",
    "iso6393": "lll",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lasalimu",
    "type": "living",
    "scope": "individual",
    "iso6393": "llm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lele (Chad)",
    "type": "living",
    "scope": "individual",
    "iso6393": "lln",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Efate",
    "type": "living",
    "scope": "individual",
    "iso6393": "llp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lolak",
    "type": "living",
    "scope": "individual",
    "iso6393": "llq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lithuanian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "lls",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lau",
    "type": "living",
    "scope": "individual",
    "iso6393": "llu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lauan",
    "type": "living",
    "scope": "individual",
    "iso6393": "llx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "East Limba",
    "type": "living",
    "scope": "individual",
    "iso6393": "lma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Merei",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Limilngan",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "lmc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lumun",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pévé",
    "type": "living",
    "scope": "individual",
    "iso6393": "lme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Lembata",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lamogai",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lambichhong",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lombi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Lembata",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lamkang",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hano",
    "type": "living",
    "scope": "individual",
    "iso6393": "lml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lambadi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lombard",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Limbum",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lamatuka",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lamalera",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lamenu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lomaiviti",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lake Miwok",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laimbue",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lamboya",
    "type": "living",
    "scope": "individual",
    "iso6393": "lmy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lumbee",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "lmz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Langbashe",
    "type": "living",
    "scope": "individual",
    "iso6393": "lna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbalanhu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lnb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lundayeh",
    "type": "living",
    "scope": "individual",
    "iso6393": "lnd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Langobardic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "lng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lanoh",
    "type": "living",
    "scope": "individual",
    "iso6393": "lnh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Daantanai'",
    "type": "living",
    "scope": "individual",
    "iso6393": "lni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Leningitij",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "lnj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Central Banda",
    "type": "living",
    "scope": "individual",
    "iso6393": "lnl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Langam",
    "type": "living",
    "scope": "individual",
    "iso6393": "lnm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lorediakarkar",
    "type": "living",
    "scope": "individual",
    "iso6393": "lnn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lango (South Sudan)",
    "type": "living",
    "scope": "individual",
    "iso6393": "lno",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lamnso'",
    "type": "living",
    "scope": "individual",
    "iso6393": "lns",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Longuda",
    "type": "living",
    "scope": "individual",
    "iso6393": "lnu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lanima",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "lnw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lonzo",
    "type": "living",
    "scope": "individual",
    "iso6393": "lnz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Loloda",
    "type": "living",
    "scope": "individual",
    "iso6393": "loa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lobi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lob",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Inonhan",
    "type": "living",
    "scope": "individual",
    "iso6393": "loc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saluan",
    "type": "living",
    "scope": "individual",
    "iso6393": "loe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Logol",
    "type": "living",
    "scope": "individual",
    "iso6393": "lof",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Logo",
    "type": "living",
    "scope": "individual",
    "iso6393": "log",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Narim",
    "type": "living",
    "scope": "individual",
    "iso6393": "loh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Loma (Côte d'Ivoire)",
    "type": "living",
    "scope": "individual",
    "iso6393": "loi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lou",
    "type": "living",
    "scope": "individual",
    "iso6393": "loj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Loko",
    "type": "living",
    "scope": "individual",
    "iso6393": "lok",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mongo",
    "type": "living",
    "scope": "individual",
    "iso6393": "lol",
    "iso6392B": "lol",
    "iso6392T": "lol",
    "iso6391": null
  },
  {
    "name": "Loma (Liberia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "lom",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malawi Lomwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "lon",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lombo",
    "type": "living",
    "scope": "individual",
    "iso6393": "loo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lopa",
    "type": "living",
    "scope": "individual",
    "iso6393": "lop",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lobala",
    "type": "living",
    "scope": "individual",
    "iso6393": "loq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Téén",
    "type": "living",
    "scope": "individual",
    "iso6393": "lor",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Loniu",
    "type": "living",
    "scope": "individual",
    "iso6393": "los",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Otuho",
    "type": "living",
    "scope": "individual",
    "iso6393": "lot",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Louisiana Creole",
    "type": "living",
    "scope": "individual",
    "iso6393": "lou",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lopi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lov",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tampias Lobu",
    "type": "living",
    "scope": "individual",
    "iso6393": "low",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Loun",
    "type": "living",
    "scope": "individual",
    "iso6393": "lox",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Loke",
    "type": "living",
    "scope": "individual",
    "iso6393": "loy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lozi",
    "type": "living",
    "scope": "individual",
    "iso6393": "loz",
    "iso6392B": "loz",
    "iso6392T": "loz",
    "iso6391": null
  },
  {
    "name": "Lelepa",
    "type": "living",
    "scope": "individual",
    "iso6393": "lpa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lepki",
    "type": "living",
    "scope": "individual",
    "iso6393": "lpe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Long Phuri Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "lpn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lipo",
    "type": "living",
    "scope": "individual",
    "iso6393": "lpo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lopit",
    "type": "living",
    "scope": "individual",
    "iso6393": "lpx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rara Bakati'",
    "type": "living",
    "scope": "individual",
    "iso6393": "lra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Luri",
    "type": "living",
    "scope": "individual",
    "iso6393": "lrc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laurentian",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "lre",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laragia",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "lrg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marachi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Loarki",
    "type": "living",
    "scope": "individual",
    "iso6393": "lrk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lari",
    "type": "living",
    "scope": "individual",
    "iso6393": "lrl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marama",
    "type": "living",
    "scope": "individual",
    "iso6393": "lrm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lorang",
    "type": "living",
    "scope": "individual",
    "iso6393": "lrn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laro",
    "type": "living",
    "scope": "individual",
    "iso6393": "lro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Yamphu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lrr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Larantuka Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "lrt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Larevat",
    "type": "living",
    "scope": "individual",
    "iso6393": "lrv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lemerig",
    "type": "living",
    "scope": "individual",
    "iso6393": "lrz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lasgerdi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lsa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lishana Deni",
    "type": "living",
    "scope": "individual",
    "iso6393": "lsd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lusengo",
    "type": "living",
    "scope": "individual",
    "iso6393": "lse",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lish",
    "type": "living",
    "scope": "individual",
    "iso6393": "lsh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lashi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lsi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Latvian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "lsl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saamia",
    "type": "living",
    "scope": "individual",
    "iso6393": "lsm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tibetan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "lsn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laos Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "lso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Panamanian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "lsp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aruop",
    "type": "living",
    "scope": "individual",
    "iso6393": "lsr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lasi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Trinidad and Tobago Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "lst",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sivia Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "lsv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mauritian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "lsy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Late Middle Chinese",
    "type": "historical",
    "scope": "individual",
    "iso6393": "ltc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Latgalian",
    "type": "living",
    "scope": "individual",
    "iso6393": "ltg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thur",
    "type": "living",
    "scope": "individual",
    "iso6393": "lth",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Leti (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "lti",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Latundê",
    "type": "living",
    "scope": "individual",
    "iso6393": "ltn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsotso",
    "type": "living",
    "scope": "individual",
    "iso6393": "lto",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tachoni",
    "type": "living",
    "scope": "individual",
    "iso6393": "lts",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Latu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ltu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Luxembourgish",
    "type": "living",
    "scope": "individual",
    "iso6393": "ltz",
    "iso6392B": "ltz",
    "iso6392T": "ltz",
    "iso6391": "lb"
  },
  {
    "name": "Luba-Lulua",
    "type": "living",
    "scope": "individual",
    "iso6393": "lua",
    "iso6392B": "lua",
    "iso6392T": "lua",
    "iso6391": null
  },
  {
    "name": "Luba-Katanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "lub",
    "iso6392B": "lub",
    "iso6392T": "lub",
    "iso6391": "lu"
  },
  {
    "name": "Aringa",
    "type": "living",
    "scope": "individual",
    "iso6393": "luc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ludian",
    "type": "living",
    "scope": "individual",
    "iso6393": "lud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Luvale",
    "type": "living",
    "scope": "individual",
    "iso6393": "lue",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laua",
    "type": "living",
    "scope": "individual",
    "iso6393": "luf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ganda",
    "type": "living",
    "scope": "individual",
    "iso6393": "lug",
    "iso6392B": "lug",
    "iso6392T": "lug",
    "iso6391": "lg"
  },
  {
    "name": "Luiseno",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "lui",
    "iso6392B": "lui",
    "iso6392T": "lui",
    "iso6391": null
  },
  {
    "name": "Luna",
    "type": "living",
    "scope": "individual",
    "iso6393": "luj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lunanakha",
    "type": "living",
    "scope": "individual",
    "iso6393": "luk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Olu'bo",
    "type": "living",
    "scope": "individual",
    "iso6393": "lul",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Luimbi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lunda",
    "type": "living",
    "scope": "individual",
    "iso6393": "lun",
    "iso6392B": "lun",
    "iso6392T": "lun",
    "iso6391": null
  },
  {
    "name": "Luo (Kenya and Tanzania)",
    "type": "living",
    "scope": "individual",
    "iso6393": "luo",
    "iso6392B": "luo",
    "iso6392T": "luo",
    "iso6391": null
  },
  {
    "name": "Lumbu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lup",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lucumi",
    "type": "living",
    "scope": "individual",
    "iso6393": "luq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laura",
    "type": "living",
    "scope": "individual",
    "iso6393": "lur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lushai",
    "type": "living",
    "scope": "individual",
    "iso6393": "lus",
    "iso6392B": "lus",
    "iso6392T": "lus",
    "iso6391": null
  },
  {
    "name": "Lushootseed",
    "type": "living",
    "scope": "individual",
    "iso6393": "lut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lumba-Yakkha",
    "type": "living",
    "scope": "individual",
    "iso6393": "luu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Luwati",
    "type": "living",
    "scope": "individual",
    "iso6393": "luv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Luo (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "luw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Luyia",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "luy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Luri",
    "type": "living",
    "scope": "individual",
    "iso6393": "luz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maku'a",
    "type": "living",
    "scope": "individual",
    "iso6393": "lva",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lavi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lvi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lavukaleve",
    "type": "living",
    "scope": "individual",
    "iso6393": "lvk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Standard Latvian",
    "type": "living",
    "scope": "individual",
    "iso6393": "lvs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Levuka",
    "type": "living",
    "scope": "individual",
    "iso6393": "lvu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lwalu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lewo Eleng",
    "type": "living",
    "scope": "individual",
    "iso6393": "lwe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "lwg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "White Lachi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lwh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Lawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "lwl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laomian",
    "type": "living",
    "scope": "individual",
    "iso6393": "lwm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Luwo",
    "type": "living",
    "scope": "individual",
    "iso6393": "lwo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malawian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "lws",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lewotobi",
    "type": "living",
    "scope": "individual",
    "iso6393": "lwt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lawu",
    "type": "living",
    "scope": "individual",
    "iso6393": "lwu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lewo",
    "type": "living",
    "scope": "individual",
    "iso6393": "lww",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Layakha",
    "type": "living",
    "scope": "individual",
    "iso6393": "lya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lyngngam",
    "type": "living",
    "scope": "individual",
    "iso6393": "lyg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Luyana",
    "type": "living",
    "scope": "individual",
    "iso6393": "lyn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Literary Chinese",
    "type": "historical",
    "scope": "individual",
    "iso6393": "lzh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Litzlitz",
    "type": "living",
    "scope": "individual",
    "iso6393": "lzl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Leinong Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "lzn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Laz",
    "type": "living",
    "scope": "individual",
    "iso6393": "lzz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Jerónimo Tecóatl Mazatec",
    "type": "living",
    "scope": "individual",
    "iso6393": "maa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yutanduchi Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Madurese",
    "type": "living",
    "scope": "individual",
    "iso6393": "mad",
    "iso6392B": "mad",
    "iso6392T": "mad",
    "iso6391": null
  },
  {
    "name": "Bo-Rukul",
    "type": "living",
    "scope": "individual",
    "iso6393": "mae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mafa",
    "type": "living",
    "scope": "individual",
    "iso6393": "maf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Magahi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mag",
    "iso6392B": "mag",
    "iso6392T": "mag",
    "iso6391": null
  },
  {
    "name": "Marshallese",
    "type": "living",
    "scope": "individual",
    "iso6393": "mah",
    "iso6392B": "mah",
    "iso6392T": "mah",
    "iso6391": "mh"
  },
  {
    "name": "Maithili",
    "type": "living",
    "scope": "individual",
    "iso6393": "mai",
    "iso6392B": "mai",
    "iso6392T": "mai",
    "iso6391": null
  },
  {
    "name": "Jalapa De Díaz Mazatec",
    "type": "living",
    "scope": "individual",
    "iso6393": "maj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makasar",
    "type": "living",
    "scope": "individual",
    "iso6393": "mak",
    "iso6392B": "mak",
    "iso6392T": "mak",
    "iso6391": null
  },
  {
    "name": "Malayalam",
    "type": "living",
    "scope": "individual",
    "iso6393": "mal",
    "iso6392B": "mal",
    "iso6392T": "mal",
    "iso6391": "ml"
  },
  {
    "name": "Mam",
    "type": "living",
    "scope": "individual",
    "iso6393": "mam",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mandingo",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "man",
    "iso6392B": "man",
    "iso6392T": "man",
    "iso6391": null
  },
  {
    "name": "Chiquihuitlán Mazatec",
    "type": "living",
    "scope": "individual",
    "iso6393": "maq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marathi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mar",
    "iso6392B": "mar",
    "iso6392T": "mar",
    "iso6391": "mr"
  },
  {
    "name": "Masai",
    "type": "living",
    "scope": "individual",
    "iso6393": "mas",
    "iso6392B": "mas",
    "iso6392T": "mas",
    "iso6391": null
  },
  {
    "name": "San Francisco Matlatzinca",
    "type": "living",
    "scope": "individual",
    "iso6393": "mat",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huautla Mazatec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sateré-Mawé",
    "type": "living",
    "scope": "individual",
    "iso6393": "mav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mampruli",
    "type": "living",
    "scope": "individual",
    "iso6393": "maw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Moluccan Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "max",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Mazahua",
    "type": "living",
    "scope": "individual",
    "iso6393": "maz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Higaonon",
    "type": "living",
    "scope": "individual",
    "iso6393": "mba",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Bukidnon Manobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Macushi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dibabawon Manobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Molale",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mbe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baba Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mangseng",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ilianen Manobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nadëb",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malol",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maxakalí",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ombamba",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Macaguán",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbo (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malayo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maisin",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nukak Makú",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sarangani Manobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Matigsalug Manobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbula-Bwazza",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbulungish",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maring",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mari (East Sepik Province)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Memoni",
    "type": "living",
    "scope": "individual",
    "iso6393": "mby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amoltepec Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mbz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maca",
    "type": "living",
    "scope": "individual",
    "iso6393": "mca",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Machiguenga",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bitur",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sharanahua",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Itundujia Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mce",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Matsés",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mapoyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maquiritari",
    "type": "living",
    "scope": "individual",
    "iso6393": "mch",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mese",
    "type": "living",
    "scope": "individual",
    "iso6393": "mci",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mvanip",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbunda",
    "type": "living",
    "scope": "individual",
    "iso6393": "mck",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Macaguaje",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mcl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malaccan Creole Portuguese",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Masana",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Coatlán Mixe",
    "type": "living",
    "scope": "individual",
    "iso6393": "mco",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makaa",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ese",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Menya",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mambai",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mengisa",
    "type": "living",
    "scope": "individual",
    "iso6393": "mct",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cameroon Mambila",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Minanibai",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mawa (Chad)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mpiemo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Watut",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mawan",
    "type": "living",
    "scope": "individual",
    "iso6393": "mcz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mada (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Morigi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Male (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbum",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maba (Chad)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mde",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moksha",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdf",
    "iso6392B": "mdf",
    "iso6392T": "mdf",
    "iso6391": null
  },
  {
    "name": "Massalat",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maguindanaon",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mamvu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mangbetu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mangbutu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maltese Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mayogo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbati",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbala",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbole",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mandar",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdr",
    "iso6392B": "mdr",
    "iso6392T": "mdr",
    "iso6391": null
  },
  {
    "name": "Maria (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mds",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbere",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mboko",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Santa Lucía Monteverde Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbosi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dizin",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Male (Ethiopia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suruí Do Pará",
    "type": "living",
    "scope": "individual",
    "iso6393": "mdz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Menka",
    "type": "living",
    "scope": "individual",
    "iso6393": "mea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ikobi",
    "type": "living",
    "scope": "individual",
    "iso6393": "meb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marra",
    "type": "living",
    "scope": "individual",
    "iso6393": "mec",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Melpa",
    "type": "living",
    "scope": "individual",
    "iso6393": "med",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mengen",
    "type": "living",
    "scope": "individual",
    "iso6393": "mee",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Megam",
    "type": "living",
    "scope": "individual",
    "iso6393": "mef",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southwestern Tlaxiaco Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "meh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Midob",
    "type": "living",
    "scope": "individual",
    "iso6393": "mei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Meyah",
    "type": "living",
    "scope": "individual",
    "iso6393": "mej",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mekeo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mek",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Melanau",
    "type": "living",
    "scope": "individual",
    "iso6393": "mel",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mangala",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mem",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mende (Sierra Leone)",
    "type": "living",
    "scope": "individual",
    "iso6393": "men",
    "iso6392B": "men",
    "iso6392T": "men",
    "iso6391": null
  },
  {
    "name": "Kedah Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "meo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miriwoong",
    "type": "living",
    "scope": "individual",
    "iso6393": "mep",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Merey",
    "type": "living",
    "scope": "individual",
    "iso6393": "meq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Meru",
    "type": "living",
    "scope": "individual",
    "iso6393": "mer",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Masmaje",
    "type": "living",
    "scope": "individual",
    "iso6393": "mes",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mato",
    "type": "living",
    "scope": "individual",
    "iso6393": "met",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Motu",
    "type": "living",
    "scope": "individual",
    "iso6393": "meu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mano",
    "type": "living",
    "scope": "individual",
    "iso6393": "mev",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "mew",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hassaniyya",
    "type": "living",
    "scope": "individual",
    "iso6393": "mey",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Menominee",
    "type": "living",
    "scope": "individual",
    "iso6393": "mez",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pattani Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bangka",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mba",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mendankwe-Nkwen",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Morisyen",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Naki",
    "type": "living",
    "scope": "individual",
    "iso6393": "mff",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mogofin",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Matal",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wandala",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mefele",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Mofu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Putai",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marghi South",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cross River Mbembe",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makassar Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moba",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marrithiyel",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mexican Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mokerang",
    "type": "living",
    "scope": "individual",
    "iso6393": "mft",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbwela",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mandjak",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mulaha",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mfw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Melo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mayo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mabaan",
    "type": "living",
    "scope": "individual",
    "iso6393": "mfz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Middle Irish (900-1200)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "mga",
    "iso6392B": "mga",
    "iso6392T": "mga",
    "iso6391": null
  },
  {
    "name": "Mararit",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Morokodo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moru",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mango",
    "type": "living",
    "scope": "individual",
    "iso6393": "mge",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maklew",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mpumpong",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makhuwa-Meetto",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lijili",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abureni",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mawes",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maleu-Kilenge",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mambae",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbangi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Meta'",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Magar",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malila",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mambwe-Lungu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manda (Tanzania)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mongol",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mailu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Matengo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Matumbi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbunga",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbugwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "mgz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manda (India)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mha",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mahongwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mocho",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbugu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Besisi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mamaa",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Margu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ma'di",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mogholi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mungaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mauwake",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makhuwa-Moniga",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mócheno",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mashi (Zambia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mho",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Balinese Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mandan",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Mari",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buru (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mandahuaca",
    "type": "living",
    "scope": "individual",
    "iso6393": "mht",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Digaro-Mishmi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbukushu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maru",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ma'anyan",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mor (Mor Islands)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mhz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miami",
    "type": "living",
    "scope": "individual",
    "iso6393": "mia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Atatláhuca Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mi'kmaq",
    "type": "living",
    "scope": "individual",
    "iso6393": "mic",
    "iso6392B": "mic",
    "iso6392T": "mic",
    "iso6391": null
  },
  {
    "name": "Mandaic",
    "type": "living",
    "scope": "individual",
    "iso6393": "mid",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ocotepec Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mie",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mofu-Gudur",
    "type": "living",
    "scope": "individual",
    "iso6393": "mif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Miguel El Grande Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mig",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chayuco Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chigmecatitlán Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mii",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Abar",
    "type": "living",
    "scope": "individual",
    "iso6393": "mij",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mikasuki",
    "type": "living",
    "scope": "individual",
    "iso6393": "mik",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Peñoles Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mil",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alacatlatzala Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Minangkabau",
    "type": "living",
    "scope": "individual",
    "iso6393": "min",
    "iso6392B": "min",
    "iso6392T": "min",
    "iso6391": null
  },
  {
    "name": "Pinotepa Nacional Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mio",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Apasco-Apoala Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mip",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mískito",
    "type": "living",
    "scope": "individual",
    "iso6393": "miq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isthmus Mixe",
    "type": "living",
    "scope": "individual",
    "iso6393": "mir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uncoded languages",
    "type": "special",
    "scope": "special",
    "iso6393": "mis",
    "iso6392B": "mis",
    "iso6392T": "mis",
    "iso6391": null
  },
  {
    "name": "Southern Puebla Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mit",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cacaloxtepec Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "miu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akoye",
    "type": "living",
    "scope": "individual",
    "iso6393": "miw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mixtepec Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mix",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ayutla Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "miy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Coatzospan Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "miz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makalero",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Juan Colorado Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northwest Maidu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muskum",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mje",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mwera (Nyasa)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kim Mun",
    "type": "living",
    "scope": "individual",
    "iso6393": "mji",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mawak",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Matukar",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mandeali",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Medebur",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ma (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malankuravan",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malapandaram",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malaryan",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mjq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malavedan",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miship",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sauria Paharia",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manna-Dora",
    "type": "living",
    "scope": "individual",
    "iso6393": "mju",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mannan",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karbi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mahali",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mahican",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mjy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Majhi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mjz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbre",
    "type": "living",
    "scope": "individual",
    "iso6393": "mka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mal Paharia",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siliput",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Macedonian",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkd",
    "iso6392B": "mac",
    "iso6392T": "mkd",
    "iso6391": "mk"
  },
  {
    "name": "Mawchi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mke",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miya",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mak (China)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhatki",
    "type": "living",
    "scope": "individual",
    "iso6393": "mki",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mokilese",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Byep",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mokole",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moklen",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kupang Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mingang Doso",
    "type": "living",
    "scope": "individual",
    "iso6393": "mko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moikodi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bay Miwok",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mkq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malas",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Silacayoapan Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vamale",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Konyanka Maninka",
    "type": "living",
    "scope": "individual",
    "iso6393": "mku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mafea",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kituba (Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kinamiging Manobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "East Makian",
    "type": "living",
    "scope": "individual",
    "iso6393": "mky",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makasae",
    "type": "living",
    "scope": "individual",
    "iso6393": "mkz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mla",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbule",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cao Lan",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manambu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mle",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mal",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malagasy",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "mlg",
    "iso6392B": "mlg",
    "iso6392T": "mlg",
    "iso6391": "mg"
  },
  {
    "name": "Mape",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malimpung",
    "type": "living",
    "scope": "individual",
    "iso6393": "mli",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miltu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ilwana",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malua Bay",
    "type": "living",
    "scope": "individual",
    "iso6393": "mll",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mulam",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malango",
    "type": "living",
    "scope": "individual",
    "iso6393": "mln",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mlomp",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bargam",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Maninkakan",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vame",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Masalit",
    "type": "living",
    "scope": "individual",
    "iso6393": "mls",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maltese",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlt",
    "iso6392B": "mlt",
    "iso6392T": "mlt",
    "iso6391": "mt"
  },
  {
    "name": "To'abaita",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Motlav",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moloko",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malfaxal",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malaynon",
    "type": "living",
    "scope": "individual",
    "iso6393": "mlz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mama",
    "type": "living",
    "scope": "individual",
    "iso6393": "mma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Momina",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Michoacán Mazahua",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maonan",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mae",
    "type": "living",
    "scope": "individual",
    "iso6393": "mme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mundat",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Ambrym",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mehináku",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Musar",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Majhwar",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mukha-Dora",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Man Met",
    "type": "living",
    "scope": "individual",
    "iso6393": "mml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maii",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mamanwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mangga Buang",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siawi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Musak",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Xiangxi Miao",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malalamai",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mmaala",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miriti",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mmv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Emae",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Madak",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Migaama",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mabaale",
    "type": "living",
    "scope": "individual",
    "iso6393": "mmz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbula",
    "type": "living",
    "scope": "individual",
    "iso6393": "mna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muna",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manchu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnc",
    "iso6392B": "mnc",
    "iso6392T": "mnc",
    "iso6391": null
  },
  {
    "name": "Mondé",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Naba",
    "type": "living",
    "scope": "individual",
    "iso6393": "mne",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mundani",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Mnong",
    "type": "living",
    "scope": "individual",
    "iso6393": "mng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mono (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manipuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "mni",
    "iso6392B": "mni",
    "iso6392T": "mni",
    "iso6391": null
  },
  {
    "name": "Munji",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mandinka",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tiale",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mapena",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Mnong",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Min Bei Chinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Minriq",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mono (USA)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mansi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mns",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mer",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rennell-Bellona",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mon",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manikion",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manyawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "mny",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moni",
    "type": "living",
    "scope": "individual",
    "iso6393": "mnz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mwan",
    "type": "living",
    "scope": "individual",
    "iso6393": "moa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mocoví",
    "type": "living",
    "scope": "individual",
    "iso6393": "moc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mobilian",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mod",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Montagnais",
    "type": "living",
    "scope": "individual",
    "iso6393": "moe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mongondow",
    "type": "living",
    "scope": "individual",
    "iso6393": "mog",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mohawk",
    "type": "living",
    "scope": "individual",
    "iso6393": "moh",
    "iso6392B": "moh",
    "iso6392T": "moh",
    "iso6391": null
  },
  {
    "name": "Mboi",
    "type": "living",
    "scope": "individual",
    "iso6393": "moi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Monzombo",
    "type": "living",
    "scope": "individual",
    "iso6393": "moj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Morori",
    "type": "living",
    "scope": "individual",
    "iso6393": "mok",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mangue",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mom",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mongolian",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "mon",
    "iso6392B": "mon",
    "iso6392T": "mon",
    "iso6391": "mn"
  },
  {
    "name": "Monom",
    "type": "living",
    "scope": "individual",
    "iso6393": "moo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mopán Maya",
    "type": "living",
    "scope": "individual",
    "iso6393": "mop",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mor (Bomberai Peninsula)",
    "type": "living",
    "scope": "individual",
    "iso6393": "moq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moro",
    "type": "living",
    "scope": "individual",
    "iso6393": "mor",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mossi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mos",
    "iso6392B": "mos",
    "iso6392T": "mos",
    "iso6391": null
  },
  {
    "name": "Barí",
    "type": "living",
    "scope": "individual",
    "iso6393": "mot",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mogum",
    "type": "living",
    "scope": "individual",
    "iso6393": "mou",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mohave",
    "type": "living",
    "scope": "individual",
    "iso6393": "mov",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moi (Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mow",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Molima",
    "type": "living",
    "scope": "individual",
    "iso6393": "mox",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shekkacho",
    "type": "living",
    "scope": "individual",
    "iso6393": "moy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mukulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "moz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mpoto",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malak Malak",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mangarrayi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Machinere",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Majang",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marba",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maung",
    "type": "living",
    "scope": "individual",
    "iso6393": "mph",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mpade",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Martu Wangka",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbara (Chad)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Middle Watut",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yosondúa Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mindiri",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Migabac",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Matís",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vangunu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dadibi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mps",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mian",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makuráp",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mungkip",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mapidian",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Misima-Panaeati",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mapia",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mpi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mpz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maba (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbuko",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mangole",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Matepi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Momuna",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kota Bangun Kutai Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tlazoyaltepec Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mariri",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mamasa",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rajah Kabunsuwan Manobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbelime",
    "type": "living",
    "scope": "individual",
    "iso6393": "mql",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Marquesan",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moronene",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Modole",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manipa",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Minokok",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mander",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Makian",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mok",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mandari",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mosimo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Murupi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mamuju",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manggarai",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pano",
    "type": "living",
    "scope": "individual",
    "iso6393": "mqz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mlabri",
    "type": "living",
    "scope": "individual",
    "iso6393": "mra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marino",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maricopa",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Magar",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Martha's Vineyard Sign Language",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mre",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Elseng",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mising",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mara Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maori",
    "type": "living",
    "scope": "individual",
    "iso6393": "mri",
    "iso6392B": "mao",
    "iso6392T": "mri",
    "iso6391": "mi"
  },
  {
    "name": "Western Mari",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hmwaveke",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mortlockese",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Merlav",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cheke Holo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mru",
    "type": "living",
    "scope": "individual",
    "iso6393": "mro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Morouas",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Marquesan",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maria (India)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maragus",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marghi Central",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mono (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mangareva",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maranao",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maremgi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mandaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "mry",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marind",
    "type": "living",
    "scope": "individual",
    "iso6393": "mrz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malay (macrolanguage)",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "msa",
    "iso6392B": "may",
    "iso6392T": "msa",
    "iso6391": "ms"
  },
  {
    "name": "Masbatenyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "msb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sankaran Maninka",
    "type": "living",
    "scope": "individual",
    "iso6393": "msc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yucatec Maya Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "msd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Musey",
    "type": "living",
    "scope": "individual",
    "iso6393": "mse",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mekwei",
    "type": "living",
    "scope": "individual",
    "iso6393": "msf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moraid",
    "type": "living",
    "scope": "individual",
    "iso6393": "msg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Masikoro Malagasy",
    "type": "living",
    "scope": "individual",
    "iso6393": "msh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sabah Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "msi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ma (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "msj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mansaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "msk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Molof",
    "type": "living",
    "scope": "individual",
    "iso6393": "msl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Agusan Manobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "msm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vurës",
    "type": "living",
    "scope": "individual",
    "iso6393": "msn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mombum",
    "type": "living",
    "scope": "individual",
    "iso6393": "mso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maritsauá",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "msp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Caac",
    "type": "living",
    "scope": "individual",
    "iso6393": "msq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mongolian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "msr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Masela",
    "type": "living",
    "scope": "individual",
    "iso6393": "mss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Musom",
    "type": "living",
    "scope": "individual",
    "iso6393": "msu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maslam",
    "type": "living",
    "scope": "individual",
    "iso6393": "msv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mansoanka",
    "type": "living",
    "scope": "individual",
    "iso6393": "msw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moresada",
    "type": "living",
    "scope": "individual",
    "iso6393": "msx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aruamu",
    "type": "living",
    "scope": "individual",
    "iso6393": "msy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Momare",
    "type": "living",
    "scope": "individual",
    "iso6393": "msz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cotabato Manobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mta",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anyin Morofo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Munit",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mualang",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mono (Solomon Islands)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mte",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Murik (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Una",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Munggui",
    "type": "living",
    "scope": "individual",
    "iso6393": "mth",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maiwa (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mti",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moskona",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbe'",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Montol",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mator",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mtm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Matagalpa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mtn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Totontepec Mixe",
    "type": "living",
    "scope": "individual",
    "iso6393": "mto",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wichí Lhamtés Nocten",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muong",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mewari",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yora",
    "type": "living",
    "scope": "individual",
    "iso6393": "mts",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mota",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tututepec Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Asaro'o",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Binukidnon",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tidaá Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mtx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nabi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mty",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mundang",
    "type": "living",
    "scope": "individual",
    "iso6393": "mua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mubi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ajumbu",
    "type": "living",
    "scope": "individual",
    "iso6393": "muc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mednyj Aleut",
    "type": "living",
    "scope": "individual",
    "iso6393": "mud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Media Lengua",
    "type": "living",
    "scope": "individual",
    "iso6393": "mue",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Musgu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mündü",
    "type": "living",
    "scope": "individual",
    "iso6393": "muh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Musi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mabire",
    "type": "living",
    "scope": "individual",
    "iso6393": "muj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mugom",
    "type": "living",
    "scope": "individual",
    "iso6393": "muk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Multiple languages",
    "type": "special",
    "scope": "special",
    "iso6393": "mul",
    "iso6392B": "mul",
    "iso6392T": "mul",
    "iso6391": null
  },
  {
    "name": "Maiwala",
    "type": "living",
    "scope": "individual",
    "iso6393": "mum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyong",
    "type": "living",
    "scope": "individual",
    "iso6393": "muo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malvi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mup",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Xiangxi Miao",
    "type": "living",
    "scope": "individual",
    "iso6393": "muq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Murle",
    "type": "living",
    "scope": "individual",
    "iso6393": "mur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Creek",
    "type": "living",
    "scope": "individual",
    "iso6393": "mus",
    "iso6392B": "mus",
    "iso6392T": "mus",
    "iso6391": null
  },
  {
    "name": "Western Muria",
    "type": "living",
    "scope": "individual",
    "iso6393": "mut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaaku",
    "type": "living",
    "scope": "individual",
    "iso6393": "muu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muthuvan",
    "type": "living",
    "scope": "individual",
    "iso6393": "muv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bo-Ung",
    "type": "living",
    "scope": "individual",
    "iso6393": "mux",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muyang",
    "type": "living",
    "scope": "individual",
    "iso6393": "muy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mursi",
    "type": "living",
    "scope": "individual",
    "iso6393": "muz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manam",
    "type": "living",
    "scope": "individual",
    "iso6393": "mva",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mattole",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mvb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mamboru",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marwari (Pakistan)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mve",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Peripheral Mongolian",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yucuañe Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mulgi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miyako",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mekmek",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbara (Australia)",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mvl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muya",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Minaveha",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marovo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duri",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moere",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marau",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Massep",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mpotovoro",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marfa",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tagal Murut",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Machinga",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Meoswar",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Indus Kohistani",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mesqan",
    "type": "living",
    "scope": "individual",
    "iso6393": "mvz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mwatebu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Juwal",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Are",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mwera (Chimwera)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Murrinh-Patha",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aiklep",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mouk-Aria",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Labo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kita Maninkakan",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mirandese",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwl",
    "iso6392B": "mwl",
    "iso6392T": "mwl",
    "iso6391": null
  },
  {
    "name": "Sar",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyamwanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Maewo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kala Lagaw Ya",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mün Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marwari",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "mwr",
    "iso6392B": "mwr",
    "iso6392T": "mwr",
    "iso6391": null
  },
  {
    "name": "Mwimbi-Muthambi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mws",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moken",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mittu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mwu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mentawai",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hmong Daw",
    "type": "living",
    "scope": "individual",
    "iso6393": "mww",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moingi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mwz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northwest Oaxaca Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tezoatlán Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manyika",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Modang",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mele-Fila",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malgbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbangala",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mvuba",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mozarabic",
    "type": "historical",
    "scope": "individual",
    "iso6393": "mxi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miju-Mishmi",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Monumbo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maxi Gbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Meramera",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moi (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbowe",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tlahuitoltepec Mixe",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Juquila Mixe",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Murik (Malaysia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huitepec Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jamiltepec Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mada (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Metlatónoc Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Namo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mahou",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southeastern Nochixtlán Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Masela",
    "type": "living",
    "scope": "individual",
    "iso6393": "mxz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Burmese",
    "type": "living",
    "scope": "individual",
    "iso6393": "mya",
    "iso6392B": "bur",
    "iso6392T": "mya",
    "iso6391": "my"
  },
  {
    "name": "Mbay",
    "type": "living",
    "scope": "individual",
    "iso6393": "myb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mayeka",
    "type": "living",
    "scope": "individual",
    "iso6393": "myc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Myene",
    "type": "living",
    "scope": "individual",
    "iso6393": "mye",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bambassi",
    "type": "living",
    "scope": "individual",
    "iso6393": "myf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manta",
    "type": "living",
    "scope": "individual",
    "iso6393": "myg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makah",
    "type": "living",
    "scope": "individual",
    "iso6393": "myh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mangayat",
    "type": "living",
    "scope": "individual",
    "iso6393": "myj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mamara Senoufo",
    "type": "living",
    "scope": "individual",
    "iso6393": "myk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moma",
    "type": "living",
    "scope": "individual",
    "iso6393": "myl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Me'en",
    "type": "living",
    "scope": "individual",
    "iso6393": "mym",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anfillo",
    "type": "living",
    "scope": "individual",
    "iso6393": "myo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pirahã",
    "type": "living",
    "scope": "individual",
    "iso6393": "myp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muniche",
    "type": "living",
    "scope": "individual",
    "iso6393": "myr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mesmes",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mys",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mundurukú",
    "type": "living",
    "scope": "individual",
    "iso6393": "myu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Erzya",
    "type": "living",
    "scope": "individual",
    "iso6393": "myv",
    "iso6392B": "myv",
    "iso6392T": "myv",
    "iso6391": null
  },
  {
    "name": "Muyuw",
    "type": "living",
    "scope": "individual",
    "iso6393": "myw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Masaaba",
    "type": "living",
    "scope": "individual",
    "iso6393": "myx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Macuna",
    "type": "living",
    "scope": "individual",
    "iso6393": "myy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Classical Mandaic",
    "type": "historical",
    "scope": "individual",
    "iso6393": "myz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Santa María Zacatepec Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mza",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tumzabt",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Madagascar Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malimba",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Morawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "mze",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Monastic Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wichí Lhamtés Güisnay",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ixcatlán Mazatec",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manya",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nigeria Mambila",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mazatlán Mixe",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mumuye",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mazanderani",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Matipuhy",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "mzo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Movima",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mori Atas",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marúbo",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Macanese",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mintil",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Inapang",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manza",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Deg",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mawayana",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mozambican Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maiadomu",
    "type": "living",
    "scope": "individual",
    "iso6393": "mzz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Namla",
    "type": "living",
    "scope": "individual",
    "iso6393": "naa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Nambikuára",
    "type": "living",
    "scope": "individual",
    "iso6393": "nab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Narak",
    "type": "living",
    "scope": "individual",
    "iso6393": "nac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Naka'ela",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nabak",
    "type": "living",
    "scope": "individual",
    "iso6393": "naf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Naga Pidgin",
    "type": "living",
    "scope": "individual",
    "iso6393": "nag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nalu",
    "type": "living",
    "scope": "individual",
    "iso6393": "naj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nakanai",
    "type": "living",
    "scope": "individual",
    "iso6393": "nak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nalik",
    "type": "living",
    "scope": "individual",
    "iso6393": "nal",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngan'gityemerri",
    "type": "living",
    "scope": "individual",
    "iso6393": "nam",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Min Nan Chinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "nan",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Naaba",
    "type": "living",
    "scope": "individual",
    "iso6393": "nao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Neapolitan",
    "type": "living",
    "scope": "individual",
    "iso6393": "nap",
    "iso6392B": "nap",
    "iso6392T": "nap",
    "iso6391": null
  },
  {
    "name": "Khoekhoe",
    "type": "living",
    "scope": "individual",
    "iso6393": "naq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iguta",
    "type": "living",
    "scope": "individual",
    "iso6393": "nar",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Naasioi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nas",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ca̱hungwa̱rya̱",
    "type": "living",
    "scope": "individual",
    "iso6393": "nat",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nauru",
    "type": "living",
    "scope": "individual",
    "iso6393": "nau",
    "iso6392B": "nau",
    "iso6392T": "nau",
    "iso6391": "na"
  },
  {
    "name": "Navajo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nav",
    "iso6392B": "nav",
    "iso6392T": "nav",
    "iso6391": "nv"
  },
  {
    "name": "Nawuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "naw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nakwi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngarrindjeri",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nay",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Coatepec Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "naz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyemba",
    "type": "living",
    "scope": "individual",
    "iso6393": "nba",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndoe",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chang Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngbinda",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Konyak Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nagarchal",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngamo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mao Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngarinyman",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nake",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Ndebele",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbl",
    "iso6392B": "nbl",
    "iso6392T": "nbl",
    "iso6391": "nr"
  },
  {
    "name": "Ngbaka Ma'bo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nkukoli",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nnam",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nggem",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Numana",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Namibian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Na",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rongmei Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngamambo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Ngbandi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nbw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ningera",
    "type": "living",
    "scope": "individual",
    "iso6393": "nby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nca",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Nicobarese",
    "type": "living",
    "scope": "individual",
    "iso6393": "ncb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ponam",
    "type": "living",
    "scope": "individual",
    "iso6393": "ncc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nachering",
    "type": "living",
    "scope": "individual",
    "iso6393": "ncd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yale",
    "type": "living",
    "scope": "individual",
    "iso6393": "nce",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Notsi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ncf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nisga'a",
    "type": "living",
    "scope": "individual",
    "iso6393": "ncg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Huasteca Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nch",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Classical Nahuatl",
    "type": "historical",
    "scope": "individual",
    "iso6393": "nci",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Puebla Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "ncj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Na-kara",
    "type": "living",
    "scope": "individual",
    "iso6393": "nck",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Michoacán Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "ncl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nambo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ncm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nauna",
    "type": "living",
    "scope": "individual",
    "iso6393": "ncn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sibe",
    "type": "living",
    "scope": "individual",
    "iso6393": "nco",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Katang",
    "type": "living",
    "scope": "individual",
    "iso6393": "ncq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ncane",
    "type": "living",
    "scope": "individual",
    "iso6393": "ncr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nicaraguan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "ncs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chothe Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nct",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chumburung",
    "type": "living",
    "scope": "individual",
    "iso6393": "ncu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Puebla Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "ncx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Natchez",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ncz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndasa",
    "type": "living",
    "scope": "individual",
    "iso6393": "nda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kenswei Nsei",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndau",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nde-Nsele-Nta",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Ndebele",
    "type": "living",
    "scope": "individual",
    "iso6393": "nde",
    "iso6392B": "nde",
    "iso6392T": "nde",
    "iso6391": "nd"
  },
  {
    "name": "Nadruvian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "ndf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndengereko",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndali",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samba Leko",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndamba",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndolo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndam",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngundi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndonga",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndo",
    "iso6392B": "ndo",
    "iso6392T": "ndo",
    "iso6391": "ng"
  },
  {
    "name": "Ndo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndombe",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndoola",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Low German",
    "type": "living",
    "scope": "individual",
    "iso6393": "nds",
    "iso6392B": "nds",
    "iso6392T": "nds",
    "iso6391": null
  },
  {
    "name": "Ndunga",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dugun",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndut",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nduga",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lutos",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndogo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ndz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Ngad'a",
    "type": "living",
    "scope": "individual",
    "iso6393": "nea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toura (Côte d'Ivoire)",
    "type": "living",
    "scope": "individual",
    "iso6393": "neb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nedebang",
    "type": "living",
    "scope": "individual",
    "iso6393": "nec",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nde-Gbite",
    "type": "living",
    "scope": "individual",
    "iso6393": "ned",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nêlêmwa-Nixumwak",
    "type": "living",
    "scope": "individual",
    "iso6393": "nee",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nefamese",
    "type": "living",
    "scope": "individual",
    "iso6393": "nef",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Negidal",
    "type": "living",
    "scope": "individual",
    "iso6393": "neg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyenkha",
    "type": "living",
    "scope": "individual",
    "iso6393": "neh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Neo-Hittite",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "nei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Neko",
    "type": "living",
    "scope": "individual",
    "iso6393": "nej",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Neku",
    "type": "living",
    "scope": "individual",
    "iso6393": "nek",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nemi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nem",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nengone",
    "type": "living",
    "scope": "individual",
    "iso6393": "nen",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ná-Meo",
    "type": "living",
    "scope": "individual",
    "iso6393": "neo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nepali (macrolanguage)",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "nep",
    "iso6392B": "nep",
    "iso6392T": "nep",
    "iso6391": "ne"
  },
  {
    "name": "North Central Mixe",
    "type": "living",
    "scope": "individual",
    "iso6393": "neq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yahadian",
    "type": "living",
    "scope": "individual",
    "iso6393": "ner",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bhoti Kinnauri",
    "type": "living",
    "scope": "individual",
    "iso6393": "nes",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nete",
    "type": "living",
    "scope": "individual",
    "iso6393": "net",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Neo",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "neu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyaheun",
    "type": "living",
    "scope": "individual",
    "iso6393": "nev",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Newari",
    "type": "living",
    "scope": "individual",
    "iso6393": "new",
    "iso6392B": "new",
    "iso6392T": "new",
    "iso6391": null
  },
  {
    "name": "Neme",
    "type": "living",
    "scope": "individual",
    "iso6393": "nex",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Neyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ney",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nez Perce",
    "type": "living",
    "scope": "individual",
    "iso6393": "nez",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dhao",
    "type": "living",
    "scope": "individual",
    "iso6393": "nfa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ahwai",
    "type": "living",
    "scope": "individual",
    "iso6393": "nfd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ayiwo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nfl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nafaanra",
    "type": "living",
    "scope": "individual",
    "iso6393": "nfr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mfumte",
    "type": "living",
    "scope": "individual",
    "iso6393": "nfu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngbaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "nga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Ngbandi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngombe (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngando (Central African Republic)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngemba",
    "type": "living",
    "scope": "individual",
    "iso6393": "nge",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngbaka Manza",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nǁng",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngizim",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngie",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dalabon",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lomwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngatik Men's Creole",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngwo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngoni",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngurimi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Engdewu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gvoko",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kriang",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guerrero Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nagumi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ngv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngwaba",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nggwahyi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tibea",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngungwel",
    "type": "living",
    "scope": "individual",
    "iso6393": "ngz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nhanda",
    "type": "living",
    "scope": "individual",
    "iso6393": "nha",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Beng",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tabasco Nahuatl",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nhc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chiripá",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Huasteca Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nhuwala",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tetelcingo Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nahari",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zacatlán-Ahuacatlán-Tepetzintla Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isthmus-Cosoleacaque Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Morelos Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Takuu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nho",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isthmus-Pajapan Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huaxcaleca Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Naro",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ometepec Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nht",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Noone",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Temascaltepec Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Huasteca Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isthmus-Mecayapan Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Oaxaca Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Santa María La Alta Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nhz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nias",
    "type": "living",
    "scope": "individual",
    "iso6393": "nia",
    "iso6392B": "nia",
    "iso6392T": "nia",
    "iso6391": null
  },
  {
    "name": "Nakame",
    "type": "living",
    "scope": "individual",
    "iso6393": "nib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngandi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nid",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Niellim",
    "type": "living",
    "scope": "individual",
    "iso6393": "nie",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nek",
    "type": "living",
    "scope": "individual",
    "iso6393": "nif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngalakgan",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nig",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyiha (Tanzania)",
    "type": "living",
    "scope": "individual",
    "iso6393": "nih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nii",
    "type": "living",
    "scope": "individual",
    "iso6393": "nii",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngaju",
    "type": "living",
    "scope": "individual",
    "iso6393": "nij",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Nicobarese",
    "type": "living",
    "scope": "individual",
    "iso6393": "nik",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nila",
    "type": "living",
    "scope": "individual",
    "iso6393": "nil",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nilamba",
    "type": "living",
    "scope": "individual",
    "iso6393": "nim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ninzo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nin",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nganasan",
    "type": "living",
    "scope": "individual",
    "iso6393": "nio",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nandi",
    "type": "living",
    "scope": "individual",
    "iso6393": "niq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nimboran",
    "type": "living",
    "scope": "individual",
    "iso6393": "nir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nimi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nis",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southeastern Kolami",
    "type": "living",
    "scope": "individual",
    "iso6393": "nit",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Niuean",
    "type": "living",
    "scope": "individual",
    "iso6393": "niu",
    "iso6392B": "niu",
    "iso6392T": "niu",
    "iso6391": null
  },
  {
    "name": "Gilyak",
    "type": "living",
    "scope": "individual",
    "iso6393": "niv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nimo",
    "type": "living",
    "scope": "individual",
    "iso6393": "niw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hema",
    "type": "living",
    "scope": "individual",
    "iso6393": "nix",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngiti",
    "type": "living",
    "scope": "individual",
    "iso6393": "niy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ningil",
    "type": "living",
    "scope": "individual",
    "iso6393": "niz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nzanyi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nja",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nocte Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "njb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndonde Hamba",
    "type": "living",
    "scope": "individual",
    "iso6393": "njd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lotha Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "njh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gudanji",
    "type": "living",
    "scope": "individual",
    "iso6393": "nji",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Njen",
    "type": "living",
    "scope": "individual",
    "iso6393": "njj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Njalgulgule",
    "type": "living",
    "scope": "individual",
    "iso6393": "njl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Angami Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "njm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Liangmai Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "njn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ao Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "njo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Njerep",
    "type": "living",
    "scope": "individual",
    "iso6393": "njr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nisa",
    "type": "living",
    "scope": "individual",
    "iso6393": "njs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndyuka-Trio Pidgin",
    "type": "living",
    "scope": "individual",
    "iso6393": "njt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngadjunmaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "nju",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kunyi",
    "type": "living",
    "scope": "individual",
    "iso6393": "njx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Njyem",
    "type": "living",
    "scope": "individual",
    "iso6393": "njy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyishi",
    "type": "living",
    "scope": "individual",
    "iso6393": "njz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nkoya",
    "type": "living",
    "scope": "individual",
    "iso6393": "nka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khoibu Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nkongho",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koireng",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duke",
    "type": "living",
    "scope": "individual",
    "iso6393": "nke",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Inpui Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nekgini",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khezha Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thangal Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nki",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nakai",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nokuku",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Namat",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nkangala",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nkonya",
    "type": "living",
    "scope": "individual",
    "iso6393": "nko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Niuatoputapu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nkp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nkami",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nukuoro",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Asmat",
    "type": "living",
    "scope": "individual",
    "iso6393": "nks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyika (Tanzania)",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bouna Kulango",
    "type": "living",
    "scope": "individual",
    "iso6393": "nku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyika (Malawi and Zambia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nkutu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nkoroo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nkari",
    "type": "living",
    "scope": "individual",
    "iso6393": "nkz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngombale",
    "type": "living",
    "scope": "individual",
    "iso6393": "nla",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nalca",
    "type": "living",
    "scope": "individual",
    "iso6393": "nlc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dutch",
    "type": "living",
    "scope": "individual",
    "iso6393": "nld",
    "iso6392B": "dut",
    "iso6392T": "nld",
    "iso6391": "nl"
  },
  {
    "name": "East Nyala",
    "type": "living",
    "scope": "individual",
    "iso6393": "nle",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gela",
    "type": "living",
    "scope": "individual",
    "iso6393": "nlg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Grangali",
    "type": "living",
    "scope": "individual",
    "iso6393": "nli",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyali",
    "type": "living",
    "scope": "individual",
    "iso6393": "nlj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ninia Yali",
    "type": "living",
    "scope": "individual",
    "iso6393": "nlk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nihali",
    "type": "living",
    "scope": "individual",
    "iso6393": "nll",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mankiyali",
    "type": "living",
    "scope": "individual",
    "iso6393": "nlm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngul",
    "type": "living",
    "scope": "individual",
    "iso6393": "nlo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lao Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nlq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nchumbulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nlu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Orizaba Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nlv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Walangama",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nlw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nahali",
    "type": "living",
    "scope": "individual",
    "iso6393": "nlx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyamal",
    "type": "living",
    "scope": "individual",
    "iso6393": "nly",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nalögo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nlz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maram Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Big Nambas",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngam",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndumu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mzieme Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tangkhul Naga (India)",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwasio",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Monsang Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyam",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngombe (Central African Republic)",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Namakura",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndemli",
    "type": "living",
    "scope": "individual",
    "iso6393": "nml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manangba",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "ǃXóõ",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moyon Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nimanbur",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nmp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nambya",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nimbari",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nmr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Letemboi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Namonuito",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northeast Maidu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngamini",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nmv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nimoa",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nama (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Namuyi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nawdm",
    "type": "living",
    "scope": "individual",
    "iso6393": "nmz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyangumarta",
    "type": "living",
    "scope": "individual",
    "iso6393": "nna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nande",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nancere",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Ambae",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngandyera",
    "type": "living",
    "scope": "individual",
    "iso6393": "nne",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngaing",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maring Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngiemboon",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Nuaulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyangatom",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nankina",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Rengma Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Namia",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngete",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Norwegian Nynorsk",
    "type": "living",
    "scope": "individual",
    "iso6393": "nno",
    "iso6392B": "nno",
    "iso6392T": "nno",
    "iso6391": "nn"
  },
  {
    "name": "Wancho Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngindo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Narungga",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nnr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nanticoke",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nnt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dwang",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nugunu (Australia)",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nnv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Nuni",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyangga",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nny",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nda'nda'",
    "type": "living",
    "scope": "individual",
    "iso6393": "nnz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Woun Meu",
    "type": "living",
    "scope": "individual",
    "iso6393": "noa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Norwegian Bokmål",
    "type": "living",
    "scope": "individual",
    "iso6393": "nob",
    "iso6392B": "nob",
    "iso6392T": "nob",
    "iso6391": "nb"
  },
  {
    "name": "Nuk",
    "type": "living",
    "scope": "individual",
    "iso6393": "noc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Thai",
    "type": "living",
    "scope": "individual",
    "iso6393": "nod",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nimadi",
    "type": "living",
    "scope": "individual",
    "iso6393": "noe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nomane",
    "type": "living",
    "scope": "individual",
    "iso6393": "nof",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nogai",
    "type": "living",
    "scope": "individual",
    "iso6393": "nog",
    "iso6392B": "nog",
    "iso6392T": "nog",
    "iso6391": null
  },
  {
    "name": "Nomu",
    "type": "living",
    "scope": "individual",
    "iso6393": "noh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Noiri",
    "type": "living",
    "scope": "individual",
    "iso6393": "noi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nonuya",
    "type": "living",
    "scope": "individual",
    "iso6393": "noj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nooksack",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nok",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nomlaki",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nol",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nocamán",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nom",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Norse",
    "type": "historical",
    "scope": "individual",
    "iso6393": "non",
    "iso6392B": "non",
    "iso6392T": "non",
    "iso6391": null
  },
  {
    "name": "Numanggang",
    "type": "living",
    "scope": "individual",
    "iso6393": "nop",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngongo",
    "type": "living",
    "scope": "individual",
    "iso6393": "noq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Norwegian",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "nor",
    "iso6392B": "nor",
    "iso6392T": "nor",
    "iso6391": "no"
  },
  {
    "name": "Eastern Nisu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nos",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nomatsiguenga",
    "type": "living",
    "scope": "individual",
    "iso6393": "not",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ewage-Notu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nou",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Novial",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "nov",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyambo",
    "type": "living",
    "scope": "individual",
    "iso6393": "now",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Noy",
    "type": "living",
    "scope": "individual",
    "iso6393": "noy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nayi",
    "type": "living",
    "scope": "individual",
    "iso6393": "noz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nar Phu",
    "type": "living",
    "scope": "individual",
    "iso6393": "npa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nupbikha",
    "type": "living",
    "scope": "individual",
    "iso6393": "npb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ponyo-Gongwang Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "npg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phom Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nph",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nepali (individual language)",
    "type": "living",
    "scope": "individual",
    "iso6393": "npi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southeastern Puebla Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "npl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mondropolon",
    "type": "living",
    "scope": "individual",
    "iso6393": "npn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pochuri Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "npo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nipsan",
    "type": "living",
    "scope": "individual",
    "iso6393": "nps",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puimei Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "npu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Noipx",
    "type": "living",
    "scope": "individual",
    "iso6393": "npx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Napu",
    "type": "living",
    "scope": "individual",
    "iso6393": "npy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Nago",
    "type": "living",
    "scope": "individual",
    "iso6393": "nqg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kura Ede Nago",
    "type": "living",
    "scope": "individual",
    "iso6393": "nqk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngendelengo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nql",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndom",
    "type": "living",
    "scope": "individual",
    "iso6393": "nqm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nen",
    "type": "living",
    "scope": "individual",
    "iso6393": "nqn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "N'Ko",
    "type": "living",
    "scope": "individual",
    "iso6393": "nqo",
    "iso6392B": "nqo",
    "iso6392T": "nqo",
    "iso6391": null
  },
  {
    "name": "Kyan-Karyaw Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nqq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akyaung Ari Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nqy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngom",
    "type": "living",
    "scope": "individual",
    "iso6393": "nra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nara",
    "type": "living",
    "scope": "individual",
    "iso6393": "nrb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Noric",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "nrc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Rengma Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nre",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jèrriais",
    "type": "living",
    "scope": "individual",
    "iso6393": "nrf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Narango",
    "type": "living",
    "scope": "individual",
    "iso6393": "nrg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chokri Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngarla",
    "type": "living",
    "scope": "individual",
    "iso6393": "nrk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngarluma",
    "type": "living",
    "scope": "individual",
    "iso6393": "nrl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Narom",
    "type": "living",
    "scope": "individual",
    "iso6393": "nrm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Norn",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nrn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Picene",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "nrp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Norra",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nrr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Kalapuya",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nrt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Narua",
    "type": "living",
    "scope": "individual",
    "iso6393": "nru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngurmbur",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nrx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lala",
    "type": "living",
    "scope": "individual",
    "iso6393": "nrz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sangtam Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nshi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Nisu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nsenga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nse",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northwestern Nisu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngasa",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngoshie",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nigerian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Naskapi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Norwegian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sumi Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nehan",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pedi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nso",
    "iso6392B": "nso",
    "iso6392T": "nso",
    "iso6391": null
  },
  {
    "name": "Nepalese Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Sierra Miwok",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maritime Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nali",
    "type": "living",
    "scope": "individual",
    "iso6393": "nss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tase Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nst",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sierra Negra Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southwestern Nisu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Navut",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nsongo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nasal",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nisenan",
    "type": "living",
    "scope": "individual",
    "iso6393": "nsz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Tidung",
    "type": "living",
    "scope": "individual",
    "iso6393": "ntd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nathembo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nte",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngantangarra",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ntg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Natioro",
    "type": "living",
    "scope": "individual",
    "iso6393": "nti",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngaanyatjarra",
    "type": "living",
    "scope": "individual",
    "iso6393": "ntj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ikoma-Nata-Isenye",
    "type": "living",
    "scope": "individual",
    "iso6393": "ntk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nateni",
    "type": "living",
    "scope": "individual",
    "iso6393": "ntm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ntomba",
    "type": "living",
    "scope": "individual",
    "iso6393": "nto",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Tepehuan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ntp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Delo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ntr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Natügu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ntu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nottoway",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ntw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tangkhul Naga (Myanmar)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ntx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mantsi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nty",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Natanzi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ntz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yuanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nukuini",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nuc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngala",
    "type": "living",
    "scope": "individual",
    "iso6393": "nud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngundu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nue",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nusu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nuf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nungali",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndunda",
    "type": "living",
    "scope": "individual",
    "iso6393": "nuh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngumbi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyole",
    "type": "living",
    "scope": "individual",
    "iso6393": "nuj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nuu-chah-nulth",
    "type": "living",
    "scope": "individual",
    "iso6393": "nuk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nusa Laut",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nul",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Niuafo'ou",
    "type": "living",
    "scope": "individual",
    "iso6393": "num",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anong",
    "type": "living",
    "scope": "individual",
    "iso6393": "nun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nguôn",
    "type": "living",
    "scope": "individual",
    "iso6393": "nuo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nupe-Nupe-Tako",
    "type": "living",
    "scope": "individual",
    "iso6393": "nup",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nukumanu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nuq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nukuria",
    "type": "living",
    "scope": "individual",
    "iso6393": "nur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nuer",
    "type": "living",
    "scope": "individual",
    "iso6393": "nus",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nung (Viet Nam)",
    "type": "living",
    "scope": "individual",
    "iso6393": "nut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngbundu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nuu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Nuni",
    "type": "living",
    "scope": "individual",
    "iso6393": "nuv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nguluwan",
    "type": "living",
    "scope": "individual",
    "iso6393": "nuw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mehek",
    "type": "living",
    "scope": "individual",
    "iso6393": "nux",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nunggubuyu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nuy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tlamacazapa Nahuatl",
    "type": "living",
    "scope": "individual",
    "iso6393": "nuz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nasarian",
    "type": "living",
    "scope": "individual",
    "iso6393": "nvh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Namiae",
    "type": "living",
    "scope": "individual",
    "iso6393": "nvm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyokon",
    "type": "living",
    "scope": "individual",
    "iso6393": "nvo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nawathinehena",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyabwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "nwb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Classical Newari",
    "type": "historical",
    "scope": "individual",
    "iso6393": "nwc",
    "iso6392B": "nwc",
    "iso6392T": "nwc",
    "iso6391": null
  },
  {
    "name": "Ngwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "nwe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngayawung",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nwg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southwest Tanna",
    "type": "living",
    "scope": "individual",
    "iso6393": "nwi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyamusa-Molo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nwm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nauo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nwo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nawaru",
    "type": "living",
    "scope": "individual",
    "iso6393": "nwr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Middle Newar",
    "type": "historical",
    "scope": "individual",
    "iso6393": "nwx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nottoway-Meherrin",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nwy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nauete",
    "type": "living",
    "scope": "individual",
    "iso6393": "nxa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngando (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "nxd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nage",
    "type": "living",
    "scope": "individual",
    "iso6393": "nxe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngad'a",
    "type": "living",
    "scope": "individual",
    "iso6393": "nxg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nindi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nxi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koki Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nxk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Nuaulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nxl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Numidian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "nxm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngawun",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nxn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndambomo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nxo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Naxi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nxq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ninggerum",
    "type": "living",
    "scope": "individual",
    "iso6393": "nxr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Narau",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nxu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nafri",
    "type": "living",
    "scope": "individual",
    "iso6393": "nxx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyanja",
    "type": "living",
    "scope": "individual",
    "iso6393": "nya",
    "iso6392B": "nya",
    "iso6392T": "nya",
    "iso6391": "ny"
  },
  {
    "name": "Nyangbo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyanga-li",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyore",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyengo",
    "type": "living",
    "scope": "individual",
    "iso6393": "nye",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Giryama",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyindu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyikina",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ama (Sudan)",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyaneka",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyeu",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyamwezi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nym",
    "iso6392B": "nym",
    "iso6392T": "nym",
    "iso6391": null
  },
  {
    "name": "Nyankole",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyn",
    "iso6392B": "nyn",
    "iso6392T": "nyn",
    "iso6391": null
  },
  {
    "name": "Nyoro",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyo",
    "iso6392B": "nyo",
    "iso6392T": "nyo",
    "iso6391": null
  },
  {
    "name": "Nyang'i",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nyp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nayini",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyiha (Malawi)",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyungar",
    "type": "living",
    "scope": "individual",
    "iso6393": "nys",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyawaygi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nyt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyungwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyulnyul",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nyv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyaw",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nganyaywana",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "nyx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyakyusa-Ngonde",
    "type": "living",
    "scope": "individual",
    "iso6393": "nyy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tigon Mbembe",
    "type": "living",
    "scope": "individual",
    "iso6393": "nza",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Njebi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nzb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nzadi",
    "type": "living",
    "scope": "individual",
    "iso6393": "nzd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nzima",
    "type": "living",
    "scope": "individual",
    "iso6393": "nzi",
    "iso6392B": "nzi",
    "iso6392T": "nzi",
    "iso6391": null
  },
  {
    "name": "Nzakara",
    "type": "living",
    "scope": "individual",
    "iso6393": "nzk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zeme Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "nzm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "New Zealand Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "nzs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teke-Nzikou",
    "type": "living",
    "scope": "individual",
    "iso6393": "nzu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nzakambay",
    "type": "living",
    "scope": "individual",
    "iso6393": "nzy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nanga Dama Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "nzz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Orok",
    "type": "living",
    "scope": "individual",
    "iso6393": "oaa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oroch",
    "type": "living",
    "scope": "individual",
    "iso6393": "oac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Aramaic (up to 700 BCE)",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "oar",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Avar",
    "type": "historical",
    "scope": "individual",
    "iso6393": "oav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Obispeño",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "obi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Bontok",
    "type": "living",
    "scope": "individual",
    "iso6393": "obk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oblo",
    "type": "living",
    "scope": "individual",
    "iso6393": "obl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moabite",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "obm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Obo Manobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "obo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Burmese",
    "type": "historical",
    "scope": "individual",
    "iso6393": "obr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Breton",
    "type": "historical",
    "scope": "individual",
    "iso6393": "obt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Obulom",
    "type": "living",
    "scope": "individual",
    "iso6393": "obu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ocaina",
    "type": "living",
    "scope": "individual",
    "iso6393": "oca",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Chinese",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "och",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Occitan (post 1500)",
    "type": "living",
    "scope": "individual",
    "iso6393": "oci",
    "iso6392B": "oci",
    "iso6392T": "oci",
    "iso6391": "oc"
  },
  {
    "name": "Old Cornish",
    "type": "historical",
    "scope": "individual",
    "iso6393": "oco",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Atzingo Matlatzinca",
    "type": "living",
    "scope": "individual",
    "iso6393": "ocu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Odut",
    "type": "living",
    "scope": "individual",
    "iso6393": "oda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Od",
    "type": "living",
    "scope": "individual",
    "iso6393": "odk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Dutch",
    "type": "historical",
    "scope": "individual",
    "iso6393": "odt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Odual",
    "type": "living",
    "scope": "individual",
    "iso6393": "odu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ofo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ofo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Frisian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "ofs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Efutop",
    "type": "living",
    "scope": "individual",
    "iso6393": "ofu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ogbia",
    "type": "living",
    "scope": "individual",
    "iso6393": "ogb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ogbah",
    "type": "living",
    "scope": "individual",
    "iso6393": "ogc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Georgian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "oge",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ogbogolo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ogg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khana",
    "type": "living",
    "scope": "individual",
    "iso6393": "ogo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ogbronuagum",
    "type": "living",
    "scope": "individual",
    "iso6393": "ogu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Hittite",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "oht",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Hungarian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "ohu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oirata",
    "type": "living",
    "scope": "individual",
    "iso6393": "oia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Inebu One",
    "type": "living",
    "scope": "individual",
    "iso6393": "oin",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northwestern Ojibwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ojb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Ojibwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ojc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Ojibwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ojg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ojibwa",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "oji",
    "iso6392B": "oji",
    "iso6392T": "oji",
    "iso6391": "oj"
  },
  {
    "name": "Old Japanese",
    "type": "historical",
    "scope": "individual",
    "iso6393": "ojp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Severn Ojibwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ojs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ontong Java",
    "type": "living",
    "scope": "individual",
    "iso6393": "ojv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Ojibwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ojw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Okanagan",
    "type": "living",
    "scope": "individual",
    "iso6393": "oka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Okobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "okb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Okodia",
    "type": "living",
    "scope": "individual",
    "iso6393": "okd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Okpe (Southwestern Edo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "oke",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koko Babangk",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "okg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koresh-e Rostam",
    "type": "living",
    "scope": "individual",
    "iso6393": "okh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Okiek",
    "type": "living",
    "scope": "individual",
    "iso6393": "oki",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oko-Juwoi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "okj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwamtim One",
    "type": "living",
    "scope": "individual",
    "iso6393": "okk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Kentish Sign Language",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "okl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Middle Korean (10th-16th cent.)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "okm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oki-No-Erabu",
    "type": "living",
    "scope": "individual",
    "iso6393": "okn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Korean (3rd-9th cent.)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "oko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kirike",
    "type": "living",
    "scope": "individual",
    "iso6393": "okr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oko-Eni-Osayen",
    "type": "living",
    "scope": "individual",
    "iso6393": "oks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oku",
    "type": "living",
    "scope": "individual",
    "iso6393": "oku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Orokaiva",
    "type": "living",
    "scope": "individual",
    "iso6393": "okv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Okpe (Northwestern Edo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "okx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Walungge",
    "type": "living",
    "scope": "individual",
    "iso6393": "ola",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mochi",
    "type": "living",
    "scope": "individual",
    "iso6393": "old",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Olekha",
    "type": "living",
    "scope": "individual",
    "iso6393": "ole",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Olkol",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "olk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oloma",
    "type": "living",
    "scope": "individual",
    "iso6393": "olm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Livvi",
    "type": "living",
    "scope": "individual",
    "iso6393": "olo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Olrat",
    "type": "living",
    "scope": "individual",
    "iso6393": "olr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Lithuanian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "olt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuvale",
    "type": "living",
    "scope": "individual",
    "iso6393": "olu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Omaha-Ponca",
    "type": "living",
    "scope": "individual",
    "iso6393": "oma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "East Ambae",
    "type": "living",
    "scope": "individual",
    "iso6393": "omb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mochica",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "omc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Omagua",
    "type": "living",
    "scope": "individual",
    "iso6393": "omg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Omi",
    "type": "living",
    "scope": "individual",
    "iso6393": "omi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Omok",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "omk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ombo",
    "type": "living",
    "scope": "individual",
    "iso6393": "oml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Minoan",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "omn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Utarmbung",
    "type": "living",
    "scope": "individual",
    "iso6393": "omo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Manipuri",
    "type": "historical",
    "scope": "individual",
    "iso6393": "omp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Marathi",
    "type": "historical",
    "scope": "individual",
    "iso6393": "omr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Omotik",
    "type": "living",
    "scope": "individual",
    "iso6393": "omt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Omurano",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "omu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Tairora",
    "type": "living",
    "scope": "individual",
    "iso6393": "omw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Mon",
    "type": "historical",
    "scope": "individual",
    "iso6393": "omx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ona",
    "type": "living",
    "scope": "individual",
    "iso6393": "ona",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lingao",
    "type": "living",
    "scope": "individual",
    "iso6393": "onb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oneida",
    "type": "living",
    "scope": "individual",
    "iso6393": "one",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Olo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ong",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Onin",
    "type": "living",
    "scope": "individual",
    "iso6393": "oni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Onjob",
    "type": "living",
    "scope": "individual",
    "iso6393": "onj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kabore One",
    "type": "living",
    "scope": "individual",
    "iso6393": "onk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Onobasulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "onn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Onondaga",
    "type": "living",
    "scope": "individual",
    "iso6393": "ono",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sartang",
    "type": "living",
    "scope": "individual",
    "iso6393": "onp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern One",
    "type": "living",
    "scope": "individual",
    "iso6393": "onr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ono",
    "type": "living",
    "scope": "individual",
    "iso6393": "ons",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ontenu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ont",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Unua",
    "type": "living",
    "scope": "individual",
    "iso6393": "onu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Nubian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "onw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Onin Based Pidgin",
    "type": "living",
    "scope": "individual",
    "iso6393": "onx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tohono O'odham",
    "type": "living",
    "scope": "individual",
    "iso6393": "ood",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ong",
    "type": "living",
    "scope": "individual",
    "iso6393": "oog",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Önge",
    "type": "living",
    "scope": "individual",
    "iso6393": "oon",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oorlams",
    "type": "living",
    "scope": "individual",
    "iso6393": "oor",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Ossetic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "oos",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Okpamheri",
    "type": "living",
    "scope": "individual",
    "iso6393": "opa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kopkaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "opk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oksapmin",
    "type": "living",
    "scope": "individual",
    "iso6393": "opm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Opao",
    "type": "living",
    "scope": "individual",
    "iso6393": "opo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Opata",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "opt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ofayé",
    "type": "living",
    "scope": "individual",
    "iso6393": "opy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oroha",
    "type": "living",
    "scope": "individual",
    "iso6393": "ora",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Orma",
    "type": "living",
    "scope": "individual",
    "iso6393": "orc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Orejón",
    "type": "living",
    "scope": "individual",
    "iso6393": "ore",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oring",
    "type": "living",
    "scope": "individual",
    "iso6393": "org",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oroqen",
    "type": "living",
    "scope": "individual",
    "iso6393": "orh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oriya (macrolanguage)",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "ori",
    "iso6392B": "ori",
    "iso6392T": "ori",
    "iso6391": "or"
  },
  {
    "name": "Oromo",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "orm",
    "iso6392B": "orm",
    "iso6392T": "orm",
    "iso6391": "om"
  },
  {
    "name": "Orang Kanaq",
    "type": "living",
    "scope": "individual",
    "iso6393": "orn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Orokolo",
    "type": "living",
    "scope": "individual",
    "iso6393": "oro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oruma",
    "type": "living",
    "scope": "individual",
    "iso6393": "orr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Orang Seletar",
    "type": "living",
    "scope": "individual",
    "iso6393": "ors",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adivasi Oriya",
    "type": "living",
    "scope": "individual",
    "iso6393": "ort",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ormuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "oru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Russian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "orv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oro Win",
    "type": "living",
    "scope": "individual",
    "iso6393": "orw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oro",
    "type": "living",
    "scope": "individual",
    "iso6393": "orx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Odia",
    "type": "living",
    "scope": "individual",
    "iso6393": "ory",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ormu",
    "type": "living",
    "scope": "individual",
    "iso6393": "orz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Osage",
    "type": "living",
    "scope": "individual",
    "iso6393": "osa",
    "iso6392B": "osa",
    "iso6392T": "osa",
    "iso6391": null
  },
  {
    "name": "Oscan",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "osc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Osing",
    "type": "living",
    "scope": "individual",
    "iso6393": "osi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ososo",
    "type": "living",
    "scope": "individual",
    "iso6393": "oso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Spanish",
    "type": "historical",
    "scope": "individual",
    "iso6393": "osp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ossetian",
    "type": "living",
    "scope": "individual",
    "iso6393": "oss",
    "iso6392B": "oss",
    "iso6392T": "oss",
    "iso6391": "os"
  },
  {
    "name": "Osatu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ost",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern One",
    "type": "living",
    "scope": "individual",
    "iso6393": "osu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Saxon",
    "type": "historical",
    "scope": "individual",
    "iso6393": "osx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ottoman Turkish (1500-1928)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "ota",
    "iso6392B": "ota",
    "iso6392T": "ota",
    "iso6391": null
  },
  {
    "name": "Old Tibetan",
    "type": "historical",
    "scope": "individual",
    "iso6393": "otb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ot Danum",
    "type": "living",
    "scope": "individual",
    "iso6393": "otd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mezquital Otomi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ote",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oti",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "oti",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Turkish",
    "type": "historical",
    "scope": "individual",
    "iso6393": "otk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tilapa Otomi",
    "type": "living",
    "scope": "individual",
    "iso6393": "otl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Highland Otomi",
    "type": "living",
    "scope": "individual",
    "iso6393": "otm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tenango Otomi",
    "type": "living",
    "scope": "individual",
    "iso6393": "otn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Querétaro Otomi",
    "type": "living",
    "scope": "individual",
    "iso6393": "otq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Otoro",
    "type": "living",
    "scope": "individual",
    "iso6393": "otr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Estado de México Otomi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ots",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Temoaya Otomi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ott",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Otuke",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "otu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ottawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "otw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Texcatepec Otomi",
    "type": "living",
    "scope": "individual",
    "iso6393": "otx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Tamil",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "oty",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ixtenco Otomi",
    "type": "living",
    "scope": "individual",
    "iso6393": "otz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tagargrent",
    "type": "living",
    "scope": "individual",
    "iso6393": "oua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Glio-Oubi",
    "type": "living",
    "scope": "individual",
    "iso6393": "oub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oune",
    "type": "living",
    "scope": "individual",
    "iso6393": "oue",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Uighur",
    "type": "historical",
    "scope": "individual",
    "iso6393": "oui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ouma",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "oum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Elfdalian",
    "type": "living",
    "scope": "individual",
    "iso6393": "ovd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Owiniga",
    "type": "living",
    "scope": "individual",
    "iso6393": "owi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Welsh",
    "type": "historical",
    "scope": "individual",
    "iso6393": "owl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oy",
    "type": "living",
    "scope": "individual",
    "iso6393": "oyb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oyda",
    "type": "living",
    "scope": "individual",
    "iso6393": "oyd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wayampi",
    "type": "living",
    "scope": "individual",
    "iso6393": "oym",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oya'oya",
    "type": "living",
    "scope": "individual",
    "iso6393": "oyy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koonzime",
    "type": "living",
    "scope": "individual",
    "iso6393": "ozm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Parecís",
    "type": "living",
    "scope": "individual",
    "iso6393": "pab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pacoh",
    "type": "living",
    "scope": "individual",
    "iso6393": "pac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paumarí",
    "type": "living",
    "scope": "individual",
    "iso6393": "pad",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pagibete",
    "type": "living",
    "scope": "individual",
    "iso6393": "pae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paranawát",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "paf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pangasinan",
    "type": "living",
    "scope": "individual",
    "iso6393": "pag",
    "iso6392B": "pag",
    "iso6392T": "pag",
    "iso6391": null
  },
  {
    "name": "Tenharim",
    "type": "living",
    "scope": "individual",
    "iso6393": "pah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pe",
    "type": "living",
    "scope": "individual",
    "iso6393": "pai",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Parakanã",
    "type": "living",
    "scope": "individual",
    "iso6393": "pak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pahlavi",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "pal",
    "iso6392B": "pal",
    "iso6392T": "pal",
    "iso6391": null
  },
  {
    "name": "Pampanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "pam",
    "iso6392B": "pam",
    "iso6392T": "pam",
    "iso6391": null
  },
  {
    "name": "Panjabi",
    "type": "living",
    "scope": "individual",
    "iso6393": "pan",
    "iso6392B": "pan",
    "iso6392T": "pan",
    "iso6391": "pa"
  },
  {
    "name": "Northern Paiute",
    "type": "living",
    "scope": "individual",
    "iso6393": "pao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Papiamento",
    "type": "living",
    "scope": "individual",
    "iso6393": "pap",
    "iso6392B": "pap",
    "iso6392T": "pap",
    "iso6391": null
  },
  {
    "name": "Parya",
    "type": "living",
    "scope": "individual",
    "iso6393": "paq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Panamint",
    "type": "living",
    "scope": "individual",
    "iso6393": "par",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Papasena",
    "type": "living",
    "scope": "individual",
    "iso6393": "pas",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Papitalai",
    "type": "living",
    "scope": "individual",
    "iso6393": "pat",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Palauan",
    "type": "living",
    "scope": "individual",
    "iso6393": "pau",
    "iso6392B": "pau",
    "iso6392T": "pau",
    "iso6391": null
  },
  {
    "name": "Pakaásnovos",
    "type": "living",
    "scope": "individual",
    "iso6393": "pav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pawnee",
    "type": "living",
    "scope": "individual",
    "iso6393": "paw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pankararé",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pech",
    "type": "living",
    "scope": "individual",
    "iso6393": "pay",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pankararú",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "paz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Páez",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Patamona",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mezontla Popoloca",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Coyotepec Popoloca",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paraujano",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pbg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "E'ñapa Woromaipu",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Parkwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mak (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puebla Mazatec",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kpasam",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Papel",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Badyara",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pangwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Pame",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Pashto",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Pashto",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pnar",
    "type": "living",
    "scope": "individual",
    "iso6393": "pbv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pyu (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "pby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Santa Inés Ahuatempan Popoloca",
    "type": "living",
    "scope": "individual",
    "iso6393": "pca",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pear",
    "type": "living",
    "scope": "individual",
    "iso6393": "pcb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bouyei",
    "type": "living",
    "scope": "individual",
    "iso6393": "pcc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Picard",
    "type": "living",
    "scope": "individual",
    "iso6393": "pcd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ruching Palaung",
    "type": "living",
    "scope": "individual",
    "iso6393": "pce",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paliyan",
    "type": "living",
    "scope": "individual",
    "iso6393": "pcf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paniya",
    "type": "living",
    "scope": "individual",
    "iso6393": "pcg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pardhan",
    "type": "living",
    "scope": "individual",
    "iso6393": "pch",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Duruwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "pci",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Parenga",
    "type": "living",
    "scope": "individual",
    "iso6393": "pcj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paite Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "pck",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pardhi",
    "type": "living",
    "scope": "individual",
    "iso6393": "pcl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nigerian Pidgin",
    "type": "living",
    "scope": "individual",
    "iso6393": "pcm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Piti",
    "type": "living",
    "scope": "individual",
    "iso6393": "pcn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pacahuara",
    "type": "living",
    "scope": "individual",
    "iso6393": "pcp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pyapun",
    "type": "living",
    "scope": "individual",
    "iso6393": "pcw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anam",
    "type": "living",
    "scope": "individual",
    "iso6393": "pda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pennsylvania German",
    "type": "living",
    "scope": "individual",
    "iso6393": "pdc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pa Di",
    "type": "living",
    "scope": "individual",
    "iso6393": "pdi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Podena",
    "type": "living",
    "scope": "individual",
    "iso6393": "pdn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Padoe",
    "type": "living",
    "scope": "individual",
    "iso6393": "pdo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Plautdietsch",
    "type": "living",
    "scope": "individual",
    "iso6393": "pdt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kayan",
    "type": "living",
    "scope": "individual",
    "iso6393": "pdu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Peranakan Indonesian",
    "type": "living",
    "scope": "individual",
    "iso6393": "pea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Pomo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "peb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mala (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ped",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taje",
    "type": "living",
    "scope": "individual",
    "iso6393": "pee",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northeastern Pomo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pef",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pengo",
    "type": "living",
    "scope": "individual",
    "iso6393": "peg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bonan",
    "type": "living",
    "scope": "individual",
    "iso6393": "peh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chichimeca-Jonaz",
    "type": "living",
    "scope": "individual",
    "iso6393": "pei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Pomo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pej",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Penchal",
    "type": "living",
    "scope": "individual",
    "iso6393": "pek",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pekal",
    "type": "living",
    "scope": "individual",
    "iso6393": "pel",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phende",
    "type": "living",
    "scope": "individual",
    "iso6393": "pem",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Persian (ca. 600-400 B.C.)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "peo",
    "iso6392B": "peo",
    "iso6392T": "peo",
    "iso6391": null
  },
  {
    "name": "Kunja",
    "type": "living",
    "scope": "individual",
    "iso6393": "pep",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Pomo",
    "type": "living",
    "scope": "individual",
    "iso6393": "peq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iranian Persian",
    "type": "living",
    "scope": "individual",
    "iso6393": "pes",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pémono",
    "type": "living",
    "scope": "individual",
    "iso6393": "pev",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Petats",
    "type": "living",
    "scope": "individual",
    "iso6393": "pex",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Petjo",
    "type": "living",
    "scope": "individual",
    "iso6393": "pey",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Penan",
    "type": "living",
    "scope": "individual",
    "iso6393": "pez",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pááfang",
    "type": "living",
    "scope": "individual",
    "iso6393": "pfa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Peere",
    "type": "living",
    "scope": "individual",
    "iso6393": "pfe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pfaelzisch",
    "type": "living",
    "scope": "individual",
    "iso6393": "pfl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sudanese Creole Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "pga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gāndhārī",
    "type": "historical",
    "scope": "individual",
    "iso6393": "pgd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pangwali",
    "type": "living",
    "scope": "individual",
    "iso6393": "pgg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pagi",
    "type": "living",
    "scope": "individual",
    "iso6393": "pgi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rerep",
    "type": "living",
    "scope": "individual",
    "iso6393": "pgk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Primitive Irish",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "pgl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paelignian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "pgn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pangseng",
    "type": "living",
    "scope": "individual",
    "iso6393": "pgs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pagu",
    "type": "living",
    "scope": "individual",
    "iso6393": "pgu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Papua New Guinean Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "pgz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pa-Hng",
    "type": "living",
    "scope": "individual",
    "iso6393": "pha",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phudagi",
    "type": "living",
    "scope": "individual",
    "iso6393": "phd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phuong",
    "type": "living",
    "scope": "individual",
    "iso6393": "phg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phukha",
    "type": "living",
    "scope": "individual",
    "iso6393": "phh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phake",
    "type": "living",
    "scope": "individual",
    "iso6393": "phk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phalura",
    "type": "living",
    "scope": "individual",
    "iso6393": "phl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phimbi",
    "type": "living",
    "scope": "individual",
    "iso6393": "phm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phoenician",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "phn",
    "iso6392B": "phn",
    "iso6392T": "phn",
    "iso6391": null
  },
  {
    "name": "Phunoi",
    "type": "living",
    "scope": "individual",
    "iso6393": "pho",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phana'",
    "type": "living",
    "scope": "individual",
    "iso6393": "phq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pahari-Potwari",
    "type": "living",
    "scope": "individual",
    "iso6393": "phr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phu Thai",
    "type": "living",
    "scope": "individual",
    "iso6393": "pht",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phuan",
    "type": "living",
    "scope": "individual",
    "iso6393": "phu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pahlavani",
    "type": "living",
    "scope": "individual",
    "iso6393": "phv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phangduwali",
    "type": "living",
    "scope": "individual",
    "iso6393": "phw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pima Bajo",
    "type": "living",
    "scope": "individual",
    "iso6393": "pia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yine",
    "type": "living",
    "scope": "individual",
    "iso6393": "pib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pinji",
    "type": "living",
    "scope": "individual",
    "iso6393": "pic",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Piaroa",
    "type": "living",
    "scope": "individual",
    "iso6393": "pid",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Piro",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pie",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pingelapese",
    "type": "living",
    "scope": "individual",
    "iso6393": "pif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pisabo",
    "type": "living",
    "scope": "individual",
    "iso6393": "pig",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pitcairn-Norfolk",
    "type": "living",
    "scope": "individual",
    "iso6393": "pih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pini",
    "type": "living",
    "scope": "individual",
    "iso6393": "pii",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pijao",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pij",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yom",
    "type": "living",
    "scope": "individual",
    "iso6393": "pil",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Powhatan",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Piame",
    "type": "living",
    "scope": "individual",
    "iso6393": "pin",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Piapoco",
    "type": "living",
    "scope": "individual",
    "iso6393": "pio",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pero",
    "type": "living",
    "scope": "individual",
    "iso6393": "pip",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Piratapuyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "pir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pijin",
    "type": "living",
    "scope": "individual",
    "iso6393": "pis",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pitta Pitta",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pit",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pintupi-Luritja",
    "type": "living",
    "scope": "individual",
    "iso6393": "piu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pileni",
    "type": "living",
    "scope": "individual",
    "iso6393": "piv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pimbwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "piw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Piu",
    "type": "living",
    "scope": "individual",
    "iso6393": "pix",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Piya-Kwonci",
    "type": "living",
    "scope": "individual",
    "iso6393": "piy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pije",
    "type": "living",
    "scope": "individual",
    "iso6393": "piz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pitjantjatjara",
    "type": "living",
    "scope": "individual",
    "iso6393": "pjt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ardhamāgadhī Prākrit",
    "type": "historical",
    "scope": "individual",
    "iso6393": "pka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pokomo",
    "type": "living",
    "scope": "individual",
    "iso6393": "pkb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paekche",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "pkc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pak-Tong",
    "type": "living",
    "scope": "individual",
    "iso6393": "pkg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pankhu",
    "type": "living",
    "scope": "individual",
    "iso6393": "pkh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pakanha",
    "type": "living",
    "scope": "individual",
    "iso6393": "pkn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pökoot",
    "type": "living",
    "scope": "individual",
    "iso6393": "pko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pukapuka",
    "type": "living",
    "scope": "individual",
    "iso6393": "pkp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Attapady Kurumba",
    "type": "living",
    "scope": "individual",
    "iso6393": "pkr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pakistan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "pks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maleng",
    "type": "living",
    "scope": "individual",
    "iso6393": "pkt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paku",
    "type": "living",
    "scope": "individual",
    "iso6393": "pku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miani",
    "type": "living",
    "scope": "individual",
    "iso6393": "pla",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Polonombauk",
    "type": "living",
    "scope": "individual",
    "iso6393": "plb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Palawano",
    "type": "living",
    "scope": "individual",
    "iso6393": "plc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Polari",
    "type": "living",
    "scope": "individual",
    "iso6393": "pld",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Palu'e",
    "type": "living",
    "scope": "individual",
    "iso6393": "ple",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pilagá",
    "type": "living",
    "scope": "individual",
    "iso6393": "plg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paulohi",
    "type": "living",
    "scope": "individual",
    "iso6393": "plh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pali",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "pli",
    "iso6392B": "pli",
    "iso6392T": "pli",
    "iso6391": "pi"
  },
  {
    "name": "Polci",
    "type": "living",
    "scope": "individual",
    "iso6393": "plj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kohistani Shina",
    "type": "living",
    "scope": "individual",
    "iso6393": "plk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shwe Palaung",
    "type": "living",
    "scope": "individual",
    "iso6393": "pll",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Palenquero",
    "type": "living",
    "scope": "individual",
    "iso6393": "pln",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oluta Popoluca",
    "type": "living",
    "scope": "individual",
    "iso6393": "plo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Palpa",
    "type": "living",
    "scope": "individual",
    "iso6393": "plp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Palaic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "plq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Palaka Senoufo",
    "type": "living",
    "scope": "individual",
    "iso6393": "plr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Marcos Tlacoyalco Popoloca",
    "type": "living",
    "scope": "individual",
    "iso6393": "pls",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Plateau Malagasy",
    "type": "living",
    "scope": "individual",
    "iso6393": "plt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Palikúr",
    "type": "living",
    "scope": "individual",
    "iso6393": "plu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southwest Palawano",
    "type": "living",
    "scope": "individual",
    "iso6393": "plv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Brooke's Point Palawano",
    "type": "living",
    "scope": "individual",
    "iso6393": "plw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bolyu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ply",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paluan",
    "type": "living",
    "scope": "individual",
    "iso6393": "plz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paama",
    "type": "living",
    "scope": "individual",
    "iso6393": "pma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pambia",
    "type": "living",
    "scope": "individual",
    "iso6393": "pmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pallanganmiddang",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pwaamei",
    "type": "living",
    "scope": "individual",
    "iso6393": "pme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pamona",
    "type": "living",
    "scope": "individual",
    "iso6393": "pmf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Māhārāṣṭri Prākrit",
    "type": "historical",
    "scope": "individual",
    "iso6393": "pmh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Pumi",
    "type": "living",
    "scope": "individual",
    "iso6393": "pmi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Pumi",
    "type": "living",
    "scope": "individual",
    "iso6393": "pmj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pamlico",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pmk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lingua Franca",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pomo",
    "type": "living",
    "scope": "individual",
    "iso6393": "pmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pam",
    "type": "living",
    "scope": "individual",
    "iso6393": "pmn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pom",
    "type": "living",
    "scope": "individual",
    "iso6393": "pmo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Pame",
    "type": "living",
    "scope": "individual",
    "iso6393": "pmq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paynamar",
    "type": "living",
    "scope": "individual",
    "iso6393": "pmr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Piemontese",
    "type": "living",
    "scope": "individual",
    "iso6393": "pms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tuamotuan",
    "type": "living",
    "scope": "individual",
    "iso6393": "pmt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Plains Miwok",
    "type": "living",
    "scope": "individual",
    "iso6393": "pmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Poumei Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "pmx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Papuan Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "pmy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Pame",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pmz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Punan Bah-Biau",
    "type": "living",
    "scope": "individual",
    "iso6393": "pna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Panjabi",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pannei",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mpinda",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Penan",
    "type": "living",
    "scope": "individual",
    "iso6393": "pne",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pongu",
    "type": "living",
    "scope": "individual",
    "iso6393": "png",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Penrhyn",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aoheng",
    "type": "living",
    "scope": "individual",
    "iso6393": "pni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pinjarup",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pnj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paunaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paleni",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Punan Batu 1",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pinai-Hagahai",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Panobo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pno",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pancana",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pana (Burkina Faso)",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Panim",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ponosakan",
    "type": "living",
    "scope": "individual",
    "iso6393": "pns",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pontic",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jiongnai Bunu",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pinigura",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Banyjima",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phong-Kniang",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pinyin",
    "type": "living",
    "scope": "individual",
    "iso6393": "pny",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pana (Central African Republic)",
    "type": "living",
    "scope": "individual",
    "iso6393": "pnz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Poqomam",
    "type": "living",
    "scope": "individual",
    "iso6393": "poc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Juan Atzingo Popoloca",
    "type": "living",
    "scope": "individual",
    "iso6393": "poe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Poke",
    "type": "living",
    "scope": "individual",
    "iso6393": "pof",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Potiguára",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pog",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Poqomchi'",
    "type": "living",
    "scope": "individual",
    "iso6393": "poh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Highland Popoluca",
    "type": "living",
    "scope": "individual",
    "iso6393": "poi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pokangá",
    "type": "living",
    "scope": "individual",
    "iso6393": "pok",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Polish",
    "type": "living",
    "scope": "individual",
    "iso6393": "pol",
    "iso6392B": "pol",
    "iso6392T": "pol",
    "iso6391": "pl"
  },
  {
    "name": "Southeastern Pomo",
    "type": "living",
    "scope": "individual",
    "iso6393": "pom",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pohnpeian",
    "type": "living",
    "scope": "individual",
    "iso6393": "pon",
    "iso6392B": "pon",
    "iso6392T": "pon",
    "iso6391": null
  },
  {
    "name": "Central Pomo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "poo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pwapwâ",
    "type": "living",
    "scope": "individual",
    "iso6393": "pop",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Texistepec Popoluca",
    "type": "living",
    "scope": "individual",
    "iso6393": "poq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Portuguese",
    "type": "living",
    "scope": "individual",
    "iso6393": "por",
    "iso6392B": "por",
    "iso6392T": "por",
    "iso6391": "pt"
  },
  {
    "name": "Sayula Popoluca",
    "type": "living",
    "scope": "individual",
    "iso6393": "pos",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Potawatomi",
    "type": "living",
    "scope": "individual",
    "iso6393": "pot",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Upper Guinea Crioulo",
    "type": "living",
    "scope": "individual",
    "iso6393": "pov",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Felipe Otlaltepec Popoloca",
    "type": "living",
    "scope": "individual",
    "iso6393": "pow",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Polabian",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pox",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pogolo",
    "type": "living",
    "scope": "individual",
    "iso6393": "poy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Papi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ppe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paipai",
    "type": "living",
    "scope": "individual",
    "iso6393": "ppi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uma",
    "type": "living",
    "scope": "individual",
    "iso6393": "ppk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pipil",
    "type": "living",
    "scope": "individual",
    "iso6393": "ppl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Papuma",
    "type": "living",
    "scope": "individual",
    "iso6393": "ppm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Papapana",
    "type": "living",
    "scope": "individual",
    "iso6393": "ppn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Folopa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ppo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pelende",
    "type": "living",
    "scope": "individual",
    "iso6393": "ppp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pei",
    "type": "living",
    "scope": "individual",
    "iso6393": "ppq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Luís Temalacayuca Popoloca",
    "type": "living",
    "scope": "individual",
    "iso6393": "pps",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pare",
    "type": "living",
    "scope": "individual",
    "iso6393": "ppt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Papora",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ppu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pa'a",
    "type": "living",
    "scope": "individual",
    "iso6393": "pqa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malecite-Passamaquoddy",
    "type": "living",
    "scope": "individual",
    "iso6393": "pqm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Parachi",
    "type": "living",
    "scope": "individual",
    "iso6393": "prc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Parsi-Dari",
    "type": "living",
    "scope": "individual",
    "iso6393": "prd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Principense",
    "type": "living",
    "scope": "individual",
    "iso6393": "pre",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paranan",
    "type": "living",
    "scope": "individual",
    "iso6393": "prf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Prussian",
    "type": "living",
    "scope": "individual",
    "iso6393": "prg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Porohanon",
    "type": "living",
    "scope": "individual",
    "iso6393": "prh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paicî",
    "type": "living",
    "scope": "individual",
    "iso6393": "pri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Parauk",
    "type": "living",
    "scope": "individual",
    "iso6393": "prk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Peruvian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "prl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kibiri",
    "type": "living",
    "scope": "individual",
    "iso6393": "prm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Prasuni",
    "type": "living",
    "scope": "individual",
    "iso6393": "prn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Provençal (to 1500)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "pro",
    "iso6392B": "pro",
    "iso6392T": "pro",
    "iso6391": null
  },
  {
    "name": "Parsi",
    "type": "living",
    "scope": "individual",
    "iso6393": "prp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ashéninka Perené",
    "type": "living",
    "scope": "individual",
    "iso6393": "prq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puri",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "prr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dari",
    "type": "living",
    "scope": "individual",
    "iso6393": "prs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phai",
    "type": "living",
    "scope": "individual",
    "iso6393": "prt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puragi",
    "type": "living",
    "scope": "individual",
    "iso6393": "pru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Parawen",
    "type": "living",
    "scope": "individual",
    "iso6393": "prw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Purik",
    "type": "living",
    "scope": "individual",
    "iso6393": "prx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Providencia Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "prz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Asue Awyu",
    "type": "living",
    "scope": "individual",
    "iso6393": "psa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Persian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "psc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Plains Indian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "psd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "pse",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Penang Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "psg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southwest Pashai",
    "type": "living",
    "scope": "individual",
    "iso6393": "psh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southeast Pashai",
    "type": "living",
    "scope": "individual",
    "iso6393": "psi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puerto Rican Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "psl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pauserna",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "psm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Panasuan",
    "type": "living",
    "scope": "individual",
    "iso6393": "psn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Polish Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "pso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Philippine Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "psp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pasi",
    "type": "living",
    "scope": "individual",
    "iso6393": "psq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Portuguese Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "psr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaulong",
    "type": "living",
    "scope": "individual",
    "iso6393": "pss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Pashto",
    "type": "living",
    "scope": "individual",
    "iso6393": "pst",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sauraseni Prākrit",
    "type": "historical",
    "scope": "individual",
    "iso6393": "psu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Port Sandwich",
    "type": "living",
    "scope": "individual",
    "iso6393": "psw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Piscataway",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "psy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pai Tavytera",
    "type": "living",
    "scope": "individual",
    "iso6393": "pta",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pataxó Hã-Ha-Hãe",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pth",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pindiini",
    "type": "living",
    "scope": "individual",
    "iso6393": "pti",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Patani",
    "type": "living",
    "scope": "individual",
    "iso6393": "ptn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zo'é",
    "type": "living",
    "scope": "individual",
    "iso6393": "pto",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Patep",
    "type": "living",
    "scope": "individual",
    "iso6393": "ptp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pattapu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ptq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Piamatsina",
    "type": "living",
    "scope": "individual",
    "iso6393": "ptr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Enrekang",
    "type": "living",
    "scope": "individual",
    "iso6393": "ptt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bambam",
    "type": "living",
    "scope": "individual",
    "iso6393": "ptu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Port Vato",
    "type": "living",
    "scope": "individual",
    "iso6393": "ptv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pentlatch",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ptw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pathiya",
    "type": "living",
    "scope": "individual",
    "iso6393": "pty",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Highland Purepecha",
    "type": "living",
    "scope": "individual",
    "iso6393": "pua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Purum",
    "type": "living",
    "scope": "individual",
    "iso6393": "pub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Punan Merap",
    "type": "living",
    "scope": "individual",
    "iso6393": "puc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Punan Aput",
    "type": "living",
    "scope": "individual",
    "iso6393": "pud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puelche",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pue",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Punan Merah",
    "type": "living",
    "scope": "individual",
    "iso6393": "puf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phuie",
    "type": "living",
    "scope": "individual",
    "iso6393": "pug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puinave",
    "type": "living",
    "scope": "individual",
    "iso6393": "pui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Punan Tubu",
    "type": "living",
    "scope": "individual",
    "iso6393": "puj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puma",
    "type": "living",
    "scope": "individual",
    "iso6393": "pum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puoc",
    "type": "living",
    "scope": "individual",
    "iso6393": "puo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pulabu",
    "type": "living",
    "scope": "individual",
    "iso6393": "pup",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puquina",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "puq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puruborá",
    "type": "living",
    "scope": "individual",
    "iso6393": "pur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pushto",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "pus",
    "iso6392B": "pus",
    "iso6392T": "pus",
    "iso6391": "ps"
  },
  {
    "name": "Putoh",
    "type": "living",
    "scope": "individual",
    "iso6393": "put",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Punu",
    "type": "living",
    "scope": "individual",
    "iso6393": "puu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puluwatese",
    "type": "living",
    "scope": "individual",
    "iso6393": "puw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puare",
    "type": "living",
    "scope": "individual",
    "iso6393": "pux",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Purisimeño",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "puy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pawaia",
    "type": "living",
    "scope": "individual",
    "iso6393": "pwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Panawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "pwb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gapapaiwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "pwg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Patwin",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "pwi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Molbog",
    "type": "living",
    "scope": "individual",
    "iso6393": "pwm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paiwan",
    "type": "living",
    "scope": "individual",
    "iso6393": "pwn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pwo Western Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "pwo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Powari",
    "type": "living",
    "scope": "individual",
    "iso6393": "pwr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pwo Northern Karen",
    "type": "living",
    "scope": "individual",
    "iso6393": "pww",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Quetzaltepec Mixe",
    "type": "living",
    "scope": "individual",
    "iso6393": "pxm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pye Krumen",
    "type": "living",
    "scope": "individual",
    "iso6393": "pye",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fyam",
    "type": "living",
    "scope": "individual",
    "iso6393": "pym",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Poyanáwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "pyn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paraguayan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "pys",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puyuma",
    "type": "living",
    "scope": "individual",
    "iso6393": "pyu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pyu (Myanmar)",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "pyx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pyen",
    "type": "living",
    "scope": "individual",
    "iso6393": "pyy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Para Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "pzn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Quapaw",
    "type": "living",
    "scope": "individual",
    "iso6393": "qua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huallaga Huánuco Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "K'iche'",
    "type": "living",
    "scope": "individual",
    "iso6393": "quc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Calderón Highland Quichua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Quechua",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "que",
    "iso6392B": "que",
    "iso6392T": "que",
    "iso6391": "qu"
  },
  {
    "name": "Lambayeque Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "quf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chimborazo Highland Quichua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Bolivian Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "quh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Quileute",
    "type": "living",
    "scope": "individual",
    "iso6393": "qui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chachapoyas Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "quk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Bolivian Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qul",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sipacapense",
    "type": "living",
    "scope": "individual",
    "iso6393": "qum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Quinault",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "qun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Pastaza Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qup",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Quinqui",
    "type": "living",
    "scope": "individual",
    "iso6393": "quq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yanahuanca Pasco Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Santiago del Estero Quichua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qus",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sacapulteco",
    "type": "living",
    "scope": "individual",
    "iso6393": "quv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tena Lowland Quichua",
    "type": "living",
    "scope": "individual",
    "iso6393": "quw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yauyos Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qux",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ayacucho Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "quy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cusco Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "quz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ambo-Pasco Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qva",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cajamarca Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qvc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Apurímac Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qve",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huamalíes-Dos de Mayo Huánuco Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qvh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Imbabura Highland Quichua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qvi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Loja Highland Quichua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qvj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cajatambo North Lima Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qvl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Margos-Yarowilca-Lauricocha Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qvm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Junín Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qvn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Napo Lowland Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qvo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pacaraos Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qvp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Martín Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qvs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huaylla Wanca Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qvw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Queyu",
    "type": "living",
    "scope": "individual",
    "iso6393": "qvy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Pastaza Quichua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qvz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Corongo Ancash Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Classical Quechua",
    "type": "historical",
    "scope": "individual",
    "iso6393": "qwc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huaylas Ancash Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qwh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuman (Russia)",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "qwm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sihuas Ancash Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qws",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwalhioqua-Tlatskanai",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "qwt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chiquián Ancash Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qxa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chincha Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qxc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Panao Huánuco Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qxh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Salasaca Highland Quichua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qxl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Conchucos Ancash Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qxn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Conchucos Ancash Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qxo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puno Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qxp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Qashqa'i",
    "type": "living",
    "scope": "individual",
    "iso6393": "qxq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cañar Highland Quichua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qxr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Qiang",
    "type": "living",
    "scope": "individual",
    "iso6393": "qxs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Santa Ana de Tusi Pasco Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qxt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arequipa-La Unión Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qxu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jauja Wanca Quechua",
    "type": "living",
    "scope": "individual",
    "iso6393": "qxw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Quenya",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "qya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Quiripi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "qyp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dungmali",
    "type": "living",
    "scope": "individual",
    "iso6393": "raa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Camling",
    "type": "living",
    "scope": "individual",
    "iso6393": "rab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rasawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "rac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rade",
    "type": "living",
    "scope": "individual",
    "iso6393": "rad",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Meohang",
    "type": "living",
    "scope": "individual",
    "iso6393": "raf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Logooli",
    "type": "living",
    "scope": "individual",
    "iso6393": "rag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rabha",
    "type": "living",
    "scope": "individual",
    "iso6393": "rah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ramoaaina",
    "type": "living",
    "scope": "individual",
    "iso6393": "rai",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rajasthani",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "raj",
    "iso6392B": "raj",
    "iso6392T": "raj",
    "iso6391": null
  },
  {
    "name": "Tulu-Bohuai",
    "type": "living",
    "scope": "individual",
    "iso6393": "rak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ralte",
    "type": "living",
    "scope": "individual",
    "iso6393": "ral",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Canela",
    "type": "living",
    "scope": "individual",
    "iso6393": "ram",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Riantana",
    "type": "living",
    "scope": "individual",
    "iso6393": "ran",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rao",
    "type": "living",
    "scope": "individual",
    "iso6393": "rao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rapanui",
    "type": "living",
    "scope": "individual",
    "iso6393": "rap",
    "iso6392B": "rap",
    "iso6392T": "rap",
    "iso6391": null
  },
  {
    "name": "Saam",
    "type": "living",
    "scope": "individual",
    "iso6393": "raq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rarotongan",
    "type": "living",
    "scope": "individual",
    "iso6393": "rar",
    "iso6392B": "rar",
    "iso6392T": "rar",
    "iso6391": null
  },
  {
    "name": "Tegali",
    "type": "living",
    "scope": "individual",
    "iso6393": "ras",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Razajerdi",
    "type": "living",
    "scope": "individual",
    "iso6393": "rat",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Raute",
    "type": "living",
    "scope": "individual",
    "iso6393": "rau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sampang",
    "type": "living",
    "scope": "individual",
    "iso6393": "rav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rawang",
    "type": "living",
    "scope": "individual",
    "iso6393": "raw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rang",
    "type": "living",
    "scope": "individual",
    "iso6393": "rax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rapa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ray",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rahambuu",
    "type": "living",
    "scope": "individual",
    "iso6393": "raz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rumai Palaung",
    "type": "living",
    "scope": "individual",
    "iso6393": "rbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Bontok",
    "type": "living",
    "scope": "individual",
    "iso6393": "rbk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miraya Bikol",
    "type": "living",
    "scope": "individual",
    "iso6393": "rbl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barababaraba",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "rbp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Réunion Creole French",
    "type": "living",
    "scope": "individual",
    "iso6393": "rcf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rudbari",
    "type": "living",
    "scope": "individual",
    "iso6393": "rdb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rerau",
    "type": "living",
    "scope": "individual",
    "iso6393": "rea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rembong",
    "type": "living",
    "scope": "individual",
    "iso6393": "reb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rejang Kayan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ree",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kara (Tanzania)",
    "type": "living",
    "scope": "individual",
    "iso6393": "reg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Reli",
    "type": "living",
    "scope": "individual",
    "iso6393": "rei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rejang",
    "type": "living",
    "scope": "individual",
    "iso6393": "rej",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rendille",
    "type": "living",
    "scope": "individual",
    "iso6393": "rel",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Remo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "rem",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rengao",
    "type": "living",
    "scope": "individual",
    "iso6393": "ren",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rer Bare",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "rer",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Reshe",
    "type": "living",
    "scope": "individual",
    "iso6393": "res",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Retta",
    "type": "living",
    "scope": "individual",
    "iso6393": "ret",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Reyesano",
    "type": "living",
    "scope": "individual",
    "iso6393": "rey",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Roria",
    "type": "living",
    "scope": "individual",
    "iso6393": "rga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Romano-Greek",
    "type": "living",
    "scope": "individual",
    "iso6393": "rge",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rangkas",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "rgk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Romagnol",
    "type": "living",
    "scope": "individual",
    "iso6393": "rgn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Resígaro",
    "type": "living",
    "scope": "individual",
    "iso6393": "rgr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Roglai",
    "type": "living",
    "scope": "individual",
    "iso6393": "rgs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ringgou",
    "type": "living",
    "scope": "individual",
    "iso6393": "rgu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rohingya",
    "type": "living",
    "scope": "individual",
    "iso6393": "rhg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yahang",
    "type": "living",
    "scope": "individual",
    "iso6393": "rhp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Riang (India)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ria",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tarifit",
    "type": "living",
    "scope": "individual",
    "iso6393": "rif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Riang Lang",
    "type": "living",
    "scope": "individual",
    "iso6393": "ril",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyaturu",
    "type": "living",
    "scope": "individual",
    "iso6393": "rim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nungu",
    "type": "living",
    "scope": "individual",
    "iso6393": "rin",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ribun",
    "type": "living",
    "scope": "individual",
    "iso6393": "rir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ritharrngu",
    "type": "living",
    "scope": "individual",
    "iso6393": "rit",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Riung",
    "type": "living",
    "scope": "individual",
    "iso6393": "riu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rajong",
    "type": "living",
    "scope": "individual",
    "iso6393": "rjg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Raji",
    "type": "living",
    "scope": "individual",
    "iso6393": "rji",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rajbanshi",
    "type": "living",
    "scope": "individual",
    "iso6393": "rjs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kraol",
    "type": "living",
    "scope": "individual",
    "iso6393": "rka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rikbaktsa",
    "type": "living",
    "scope": "individual",
    "iso6393": "rkb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rakahanga-Manihiki",
    "type": "living",
    "scope": "individual",
    "iso6393": "rkh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rakhine",
    "type": "living",
    "scope": "individual",
    "iso6393": "rki",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marka",
    "type": "living",
    "scope": "individual",
    "iso6393": "rkm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rangpuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "rkt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arakwal",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "rkw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rama",
    "type": "living",
    "scope": "individual",
    "iso6393": "rma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rembarrnga",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Carpathian Romani",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Traveller Danish",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "rmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Angloromani",
    "type": "living",
    "scope": "individual",
    "iso6393": "rme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalo Finnish Romani",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Traveller Norwegian",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Murkim",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lomavren",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Romkun",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baltic Romani",
    "type": "living",
    "scope": "individual",
    "iso6393": "rml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Roma",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Balkan Romani",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sinte Romani",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rempi",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Caló",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Romanian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "rms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Domari",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tavringer Romani",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Romanova",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "rmv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Welsh Romani",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Romam",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vlax Romani",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marma",
    "type": "living",
    "scope": "individual",
    "iso6393": "rmz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ruund",
    "type": "living",
    "scope": "individual",
    "iso6393": "rnd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ronga",
    "type": "living",
    "scope": "individual",
    "iso6393": "rng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ranglong",
    "type": "living",
    "scope": "individual",
    "iso6393": "rnl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Roon",
    "type": "living",
    "scope": "individual",
    "iso6393": "rnn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rongpo",
    "type": "living",
    "scope": "individual",
    "iso6393": "rnp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nari Nari",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "rnr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rungwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "rnw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tae'",
    "type": "living",
    "scope": "individual",
    "iso6393": "rob",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cacgia Roglai",
    "type": "living",
    "scope": "individual",
    "iso6393": "roc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rogo",
    "type": "living",
    "scope": "individual",
    "iso6393": "rod",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ronji",
    "type": "living",
    "scope": "individual",
    "iso6393": "roe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rombo",
    "type": "living",
    "scope": "individual",
    "iso6393": "rof",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Roglai",
    "type": "living",
    "scope": "individual",
    "iso6393": "rog",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Romansh",
    "type": "living",
    "scope": "individual",
    "iso6393": "roh",
    "iso6392B": "roh",
    "iso6392T": "roh",
    "iso6391": "rm"
  },
  {
    "name": "Romblomanon",
    "type": "living",
    "scope": "individual",
    "iso6393": "rol",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Romany",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "rom",
    "iso6392B": "rom",
    "iso6392T": "rom",
    "iso6391": null
  },
  {
    "name": "Romanian",
    "type": "living",
    "scope": "individual",
    "iso6393": "ron",
    "iso6392B": "rum",
    "iso6392T": "ron",
    "iso6391": "ro"
  },
  {
    "name": "Rotokas",
    "type": "living",
    "scope": "individual",
    "iso6393": "roo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kriol",
    "type": "living",
    "scope": "individual",
    "iso6393": "rop",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rongga",
    "type": "living",
    "scope": "individual",
    "iso6393": "ror",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Runga",
    "type": "living",
    "scope": "individual",
    "iso6393": "rou",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dela-Oenale",
    "type": "living",
    "scope": "individual",
    "iso6393": "row",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Repanbitip",
    "type": "living",
    "scope": "individual",
    "iso6393": "rpn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rapting",
    "type": "living",
    "scope": "individual",
    "iso6393": "rpt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ririo",
    "type": "living",
    "scope": "individual",
    "iso6393": "rri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waima",
    "type": "living",
    "scope": "individual",
    "iso6393": "rro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arritinngithigh",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "rrt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Romano-Serbian",
    "type": "living",
    "scope": "individual",
    "iso6393": "rsb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Russian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "rsl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miriwoong Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "rsm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rungtu Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "rtc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ratahan",
    "type": "living",
    "scope": "individual",
    "iso6393": "rth",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rotuman",
    "type": "living",
    "scope": "individual",
    "iso6393": "rtm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yurats",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "rts",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rathawi",
    "type": "living",
    "scope": "individual",
    "iso6393": "rtw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gungu",
    "type": "living",
    "scope": "individual",
    "iso6393": "rub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ruuli",
    "type": "living",
    "scope": "individual",
    "iso6393": "ruc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rusyn",
    "type": "living",
    "scope": "individual",
    "iso6393": "rue",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Luguru",
    "type": "living",
    "scope": "individual",
    "iso6393": "ruf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Roviana",
    "type": "living",
    "scope": "individual",
    "iso6393": "rug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ruga",
    "type": "living",
    "scope": "individual",
    "iso6393": "ruh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rufiji",
    "type": "living",
    "scope": "individual",
    "iso6393": "rui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Che",
    "type": "living",
    "scope": "individual",
    "iso6393": "ruk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rundi",
    "type": "living",
    "scope": "individual",
    "iso6393": "run",
    "iso6392B": "run",
    "iso6392T": "run",
    "iso6391": "rn"
  },
  {
    "name": "Istro Romanian",
    "type": "living",
    "scope": "individual",
    "iso6393": "ruo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Macedo-Romanian",
    "type": "living",
    "scope": "individual",
    "iso6393": "rup",
    "iso6392B": "rup",
    "iso6392T": "rup",
    "iso6391": null
  },
  {
    "name": "Megleno Romanian",
    "type": "living",
    "scope": "individual",
    "iso6393": "ruq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Russian",
    "type": "living",
    "scope": "individual",
    "iso6393": "rus",
    "iso6392B": "rus",
    "iso6392T": "rus",
    "iso6391": "ru"
  },
  {
    "name": "Rutul",
    "type": "living",
    "scope": "individual",
    "iso6393": "rut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lanas Lobu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ruu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mala (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ruy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ruma",
    "type": "living",
    "scope": "individual",
    "iso6393": "ruz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rawo",
    "type": "living",
    "scope": "individual",
    "iso6393": "rwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "rwk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amba (Uganda)",
    "type": "living",
    "scope": "individual",
    "iso6393": "rwm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "rwo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marwari (India)",
    "type": "living",
    "scope": "individual",
    "iso6393": "rwr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngardi",
    "type": "living",
    "scope": "individual",
    "iso6393": "rxd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karuwali",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "rxw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Amami-Oshima",
    "type": "living",
    "scope": "individual",
    "iso6393": "ryn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaeyama",
    "type": "living",
    "scope": "individual",
    "iso6393": "rys",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Okinawan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ryu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rāziḥī",
    "type": "living",
    "scope": "individual",
    "iso6393": "rzh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saba",
    "type": "living",
    "scope": "individual",
    "iso6393": "saa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buglere",
    "type": "living",
    "scope": "individual",
    "iso6393": "sab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Meskwaki",
    "type": "living",
    "scope": "individual",
    "iso6393": "sac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sandawe",
    "type": "living",
    "scope": "individual",
    "iso6393": "sad",
    "iso6392B": "sad",
    "iso6392T": "sad",
    "iso6391": null
  },
  {
    "name": "Sabanê",
    "type": "living",
    "scope": "individual",
    "iso6393": "sae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Safaliba",
    "type": "living",
    "scope": "individual",
    "iso6393": "saf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sango",
    "type": "living",
    "scope": "individual",
    "iso6393": "sag",
    "iso6392B": "sag",
    "iso6392T": "sag",
    "iso6391": "sg"
  },
  {
    "name": "Yakut",
    "type": "living",
    "scope": "individual",
    "iso6393": "sah",
    "iso6392B": "sah",
    "iso6392T": "sah",
    "iso6391": null
  },
  {
    "name": "Sahu",
    "type": "living",
    "scope": "individual",
    "iso6393": "saj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sake",
    "type": "living",
    "scope": "individual",
    "iso6393": "sak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samaritan Aramaic",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sam",
    "iso6392B": "sam",
    "iso6392T": "sam",
    "iso6391": null
  },
  {
    "name": "Sanskrit",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "san",
    "iso6392B": "san",
    "iso6392T": "san",
    "iso6391": "sa"
  },
  {
    "name": "Sause",
    "type": "living",
    "scope": "individual",
    "iso6393": "sao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samburu",
    "type": "living",
    "scope": "individual",
    "iso6393": "saq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saraveca",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sar",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sasak",
    "type": "living",
    "scope": "individual",
    "iso6393": "sas",
    "iso6392B": "sas",
    "iso6392T": "sas",
    "iso6391": null
  },
  {
    "name": "Santali",
    "type": "living",
    "scope": "individual",
    "iso6393": "sat",
    "iso6392B": "sat",
    "iso6392T": "sat",
    "iso6391": null
  },
  {
    "name": "Saleman",
    "type": "living",
    "scope": "individual",
    "iso6393": "sau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saafi-Saafi",
    "type": "living",
    "scope": "individual",
    "iso6393": "sav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sawi",
    "type": "living",
    "scope": "individual",
    "iso6393": "saw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sa",
    "type": "living",
    "scope": "individual",
    "iso6393": "sax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saya",
    "type": "living",
    "scope": "individual",
    "iso6393": "say",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saurashtra",
    "type": "living",
    "scope": "individual",
    "iso6393": "saz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngambay",
    "type": "living",
    "scope": "individual",
    "iso6393": "sba",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Simbo",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kele (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Samo",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saliba",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chabu",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seget",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sori-Harengan",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seti",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Surbakhal",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Safwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Botolan Sambal",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sagala",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sindhi Bhil",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sabüm",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sangu (Tanzania)",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sileibi",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sembakung Murut",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Subiya",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kimki",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Stod Bhoti",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sabine",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "sbv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Simba",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seberuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Soli",
    "type": "living",
    "scope": "individual",
    "iso6393": "sby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sara Kaba",
    "type": "living",
    "scope": "individual",
    "iso6393": "sbz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chut",
    "type": "living",
    "scope": "individual",
    "iso6393": "scb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dongxiang",
    "type": "living",
    "scope": "individual",
    "iso6393": "sce",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Miguel Creole French",
    "type": "living",
    "scope": "individual",
    "iso6393": "scf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sanggau",
    "type": "living",
    "scope": "individual",
    "iso6393": "scg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sakachep",
    "type": "living",
    "scope": "individual",
    "iso6393": "sch",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sri Lankan Creole Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "sci",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sadri",
    "type": "living",
    "scope": "individual",
    "iso6393": "sck",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shina",
    "type": "living",
    "scope": "individual",
    "iso6393": "scl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sicilian",
    "type": "living",
    "scope": "individual",
    "iso6393": "scn",
    "iso6392B": "scn",
    "iso6392T": "scn",
    "iso6391": null
  },
  {
    "name": "Scots",
    "type": "living",
    "scope": "individual",
    "iso6393": "sco",
    "iso6392B": "sco",
    "iso6392T": "sco",
    "iso6391": null
  },
  {
    "name": "Hyolmo",
    "type": "living",
    "scope": "individual",
    "iso6393": "scp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sa'och",
    "type": "living",
    "scope": "individual",
    "iso6393": "scq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Slavey",
    "type": "living",
    "scope": "individual",
    "iso6393": "scs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Katang",
    "type": "living",
    "scope": "individual",
    "iso6393": "sct",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shumcho",
    "type": "living",
    "scope": "individual",
    "iso6393": "scu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sheni",
    "type": "living",
    "scope": "individual",
    "iso6393": "scv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sha",
    "type": "living",
    "scope": "individual",
    "iso6393": "scw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sicel",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "scx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toraja-Sa'dan",
    "type": "living",
    "scope": "individual",
    "iso6393": "sda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shabak",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sassarese Sardinian",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Surubu",
    "type": "living",
    "scope": "individual",
    "iso6393": "sde",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sarli",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Savi",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Kurdish",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suundi",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sos Kundi",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saudi Arabian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Semandang",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gallurese Sardinian",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bukar-Sadung Bidayuh",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sherdukpen",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Oraon Sadri",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sened",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sds",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shuadit",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sdt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sarudu",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sibu Melanau",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sallands",
    "type": "living",
    "scope": "individual",
    "iso6393": "sdz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Semai",
    "type": "living",
    "scope": "individual",
    "iso6393": "sea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shempire Senoufo",
    "type": "living",
    "scope": "individual",
    "iso6393": "seb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sechelt",
    "type": "living",
    "scope": "individual",
    "iso6393": "sec",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sedang",
    "type": "living",
    "scope": "individual",
    "iso6393": "sed",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seneca",
    "type": "living",
    "scope": "individual",
    "iso6393": "see",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cebaara Senoufo",
    "type": "living",
    "scope": "individual",
    "iso6393": "sef",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Segeju",
    "type": "living",
    "scope": "individual",
    "iso6393": "seg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sena",
    "type": "living",
    "scope": "individual",
    "iso6393": "seh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seri",
    "type": "living",
    "scope": "individual",
    "iso6393": "sei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sene",
    "type": "living",
    "scope": "individual",
    "iso6393": "sej",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sekani",
    "type": "living",
    "scope": "individual",
    "iso6393": "sek",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Selkup",
    "type": "living",
    "scope": "individual",
    "iso6393": "sel",
    "iso6392B": "sel",
    "iso6392T": "sel",
    "iso6391": null
  },
  {
    "name": "Nanerigé Sénoufo",
    "type": "living",
    "scope": "individual",
    "iso6393": "sen",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suarmin",
    "type": "living",
    "scope": "individual",
    "iso6393": "seo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sìcìté Sénoufo",
    "type": "living",
    "scope": "individual",
    "iso6393": "sep",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Senara Sénoufo",
    "type": "living",
    "scope": "individual",
    "iso6393": "seq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Serrano",
    "type": "living",
    "scope": "individual",
    "iso6393": "ser",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koyraboro Senni Songhai",
    "type": "living",
    "scope": "individual",
    "iso6393": "ses",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sentani",
    "type": "living",
    "scope": "individual",
    "iso6393": "set",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Serui-Laut",
    "type": "living",
    "scope": "individual",
    "iso6393": "seu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyarafolo Senoufo",
    "type": "living",
    "scope": "individual",
    "iso6393": "sev",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sewa Bay",
    "type": "living",
    "scope": "individual",
    "iso6393": "sew",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Secoya",
    "type": "living",
    "scope": "individual",
    "iso6393": "sey",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Senthang Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "sez",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Langue des signes de Belgique Francophone",
    "type": "living",
    "scope": "individual",
    "iso6393": "sfb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Subanen",
    "type": "living",
    "scope": "individual",
    "iso6393": "sfe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Small Flowery Miao",
    "type": "living",
    "scope": "individual",
    "iso6393": "sfm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South African Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "sfs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sehwi",
    "type": "living",
    "scope": "individual",
    "iso6393": "sfw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Old Irish (to 900)",
    "type": "historical",
    "scope": "individual",
    "iso6393": "sga",
    "iso6392B": "sga",
    "iso6392T": "sga",
    "iso6391": null
  },
  {
    "name": "Mag-antsi Ayta",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kipsigis",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Surigaonon",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Segai",
    "type": "living",
    "scope": "individual",
    "iso6393": "sge",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Swiss-German Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shughni",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suga",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Surgujia",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sangkong",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Singa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sgm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Singpho",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sangisari",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samogitian",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Brokpake",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Salas",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sebat Bet Gurage",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sierra Leone Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sanglechi",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sursurunga",
    "type": "living",
    "scope": "individual",
    "iso6393": "sgz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shall-Zwall",
    "type": "living",
    "scope": "individual",
    "iso6393": "sha",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ninam",
    "type": "living",
    "scope": "individual",
    "iso6393": "shb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sonde",
    "type": "living",
    "scope": "individual",
    "iso6393": "shc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kundal Shahi",
    "type": "living",
    "scope": "individual",
    "iso6393": "shd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sheko",
    "type": "living",
    "scope": "individual",
    "iso6393": "she",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shua",
    "type": "living",
    "scope": "individual",
    "iso6393": "shg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shoshoni",
    "type": "living",
    "scope": "individual",
    "iso6393": "shh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tachelhit",
    "type": "living",
    "scope": "individual",
    "iso6393": "shi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shatt",
    "type": "living",
    "scope": "individual",
    "iso6393": "shj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shilluk",
    "type": "living",
    "scope": "individual",
    "iso6393": "shk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shendu",
    "type": "living",
    "scope": "individual",
    "iso6393": "shl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shahrudi",
    "type": "living",
    "scope": "individual",
    "iso6393": "shm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shan",
    "type": "living",
    "scope": "individual",
    "iso6393": "shn",
    "iso6392B": "shn",
    "iso6392T": "shn",
    "iso6391": null
  },
  {
    "name": "Shanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "sho",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shipibo-Conibo",
    "type": "living",
    "scope": "individual",
    "iso6393": "shp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sala",
    "type": "living",
    "scope": "individual",
    "iso6393": "shq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shi",
    "type": "living",
    "scope": "individual",
    "iso6393": "shr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shuswap",
    "type": "living",
    "scope": "individual",
    "iso6393": "shs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shasta",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sht",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chadian Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "shu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shehri",
    "type": "living",
    "scope": "individual",
    "iso6393": "shv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shwai",
    "type": "living",
    "scope": "individual",
    "iso6393": "shw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "She",
    "type": "living",
    "scope": "individual",
    "iso6393": "shx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tachawit",
    "type": "living",
    "scope": "individual",
    "iso6393": "shy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Syenara Senoufo",
    "type": "living",
    "scope": "individual",
    "iso6393": "shz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akkala Sami",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sebop",
    "type": "living",
    "scope": "individual",
    "iso6393": "sib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sidamo",
    "type": "living",
    "scope": "individual",
    "iso6393": "sid",
    "iso6392B": "sid",
    "iso6392T": "sid",
    "iso6391": null
  },
  {
    "name": "Simaa",
    "type": "living",
    "scope": "individual",
    "iso6393": "sie",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siamou",
    "type": "living",
    "scope": "individual",
    "iso6393": "sif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Paasaal",
    "type": "living",
    "scope": "individual",
    "iso6393": "sig",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zire",
    "type": "living",
    "scope": "individual",
    "iso6393": "sih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shom Peng",
    "type": "living",
    "scope": "individual",
    "iso6393": "sii",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Numbami",
    "type": "living",
    "scope": "individual",
    "iso6393": "sij",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sikiana",
    "type": "living",
    "scope": "individual",
    "iso6393": "sik",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tumulung Sisaala",
    "type": "living",
    "scope": "individual",
    "iso6393": "sil",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mende (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "sim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sinhala",
    "type": "living",
    "scope": "individual",
    "iso6393": "sin",
    "iso6392B": "sin",
    "iso6392T": "sin",
    "iso6391": "si"
  },
  {
    "name": "Sikkimese",
    "type": "living",
    "scope": "individual",
    "iso6393": "sip",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sonia",
    "type": "living",
    "scope": "individual",
    "iso6393": "siq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siri",
    "type": "living",
    "scope": "individual",
    "iso6393": "sir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siuslaw",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sis",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sinagen",
    "type": "living",
    "scope": "individual",
    "iso6393": "siu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sumariup",
    "type": "living",
    "scope": "individual",
    "iso6393": "siv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siwai",
    "type": "living",
    "scope": "individual",
    "iso6393": "siw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sumau",
    "type": "living",
    "scope": "individual",
    "iso6393": "six",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sivandi",
    "type": "living",
    "scope": "individual",
    "iso6393": "siy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siwi",
    "type": "living",
    "scope": "individual",
    "iso6393": "siz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Epena",
    "type": "living",
    "scope": "individual",
    "iso6393": "sja",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sajau Basap",
    "type": "living",
    "scope": "individual",
    "iso6393": "sjb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kildin Sami",
    "type": "living",
    "scope": "individual",
    "iso6393": "sjd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pite Sami",
    "type": "living",
    "scope": "individual",
    "iso6393": "sje",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Assangori",
    "type": "living",
    "scope": "individual",
    "iso6393": "sjg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kemi Sami",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sjk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sajalong",
    "type": "living",
    "scope": "individual",
    "iso6393": "sjl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mapun",
    "type": "living",
    "scope": "individual",
    "iso6393": "sjm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sindarin",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "sjn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xibe",
    "type": "living",
    "scope": "individual",
    "iso6393": "sjo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Surjapuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "sjp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siar-Lak",
    "type": "living",
    "scope": "individual",
    "iso6393": "sjr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Senhaja De Srair",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sjs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ter Sami",
    "type": "living",
    "scope": "individual",
    "iso6393": "sjt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ume Sami",
    "type": "living",
    "scope": "individual",
    "iso6393": "sju",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shawnee",
    "type": "living",
    "scope": "individual",
    "iso6393": "sjw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Skagit",
    "type": "living",
    "scope": "individual",
    "iso6393": "ska",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saek",
    "type": "living",
    "scope": "individual",
    "iso6393": "skb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ma Manda",
    "type": "living",
    "scope": "individual",
    "iso6393": "skc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Sierra Miwok",
    "type": "living",
    "scope": "individual",
    "iso6393": "skd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seke (Vanuatu)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ske",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sakirabiá",
    "type": "living",
    "scope": "individual",
    "iso6393": "skf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sakalava Malagasy",
    "type": "living",
    "scope": "individual",
    "iso6393": "skg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sikule",
    "type": "living",
    "scope": "individual",
    "iso6393": "skh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sika",
    "type": "living",
    "scope": "individual",
    "iso6393": "ski",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seke (Nepal)",
    "type": "living",
    "scope": "individual",
    "iso6393": "skj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kutong",
    "type": "living",
    "scope": "individual",
    "iso6393": "skm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kolibugan Subanon",
    "type": "living",
    "scope": "individual",
    "iso6393": "skn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seko Tengah",
    "type": "living",
    "scope": "individual",
    "iso6393": "sko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sekapan",
    "type": "living",
    "scope": "individual",
    "iso6393": "skp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sininkere",
    "type": "living",
    "scope": "individual",
    "iso6393": "skq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saraiki",
    "type": "living",
    "scope": "individual",
    "iso6393": "skr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maia",
    "type": "living",
    "scope": "individual",
    "iso6393": "sks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sakata",
    "type": "living",
    "scope": "individual",
    "iso6393": "skt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sakao",
    "type": "living",
    "scope": "individual",
    "iso6393": "sku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Skou",
    "type": "living",
    "scope": "individual",
    "iso6393": "skv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Skepi Creole Dutch",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "skw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seko Padang",
    "type": "living",
    "scope": "individual",
    "iso6393": "skx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sikaiana",
    "type": "living",
    "scope": "individual",
    "iso6393": "sky",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sekar",
    "type": "living",
    "scope": "individual",
    "iso6393": "skz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sáliba",
    "type": "living",
    "scope": "individual",
    "iso6393": "slc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sissala",
    "type": "living",
    "scope": "individual",
    "iso6393": "sld",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sholaga",
    "type": "living",
    "scope": "individual",
    "iso6393": "sle",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Swiss-Italian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "slf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Selungai Murut",
    "type": "living",
    "scope": "individual",
    "iso6393": "slg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Puget Sound Salish",
    "type": "living",
    "scope": "individual",
    "iso6393": "slh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lower Silesian",
    "type": "living",
    "scope": "individual",
    "iso6393": "sli",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Salumá",
    "type": "living",
    "scope": "individual",
    "iso6393": "slj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Slovak",
    "type": "living",
    "scope": "individual",
    "iso6393": "slk",
    "iso6392B": "slo",
    "iso6392T": "slk",
    "iso6391": "sk"
  },
  {
    "name": "Salt-Yui",
    "type": "living",
    "scope": "individual",
    "iso6393": "sll",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pangutaran Sama",
    "type": "living",
    "scope": "individual",
    "iso6393": "slm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Salinan",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sln",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lamaholot",
    "type": "living",
    "scope": "individual",
    "iso6393": "slp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Salchuq",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "slq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Salar",
    "type": "living",
    "scope": "individual",
    "iso6393": "slr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Singapore Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "sls",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sila",
    "type": "living",
    "scope": "individual",
    "iso6393": "slt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Selaru",
    "type": "living",
    "scope": "individual",
    "iso6393": "slu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Slovenian",
    "type": "living",
    "scope": "individual",
    "iso6393": "slv",
    "iso6392B": "slv",
    "iso6392T": "slv",
    "iso6391": "sl"
  },
  {
    "name": "Sialum",
    "type": "living",
    "scope": "individual",
    "iso6393": "slw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Salampasu",
    "type": "living",
    "scope": "individual",
    "iso6393": "slx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Selayar",
    "type": "living",
    "scope": "individual",
    "iso6393": "sly",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ma'ya",
    "type": "living",
    "scope": "individual",
    "iso6393": "slz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Sami",
    "type": "living",
    "scope": "individual",
    "iso6393": "sma",
    "iso6392B": "sma",
    "iso6392T": "sma",
    "iso6391": null
  },
  {
    "name": "Simbari",
    "type": "living",
    "scope": "individual",
    "iso6393": "smb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Som",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "smc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sama",
    "type": "living",
    "scope": "individual",
    "iso6393": "smd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Sami",
    "type": "living",
    "scope": "individual",
    "iso6393": "sme",
    "iso6392B": "sme",
    "iso6392T": "sme",
    "iso6391": "se"
  },
  {
    "name": "Auwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "smf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Simbali",
    "type": "living",
    "scope": "individual",
    "iso6393": "smg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samei",
    "type": "living",
    "scope": "individual",
    "iso6393": "smh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lule Sami",
    "type": "living",
    "scope": "individual",
    "iso6393": "smj",
    "iso6392B": "smj",
    "iso6392T": "smj",
    "iso6391": null
  },
  {
    "name": "Bolinao",
    "type": "living",
    "scope": "individual",
    "iso6393": "smk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Sama",
    "type": "living",
    "scope": "individual",
    "iso6393": "sml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Musasa",
    "type": "living",
    "scope": "individual",
    "iso6393": "smm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Inari Sami",
    "type": "living",
    "scope": "individual",
    "iso6393": "smn",
    "iso6392B": "smn",
    "iso6392T": "smn",
    "iso6391": null
  },
  {
    "name": "Samoan",
    "type": "living",
    "scope": "individual",
    "iso6393": "smo",
    "iso6392B": "smo",
    "iso6392T": "smo",
    "iso6391": "sm"
  },
  {
    "name": "Samaritan",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "smp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samo",
    "type": "living",
    "scope": "individual",
    "iso6393": "smq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Simeulue",
    "type": "living",
    "scope": "individual",
    "iso6393": "smr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Skolt Sami",
    "type": "living",
    "scope": "individual",
    "iso6393": "sms",
    "iso6392B": "sms",
    "iso6392T": "sms",
    "iso6391": null
  },
  {
    "name": "Simte",
    "type": "living",
    "scope": "individual",
    "iso6393": "smt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Somray",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "smu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samvedi",
    "type": "living",
    "scope": "individual",
    "iso6393": "smv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sumbawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "smw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samba",
    "type": "living",
    "scope": "individual",
    "iso6393": "smx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Semnani",
    "type": "living",
    "scope": "individual",
    "iso6393": "smy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Simeku",
    "type": "living",
    "scope": "individual",
    "iso6393": "smz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shona",
    "type": "living",
    "scope": "individual",
    "iso6393": "sna",
    "iso6392B": "sna",
    "iso6392T": "sna",
    "iso6391": "sn"
  },
  {
    "name": "Sebuyau",
    "type": "living",
    "scope": "individual",
    "iso6393": "snb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sinaugoro",
    "type": "living",
    "scope": "individual",
    "iso6393": "snc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sindhi",
    "type": "living",
    "scope": "individual",
    "iso6393": "snd",
    "iso6392B": "snd",
    "iso6392T": "snd",
    "iso6391": "sd"
  },
  {
    "name": "Bau Bidayuh",
    "type": "living",
    "scope": "individual",
    "iso6393": "sne",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Noon",
    "type": "living",
    "scope": "individual",
    "iso6393": "snf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sanga (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "sng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sensi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Riverain Sango",
    "type": "living",
    "scope": "individual",
    "iso6393": "snj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Soninke",
    "type": "living",
    "scope": "individual",
    "iso6393": "snk",
    "iso6392B": "snk",
    "iso6392T": "snk",
    "iso6391": null
  },
  {
    "name": "Sangil",
    "type": "living",
    "scope": "individual",
    "iso6393": "snl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Ma'di",
    "type": "living",
    "scope": "individual",
    "iso6393": "snm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siona",
    "type": "living",
    "scope": "individual",
    "iso6393": "snn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Snohomish",
    "type": "living",
    "scope": "individual",
    "iso6393": "sno",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siane",
    "type": "living",
    "scope": "individual",
    "iso6393": "snp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sangu (Gabon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "snq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sihan",
    "type": "living",
    "scope": "individual",
    "iso6393": "snr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South West Bay",
    "type": "living",
    "scope": "individual",
    "iso6393": "sns",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Senggi",
    "type": "living",
    "scope": "individual",
    "iso6393": "snu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sa'ban",
    "type": "living",
    "scope": "individual",
    "iso6393": "snv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Selee",
    "type": "living",
    "scope": "individual",
    "iso6393": "snw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sam",
    "type": "living",
    "scope": "individual",
    "iso6393": "snx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saniyo-Hiyewe",
    "type": "living",
    "scope": "individual",
    "iso6393": "sny",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kou",
    "type": "living",
    "scope": "individual",
    "iso6393": "snz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thai Song",
    "type": "living",
    "scope": "individual",
    "iso6393": "soa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sobei",
    "type": "living",
    "scope": "individual",
    "iso6393": "sob",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "So (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "soc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Songoora",
    "type": "living",
    "scope": "individual",
    "iso6393": "sod",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Songomeno",
    "type": "living",
    "scope": "individual",
    "iso6393": "soe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sogdian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "sog",
    "iso6392B": "sog",
    "iso6392T": "sog",
    "iso6391": null
  },
  {
    "name": "Aka",
    "type": "living",
    "scope": "individual",
    "iso6393": "soh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sonha",
    "type": "living",
    "scope": "individual",
    "iso6393": "soi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Soi",
    "type": "living",
    "scope": "individual",
    "iso6393": "soj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sokoro",
    "type": "living",
    "scope": "individual",
    "iso6393": "sok",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Solos",
    "type": "living",
    "scope": "individual",
    "iso6393": "sol",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Somali",
    "type": "living",
    "scope": "individual",
    "iso6393": "som",
    "iso6392B": "som",
    "iso6392T": "som",
    "iso6391": "so"
  },
  {
    "name": "Songo",
    "type": "living",
    "scope": "individual",
    "iso6393": "soo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Songe",
    "type": "living",
    "scope": "individual",
    "iso6393": "sop",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanasi",
    "type": "living",
    "scope": "individual",
    "iso6393": "soq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Somrai",
    "type": "living",
    "scope": "individual",
    "iso6393": "sor",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seeku",
    "type": "living",
    "scope": "individual",
    "iso6393": "sos",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Sotho",
    "type": "living",
    "scope": "individual",
    "iso6393": "sot",
    "iso6392B": "sot",
    "iso6392T": "sot",
    "iso6391": "st"
  },
  {
    "name": "Southern Thai",
    "type": "living",
    "scope": "individual",
    "iso6393": "sou",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sonsorol",
    "type": "living",
    "scope": "individual",
    "iso6393": "sov",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sowanda",
    "type": "living",
    "scope": "individual",
    "iso6393": "sow",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Swo",
    "type": "living",
    "scope": "individual",
    "iso6393": "sox",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miyobe",
    "type": "living",
    "scope": "individual",
    "iso6393": "soy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Temi",
    "type": "living",
    "scope": "individual",
    "iso6393": "soz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Spanish",
    "type": "living",
    "scope": "individual",
    "iso6393": "spa",
    "iso6392B": "spa",
    "iso6392T": "spa",
    "iso6391": "es"
  },
  {
    "name": "Sepa (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "spb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sapé",
    "type": "living",
    "scope": "individual",
    "iso6393": "spc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saep",
    "type": "living",
    "scope": "individual",
    "iso6393": "spd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sepa (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "spe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sian",
    "type": "living",
    "scope": "individual",
    "iso6393": "spg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saponi",
    "type": "living",
    "scope": "individual",
    "iso6393": "spi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sengo",
    "type": "living",
    "scope": "individual",
    "iso6393": "spk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Selepet",
    "type": "living",
    "scope": "individual",
    "iso6393": "spl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akukem",
    "type": "living",
    "scope": "individual",
    "iso6393": "spm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sanapaná",
    "type": "living",
    "scope": "individual",
    "iso6393": "spn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Spokane",
    "type": "living",
    "scope": "individual",
    "iso6393": "spo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Supyire Senoufo",
    "type": "living",
    "scope": "individual",
    "iso6393": "spp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Loreto-Ucayali Spanish",
    "type": "living",
    "scope": "individual",
    "iso6393": "spq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saparua",
    "type": "living",
    "scope": "individual",
    "iso6393": "spr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saposa",
    "type": "living",
    "scope": "individual",
    "iso6393": "sps",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Spiti Bhoti",
    "type": "living",
    "scope": "individual",
    "iso6393": "spt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sapuan",
    "type": "living",
    "scope": "individual",
    "iso6393": "spu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sambalpuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "spv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Picene",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "spx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sabaot",
    "type": "living",
    "scope": "individual",
    "iso6393": "spy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shama-Sambuga",
    "type": "living",
    "scope": "individual",
    "iso6393": "sqa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shau",
    "type": "living",
    "scope": "individual",
    "iso6393": "sqh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Albanian",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "sqi",
    "iso6392B": "alb",
    "iso6392T": "sqi",
    "iso6391": "sq"
  },
  {
    "name": "Albanian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "sqk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suma",
    "type": "living",
    "scope": "individual",
    "iso6393": "sqm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Susquehannock",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sqn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sorkhei",
    "type": "living",
    "scope": "individual",
    "iso6393": "sqo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sou",
    "type": "living",
    "scope": "individual",
    "iso6393": "sqq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siculo Arabic",
    "type": "historical",
    "scope": "individual",
    "iso6393": "sqr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sri Lankan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "sqs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Soqotri",
    "type": "living",
    "scope": "individual",
    "iso6393": "sqt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Squamish",
    "type": "living",
    "scope": "individual",
    "iso6393": "squ",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saruga",
    "type": "living",
    "scope": "individual",
    "iso6393": "sra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sora",
    "type": "living",
    "scope": "individual",
    "iso6393": "srb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Logudorese Sardinian",
    "type": "living",
    "scope": "individual",
    "iso6393": "src",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sardinian",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "srd",
    "iso6392B": "srd",
    "iso6392T": "srd",
    "iso6391": "sc"
  },
  {
    "name": "Sara",
    "type": "living",
    "scope": "individual",
    "iso6393": "sre",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nafi",
    "type": "living",
    "scope": "individual",
    "iso6393": "srf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sulod",
    "type": "living",
    "scope": "individual",
    "iso6393": "srg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sarikoli",
    "type": "living",
    "scope": "individual",
    "iso6393": "srh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siriano",
    "type": "living",
    "scope": "individual",
    "iso6393": "sri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Serudung Murut",
    "type": "living",
    "scope": "individual",
    "iso6393": "srk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isirawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "srl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saramaccan",
    "type": "living",
    "scope": "individual",
    "iso6393": "srm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sranan Tongo",
    "type": "living",
    "scope": "individual",
    "iso6393": "srn",
    "iso6392B": "srn",
    "iso6392T": "srn",
    "iso6391": null
  },
  {
    "name": "Campidanese Sardinian",
    "type": "living",
    "scope": "individual",
    "iso6393": "sro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Serbian",
    "type": "living",
    "scope": "individual",
    "iso6393": "srp",
    "iso6392B": "srp",
    "iso6392T": "srp",
    "iso6391": "sr"
  },
  {
    "name": "Sirionó",
    "type": "living",
    "scope": "individual",
    "iso6393": "srq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Serer",
    "type": "living",
    "scope": "individual",
    "iso6393": "srr",
    "iso6392B": "srr",
    "iso6392T": "srr",
    "iso6391": null
  },
  {
    "name": "Sarsi",
    "type": "living",
    "scope": "individual",
    "iso6393": "srs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sauri",
    "type": "living",
    "scope": "individual",
    "iso6393": "srt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suruí",
    "type": "living",
    "scope": "individual",
    "iso6393": "sru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Sorsoganon",
    "type": "living",
    "scope": "individual",
    "iso6393": "srv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Serua",
    "type": "living",
    "scope": "individual",
    "iso6393": "srw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sirmauri",
    "type": "living",
    "scope": "individual",
    "iso6393": "srx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sera",
    "type": "living",
    "scope": "individual",
    "iso6393": "sry",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shahmirzadi",
    "type": "living",
    "scope": "individual",
    "iso6393": "srz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Sama",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suba-Simbiti",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siroi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Balangingi",
    "type": "living",
    "scope": "individual",
    "iso6393": "sse",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thao",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ssf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seimat",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shihhi Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sansi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sausi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sunam",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Sisaala",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Semnam",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waata",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sissano",
    "type": "living",
    "scope": "individual",
    "iso6393": "sso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Spanish Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "So'a",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Swiss-French Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sô",
    "type": "living",
    "scope": "individual",
    "iso6393": "sss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sinasina",
    "type": "living",
    "scope": "individual",
    "iso6393": "sst",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Susuami",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shark Bay",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Swati",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssw",
    "iso6392B": "ssw",
    "iso6392T": "ssw",
    "iso6391": "ss"
  },
  {
    "name": "Samberigi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saho",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sengseng",
    "type": "living",
    "scope": "individual",
    "iso6393": "ssz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Settla",
    "type": "living",
    "scope": "individual",
    "iso6393": "sta",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Subanen",
    "type": "living",
    "scope": "individual",
    "iso6393": "stb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sentinel",
    "type": "living",
    "scope": "individual",
    "iso6393": "std",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Liana-Seti",
    "type": "living",
    "scope": "individual",
    "iso6393": "ste",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seta",
    "type": "living",
    "scope": "individual",
    "iso6393": "stf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Trieng",
    "type": "living",
    "scope": "individual",
    "iso6393": "stg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shelta",
    "type": "living",
    "scope": "individual",
    "iso6393": "sth",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bulo Stieng",
    "type": "living",
    "scope": "individual",
    "iso6393": "sti",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Matya Samo",
    "type": "living",
    "scope": "individual",
    "iso6393": "stj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arammba",
    "type": "living",
    "scope": "individual",
    "iso6393": "stk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Stellingwerfs",
    "type": "living",
    "scope": "individual",
    "iso6393": "stl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Setaman",
    "type": "living",
    "scope": "individual",
    "iso6393": "stm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Owa",
    "type": "living",
    "scope": "individual",
    "iso6393": "stn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Stoney",
    "type": "living",
    "scope": "individual",
    "iso6393": "sto",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southeastern Tepehuan",
    "type": "living",
    "scope": "individual",
    "iso6393": "stp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saterfriesisch",
    "type": "living",
    "scope": "individual",
    "iso6393": "stq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Straits Salish",
    "type": "living",
    "scope": "individual",
    "iso6393": "str",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shumashti",
    "type": "living",
    "scope": "individual",
    "iso6393": "sts",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Budeh Stieng",
    "type": "living",
    "scope": "individual",
    "iso6393": "stt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samtao",
    "type": "living",
    "scope": "individual",
    "iso6393": "stu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Silt'e",
    "type": "living",
    "scope": "individual",
    "iso6393": "stv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Satawalese",
    "type": "living",
    "scope": "individual",
    "iso6393": "stw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siberian Tatar",
    "type": "living",
    "scope": "individual",
    "iso6393": "sty",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sulka",
    "type": "living",
    "scope": "individual",
    "iso6393": "sua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suku",
    "type": "living",
    "scope": "individual",
    "iso6393": "sub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Subanon",
    "type": "living",
    "scope": "individual",
    "iso6393": "suc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suena",
    "type": "living",
    "scope": "individual",
    "iso6393": "sue",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suganga",
    "type": "living",
    "scope": "individual",
    "iso6393": "sug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suki",
    "type": "living",
    "scope": "individual",
    "iso6393": "sui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shubi",
    "type": "living",
    "scope": "individual",
    "iso6393": "suj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sukuma",
    "type": "living",
    "scope": "individual",
    "iso6393": "suk",
    "iso6392B": "suk",
    "iso6392T": "suk",
    "iso6391": null
  },
  {
    "name": "Sundanese",
    "type": "living",
    "scope": "individual",
    "iso6393": "sun",
    "iso6392B": "sun",
    "iso6392T": "sun",
    "iso6391": "su"
  },
  {
    "name": "Suri",
    "type": "living",
    "scope": "individual",
    "iso6393": "suq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mwaghavul",
    "type": "living",
    "scope": "individual",
    "iso6393": "sur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Susu",
    "type": "living",
    "scope": "individual",
    "iso6393": "sus",
    "iso6392B": "sus",
    "iso6392T": "sus",
    "iso6391": null
  },
  {
    "name": "Subtiaba",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puroik",
    "type": "living",
    "scope": "individual",
    "iso6393": "suv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sumbwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "suw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sumerian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "sux",
    "iso6392B": "sux",
    "iso6392T": "sux",
    "iso6391": null
  },
  {
    "name": "Suyá",
    "type": "living",
    "scope": "individual",
    "iso6393": "suy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sunwar",
    "type": "living",
    "scope": "individual",
    "iso6393": "suz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Svan",
    "type": "living",
    "scope": "individual",
    "iso6393": "sva",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ulau-Suain",
    "type": "living",
    "scope": "individual",
    "iso6393": "svb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vincentian Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "svc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Serili",
    "type": "living",
    "scope": "individual",
    "iso6393": "sve",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Slovakian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "svk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Slavomolisano",
    "type": "living",
    "scope": "individual",
    "iso6393": "svm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Savosavo",
    "type": "living",
    "scope": "individual",
    "iso6393": "svs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Skalvian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "svx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Swahili (macrolanguage)",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "swa",
    "iso6392B": "swa",
    "iso6392T": "swa",
    "iso6391": "sw"
  },
  {
    "name": "Maore Comorian",
    "type": "living",
    "scope": "individual",
    "iso6393": "swb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Congo Swahili",
    "type": "living",
    "scope": "individual",
    "iso6393": "swc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Swedish",
    "type": "living",
    "scope": "individual",
    "iso6393": "swe",
    "iso6392B": "swe",
    "iso6392T": "swe",
    "iso6391": "sv"
  },
  {
    "name": "Sere",
    "type": "living",
    "scope": "individual",
    "iso6393": "swf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Swabian",
    "type": "living",
    "scope": "individual",
    "iso6393": "swg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Swahili (individual language)",
    "type": "living",
    "scope": "individual",
    "iso6393": "swh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sui",
    "type": "living",
    "scope": "individual",
    "iso6393": "swi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sira",
    "type": "living",
    "scope": "individual",
    "iso6393": "swj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malawi Sena",
    "type": "living",
    "scope": "individual",
    "iso6393": "swk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Swedish Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "swl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samosa",
    "type": "living",
    "scope": "individual",
    "iso6393": "swm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sawknah",
    "type": "living",
    "scope": "individual",
    "iso6393": "swn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shanenawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "swo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suau",
    "type": "living",
    "scope": "individual",
    "iso6393": "swp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sharwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "swq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saweru",
    "type": "living",
    "scope": "individual",
    "iso6393": "swr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seluwasan",
    "type": "living",
    "scope": "individual",
    "iso6393": "sws",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sawila",
    "type": "living",
    "scope": "individual",
    "iso6393": "swt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suwawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "swu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shekhawati",
    "type": "living",
    "scope": "individual",
    "iso6393": "swv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sowa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sww",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suruahá",
    "type": "living",
    "scope": "individual",
    "iso6393": "swx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sarua",
    "type": "living",
    "scope": "individual",
    "iso6393": "swy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suba",
    "type": "living",
    "scope": "individual",
    "iso6393": "sxb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sicanian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "sxc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sighu",
    "type": "living",
    "scope": "individual",
    "iso6393": "sxe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shuhi",
    "type": "living",
    "scope": "individual",
    "iso6393": "sxg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Kalapuya",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sxk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Selian",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "sxl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samre",
    "type": "living",
    "scope": "individual",
    "iso6393": "sxm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sangir",
    "type": "living",
    "scope": "individual",
    "iso6393": "sxn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sorothaptic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "sxo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saaroa",
    "type": "living",
    "scope": "individual",
    "iso6393": "sxr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sasaru",
    "type": "living",
    "scope": "individual",
    "iso6393": "sxs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Upper Saxon",
    "type": "living",
    "scope": "individual",
    "iso6393": "sxu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saxwe Gbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "sxw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Siang",
    "type": "living",
    "scope": "individual",
    "iso6393": "sya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Subanen",
    "type": "living",
    "scope": "individual",
    "iso6393": "syb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Classical Syriac",
    "type": "historical",
    "scope": "individual",
    "iso6393": "syc",
    "iso6392B": "syc",
    "iso6392T": "syc",
    "iso6391": null
  },
  {
    "name": "Seki",
    "type": "living",
    "scope": "individual",
    "iso6393": "syi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sukur",
    "type": "living",
    "scope": "individual",
    "iso6393": "syk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sylheti",
    "type": "living",
    "scope": "individual",
    "iso6393": "syl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maya Samo",
    "type": "living",
    "scope": "individual",
    "iso6393": "sym",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Senaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "syn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suoy",
    "type": "living",
    "scope": "individual",
    "iso6393": "syo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Syriac",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "syr",
    "iso6392B": "syr",
    "iso6392T": "syr",
    "iso6391": null
  },
  {
    "name": "Sinyar",
    "type": "living",
    "scope": "individual",
    "iso6393": "sys",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kagate",
    "type": "living",
    "scope": "individual",
    "iso6393": "syw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samay",
    "type": "living",
    "scope": "individual",
    "iso6393": "syx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Al-Sayyid Bedouin Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "syy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Semelai",
    "type": "living",
    "scope": "individual",
    "iso6393": "sza",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngalum",
    "type": "living",
    "scope": "individual",
    "iso6393": "szb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Semaq Beri",
    "type": "living",
    "scope": "individual",
    "iso6393": "szc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seru",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "szd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Seze",
    "type": "living",
    "scope": "individual",
    "iso6393": "sze",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sengele",
    "type": "living",
    "scope": "individual",
    "iso6393": "szg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Silesian",
    "type": "living",
    "scope": "individual",
    "iso6393": "szl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sula",
    "type": "living",
    "scope": "individual",
    "iso6393": "szn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Suabo",
    "type": "living",
    "scope": "individual",
    "iso6393": "szp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Solomon Islands Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "szs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isu (Fako Division)",
    "type": "living",
    "scope": "individual",
    "iso6393": "szv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sawai",
    "type": "living",
    "scope": "individual",
    "iso6393": "szw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sakizaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "szy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lower Tanana",
    "type": "living",
    "scope": "individual",
    "iso6393": "taa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tabassaran",
    "type": "living",
    "scope": "individual",
    "iso6393": "tab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lowland Tarahumara",
    "type": "living",
    "scope": "individual",
    "iso6393": "tac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tause",
    "type": "living",
    "scope": "individual",
    "iso6393": "tad",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tariana",
    "type": "living",
    "scope": "individual",
    "iso6393": "tae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tapirapé",
    "type": "living",
    "scope": "individual",
    "iso6393": "taf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tagoi",
    "type": "living",
    "scope": "individual",
    "iso6393": "tag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tahitian",
    "type": "living",
    "scope": "individual",
    "iso6393": "tah",
    "iso6392B": "tah",
    "iso6392T": "tah",
    "iso6391": "ty"
  },
  {
    "name": "Eastern Tamang",
    "type": "living",
    "scope": "individual",
    "iso6393": "taj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tala",
    "type": "living",
    "scope": "individual",
    "iso6393": "tak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tal",
    "type": "living",
    "scope": "individual",
    "iso6393": "tal",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tamil",
    "type": "living",
    "scope": "individual",
    "iso6393": "tam",
    "iso6392B": "tam",
    "iso6392T": "tam",
    "iso6391": "ta"
  },
  {
    "name": "Tangale",
    "type": "living",
    "scope": "individual",
    "iso6393": "tan",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yami",
    "type": "living",
    "scope": "individual",
    "iso6393": "tao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taabwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tap",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tamasheq",
    "type": "living",
    "scope": "individual",
    "iso6393": "taq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Tarahumara",
    "type": "living",
    "scope": "individual",
    "iso6393": "tar",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tay Boi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tas",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tatar",
    "type": "living",
    "scope": "individual",
    "iso6393": "tat",
    "iso6392B": "tat",
    "iso6392T": "tat",
    "iso6391": "tt"
  },
  {
    "name": "Upper Tanana",
    "type": "living",
    "scope": "individual",
    "iso6393": "tau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tatuyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tai",
    "type": "living",
    "scope": "individual",
    "iso6393": "taw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tamki",
    "type": "living",
    "scope": "individual",
    "iso6393": "tax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Atayal",
    "type": "living",
    "scope": "individual",
    "iso6393": "tay",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tocho",
    "type": "living",
    "scope": "individual",
    "iso6393": "taz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aikanã",
    "type": "living",
    "scope": "individual",
    "iso6393": "tba",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tapeba",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Takia",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaki Ae",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tanimbili",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mandara",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Tairora",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dharawal",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tbh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gaam",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tiang",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Calamian Tagbanwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tboli",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tagbu",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barro Negro Tunebo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tawala",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taworta",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tumtum",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tanguat",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tembo (Kitembo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tubar",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tbu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tagbanwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kapin",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tabaru",
    "type": "living",
    "scope": "individual",
    "iso6393": "tby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ditammari",
    "type": "living",
    "scope": "individual",
    "iso6393": "tbz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ticuna",
    "type": "living",
    "scope": "individual",
    "iso6393": "tca",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tanacross",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Datooga",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tafi",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Tutchone",
    "type": "living",
    "scope": "individual",
    "iso6393": "tce",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malinaltepec Me'phaa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tamagario",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Turks And Caicos Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "tch",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wára",
    "type": "living",
    "scope": "individual",
    "iso6393": "tci",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tchitchege",
    "type": "living",
    "scope": "individual",
    "iso6393": "tck",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taman (Myanmar)",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tcl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tanahmerah",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tichurong",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taungyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tco",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tawr Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaiy",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Torres Strait Creole",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "T'en",
    "type": "living",
    "scope": "individual",
    "iso6393": "tct",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southeastern Tarahumara",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tecpatlán Totonac",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toda",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thado Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "tcz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tagdal",
    "type": "living",
    "scope": "individual",
    "iso6393": "tda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Panchpargania",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Emberá-Tadó",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tai Nüa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tiranige Diga Dogon",
    "type": "living",
    "scope": "individual",
    "iso6393": "tde",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Talieng",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Tamang",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thulung",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tomadino",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tajio",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tambas",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sur",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taruma",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tondano",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teme",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tita",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Todrah",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Doutai",
    "type": "living",
    "scope": "individual",
    "iso6393": "tds",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tetun Dili",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toro",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tandroy-Mahafaly Malagasy",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tadyawan",
    "type": "living",
    "scope": "individual",
    "iso6393": "tdy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Temiar",
    "type": "living",
    "scope": "individual",
    "iso6393": "tea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tetete",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "teb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Terik",
    "type": "living",
    "scope": "individual",
    "iso6393": "tec",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tepo Krumen",
    "type": "living",
    "scope": "individual",
    "iso6393": "ted",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huehuetla Tepehua",
    "type": "living",
    "scope": "individual",
    "iso6393": "tee",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teressa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tef",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teke-Tege",
    "type": "living",
    "scope": "individual",
    "iso6393": "teg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tehuelche",
    "type": "living",
    "scope": "individual",
    "iso6393": "teh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Torricelli",
    "type": "living",
    "scope": "individual",
    "iso6393": "tei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ibali Teke",
    "type": "living",
    "scope": "individual",
    "iso6393": "tek",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Telugu",
    "type": "living",
    "scope": "individual",
    "iso6393": "tel",
    "iso6392B": "tel",
    "iso6392T": "tel",
    "iso6391": "te"
  },
  {
    "name": "Timne",
    "type": "living",
    "scope": "individual",
    "iso6393": "tem",
    "iso6392B": "tem",
    "iso6392T": "tem",
    "iso6391": null
  },
  {
    "name": "Tama (Colombia)",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ten",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teso",
    "type": "living",
    "scope": "individual",
    "iso6393": "teo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tepecano",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tep",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Temein",
    "type": "living",
    "scope": "individual",
    "iso6393": "teq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tereno",
    "type": "living",
    "scope": "individual",
    "iso6393": "ter",
    "iso6392B": "ter",
    "iso6392T": "ter",
    "iso6391": null
  },
  {
    "name": "Tengger",
    "type": "living",
    "scope": "individual",
    "iso6393": "tes",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tetum",
    "type": "living",
    "scope": "individual",
    "iso6393": "tet",
    "iso6392B": "tet",
    "iso6392T": "tet",
    "iso6391": null
  },
  {
    "name": "Soo",
    "type": "living",
    "scope": "individual",
    "iso6393": "teu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teor",
    "type": "living",
    "scope": "individual",
    "iso6393": "tev",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tewa (USA)",
    "type": "living",
    "scope": "individual",
    "iso6393": "tew",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tennet",
    "type": "living",
    "scope": "individual",
    "iso6393": "tex",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tulishi",
    "type": "living",
    "scope": "individual",
    "iso6393": "tey",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tetserret",
    "type": "living",
    "scope": "individual",
    "iso6393": "tez",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tofin Gbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "tfi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tanaina",
    "type": "living",
    "scope": "individual",
    "iso6393": "tfn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tefaro",
    "type": "living",
    "scope": "individual",
    "iso6393": "tfo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teribe",
    "type": "living",
    "scope": "individual",
    "iso6393": "tfr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ternate",
    "type": "living",
    "scope": "individual",
    "iso6393": "tft",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sagalla",
    "type": "living",
    "scope": "individual",
    "iso6393": "tga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tobilung",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tigak",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ciwogai",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Gorkha Tamang",
    "type": "living",
    "scope": "individual",
    "iso6393": "tge",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chalikha",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tobagonian Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lawunuia",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tagin",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tajik",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgk",
    "iso6392B": "tgk",
    "iso6392T": "tgk",
    "iso6391": "tg"
  },
  {
    "name": "Tagalog",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgl",
    "iso6392B": "tgl",
    "iso6392T": "tgl",
    "iso6391": "tl"
  },
  {
    "name": "Tandaganon",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sudest",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tangoa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tring",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tareng",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nume",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Tagbanwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tanggu",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tingui-Boto",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tgv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tagwana Senoufo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tagish",
    "type": "living",
    "scope": "individual",
    "iso6393": "tgx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Togoyo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tgy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tagalaka",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tgz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thai",
    "type": "living",
    "scope": "individual",
    "iso6393": "tha",
    "iso6392B": "tha",
    "iso6392T": "tha",
    "iso6391": "th"
  },
  {
    "name": "Kuuk Thaayorre",
    "type": "living",
    "scope": "individual",
    "iso6393": "thd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chitwania Tharu",
    "type": "living",
    "scope": "individual",
    "iso6393": "the",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thangmi",
    "type": "living",
    "scope": "individual",
    "iso6393": "thf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Tarahumara",
    "type": "living",
    "scope": "individual",
    "iso6393": "thh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tai Long",
    "type": "living",
    "scope": "individual",
    "iso6393": "thi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tharaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "thk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dangaura Tharu",
    "type": "living",
    "scope": "individual",
    "iso6393": "thl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aheu",
    "type": "living",
    "scope": "individual",
    "iso6393": "thm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thachanadan",
    "type": "living",
    "scope": "individual",
    "iso6393": "thn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thompson",
    "type": "living",
    "scope": "individual",
    "iso6393": "thp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kochila Tharu",
    "type": "living",
    "scope": "individual",
    "iso6393": "thq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rana Tharu",
    "type": "living",
    "scope": "individual",
    "iso6393": "thr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thakali",
    "type": "living",
    "scope": "individual",
    "iso6393": "ths",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tahltan",
    "type": "living",
    "scope": "individual",
    "iso6393": "tht",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "thu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tahaggart Tamahaq",
    "type": "living",
    "scope": "individual",
    "iso6393": "thv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thudam",
    "type": "living",
    "scope": "individual",
    "iso6393": "thw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tha",
    "type": "living",
    "scope": "individual",
    "iso6393": "thy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tayart Tamajeq",
    "type": "living",
    "scope": "individual",
    "iso6393": "thz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tidikelt Tamazight",
    "type": "living",
    "scope": "individual",
    "iso6393": "tia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tira",
    "type": "living",
    "scope": "individual",
    "iso6393": "tic",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tifal",
    "type": "living",
    "scope": "individual",
    "iso6393": "tif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tigre",
    "type": "living",
    "scope": "individual",
    "iso6393": "tig",
    "iso6392B": "tig",
    "iso6392T": "tig",
    "iso6391": null
  },
  {
    "name": "Timugon Murut",
    "type": "living",
    "scope": "individual",
    "iso6393": "tih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tiene",
    "type": "living",
    "scope": "individual",
    "iso6393": "tii",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tilung",
    "type": "living",
    "scope": "individual",
    "iso6393": "tij",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tikar",
    "type": "living",
    "scope": "individual",
    "iso6393": "tik",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tillamook",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "til",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Timbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "tim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tindi",
    "type": "living",
    "scope": "individual",
    "iso6393": "tin",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teop",
    "type": "living",
    "scope": "individual",
    "iso6393": "tio",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Trimuris",
    "type": "living",
    "scope": "individual",
    "iso6393": "tip",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tiéfo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tiq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tigrinya",
    "type": "living",
    "scope": "individual",
    "iso6393": "tir",
    "iso6392B": "tir",
    "iso6392T": "tir",
    "iso6391": "ti"
  },
  {
    "name": "Masadiit Itneg",
    "type": "living",
    "scope": "individual",
    "iso6393": "tis",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tinigua",
    "type": "living",
    "scope": "individual",
    "iso6393": "tit",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adasen",
    "type": "living",
    "scope": "individual",
    "iso6393": "tiu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tiv",
    "type": "living",
    "scope": "individual",
    "iso6393": "tiv",
    "iso6392B": "tiv",
    "iso6392T": "tiv",
    "iso6391": null
  },
  {
    "name": "Tiwi",
    "type": "living",
    "scope": "individual",
    "iso6393": "tiw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Tiwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tix",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tiruray",
    "type": "living",
    "scope": "individual",
    "iso6393": "tiy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tai Hongjin",
    "type": "living",
    "scope": "individual",
    "iso6393": "tiz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tajuasohn",
    "type": "living",
    "scope": "individual",
    "iso6393": "tja",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tunjung",
    "type": "living",
    "scope": "individual",
    "iso6393": "tjg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Tujia",
    "type": "living",
    "scope": "individual",
    "iso6393": "tji",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tjungundji",
    "type": "living",
    "scope": "individual",
    "iso6393": "tjj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tai Laing",
    "type": "living",
    "scope": "individual",
    "iso6393": "tjl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Timucua",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tjm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tonjon",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tjn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Temacine Tamazight",
    "type": "living",
    "scope": "individual",
    "iso6393": "tjo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tjupany",
    "type": "living",
    "scope": "individual",
    "iso6393": "tjp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Tujia",
    "type": "living",
    "scope": "individual",
    "iso6393": "tjs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tjurruru",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tju",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Djabwurrung",
    "type": "living",
    "scope": "individual",
    "iso6393": "tjw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Truká",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buksa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tkb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tukudede",
    "type": "living",
    "scope": "individual",
    "iso6393": "tkd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Takwane",
    "type": "living",
    "scope": "individual",
    "iso6393": "tke",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tukumanféd",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tkf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tesaka Malagasy",
    "type": "living",
    "scope": "individual",
    "iso6393": "tkg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tokelau",
    "type": "living",
    "scope": "individual",
    "iso6393": "tkl",
    "iso6392B": "tkl",
    "iso6392T": "tkl",
    "iso6391": null
  },
  {
    "name": "Takelma",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tkm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toku-No-Shima",
    "type": "living",
    "scope": "individual",
    "iso6393": "tkn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tikopia",
    "type": "living",
    "scope": "individual",
    "iso6393": "tkp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tee",
    "type": "living",
    "scope": "individual",
    "iso6393": "tkq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsakhur",
    "type": "living",
    "scope": "individual",
    "iso6393": "tkr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Takestani",
    "type": "living",
    "scope": "individual",
    "iso6393": "tks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kathoriya Tharu",
    "type": "living",
    "scope": "individual",
    "iso6393": "tkt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Upper Necaxa Totonac",
    "type": "living",
    "scope": "individual",
    "iso6393": "tku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mur Pano",
    "type": "living",
    "scope": "individual",
    "iso6393": "tkv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teanu",
    "type": "living",
    "scope": "individual",
    "iso6393": "tkw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tangko",
    "type": "living",
    "scope": "individual",
    "iso6393": "tkx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Takua",
    "type": "living",
    "scope": "individual",
    "iso6393": "tkz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southwestern Tepehuan",
    "type": "living",
    "scope": "individual",
    "iso6393": "tla",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tobelo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yecuatla Totonac",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Talaud",
    "type": "living",
    "scope": "individual",
    "iso6393": "tld",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Telefol",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tofanma",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Klingon",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "tlh",
    "iso6392B": "tlh",
    "iso6392T": "tlh",
    "iso6391": null
  },
  {
    "name": "Tlingit",
    "type": "living",
    "scope": "individual",
    "iso6393": "tli",
    "iso6392B": "tli",
    "iso6392T": "tli",
    "iso6391": null
  },
  {
    "name": "Talinga-Bwisi",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taloki",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tetela",
    "type": "living",
    "scope": "individual",
    "iso6393": "tll",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tolomako",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Talondo'",
    "type": "living",
    "scope": "individual",
    "iso6393": "tln",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Talodi",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Filomena Mata-Coahuitlán Totonac",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tai Loi",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Talise",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tambotalo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tls",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sou Nama",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tulehu",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taliabu",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khehek",
    "type": "living",
    "scope": "individual",
    "iso6393": "tlx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Talysh",
    "type": "living",
    "scope": "individual",
    "iso6393": "tly",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tama (Chad)",
    "type": "living",
    "scope": "individual",
    "iso6393": "tma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Katbol",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tumak",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Haruai",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tremembé",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toba-Maskoy",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ternateño",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tmg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tamashek",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "tmh",
    "iso6392B": "tmh",
    "iso6392T": "tmh",
    "iso6391": null
  },
  {
    "name": "Tutuba",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samarokena",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northwestern Tamang",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tamnim Citak",
    "type": "living",
    "scope": "individual",
    "iso6393": "tml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tai Thanh",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taman (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Temoq",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tumleo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jewish Babylonian Aramaic (ca. 200-1200 CE)",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tmr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tima",
    "type": "living",
    "scope": "individual",
    "iso6393": "tms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tasmate",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iau",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tembo (Motembo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Temuan",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tami",
    "type": "living",
    "scope": "individual",
    "iso6393": "tmy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tamanaku",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tmz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tacana",
    "type": "living",
    "scope": "individual",
    "iso6393": "tna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Tunebo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tanimuca-Retuarã",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Angosturas Tunebo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tobanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "tng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maiani",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tandia",
    "type": "living",
    "scope": "individual",
    "iso6393": "tni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwamera",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lenakel",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tabla",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Tanna",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toromono",
    "type": "living",
    "scope": "individual",
    "iso6393": "tno",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Whitesands",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taino",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tnq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ménik",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tenis",
    "type": "living",
    "scope": "individual",
    "iso6393": "tns",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tontemboan",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tay Khang",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tangchangya",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tonsawang",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tanema",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tongwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "tny",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ten'edn",
    "type": "living",
    "scope": "individual",
    "iso6393": "tnz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toba",
    "type": "living",
    "scope": "individual",
    "iso6393": "tob",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Coyutla Totonac",
    "type": "living",
    "scope": "individual",
    "iso6393": "toc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toma",
    "type": "living",
    "scope": "individual",
    "iso6393": "tod",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gizrra",
    "type": "living",
    "scope": "individual",
    "iso6393": "tof",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tonga (Nyasa)",
    "type": "living",
    "scope": "individual",
    "iso6393": "tog",
    "iso6392B": "tog",
    "iso6392T": "tog",
    "iso6391": null
  },
  {
    "name": "Gitonga",
    "type": "living",
    "scope": "individual",
    "iso6393": "toh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tonga (Zambia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "toi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tojolabal",
    "type": "living",
    "scope": "individual",
    "iso6393": "toj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tolowa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tol",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tombulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "tom",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tonga (Tonga Islands)",
    "type": "living",
    "scope": "individual",
    "iso6393": "ton",
    "iso6392B": "ton",
    "iso6392T": "ton",
    "iso6391": "to"
  },
  {
    "name": "Xicotepec De Juárez Totonac",
    "type": "living",
    "scope": "individual",
    "iso6393": "too",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Papantla Totonac",
    "type": "living",
    "scope": "individual",
    "iso6393": "top",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toposa",
    "type": "living",
    "scope": "individual",
    "iso6393": "toq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Togbo-Vara Banda",
    "type": "living",
    "scope": "individual",
    "iso6393": "tor",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Highland Totonac",
    "type": "living",
    "scope": "individual",
    "iso6393": "tos",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tho",
    "type": "living",
    "scope": "individual",
    "iso6393": "tou",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Upper Taromi",
    "type": "living",
    "scope": "individual",
    "iso6393": "tov",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jemez",
    "type": "living",
    "scope": "individual",
    "iso6393": "tow",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tobian",
    "type": "living",
    "scope": "individual",
    "iso6393": "tox",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Topoiyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "toy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "To",
    "type": "living",
    "scope": "individual",
    "iso6393": "toz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taupota",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Azoyú Me'phaa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tippera",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tarpia",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kula",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tok Pisin",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpi",
    "iso6392B": "tpi",
    "iso6392T": "tpi",
    "iso6391": null
  },
  {
    "name": "Tapieté",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tupinikin",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tpk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tlacoapa Me'phaa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tampulma",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tupinambá",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tpn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tai Pao",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pisaflores Tepehua",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tukpa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tuparí",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tlachichilco Tepehua",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tampuan",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tanapag",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tupí",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tpw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Acatepec Me'phaa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Trumai",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tinputz",
    "type": "living",
    "scope": "individual",
    "iso6393": "tpz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tembé",
    "type": "living",
    "scope": "individual",
    "iso6393": "tqb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lehali",
    "type": "living",
    "scope": "individual",
    "iso6393": "tql",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Turumsa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tqm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tenino",
    "type": "living",
    "scope": "individual",
    "iso6393": "tqn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toaripi",
    "type": "living",
    "scope": "individual",
    "iso6393": "tqo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tomoip",
    "type": "living",
    "scope": "individual",
    "iso6393": "tqp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tunni",
    "type": "living",
    "scope": "individual",
    "iso6393": "tqq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Torona",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tqr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Totonac",
    "type": "living",
    "scope": "individual",
    "iso6393": "tqt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Touo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tqu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tonkawa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tqw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tirahi",
    "type": "living",
    "scope": "individual",
    "iso6393": "tra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Terebu",
    "type": "living",
    "scope": "individual",
    "iso6393": "trb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Copala Triqui",
    "type": "living",
    "scope": "individual",
    "iso6393": "trc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Turi",
    "type": "living",
    "scope": "individual",
    "iso6393": "trd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "East Tarangan",
    "type": "living",
    "scope": "individual",
    "iso6393": "tre",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Trinidadian Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "trf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lishán Didán",
    "type": "living",
    "scope": "individual",
    "iso6393": "trg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Turaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "trh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Trió",
    "type": "living",
    "scope": "individual",
    "iso6393": "tri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toram",
    "type": "living",
    "scope": "individual",
    "iso6393": "trj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Traveller Scottish",
    "type": "living",
    "scope": "individual",
    "iso6393": "trl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tregami",
    "type": "living",
    "scope": "individual",
    "iso6393": "trm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Trinitario",
    "type": "living",
    "scope": "individual",
    "iso6393": "trn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tarao Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "tro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kok Borok",
    "type": "living",
    "scope": "individual",
    "iso6393": "trp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Martín Itunyoso Triqui",
    "type": "living",
    "scope": "individual",
    "iso6393": "trq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taushiro",
    "type": "living",
    "scope": "individual",
    "iso6393": "trr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chicahuaxtla Triqui",
    "type": "living",
    "scope": "individual",
    "iso6393": "trs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tunggare",
    "type": "living",
    "scope": "individual",
    "iso6393": "trt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Turoyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taroko",
    "type": "living",
    "scope": "individual",
    "iso6393": "trv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Torwali",
    "type": "living",
    "scope": "individual",
    "iso6393": "trw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tringgus-Sembaan Bidayuh",
    "type": "living",
    "scope": "individual",
    "iso6393": "trx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Turung",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "try",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Torá",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "trz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsaangi",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsamai",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tswa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsakonian",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tunisian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "tse",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tausug",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsuvan",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsimshian",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsi",
    "iso6392B": "tsi",
    "iso6392T": "tsi",
    "iso6391": null
  },
  {
    "name": "Tshangla",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tseku",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ts'ün-Lao",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Turkish Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tswana",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsn",
    "iso6392B": "tsn",
    "iso6392T": "tsn",
    "iso6391": "tn"
  },
  {
    "name": "Tsonga",
    "type": "living",
    "scope": "individual",
    "iso6393": "tso",
    "iso6392B": "tso",
    "iso6392T": "tso",
    "iso6391": "ts"
  },
  {
    "name": "Northern Toussian",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thai Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Akei",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taiwan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "tss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tondi Songway Kiini",
    "type": "living",
    "scope": "individual",
    "iso6393": "tst",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsou",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsogo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsishingini",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mubami",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tebul Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Purepecha",
    "type": "living",
    "scope": "individual",
    "iso6393": "tsz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tutelo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tta",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gaa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tektiteko",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tauade",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bwanabwana",
    "type": "living",
    "scope": "individual",
    "iso6393": "tte",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tuotomb",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tutong",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Upper Ta'oih",
    "type": "living",
    "scope": "individual",
    "iso6393": "tth",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tobati",
    "type": "living",
    "scope": "individual",
    "iso6393": "tti",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tooro",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Totoro",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Totela",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Tutchone",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Towei",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lower Ta'oih",
    "type": "living",
    "scope": "individual",
    "iso6393": "tto",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tombelala",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tawallammat Tamajaq",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tera",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northeastern Thai",
    "type": "living",
    "scope": "individual",
    "iso6393": "tts",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muslim Tat",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Torau",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Titan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Long Wat",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sikaritai",
    "type": "living",
    "scope": "individual",
    "iso6393": "tty",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsum",
    "type": "living",
    "scope": "individual",
    "iso6393": "ttz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wiarumus",
    "type": "living",
    "scope": "individual",
    "iso6393": "tua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tübatulabal",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mutu",
    "type": "living",
    "scope": "individual",
    "iso6393": "tuc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tuxá",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tuyuca",
    "type": "living",
    "scope": "individual",
    "iso6393": "tue",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Tunebo",
    "type": "living",
    "scope": "individual",
    "iso6393": "tuf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tunia",
    "type": "living",
    "scope": "individual",
    "iso6393": "tug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taulil",
    "type": "living",
    "scope": "individual",
    "iso6393": "tuh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tupuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "tui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tugutil",
    "type": "living",
    "scope": "individual",
    "iso6393": "tuj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Turkmen",
    "type": "living",
    "scope": "individual",
    "iso6393": "tuk",
    "iso6392B": "tuk",
    "iso6392T": "tuk",
    "iso6391": "tk"
  },
  {
    "name": "Tula",
    "type": "living",
    "scope": "individual",
    "iso6393": "tul",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tumbuka",
    "type": "living",
    "scope": "individual",
    "iso6393": "tum",
    "iso6392B": "tum",
    "iso6392T": "tum",
    "iso6391": null
  },
  {
    "name": "Tunica",
    "type": "living",
    "scope": "individual",
    "iso6393": "tun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tucano",
    "type": "living",
    "scope": "individual",
    "iso6393": "tuo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tedaga",
    "type": "living",
    "scope": "individual",
    "iso6393": "tuq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Turkish",
    "type": "living",
    "scope": "individual",
    "iso6393": "tur",
    "iso6392B": "tur",
    "iso6392T": "tur",
    "iso6391": "tr"
  },
  {
    "name": "Tuscarora",
    "type": "living",
    "scope": "individual",
    "iso6393": "tus",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tututni",
    "type": "living",
    "scope": "individual",
    "iso6393": "tuu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Turkana",
    "type": "living",
    "scope": "individual",
    "iso6393": "tuv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tuxináwa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tux",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tugen",
    "type": "living",
    "scope": "individual",
    "iso6393": "tuy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Turka",
    "type": "living",
    "scope": "individual",
    "iso6393": "tuz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vaghua",
    "type": "living",
    "scope": "individual",
    "iso6393": "tva",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsuvadi",
    "type": "living",
    "scope": "individual",
    "iso6393": "tvd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Te'un",
    "type": "living",
    "scope": "individual",
    "iso6393": "tve",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southeast Ambrym",
    "type": "living",
    "scope": "individual",
    "iso6393": "tvk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tuvalu",
    "type": "living",
    "scope": "individual",
    "iso6393": "tvl",
    "iso6392B": "tvl",
    "iso6392T": "tvl",
    "iso6391": null
  },
  {
    "name": "Tela-Masbuar",
    "type": "living",
    "scope": "individual",
    "iso6393": "tvm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tavoyan",
    "type": "living",
    "scope": "individual",
    "iso6393": "tvn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tidore",
    "type": "living",
    "scope": "individual",
    "iso6393": "tvo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taveta",
    "type": "living",
    "scope": "individual",
    "iso6393": "tvs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tutsa Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "tvt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tunen",
    "type": "living",
    "scope": "individual",
    "iso6393": "tvu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sedoa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tvw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Taivoan",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tvx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Timor Pidgin",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "tvy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Twana",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "twa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Tawbuid",
    "type": "living",
    "scope": "individual",
    "iso6393": "twb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teshenawa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "twc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Twents",
    "type": "living",
    "scope": "individual",
    "iso6393": "twd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tewa (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "twe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Tiwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "twf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tereweng",
    "type": "living",
    "scope": "individual",
    "iso6393": "twg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tai Dón",
    "type": "living",
    "scope": "individual",
    "iso6393": "twh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Twi",
    "type": "living",
    "scope": "individual",
    "iso6393": "twi",
    "iso6392B": "twi",
    "iso6392T": "twi",
    "iso6391": "tw"
  },
  {
    "name": "Tawara",
    "type": "living",
    "scope": "individual",
    "iso6393": "twl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tawang Monpa",
    "type": "living",
    "scope": "individual",
    "iso6393": "twm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Twendi",
    "type": "living",
    "scope": "individual",
    "iso6393": "twn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tswapong",
    "type": "living",
    "scope": "individual",
    "iso6393": "two",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ere",
    "type": "living",
    "scope": "individual",
    "iso6393": "twp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tasawaq",
    "type": "living",
    "scope": "individual",
    "iso6393": "twq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southwestern Tarahumara",
    "type": "living",
    "scope": "individual",
    "iso6393": "twr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Turiwára",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "twt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Termanu",
    "type": "living",
    "scope": "individual",
    "iso6393": "twu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tuwari",
    "type": "living",
    "scope": "individual",
    "iso6393": "tww",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tewe",
    "type": "living",
    "scope": "individual",
    "iso6393": "twx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tawoyan",
    "type": "living",
    "scope": "individual",
    "iso6393": "twy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tombonuo",
    "type": "living",
    "scope": "individual",
    "iso6393": "txa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tokharian B",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "txb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsetsaut",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "txc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Totoli",
    "type": "living",
    "scope": "individual",
    "iso6393": "txe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tangut",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "txg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thracian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "txh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ikpeng",
    "type": "living",
    "scope": "individual",
    "iso6393": "txi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tarjumo",
    "type": "living",
    "scope": "individual",
    "iso6393": "txj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tomini",
    "type": "living",
    "scope": "individual",
    "iso6393": "txm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Tarangan",
    "type": "living",
    "scope": "individual",
    "iso6393": "txn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Toto",
    "type": "living",
    "scope": "individual",
    "iso6393": "txo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tii",
    "type": "living",
    "scope": "individual",
    "iso6393": "txq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tartessian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "txr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tonsea",
    "type": "living",
    "scope": "individual",
    "iso6393": "txs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Citak",
    "type": "living",
    "scope": "individual",
    "iso6393": "txt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kayapó",
    "type": "living",
    "scope": "individual",
    "iso6393": "txu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tatana",
    "type": "living",
    "scope": "individual",
    "iso6393": "txx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tanosy Malagasy",
    "type": "living",
    "scope": "individual",
    "iso6393": "txy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tauya",
    "type": "living",
    "scope": "individual",
    "iso6393": "tya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kyanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "tye",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "O'du",
    "type": "living",
    "scope": "individual",
    "iso6393": "tyh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Teke-Tsaayi",
    "type": "living",
    "scope": "individual",
    "iso6393": "tyi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tai Do",
    "type": "living",
    "scope": "individual",
    "iso6393": "tyj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thu Lao",
    "type": "living",
    "scope": "individual",
    "iso6393": "tyl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kombai",
    "type": "living",
    "scope": "individual",
    "iso6393": "tyn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thaypan",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "typ",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tai Daeng",
    "type": "living",
    "scope": "individual",
    "iso6393": "tyr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tày Sa Pa",
    "type": "living",
    "scope": "individual",
    "iso6393": "tys",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tày Tac",
    "type": "living",
    "scope": "individual",
    "iso6393": "tyt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kua",
    "type": "living",
    "scope": "individual",
    "iso6393": "tyu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tuvinian",
    "type": "living",
    "scope": "individual",
    "iso6393": "tyv",
    "iso6392B": "tyv",
    "iso6392T": "tyv",
    "iso6391": null
  },
  {
    "name": "Teke-Tyee",
    "type": "living",
    "scope": "individual",
    "iso6393": "tyx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tày",
    "type": "living",
    "scope": "individual",
    "iso6393": "tyz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tanzanian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "tza",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tzeltal",
    "type": "living",
    "scope": "individual",
    "iso6393": "tzh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tz'utujil",
    "type": "living",
    "scope": "individual",
    "iso6393": "tzj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Talossan",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "tzl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Atlas Tamazight",
    "type": "living",
    "scope": "individual",
    "iso6393": "tzm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tugun",
    "type": "living",
    "scope": "individual",
    "iso6393": "tzn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tzotzil",
    "type": "living",
    "scope": "individual",
    "iso6393": "tzo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tabriak",
    "type": "living",
    "scope": "individual",
    "iso6393": "tzx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uamué",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "uam",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuan",
    "type": "living",
    "scope": "individual",
    "iso6393": "uan",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tairuma",
    "type": "living",
    "scope": "individual",
    "iso6393": "uar",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ubang",
    "type": "living",
    "scope": "individual",
    "iso6393": "uba",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ubi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ubi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Buhi'non Bikol",
    "type": "living",
    "scope": "individual",
    "iso6393": "ubl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ubir",
    "type": "living",
    "scope": "individual",
    "iso6393": "ubr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Umbu-Ungu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ubu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ubykh",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "uby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uda",
    "type": "living",
    "scope": "individual",
    "iso6393": "uda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Udihe",
    "type": "living",
    "scope": "individual",
    "iso6393": "ude",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muduga",
    "type": "living",
    "scope": "individual",
    "iso6393": "udg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Udi",
    "type": "living",
    "scope": "individual",
    "iso6393": "udi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ujir",
    "type": "living",
    "scope": "individual",
    "iso6393": "udj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wuzlam",
    "type": "living",
    "scope": "individual",
    "iso6393": "udl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Udmurt",
    "type": "living",
    "scope": "individual",
    "iso6393": "udm",
    "iso6392B": "udm",
    "iso6392T": "udm",
    "iso6391": null
  },
  {
    "name": "Uduk",
    "type": "living",
    "scope": "individual",
    "iso6393": "udu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kioko",
    "type": "living",
    "scope": "individual",
    "iso6393": "ues",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ufim",
    "type": "living",
    "scope": "individual",
    "iso6393": "ufi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ugaritic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "uga",
    "iso6392B": "uga",
    "iso6392T": "uga",
    "iso6391": null
  },
  {
    "name": "Kuku-Ugbanh",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ugb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ughele",
    "type": "living",
    "scope": "individual",
    "iso6393": "uge",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ugandan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "ugn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ugong",
    "type": "living",
    "scope": "individual",
    "iso6393": "ugo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uruguayan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "ugy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uhami",
    "type": "living",
    "scope": "individual",
    "iso6393": "uha",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Damal",
    "type": "living",
    "scope": "individual",
    "iso6393": "uhn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uighur",
    "type": "living",
    "scope": "individual",
    "iso6393": "uig",
    "iso6392B": "uig",
    "iso6392T": "uig",
    "iso6391": "ug"
  },
  {
    "name": "Uisai",
    "type": "living",
    "scope": "individual",
    "iso6393": "uis",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iyive",
    "type": "living",
    "scope": "individual",
    "iso6393": "uiv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tanjijili",
    "type": "living",
    "scope": "individual",
    "iso6393": "uji",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaburi",
    "type": "living",
    "scope": "individual",
    "iso6393": "uka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ukuriguma",
    "type": "living",
    "scope": "individual",
    "iso6393": "ukg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ukhwejo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ukh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muak Sa-aak",
    "type": "living",
    "scope": "individual",
    "iso6393": "ukk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ukrainian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "ukl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ukpe-Bayobiri",
    "type": "living",
    "scope": "individual",
    "iso6393": "ukp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ukwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ukq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ukrainian",
    "type": "living",
    "scope": "individual",
    "iso6393": "ukr",
    "iso6392B": "ukr",
    "iso6392T": "ukr",
    "iso6391": "uk"
  },
  {
    "name": "Urubú-Kaapor Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "uks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ukue",
    "type": "living",
    "scope": "individual",
    "iso6393": "uku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ukwuani-Aboh-Ndoni",
    "type": "living",
    "scope": "individual",
    "iso6393": "ukw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuuk-Yak",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "uky",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Fungwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ula",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ulukwumi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ulb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ulch",
    "type": "living",
    "scope": "individual",
    "iso6393": "ulc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lule",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ule",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Usku",
    "type": "living",
    "scope": "individual",
    "iso6393": "ulf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ulithian",
    "type": "living",
    "scope": "individual",
    "iso6393": "uli",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Meriam Mir",
    "type": "living",
    "scope": "individual",
    "iso6393": "ulk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ullatan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ull",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ulumanda'",
    "type": "living",
    "scope": "individual",
    "iso6393": "ulm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Unserdeutsch",
    "type": "living",
    "scope": "individual",
    "iso6393": "uln",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uma' Lung",
    "type": "living",
    "scope": "individual",
    "iso6393": "ulu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ulwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ulw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Umatilla",
    "type": "living",
    "scope": "individual",
    "iso6393": "uma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Umbundu",
    "type": "living",
    "scope": "individual",
    "iso6393": "umb",
    "iso6392B": "umb",
    "iso6392T": "umb",
    "iso6391": null
  },
  {
    "name": "Marrucinian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "umc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Umbindhamu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "umd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Morrobalama",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "umg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ukit",
    "type": "living",
    "scope": "individual",
    "iso6393": "umi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Umon",
    "type": "living",
    "scope": "individual",
    "iso6393": "umm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makyan Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "umn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Umotína",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "umo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Umpila",
    "type": "living",
    "scope": "individual",
    "iso6393": "ump",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Umbugarla",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "umr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pendau",
    "type": "living",
    "scope": "individual",
    "iso6393": "ums",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Munsee",
    "type": "living",
    "scope": "individual",
    "iso6393": "umu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Watut",
    "type": "living",
    "scope": "individual",
    "iso6393": "una",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Undetermined",
    "type": "special",
    "scope": "special",
    "iso6393": "und",
    "iso6392B": "und",
    "iso6392T": "und",
    "iso6391": null
  },
  {
    "name": "Uneme",
    "type": "living",
    "scope": "individual",
    "iso6393": "une",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngarinyin",
    "type": "living",
    "scope": "individual",
    "iso6393": "ung",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Enawené-Nawé",
    "type": "living",
    "scope": "individual",
    "iso6393": "unk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Unami",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "unm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kurnai",
    "type": "living",
    "scope": "individual",
    "iso6393": "unn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mundari",
    "type": "living",
    "scope": "individual",
    "iso6393": "unr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Unubahe",
    "type": "living",
    "scope": "individual",
    "iso6393": "unu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Munda",
    "type": "living",
    "scope": "individual",
    "iso6393": "unx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Unde Kaili",
    "type": "living",
    "scope": "individual",
    "iso6393": "unz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Umeda",
    "type": "living",
    "scope": "individual",
    "iso6393": "upi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uripiv-Wala-Rano-Atchin",
    "type": "living",
    "scope": "individual",
    "iso6393": "upv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urarina",
    "type": "living",
    "scope": "individual",
    "iso6393": "ura",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urubú-Kaapor",
    "type": "living",
    "scope": "individual",
    "iso6393": "urb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urningangg",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "urc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urdu",
    "type": "living",
    "scope": "individual",
    "iso6393": "urd",
    "iso6392B": "urd",
    "iso6392T": "urd",
    "iso6391": "ur"
  },
  {
    "name": "Uru",
    "type": "living",
    "scope": "individual",
    "iso6393": "ure",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uradhi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "urf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urigina",
    "type": "living",
    "scope": "individual",
    "iso6393": "urg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urhobo",
    "type": "living",
    "scope": "individual",
    "iso6393": "urh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urim",
    "type": "living",
    "scope": "individual",
    "iso6393": "uri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urak Lawoi'",
    "type": "living",
    "scope": "individual",
    "iso6393": "urk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urali",
    "type": "living",
    "scope": "individual",
    "iso6393": "url",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urapmin",
    "type": "living",
    "scope": "individual",
    "iso6393": "urm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uruangnirin",
    "type": "living",
    "scope": "individual",
    "iso6393": "urn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ura (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "uro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uru-Pa-In",
    "type": "living",
    "scope": "individual",
    "iso6393": "urp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lehalurup",
    "type": "living",
    "scope": "individual",
    "iso6393": "urr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urat",
    "type": "living",
    "scope": "individual",
    "iso6393": "urt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urumi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "uru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uruava",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "urv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sop",
    "type": "living",
    "scope": "individual",
    "iso6393": "urw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urimo",
    "type": "living",
    "scope": "individual",
    "iso6393": "urx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Orya",
    "type": "living",
    "scope": "individual",
    "iso6393": "ury",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uru-Eu-Wau-Wau",
    "type": "living",
    "scope": "individual",
    "iso6393": "urz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Usarufa",
    "type": "living",
    "scope": "individual",
    "iso6393": "usa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ushojo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ush",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Usui",
    "type": "living",
    "scope": "individual",
    "iso6393": "usi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Usaghade",
    "type": "living",
    "scope": "individual",
    "iso6393": "usk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uspanteco",
    "type": "living",
    "scope": "individual",
    "iso6393": "usp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "us-Saare",
    "type": "living",
    "scope": "individual",
    "iso6393": "uss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uya",
    "type": "living",
    "scope": "individual",
    "iso6393": "usu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Otank",
    "type": "living",
    "scope": "individual",
    "iso6393": "uta",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ute-Southern Paiute",
    "type": "living",
    "scope": "individual",
    "iso6393": "ute",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "ut-Hun",
    "type": "living",
    "scope": "individual",
    "iso6393": "uth",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amba (Solomon Islands)",
    "type": "living",
    "scope": "individual",
    "iso6393": "utp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Etulo",
    "type": "living",
    "scope": "individual",
    "iso6393": "utr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Utu",
    "type": "living",
    "scope": "individual",
    "iso6393": "utu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urum",
    "type": "living",
    "scope": "individual",
    "iso6393": "uum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kulon-Pazeh",
    "type": "living",
    "scope": "individual",
    "iso6393": "uun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ura (Vanuatu)",
    "type": "living",
    "scope": "individual",
    "iso6393": "uur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "U",
    "type": "living",
    "scope": "individual",
    "iso6393": "uuu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Uvean",
    "type": "living",
    "scope": "individual",
    "iso6393": "uve",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uri",
    "type": "living",
    "scope": "individual",
    "iso6393": "uvh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lote",
    "type": "living",
    "scope": "individual",
    "iso6393": "uvl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuku-Uwanh",
    "type": "living",
    "scope": "individual",
    "iso6393": "uwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Doko-Uyanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "uya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uzbek",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "uzb",
    "iso6392B": "uzb",
    "iso6392T": "uzb",
    "iso6391": "uz"
  },
  {
    "name": "Northern Uzbek",
    "type": "living",
    "scope": "individual",
    "iso6393": "uzn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Uzbek",
    "type": "living",
    "scope": "individual",
    "iso6393": "uzs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vaagri Booli",
    "type": "living",
    "scope": "individual",
    "iso6393": "vaa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vale",
    "type": "living",
    "scope": "individual",
    "iso6393": "vae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vafsi",
    "type": "living",
    "scope": "individual",
    "iso6393": "vaf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vagla",
    "type": "living",
    "scope": "individual",
    "iso6393": "vag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Varhadi-Nagpuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "vah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vai",
    "type": "living",
    "scope": "individual",
    "iso6393": "vai",
    "iso6392B": "vai",
    "iso6392T": "vai",
    "iso6391": null
  },
  {
    "name": "Sekele",
    "type": "living",
    "scope": "individual",
    "iso6393": "vaj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vehes",
    "type": "living",
    "scope": "individual",
    "iso6393": "val",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vanimo",
    "type": "living",
    "scope": "individual",
    "iso6393": "vam",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Valman",
    "type": "living",
    "scope": "individual",
    "iso6393": "van",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vao",
    "type": "living",
    "scope": "individual",
    "iso6393": "vao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vaiphei",
    "type": "living",
    "scope": "individual",
    "iso6393": "vap",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Huarijio",
    "type": "living",
    "scope": "individual",
    "iso6393": "var",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vasavi",
    "type": "living",
    "scope": "individual",
    "iso6393": "vas",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vanuma",
    "type": "living",
    "scope": "individual",
    "iso6393": "vau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Varli",
    "type": "living",
    "scope": "individual",
    "iso6393": "vav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wayu",
    "type": "living",
    "scope": "individual",
    "iso6393": "vay",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southeast Babar",
    "type": "living",
    "scope": "individual",
    "iso6393": "vbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southwestern Bontok",
    "type": "living",
    "scope": "individual",
    "iso6393": "vbk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Venetian",
    "type": "living",
    "scope": "individual",
    "iso6393": "vec",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Veddah",
    "type": "living",
    "scope": "individual",
    "iso6393": "ved",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Veluws",
    "type": "living",
    "scope": "individual",
    "iso6393": "vel",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vemgo-Mabas",
    "type": "living",
    "scope": "individual",
    "iso6393": "vem",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Venda",
    "type": "living",
    "scope": "individual",
    "iso6393": "ven",
    "iso6392B": "ven",
    "iso6392T": "ven",
    "iso6391": "ve"
  },
  {
    "name": "Ventureño",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "veo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Veps",
    "type": "living",
    "scope": "individual",
    "iso6393": "vep",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mom Jango",
    "type": "living",
    "scope": "individual",
    "iso6393": "ver",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vaghri",
    "type": "living",
    "scope": "individual",
    "iso6393": "vgr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vlaamse Gebarentaal",
    "type": "living",
    "scope": "individual",
    "iso6393": "vgt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Virgin Islands Creole English",
    "type": "living",
    "scope": "individual",
    "iso6393": "vic",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vidunda",
    "type": "living",
    "scope": "individual",
    "iso6393": "vid",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vietnamese",
    "type": "living",
    "scope": "individual",
    "iso6393": "vie",
    "iso6392B": "vie",
    "iso6392T": "vie",
    "iso6391": "vi"
  },
  {
    "name": "Vili",
    "type": "living",
    "scope": "individual",
    "iso6393": "vif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Viemo",
    "type": "living",
    "scope": "individual",
    "iso6393": "vig",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vilela",
    "type": "living",
    "scope": "individual",
    "iso6393": "vil",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vinza",
    "type": "living",
    "scope": "individual",
    "iso6393": "vin",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vishavan",
    "type": "living",
    "scope": "individual",
    "iso6393": "vis",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Viti",
    "type": "living",
    "scope": "individual",
    "iso6393": "vit",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iduna",
    "type": "living",
    "scope": "individual",
    "iso6393": "viv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kariyarra",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "vka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ija-Zuba",
    "type": "living",
    "scope": "individual",
    "iso6393": "vki",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kujarge",
    "type": "living",
    "scope": "individual",
    "iso6393": "vkj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaur",
    "type": "living",
    "scope": "individual",
    "iso6393": "vkk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kulisusu",
    "type": "living",
    "scope": "individual",
    "iso6393": "vkl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamakan",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "vkm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kodeoha",
    "type": "living",
    "scope": "individual",
    "iso6393": "vko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Korlai Creole Portuguese",
    "type": "living",
    "scope": "individual",
    "iso6393": "vkp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tenggarong Kutai Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "vkt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kurrama",
    "type": "living",
    "scope": "individual",
    "iso6393": "vku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Valpei",
    "type": "living",
    "scope": "individual",
    "iso6393": "vlp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vlaams",
    "type": "living",
    "scope": "individual",
    "iso6393": "vls",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Martuyhunira",
    "type": "living",
    "scope": "individual",
    "iso6393": "vma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Barbaram",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "vmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Juxtlahuaca Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mudu Koraga",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "East Masela",
    "type": "living",
    "scope": "individual",
    "iso6393": "vme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mainfränkisch",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lungalunga",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maraghei",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miwa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "vmi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ixtayutla Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makhuwa-Shirima",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malgana",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "vml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mitlatongo Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Soyaltepec Mazatec",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Soyaltepec Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marenje",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moksela",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "vms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muluridyi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "vmu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Valley Maidu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "vmv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makhuwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tamazola Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ayautla Mazatec",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mazatlán Mazatec",
    "type": "living",
    "scope": "individual",
    "iso6393": "vmz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vano",
    "type": "living",
    "scope": "individual",
    "iso6393": "vnk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vinmavis",
    "type": "living",
    "scope": "individual",
    "iso6393": "vnm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vunapu",
    "type": "living",
    "scope": "individual",
    "iso6393": "vnp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Volapük",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "vol",
    "iso6392B": "vol",
    "iso6392T": "vol",
    "iso6391": "vo"
  },
  {
    "name": "Voro",
    "type": "living",
    "scope": "individual",
    "iso6393": "vor",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Votic",
    "type": "living",
    "scope": "individual",
    "iso6393": "vot",
    "iso6392B": "vot",
    "iso6392T": "vot",
    "iso6391": null
  },
  {
    "name": "Vera'a",
    "type": "living",
    "scope": "individual",
    "iso6393": "vra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Võro",
    "type": "living",
    "scope": "individual",
    "iso6393": "vro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Varisi",
    "type": "living",
    "scope": "individual",
    "iso6393": "vrs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Burmbar",
    "type": "living",
    "scope": "individual",
    "iso6393": "vrt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moldova Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "vsi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Venezuelan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "vsl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Valencian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "vsv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vitou",
    "type": "living",
    "scope": "individual",
    "iso6393": "vto",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vumbu",
    "type": "living",
    "scope": "individual",
    "iso6393": "vum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vunjo",
    "type": "living",
    "scope": "individual",
    "iso6393": "vun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vute",
    "type": "living",
    "scope": "individual",
    "iso6393": "vut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awa (China)",
    "type": "living",
    "scope": "individual",
    "iso6393": "vwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Walla Walla",
    "type": "living",
    "scope": "individual",
    "iso6393": "waa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wab",
    "type": "living",
    "scope": "individual",
    "iso6393": "wab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wasco-Wishram",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wandamen",
    "type": "living",
    "scope": "individual",
    "iso6393": "wad",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Walser",
    "type": "living",
    "scope": "individual",
    "iso6393": "wae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wakoná",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "waf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wa'ema",
    "type": "living",
    "scope": "individual",
    "iso6393": "wag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Watubela",
    "type": "living",
    "scope": "individual",
    "iso6393": "wah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wares",
    "type": "living",
    "scope": "individual",
    "iso6393": "wai",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waffa",
    "type": "living",
    "scope": "individual",
    "iso6393": "waj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wolaytta",
    "type": "living",
    "scope": "individual",
    "iso6393": "wal",
    "iso6392B": "wal",
    "iso6392T": "wal",
    "iso6391": null
  },
  {
    "name": "Wampanoag",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wam",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wan",
    "type": "living",
    "scope": "individual",
    "iso6393": "wan",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wappo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wapishana",
    "type": "living",
    "scope": "individual",
    "iso6393": "wap",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wagiman",
    "type": "living",
    "scope": "individual",
    "iso6393": "waq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waray (Philippines)",
    "type": "living",
    "scope": "individual",
    "iso6393": "war",
    "iso6392B": "war",
    "iso6392T": "war",
    "iso6391": null
  },
  {
    "name": "Washo",
    "type": "living",
    "scope": "individual",
    "iso6393": "was",
    "iso6392B": "was",
    "iso6392T": "was",
    "iso6391": null
  },
  {
    "name": "Kaninuwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "wat",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waurá",
    "type": "living",
    "scope": "individual",
    "iso6393": "wau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waka",
    "type": "living",
    "scope": "individual",
    "iso6393": "wav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waiwai",
    "type": "living",
    "scope": "individual",
    "iso6393": "waw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Watam",
    "type": "living",
    "scope": "individual",
    "iso6393": "wax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wayana",
    "type": "living",
    "scope": "individual",
    "iso6393": "way",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wampur",
    "type": "living",
    "scope": "individual",
    "iso6393": "waz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Warao",
    "type": "living",
    "scope": "individual",
    "iso6393": "wba",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wabo",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waritai",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wara",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wanda",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vwanji",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alagwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waigali",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wakhi",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wa",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Warlpiri",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waddar",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wagdi",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Bengal Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Warnman",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wajarri",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Woi",
    "type": "living",
    "scope": "individual",
    "iso6393": "wbw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yanomámi",
    "type": "living",
    "scope": "individual",
    "iso6393": "wca",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waci Gbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "wci",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wandji",
    "type": "living",
    "scope": "individual",
    "iso6393": "wdd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wadaginam",
    "type": "living",
    "scope": "individual",
    "iso6393": "wdg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wadjiginy",
    "type": "living",
    "scope": "individual",
    "iso6393": "wdj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wadikali",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wdk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wadjigu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wdu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wadjabangayi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wdy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wewaw",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wè Western",
    "type": "living",
    "scope": "individual",
    "iso6393": "wec",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wedau",
    "type": "living",
    "scope": "individual",
    "iso6393": "wed",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wergaia",
    "type": "living",
    "scope": "individual",
    "iso6393": "weg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Weh",
    "type": "living",
    "scope": "individual",
    "iso6393": "weh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kiunum",
    "type": "living",
    "scope": "individual",
    "iso6393": "wei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Weme Gbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "wem",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wemale",
    "type": "living",
    "scope": "individual",
    "iso6393": "weo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Westphalien",
    "type": "living",
    "scope": "individual",
    "iso6393": "wep",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Weri",
    "type": "living",
    "scope": "individual",
    "iso6393": "wer",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cameroon Pidgin",
    "type": "living",
    "scope": "individual",
    "iso6393": "wes",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Perai",
    "type": "living",
    "scope": "individual",
    "iso6393": "wet",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rawngtu Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "weu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wejewa",
    "type": "living",
    "scope": "individual",
    "iso6393": "wew",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yafi",
    "type": "living",
    "scope": "individual",
    "iso6393": "wfg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wagaya",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wagawaga",
    "type": "living",
    "scope": "individual",
    "iso6393": "wgb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wangkangurru",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wgg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wahgi",
    "type": "living",
    "scope": "individual",
    "iso6393": "wgi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waigeo",
    "type": "living",
    "scope": "individual",
    "iso6393": "wgo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wirangu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wgu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Warrgamay",
    "type": "living",
    "scope": "individual",
    "iso6393": "wgy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sou Upaa",
    "type": "living",
    "scope": "individual",
    "iso6393": "wha",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Wahgi",
    "type": "living",
    "scope": "individual",
    "iso6393": "whg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wahau Kenyah",
    "type": "living",
    "scope": "individual",
    "iso6393": "whk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wahau Kayan",
    "type": "living",
    "scope": "individual",
    "iso6393": "whu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Toussian",
    "type": "living",
    "scope": "individual",
    "iso6393": "wib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wichita",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wic",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wik-Epa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wie",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wik-Keyangan",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wik Ngathan",
    "type": "living",
    "scope": "individual",
    "iso6393": "wig",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wik-Me'anha",
    "type": "living",
    "scope": "individual",
    "iso6393": "wih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Minidien",
    "type": "living",
    "scope": "individual",
    "iso6393": "wii",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wik-Iiyanh",
    "type": "living",
    "scope": "individual",
    "iso6393": "wij",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wikalkan",
    "type": "living",
    "scope": "individual",
    "iso6393": "wik",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wilawila",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wil",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wik-Mungkan",
    "type": "living",
    "scope": "individual",
    "iso6393": "wim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ho-Chunk",
    "type": "living",
    "scope": "individual",
    "iso6393": "win",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wiraféd",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wiru",
    "type": "living",
    "scope": "individual",
    "iso6393": "wiu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vitu",
    "type": "living",
    "scope": "individual",
    "iso6393": "wiv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wiyot",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wiy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waja",
    "type": "living",
    "scope": "individual",
    "iso6393": "wja",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Warji",
    "type": "living",
    "scope": "individual",
    "iso6393": "wji",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kw'adza",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kumbaran",
    "type": "living",
    "scope": "individual",
    "iso6393": "wkb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wakde",
    "type": "living",
    "scope": "individual",
    "iso6393": "wkd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalanadi",
    "type": "living",
    "scope": "individual",
    "iso6393": "wkl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Keerray-Woorroong",
    "type": "living",
    "scope": "individual",
    "iso6393": "wkr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kunduvadi",
    "type": "living",
    "scope": "individual",
    "iso6393": "wku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wakawaka",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wkw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wangkayutyuru",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wky",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Walio",
    "type": "living",
    "scope": "individual",
    "iso6393": "wla",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mwali Comorian",
    "type": "living",
    "scope": "individual",
    "iso6393": "wlc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wolane",
    "type": "living",
    "scope": "individual",
    "iso6393": "wle",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kunbarlang",
    "type": "living",
    "scope": "individual",
    "iso6393": "wlg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waioli",
    "type": "living",
    "scope": "individual",
    "iso6393": "wli",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wailaki",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wlk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wali (Sudan)",
    "type": "living",
    "scope": "individual",
    "iso6393": "wll",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Middle Welsh",
    "type": "historical",
    "scope": "individual",
    "iso6393": "wlm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Walloon",
    "type": "living",
    "scope": "individual",
    "iso6393": "wln",
    "iso6392B": "wln",
    "iso6392T": "wln",
    "iso6391": "wa"
  },
  {
    "name": "Wolio",
    "type": "living",
    "scope": "individual",
    "iso6393": "wlo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wailapa",
    "type": "living",
    "scope": "individual",
    "iso6393": "wlr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wallisian",
    "type": "living",
    "scope": "individual",
    "iso6393": "wls",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wuliwuli",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wlu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wichí Lhamtés Vejoz",
    "type": "living",
    "scope": "individual",
    "iso6393": "wlv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Walak",
    "type": "living",
    "scope": "individual",
    "iso6393": "wlw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wali (Ghana)",
    "type": "living",
    "scope": "individual",
    "iso6393": "wlx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waling",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wly",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mawa (Nigeria)",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wambaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "wmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wamas",
    "type": "living",
    "scope": "individual",
    "iso6393": "wmc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mamaindé",
    "type": "living",
    "scope": "individual",
    "iso6393": "wmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wambule",
    "type": "living",
    "scope": "individual",
    "iso6393": "wme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waima'a",
    "type": "living",
    "scope": "individual",
    "iso6393": "wmh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wamin",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wmi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maiwa (Indonesia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "wmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waamwang",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wmn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wom (Papua New Guinea)",
    "type": "living",
    "scope": "individual",
    "iso6393": "wmo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wambon",
    "type": "living",
    "scope": "individual",
    "iso6393": "wms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Walmajarri",
    "type": "living",
    "scope": "individual",
    "iso6393": "wmt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mwani",
    "type": "living",
    "scope": "individual",
    "iso6393": "wmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Womo",
    "type": "living",
    "scope": "individual",
    "iso6393": "wmx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wanambre",
    "type": "living",
    "scope": "individual",
    "iso6393": "wnb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wantoat",
    "type": "living",
    "scope": "individual",
    "iso6393": "wnc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wandarang",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wnd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waneci",
    "type": "living",
    "scope": "individual",
    "iso6393": "wne",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wanggom",
    "type": "living",
    "scope": "individual",
    "iso6393": "wng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ndzwani Comorian",
    "type": "living",
    "scope": "individual",
    "iso6393": "wni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wanukaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "wnk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wanggamala",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wnm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wunumara",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wnn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wano",
    "type": "living",
    "scope": "individual",
    "iso6393": "wno",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wanap",
    "type": "living",
    "scope": "individual",
    "iso6393": "wnp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Usan",
    "type": "living",
    "scope": "individual",
    "iso6393": "wnu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wintu",
    "type": "living",
    "scope": "individual",
    "iso6393": "wnw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wanyi",
    "type": "living",
    "scope": "individual",
    "iso6393": "wny",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuwema",
    "type": "living",
    "scope": "individual",
    "iso6393": "woa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wè Northern",
    "type": "living",
    "scope": "individual",
    "iso6393": "wob",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wogeo",
    "type": "living",
    "scope": "individual",
    "iso6393": "woc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wolani",
    "type": "living",
    "scope": "individual",
    "iso6393": "wod",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Woleaian",
    "type": "living",
    "scope": "individual",
    "iso6393": "woe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gambian Wolof",
    "type": "living",
    "scope": "individual",
    "iso6393": "wof",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wogamusin",
    "type": "living",
    "scope": "individual",
    "iso6393": "wog",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamang",
    "type": "living",
    "scope": "individual",
    "iso6393": "woi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Longto",
    "type": "living",
    "scope": "individual",
    "iso6393": "wok",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wolof",
    "type": "living",
    "scope": "individual",
    "iso6393": "wol",
    "iso6392B": "wol",
    "iso6392T": "wol",
    "iso6391": "wo"
  },
  {
    "name": "Wom (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "wom",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wongo",
    "type": "living",
    "scope": "individual",
    "iso6393": "won",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manombai",
    "type": "living",
    "scope": "individual",
    "iso6393": "woo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Woria",
    "type": "living",
    "scope": "individual",
    "iso6393": "wor",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hanga Hundi",
    "type": "living",
    "scope": "individual",
    "iso6393": "wos",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wawonii",
    "type": "living",
    "scope": "individual",
    "iso6393": "wow",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Weyto",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "woy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maco",
    "type": "living",
    "scope": "individual",
    "iso6393": "wpc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Warapu",
    "type": "living",
    "scope": "individual",
    "iso6393": "wra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waluwarra",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wrb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Warduji",
    "type": "living",
    "scope": "individual",
    "iso6393": "wrd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Warungu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wrg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wiradjuri",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wrh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wariyangga",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Garrwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "wrk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Warlmanpa",
    "type": "living",
    "scope": "individual",
    "iso6393": "wrl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Warumungu",
    "type": "living",
    "scope": "individual",
    "iso6393": "wrm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Warnang",
    "type": "living",
    "scope": "individual",
    "iso6393": "wrn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Worrorra",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waropen",
    "type": "living",
    "scope": "individual",
    "iso6393": "wrp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wardaman",
    "type": "living",
    "scope": "individual",
    "iso6393": "wrr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waris",
    "type": "living",
    "scope": "individual",
    "iso6393": "wrs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waru",
    "type": "living",
    "scope": "individual",
    "iso6393": "wru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waruna",
    "type": "living",
    "scope": "individual",
    "iso6393": "wrv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gugu Warra",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wrw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wae Rana",
    "type": "living",
    "scope": "individual",
    "iso6393": "wrx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Merwari",
    "type": "living",
    "scope": "individual",
    "iso6393": "wry",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waray (Australia)",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wrz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Warembori",
    "type": "living",
    "scope": "individual",
    "iso6393": "wsa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adilabad Gondi",
    "type": "living",
    "scope": "individual",
    "iso6393": "wsg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wusi",
    "type": "living",
    "scope": "individual",
    "iso6393": "wsi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waskia",
    "type": "living",
    "scope": "individual",
    "iso6393": "wsk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Owenia",
    "type": "living",
    "scope": "individual",
    "iso6393": "wsr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wasa",
    "type": "living",
    "scope": "individual",
    "iso6393": "wss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wasu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wsu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wotapuri-Katarqalai",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wsv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Watiwa",
    "type": "living",
    "scope": "individual",
    "iso6393": "wtf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wathawurrung",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wth",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Berta",
    "type": "living",
    "scope": "individual",
    "iso6393": "wti",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Watakataui",
    "type": "living",
    "scope": "individual",
    "iso6393": "wtk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mewati",
    "type": "living",
    "scope": "individual",
    "iso6393": "wtm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wotu",
    "type": "living",
    "scope": "individual",
    "iso6393": "wtw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wikngenchera",
    "type": "living",
    "scope": "individual",
    "iso6393": "wua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wunambal",
    "type": "living",
    "scope": "individual",
    "iso6393": "wub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wudu",
    "type": "living",
    "scope": "individual",
    "iso6393": "wud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wutunhua",
    "type": "living",
    "scope": "individual",
    "iso6393": "wuh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Silimo",
    "type": "living",
    "scope": "individual",
    "iso6393": "wul",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wumbvu",
    "type": "living",
    "scope": "individual",
    "iso6393": "wum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bungu",
    "type": "living",
    "scope": "individual",
    "iso6393": "wun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wurrugu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wutung",
    "type": "living",
    "scope": "individual",
    "iso6393": "wut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wu Chinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "wuu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wuvulu-Aua",
    "type": "living",
    "scope": "individual",
    "iso6393": "wuv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wulna",
    "type": "living",
    "scope": "individual",
    "iso6393": "wux",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wauyai",
    "type": "living",
    "scope": "individual",
    "iso6393": "wuy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waama",
    "type": "living",
    "scope": "individual",
    "iso6393": "wwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wakabunga",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wwb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wetamut",
    "type": "living",
    "scope": "individual",
    "iso6393": "wwo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Warrwa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wwr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "www",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Waxianghua",
    "type": "living",
    "scope": "individual",
    "iso6393": "wxa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wardandi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wxw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wyandot",
    "type": "living",
    "scope": "individual",
    "iso6393": "wya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wangaaybuwan-Ngiyambaa",
    "type": "living",
    "scope": "individual",
    "iso6393": "wyb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Woiwurrung",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "wyi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wymysorys",
    "type": "living",
    "scope": "individual",
    "iso6393": "wym",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wayoró",
    "type": "living",
    "scope": "individual",
    "iso6393": "wyr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Fijian",
    "type": "living",
    "scope": "individual",
    "iso6393": "wyy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Andalusian Arabic",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xaa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sambe",
    "type": "living",
    "scope": "individual",
    "iso6393": "xab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kachari",
    "type": "living",
    "scope": "individual",
    "iso6393": "xac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Adai",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xad",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aequian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aghwan",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaimbé",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xai",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ararandewára",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xaj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Máku",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalmyk",
    "type": "living",
    "scope": "individual",
    "iso6393": "xal",
    "iso6392B": "xal",
    "iso6392T": "xal",
    "iso6391": null
  },
  {
    "name": "ǀXam",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xam",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xamtanga",
    "type": "living",
    "scope": "individual",
    "iso6393": "xan",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khao",
    "type": "living",
    "scope": "individual",
    "iso6393": "xao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Apalachee",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xap",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aquitanian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xaq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karami",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xar",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamas",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xas",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Katawixi",
    "type": "living",
    "scope": "individual",
    "iso6393": "xat",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kauwera",
    "type": "living",
    "scope": "individual",
    "iso6393": "xau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xavánte",
    "type": "living",
    "scope": "individual",
    "iso6393": "xav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kawaiisu",
    "type": "living",
    "scope": "individual",
    "iso6393": "xaw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kayan Mahakam",
    "type": "living",
    "scope": "individual",
    "iso6393": "xay",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lower Burdekin",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xbb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bactrian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xbc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bindal",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xbd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bigambal",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xbe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bunganditj",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xbg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kombio",
    "type": "living",
    "scope": "individual",
    "iso6393": "xbi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Birrpayi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xbj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Middle Breton",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xbm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kenaboi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xbn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bolgarian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xbo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bibbulman",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xbp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kambera",
    "type": "living",
    "scope": "individual",
    "iso6393": "xbr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kambiwá",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xbw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Batjala",
    "type": "living",
    "scope": "individual",
    "iso6393": "xby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cumbric",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xcb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Camunic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xcc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Celtiberian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xce",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cisalpine Gaulish",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xcg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chemakum",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xch",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Classical Armenian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xcl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Comecrudo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xcm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cotoname",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xcn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chorasmian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xco",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Carian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xcr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Classical Tibetan",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xct",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Curonian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xcu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chuvantsy",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xcv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Coahuilteco",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xcw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cayuse",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xcy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Darkinyung",
    "type": "living",
    "scope": "individual",
    "iso6393": "xda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dacian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xdc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dharuk",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xdk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Edomite",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xdm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwandu",
    "type": "living",
    "scope": "individual",
    "iso6393": "xdo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malayic Dayak",
    "type": "living",
    "scope": "individual",
    "iso6393": "xdy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eblan",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xeb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hdi",
    "type": "living",
    "scope": "individual",
    "iso6393": "xed",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "ǁXegwi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xeg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kelo",
    "type": "living",
    "scope": "individual",
    "iso6393": "xel",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kembayan",
    "type": "living",
    "scope": "individual",
    "iso6393": "xem",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Epi-Olmec",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xep",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xerénte",
    "type": "living",
    "scope": "individual",
    "iso6393": "xer",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kesawai",
    "type": "living",
    "scope": "individual",
    "iso6393": "xes",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xetá",
    "type": "living",
    "scope": "individual",
    "iso6393": "xet",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Keoru-Ahia",
    "type": "living",
    "scope": "individual",
    "iso6393": "xeu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Faliscan",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xfa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Galatian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gbin",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xgb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gudang",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xgd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gabrielino-Fernandeño",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xgf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Goreng",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xgg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Garingbal",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xgi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Galindan",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xgl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dharumbal",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xgm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Garza",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xgr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Unggumi",
    "type": "living",
    "scope": "individual",
    "iso6393": "xgu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guwa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xgw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Harami",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xha",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hunnic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xhc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hadrami",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xhd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khetrani",
    "type": "living",
    "scope": "individual",
    "iso6393": "xhe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xhosa",
    "type": "living",
    "scope": "individual",
    "iso6393": "xho",
    "iso6392B": "xho",
    "iso6392T": "xho",
    "iso6391": "xh"
  },
  {
    "name": "Hernican",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xhr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hattic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xht",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hurrian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xhu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khua",
    "type": "living",
    "scope": "individual",
    "iso6393": "xhv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iberian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xiri",
    "type": "living",
    "scope": "individual",
    "iso6393": "xii",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Illyrian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xil",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xinca",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xin",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xiriâna",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kisan",
    "type": "living",
    "scope": "individual",
    "iso6393": "xis",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Indus Valley Language",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xiv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xipaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "xiy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Minjungbal",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xjb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jaitmatang",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xjt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalkoti",
    "type": "living",
    "scope": "individual",
    "iso6393": "xka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Nago",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kho'ini",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mendalam Kayan",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kereho",
    "type": "living",
    "scope": "individual",
    "iso6393": "xke",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khengkha",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kagoro",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kenyan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "xki",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kajali",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaco'",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mainstream Kenyah",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kayan River Kayan",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kiorr",
    "type": "living",
    "scope": "individual",
    "iso6393": "xko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kabatei",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koroni",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xakriabá",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xkr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kumbewaha",
    "type": "living",
    "scope": "individual",
    "iso6393": "xks",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kantosi",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaamba",
    "type": "living",
    "scope": "individual",
    "iso6393": "xku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kgalagadi",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kembra",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karore",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Uma' Lasan",
    "type": "living",
    "scope": "individual",
    "iso6393": "xky",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kurtokha",
    "type": "living",
    "scope": "individual",
    "iso6393": "xkz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamula",
    "type": "living",
    "scope": "individual",
    "iso6393": "xla",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Loup B",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xlb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lycian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xlc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lydian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xld",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lemnian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xle",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ligurian (Ancient)",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xlg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Liburnian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xli",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alanic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xln",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Loup A",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xlo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lepontic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xlp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lusitanian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xls",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cuneiform Luwian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xlu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Elymian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xly",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mushungulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "xma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbonga",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makhuwa-Marrevone",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbudum",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Median",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mingrelian",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mengaka",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kugu-Muminh",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Majera",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ancient Macedonian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xmk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malaysian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "xml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manado Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manichaean Middle Persian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xmn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Morerebi",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuku-Mu'inh",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xmp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuku-Mangk",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xmq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Meroitic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xmr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moroccan Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "xms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Matbat",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xmu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Antankarana Malagasy",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tsimihety Malagasy",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maden",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mayaguduna",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mori Bawah",
    "type": "living",
    "scope": "individual",
    "iso6393": "xmz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ancient North Arabian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanakanabu",
    "type": "living",
    "scope": "individual",
    "iso6393": "xnb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Middle Mongolian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuanhua",
    "type": "living",
    "scope": "individual",
    "iso6393": "xnh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngarigu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xni",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nganakarti",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xnk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Kankanay",
    "type": "living",
    "scope": "individual",
    "iso6393": "xnn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Anglo-Norman",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xno",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kangri",
    "type": "living",
    "scope": "individual",
    "iso6393": "xnr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanashi",
    "type": "living",
    "scope": "individual",
    "iso6393": "xns",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Narragansett",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xnt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nukunul",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xnu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyiyaparli",
    "type": "living",
    "scope": "individual",
    "iso6393": "xny",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kenzi",
    "type": "living",
    "scope": "individual",
    "iso6393": "xnz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "O'chi'chi'",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xoc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kokoda",
    "type": "living",
    "scope": "individual",
    "iso6393": "xod",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Soga",
    "type": "living",
    "scope": "individual",
    "iso6393": "xog",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kominimung",
    "type": "living",
    "scope": "individual",
    "iso6393": "xoi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xokleng",
    "type": "living",
    "scope": "individual",
    "iso6393": "xok",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Komo (Sudan)",
    "type": "living",
    "scope": "individual",
    "iso6393": "xom",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Konkomba",
    "type": "living",
    "scope": "individual",
    "iso6393": "xon",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xukurú",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xoo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kopar",
    "type": "living",
    "scope": "individual",
    "iso6393": "xop",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Korubo",
    "type": "living",
    "scope": "individual",
    "iso6393": "xor",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kowaki",
    "type": "living",
    "scope": "individual",
    "iso6393": "xow",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pirriya",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xpa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pecheneg",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xpc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Liberia Kpelle",
    "type": "living",
    "scope": "individual",
    "iso6393": "xpe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phrygian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xpg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pictish",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xpi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mpalitjanh",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xpj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kulina Pano",
    "type": "living",
    "scope": "individual",
    "iso6393": "xpk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pumpokol",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xpm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kapinawá",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xpn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pochutec",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xpo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puyo-Paekche",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xpp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mohegan-Pequot",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xpq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Parthian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xpr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pisidian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xps",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Punthamara",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xpt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Punic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xpu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Puyo",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xpy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karakhanid",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xqa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Qatabanian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xqt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Krahô",
    "type": "living",
    "scope": "individual",
    "iso6393": "xra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Karaboro",
    "type": "living",
    "scope": "individual",
    "iso6393": "xrb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gundungurra",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xrd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kreye",
    "type": "living",
    "scope": "individual",
    "iso6393": "xre",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Minang",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xrg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Krikati-Timbira",
    "type": "living",
    "scope": "individual",
    "iso6393": "xri",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Armazic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xrm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Arin",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xrn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karranga",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xrq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Raetic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xrr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aranama-Tamique",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xrt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marriammu",
    "type": "living",
    "scope": "individual",
    "iso6393": "xru",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "xrw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sabaean",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xsa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sambal",
    "type": "living",
    "scope": "individual",
    "iso6393": "xsb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Scythian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xsc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sidetic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xsd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sempan",
    "type": "living",
    "scope": "individual",
    "iso6393": "xse",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Shamang",
    "type": "living",
    "scope": "individual",
    "iso6393": "xsh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sio",
    "type": "living",
    "scope": "individual",
    "iso6393": "xsi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Subi",
    "type": "living",
    "scope": "individual",
    "iso6393": "xsj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "South Slavey",
    "type": "living",
    "scope": "individual",
    "iso6393": "xsl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kasem",
    "type": "living",
    "scope": "individual",
    "iso6393": "xsm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sanga (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "xsn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Solano",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Silopi",
    "type": "living",
    "scope": "individual",
    "iso6393": "xsp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makhuwa-Saka",
    "type": "living",
    "scope": "individual",
    "iso6393": "xsq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sherpa",
    "type": "living",
    "scope": "individual",
    "iso6393": "xsr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Assan",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sanumá",
    "type": "living",
    "scope": "individual",
    "iso6393": "xsu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sudovian",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xsv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Saisiyat",
    "type": "living",
    "scope": "individual",
    "iso6393": "xsy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alcozauca Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "xta",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chazumba Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "xtb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Katcha-Kadugli-Miri",
    "type": "living",
    "scope": "individual",
    "iso6393": "xtc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Diuxi-Tilantongo Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "xtd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ketengban",
    "type": "living",
    "scope": "individual",
    "iso6393": "xte",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Transalpine Gaulish",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xtg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yitha Yitha",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xth",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sinicahua Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "xti",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Juan Teita Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "xtj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tijaltepec Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "xtl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Magdalena Peñasco Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "xtm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Tlaxiaco Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "xtn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tokharian A",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xto",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Miguel Piedras Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "xtp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tumshuqese",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xtq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Early Tripuri",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xtr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sindihui Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "xts",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tacahua Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "xtt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cuyamecalco Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "xtu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thawa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xtv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tawandê",
    "type": "living",
    "scope": "individual",
    "iso6393": "xtw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yoloxochitl Mixtec",
    "type": "living",
    "scope": "individual",
    "iso6393": "xty",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tasmanian",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xtz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alu Kurumba",
    "type": "living",
    "scope": "individual",
    "iso6393": "xua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Betta Kurumba",
    "type": "living",
    "scope": "individual",
    "iso6393": "xub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Umiida",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kunigami",
    "type": "living",
    "scope": "individual",
    "iso6393": "xug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Jennu Kurumba",
    "type": "living",
    "scope": "individual",
    "iso6393": "xuj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngunawal",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xul",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Umbrian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Unggaranggu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuo",
    "type": "living",
    "scope": "individual",
    "iso6393": "xuo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Upper Umpqua",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xup",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Urartian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuthant",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kxoe",
    "type": "living",
    "scope": "individual",
    "iso6393": "xuu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Venetic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xve",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kamviri",
    "type": "living",
    "scope": "individual",
    "iso6393": "xvi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vandalic",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xvn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Volscian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xvo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Vestinian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xvs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwaza",
    "type": "living",
    "scope": "individual",
    "iso6393": "xwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Woccon",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xwc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wadi Wadi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xwd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xwela Gbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "xwe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwegu",
    "type": "living",
    "scope": "individual",
    "iso6393": "xwg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wajuk",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xwj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wangkumara",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xwk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Xwla Gbe",
    "type": "living",
    "scope": "individual",
    "iso6393": "xwl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Written Oirat",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xwo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kwerba Mamberamo",
    "type": "living",
    "scope": "individual",
    "iso6393": "xwr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wotjobaluk",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xwt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wemba Wemba",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xww",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Boro (Ghana)",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xxb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ke'o",
    "type": "living",
    "scope": "individual",
    "iso6393": "xxk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Minkin",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xxm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koropó",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xxr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tambora",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xxt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaygir",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xya",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yandjibara",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xyb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mayi-Yapi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xyj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mayi-Kulan",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xyk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yalakalore",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xyl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mayi-Thakurti",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xyt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yorta Yorta",
    "type": "living",
    "scope": "individual",
    "iso6393": "xyy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zhang-Zhung",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "xzh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zemgalian",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "xzm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ancient Zapotec",
    "type": "historical",
    "scope": "individual",
    "iso6393": "xzp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaminahua",
    "type": "living",
    "scope": "individual",
    "iso6393": "yaa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yuhup",
    "type": "living",
    "scope": "individual",
    "iso6393": "yab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pass Valley Yali",
    "type": "living",
    "scope": "individual",
    "iso6393": "yac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yagua",
    "type": "living",
    "scope": "individual",
    "iso6393": "yad",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pumé",
    "type": "living",
    "scope": "individual",
    "iso6393": "yae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaka (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "yaf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yámana",
    "type": "living",
    "scope": "individual",
    "iso6393": "yag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yazgulyam",
    "type": "living",
    "scope": "individual",
    "iso6393": "yah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yagnobi",
    "type": "living",
    "scope": "individual",
    "iso6393": "yai",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Banda-Yangere",
    "type": "living",
    "scope": "individual",
    "iso6393": "yaj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yakama",
    "type": "living",
    "scope": "individual",
    "iso6393": "yak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yalunka",
    "type": "living",
    "scope": "individual",
    "iso6393": "yal",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yamba",
    "type": "living",
    "scope": "individual",
    "iso6393": "yam",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mayangna",
    "type": "living",
    "scope": "individual",
    "iso6393": "yan",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yao",
    "type": "living",
    "scope": "individual",
    "iso6393": "yao",
    "iso6392B": "yao",
    "iso6392T": "yao",
    "iso6391": null
  },
  {
    "name": "Yapese",
    "type": "living",
    "scope": "individual",
    "iso6393": "yap",
    "iso6392B": "yap",
    "iso6392T": "yap",
    "iso6391": null
  },
  {
    "name": "Yaqui",
    "type": "living",
    "scope": "individual",
    "iso6393": "yaq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yabarana",
    "type": "living",
    "scope": "individual",
    "iso6393": "yar",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nugunu (Cameroon)",
    "type": "living",
    "scope": "individual",
    "iso6393": "yas",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yambeta",
    "type": "living",
    "scope": "individual",
    "iso6393": "yat",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yuwana",
    "type": "living",
    "scope": "individual",
    "iso6393": "yau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yangben",
    "type": "living",
    "scope": "individual",
    "iso6393": "yav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yawalapití",
    "type": "living",
    "scope": "individual",
    "iso6393": "yaw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yauma",
    "type": "living",
    "scope": "individual",
    "iso6393": "yax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Agwagwune",
    "type": "living",
    "scope": "individual",
    "iso6393": "yay",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lokaa",
    "type": "living",
    "scope": "individual",
    "iso6393": "yaz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yala",
    "type": "living",
    "scope": "individual",
    "iso6393": "yba",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yemba",
    "type": "living",
    "scope": "individual",
    "iso6393": "ybb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Yugur",
    "type": "living",
    "scope": "individual",
    "iso6393": "ybe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yakha",
    "type": "living",
    "scope": "individual",
    "iso6393": "ybh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yamphu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ybi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hasha",
    "type": "living",
    "scope": "individual",
    "iso6393": "ybj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bokha",
    "type": "living",
    "scope": "individual",
    "iso6393": "ybk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yukuben",
    "type": "living",
    "scope": "individual",
    "iso6393": "ybl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaben",
    "type": "living",
    "scope": "individual",
    "iso6393": "ybm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yabaâna",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ybn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yabong",
    "type": "living",
    "scope": "individual",
    "iso6393": "ybo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yawiyo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ybx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaweyuha",
    "type": "living",
    "scope": "individual",
    "iso6393": "yby",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chesu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ych",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lolopo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ycl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yucuna",
    "type": "living",
    "scope": "individual",
    "iso6393": "ycn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chepya",
    "type": "living",
    "scope": "individual",
    "iso6393": "ycp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yanda",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yda",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Yiddish",
    "type": "living",
    "scope": "individual",
    "iso6393": "ydd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yangum Dey",
    "type": "living",
    "scope": "individual",
    "iso6393": "yde",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yidgha",
    "type": "living",
    "scope": "individual",
    "iso6393": "ydg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yoidik",
    "type": "living",
    "scope": "individual",
    "iso6393": "ydk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ravula",
    "type": "living",
    "scope": "individual",
    "iso6393": "yea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yeniche",
    "type": "living",
    "scope": "individual",
    "iso6393": "yec",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yimas",
    "type": "living",
    "scope": "individual",
    "iso6393": "yee",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yeni",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yei",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yevanic",
    "type": "living",
    "scope": "individual",
    "iso6393": "yej",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yela",
    "type": "living",
    "scope": "individual",
    "iso6393": "yel",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tarok",
    "type": "living",
    "scope": "individual",
    "iso6393": "yer",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyankpa",
    "type": "living",
    "scope": "individual",
    "iso6393": "yes",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yetfa",
    "type": "living",
    "scope": "individual",
    "iso6393": "yet",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yerukula",
    "type": "living",
    "scope": "individual",
    "iso6393": "yeu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yapunda",
    "type": "living",
    "scope": "individual",
    "iso6393": "yev",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yeyi",
    "type": "living",
    "scope": "individual",
    "iso6393": "yey",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malyangapa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yiningayi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ygi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yangum Gel",
    "type": "living",
    "scope": "individual",
    "iso6393": "ygl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yagomi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ygm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Gepo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ygp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yagaria",
    "type": "living",
    "scope": "individual",
    "iso6393": "ygr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yolŋu Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "ygs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yugul",
    "type": "living",
    "scope": "individual",
    "iso6393": "ygu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yagwoia",
    "type": "living",
    "scope": "individual",
    "iso6393": "ygw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Baha Buyang",
    "type": "living",
    "scope": "individual",
    "iso6393": "yha",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Judeo-Iraqi Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "yhd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Hlepho Phowa",
    "type": "living",
    "scope": "individual",
    "iso6393": "yhl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yan-nhaŋu Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "yhs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yinggarda",
    "type": "living",
    "scope": "individual",
    "iso6393": "yia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yiddish",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "yid",
    "iso6392B": "yid",
    "iso6392T": "yid",
    "iso6391": "yi"
  },
  {
    "name": "Ache",
    "type": "living",
    "scope": "individual",
    "iso6393": "yif",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wusa Nasu",
    "type": "living",
    "scope": "individual",
    "iso6393": "yig",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Yiddish",
    "type": "living",
    "scope": "individual",
    "iso6393": "yih",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yidiny",
    "type": "living",
    "scope": "individual",
    "iso6393": "yii",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yindjibarndi",
    "type": "living",
    "scope": "individual",
    "iso6393": "yij",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dongshanba Lalo",
    "type": "living",
    "scope": "individual",
    "iso6393": "yik",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yindjilandji",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yil",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yimchungru Naga",
    "type": "living",
    "scope": "individual",
    "iso6393": "yim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Riang Lai",
    "type": "living",
    "scope": "individual",
    "iso6393": "yin",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Pholo",
    "type": "living",
    "scope": "individual",
    "iso6393": "yip",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miqie",
    "type": "living",
    "scope": "individual",
    "iso6393": "yiq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "North Awyu",
    "type": "living",
    "scope": "individual",
    "iso6393": "yir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yis",
    "type": "living",
    "scope": "individual",
    "iso6393": "yis",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Lalu",
    "type": "living",
    "scope": "individual",
    "iso6393": "yit",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Awu",
    "type": "living",
    "scope": "individual",
    "iso6393": "yiu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Nisu",
    "type": "living",
    "scope": "individual",
    "iso6393": "yiv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Axi Yi",
    "type": "living",
    "scope": "individual",
    "iso6393": "yix",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Azhe",
    "type": "living",
    "scope": "individual",
    "iso6393": "yiz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yakan",
    "type": "living",
    "scope": "individual",
    "iso6393": "yka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Yukaghir",
    "type": "living",
    "scope": "individual",
    "iso6393": "ykg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yoke",
    "type": "living",
    "scope": "individual",
    "iso6393": "yki",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yakaikeke",
    "type": "living",
    "scope": "individual",
    "iso6393": "ykk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khlula",
    "type": "living",
    "scope": "individual",
    "iso6393": "ykl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kap",
    "type": "living",
    "scope": "individual",
    "iso6393": "ykm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kua-nsi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ykn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yasa",
    "type": "living",
    "scope": "individual",
    "iso6393": "yko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yekora",
    "type": "living",
    "scope": "individual",
    "iso6393": "ykr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kathu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ykt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kuamasi",
    "type": "living",
    "scope": "individual",
    "iso6393": "yku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yakoma",
    "type": "living",
    "scope": "individual",
    "iso6393": "yky",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaul",
    "type": "living",
    "scope": "individual",
    "iso6393": "yla",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaleba",
    "type": "living",
    "scope": "individual",
    "iso6393": "ylb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yele",
    "type": "living",
    "scope": "individual",
    "iso6393": "yle",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yelogu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ylg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Angguruk Yali",
    "type": "living",
    "scope": "individual",
    "iso6393": "yli",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yil",
    "type": "living",
    "scope": "individual",
    "iso6393": "yll",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Limi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ylm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Langnian Buyang",
    "type": "living",
    "scope": "individual",
    "iso6393": "yln",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Naluo Yi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ylo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yalarnnga",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ylr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aribwaung",
    "type": "living",
    "scope": "individual",
    "iso6393": "ylu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nyâlayu",
    "type": "living",
    "scope": "individual",
    "iso6393": "yly",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yambes",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Muji",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muda",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yameo",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yamongeri",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mili",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Moji",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Iamalele",
    "type": "living",
    "scope": "individual",
    "iso6393": "yml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maay",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yamna",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yangum Mon",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yamap",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Qila Muji",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malasar",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mysian",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "yms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Northern Muji",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muzi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ymz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Aluo",
    "type": "living",
    "scope": "individual",
    "iso6393": "yna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yandruwandha",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ynd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lang'e",
    "type": "living",
    "scope": "individual",
    "iso6393": "yne",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yango",
    "type": "living",
    "scope": "individual",
    "iso6393": "yng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Naukan Yupik",
    "type": "living",
    "scope": "individual",
    "iso6393": "ynk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yangulam",
    "type": "living",
    "scope": "individual",
    "iso6393": "ynl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yana",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ynn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yong",
    "type": "living",
    "scope": "individual",
    "iso6393": "yno",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yendang",
    "type": "living",
    "scope": "individual",
    "iso6393": "ynq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yansi",
    "type": "living",
    "scope": "individual",
    "iso6393": "yns",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yahuna",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ynu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yoba",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yob",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yogad",
    "type": "living",
    "scope": "individual",
    "iso6393": "yog",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yonaguni",
    "type": "living",
    "scope": "individual",
    "iso6393": "yoi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yokuts",
    "type": "living",
    "scope": "individual",
    "iso6393": "yok",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yola",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yol",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yombe",
    "type": "living",
    "scope": "individual",
    "iso6393": "yom",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yongkom",
    "type": "living",
    "scope": "individual",
    "iso6393": "yon",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yoruba",
    "type": "living",
    "scope": "individual",
    "iso6393": "yor",
    "iso6392B": "yor",
    "iso6392T": "yor",
    "iso6391": "yo"
  },
  {
    "name": "Yotti",
    "type": "living",
    "scope": "individual",
    "iso6393": "yot",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yoron",
    "type": "living",
    "scope": "individual",
    "iso6393": "yox",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yoy",
    "type": "living",
    "scope": "individual",
    "iso6393": "yoy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phala",
    "type": "living",
    "scope": "individual",
    "iso6393": "ypa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Labo Phowa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ypb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phola",
    "type": "living",
    "scope": "individual",
    "iso6393": "ypg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phupha",
    "type": "living",
    "scope": "individual",
    "iso6393": "yph",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phuma",
    "type": "living",
    "scope": "individual",
    "iso6393": "ypm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ani Phowa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ypn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Alo Phola",
    "type": "living",
    "scope": "individual",
    "iso6393": "ypo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phupa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ypp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Phuza",
    "type": "living",
    "scope": "individual",
    "iso6393": "ypz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yerakai",
    "type": "living",
    "scope": "individual",
    "iso6393": "yra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yareba",
    "type": "living",
    "scope": "individual",
    "iso6393": "yrb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaouré",
    "type": "living",
    "scope": "individual",
    "iso6393": "yre",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nenets",
    "type": "living",
    "scope": "individual",
    "iso6393": "yrk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nhengatu",
    "type": "living",
    "scope": "individual",
    "iso6393": "yrl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yirrk-Mel",
    "type": "living",
    "scope": "individual",
    "iso6393": "yrm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yerong",
    "type": "living",
    "scope": "individual",
    "iso6393": "yrn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yaroamë",
    "type": "living",
    "scope": "individual",
    "iso6393": "yro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yarsun",
    "type": "living",
    "scope": "individual",
    "iso6393": "yrs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yarawata",
    "type": "living",
    "scope": "individual",
    "iso6393": "yrw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yarluyandi",
    "type": "living",
    "scope": "individual",
    "iso6393": "yry",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yassic",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ysc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Samatao",
    "type": "living",
    "scope": "individual",
    "iso6393": "ysd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sonaga",
    "type": "living",
    "scope": "individual",
    "iso6393": "ysg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yugoslavian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "ysl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sani",
    "type": "living",
    "scope": "individual",
    "iso6393": "ysn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nisi (China)",
    "type": "living",
    "scope": "individual",
    "iso6393": "yso",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Lolopo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ysp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sirenik Yupik",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "ysr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yessan-Mayo",
    "type": "living",
    "scope": "individual",
    "iso6393": "yss",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sanie",
    "type": "living",
    "scope": "individual",
    "iso6393": "ysy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Talu",
    "type": "living",
    "scope": "individual",
    "iso6393": "yta",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tanglang",
    "type": "living",
    "scope": "individual",
    "iso6393": "ytl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Thopho",
    "type": "living",
    "scope": "individual",
    "iso6393": "ytp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yout Wam",
    "type": "living",
    "scope": "individual",
    "iso6393": "ytw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yatay",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yty",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yucateco",
    "type": "living",
    "scope": "individual",
    "iso6393": "yua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yugambal",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yub",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yuchi",
    "type": "living",
    "scope": "individual",
    "iso6393": "yuc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Judeo-Tripolitanian Arabic",
    "type": "living",
    "scope": "individual",
    "iso6393": "yud",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yue Chinese",
    "type": "living",
    "scope": "individual",
    "iso6393": "yue",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Havasupai-Walapai-Yavapai",
    "type": "living",
    "scope": "individual",
    "iso6393": "yuf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yug",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yug",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yurutí",
    "type": "living",
    "scope": "individual",
    "iso6393": "yui",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karkar-Yuri",
    "type": "living",
    "scope": "individual",
    "iso6393": "yuj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yuki",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yuk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "yul",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Quechan",
    "type": "living",
    "scope": "individual",
    "iso6393": "yum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bena (Nigeria)",
    "type": "living",
    "scope": "individual",
    "iso6393": "yun",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yukpa",
    "type": "living",
    "scope": "individual",
    "iso6393": "yup",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yuqui",
    "type": "living",
    "scope": "individual",
    "iso6393": "yuq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yurok",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yur",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yopno",
    "type": "living",
    "scope": "individual",
    "iso6393": "yut",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yau (Morobe Province)",
    "type": "living",
    "scope": "individual",
    "iso6393": "yuw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Yukaghir",
    "type": "living",
    "scope": "individual",
    "iso6393": "yux",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "East Yugur",
    "type": "living",
    "scope": "individual",
    "iso6393": "yuy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yuracare",
    "type": "living",
    "scope": "individual",
    "iso6393": "yuz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "yva",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yavitero",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yvt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kalou",
    "type": "living",
    "scope": "individual",
    "iso6393": "ywa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yinhawangka",
    "type": "living",
    "scope": "individual",
    "iso6393": "ywg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Lalu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ywl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yawanawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "ywn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wuding-Luquan Yi",
    "type": "living",
    "scope": "individual",
    "iso6393": "ywq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yawuru",
    "type": "living",
    "scope": "individual",
    "iso6393": "ywr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xishanba Lalo",
    "type": "living",
    "scope": "individual",
    "iso6393": "ywt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Wumeng Nasu",
    "type": "living",
    "scope": "individual",
    "iso6393": "ywu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yawarawarga",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yww",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mayawali",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yxa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yagara",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yxg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yardliyawarra",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yxl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yinwum",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yxm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yuyu",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yxu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yabula Yabula",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yxy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yir Yoront",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "yyr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yau (Sandaun Province)",
    "type": "living",
    "scope": "individual",
    "iso6393": "yyu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ayizi",
    "type": "living",
    "scope": "individual",
    "iso6393": "yyz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "E'ma Buyang",
    "type": "living",
    "scope": "individual",
    "iso6393": "yzg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zokhuo",
    "type": "living",
    "scope": "individual",
    "iso6393": "yzk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sierra de Juárez Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zaa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Western Tlacolula Valley Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zab",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ocotlán Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zac",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Cajonos Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zad",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yareni Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zae",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ayoquesco Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zaf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zaghawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "zag",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zangwal",
    "type": "living",
    "scope": "individual",
    "iso6393": "zah",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Isthmus Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zai",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zaramo",
    "type": "living",
    "scope": "individual",
    "iso6393": "zaj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zanaki",
    "type": "living",
    "scope": "individual",
    "iso6393": "zak",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zauzou",
    "type": "living",
    "scope": "individual",
    "iso6393": "zal",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Miahuatlán Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zam",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ozolotepec Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zao",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zapotec",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "zap",
    "iso6392B": "zap",
    "iso6392T": "zap",
    "iso6391": null
  },
  {
    "name": "Aloápam Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zaq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rincón Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zar",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Santo Domingo Albarradas Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zas",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tabaa Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zat",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zangskari",
    "type": "living",
    "scope": "individual",
    "iso6393": "zau",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yatzachi Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zav",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mitla Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zaw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xadani Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zax",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zayse-Zergulla",
    "type": "living",
    "scope": "individual",
    "iso6393": "zay",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zari",
    "type": "living",
    "scope": "individual",
    "iso6393": "zaz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Berawan",
    "type": "living",
    "scope": "individual",
    "iso6393": "zbc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "East Berawan",
    "type": "living",
    "scope": "individual",
    "iso6393": "zbe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Blissymbols",
    "type": "constructed",
    "scope": "individual",
    "iso6393": "zbl",
    "iso6392B": "zbl",
    "iso6392T": "zbl",
    "iso6391": null
  },
  {
    "name": "Batui",
    "type": "living",
    "scope": "individual",
    "iso6393": "zbt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "West Berawan",
    "type": "living",
    "scope": "individual",
    "iso6393": "zbw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Coatecas Altas Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zca",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Central Hongshuihe Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zch",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ngazidja Comorian",
    "type": "living",
    "scope": "individual",
    "iso6393": "zdj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zeeuws",
    "type": "living",
    "scope": "individual",
    "iso6393": "zea",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zenag",
    "type": "living",
    "scope": "individual",
    "iso6393": "zeg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Eastern Hongshuihe Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zeh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zenaga",
    "type": "living",
    "scope": "individual",
    "iso6393": "zen",
    "iso6392B": "zen",
    "iso6392T": "zen",
    "iso6391": null
  },
  {
    "name": "Kinga",
    "type": "living",
    "scope": "individual",
    "iso6393": "zga",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guibei Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zgb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Standard Moroccan Tamazight",
    "type": "living",
    "scope": "individual",
    "iso6393": "zgh",
    "iso6392B": "zgh",
    "iso6392T": "zgh",
    "iso6391": null
  },
  {
    "name": "Minz Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zgm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guibian Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zgn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Magori",
    "type": "living",
    "scope": "individual",
    "iso6393": "zgr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zhuang",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "zha",
    "iso6392B": "zha",
    "iso6392T": "zha",
    "iso6391": "za"
  },
  {
    "name": "Zhaba",
    "type": "living",
    "scope": "individual",
    "iso6393": "zhb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Dai Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zhd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zhire",
    "type": "living",
    "scope": "individual",
    "iso6393": "zhi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Nong Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zhn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chinese",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "zho",
    "iso6392B": "chi",
    "iso6392T": "zho",
    "iso6391": "zh"
  },
  {
    "name": "Zhoa",
    "type": "living",
    "scope": "individual",
    "iso6393": "zhw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zia",
    "type": "living",
    "scope": "individual",
    "iso6393": "zia",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zimbabwe Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "zib",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zimakani",
    "type": "living",
    "scope": "individual",
    "iso6393": "zik",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zialo",
    "type": "living",
    "scope": "individual",
    "iso6393": "zil",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mesme",
    "type": "living",
    "scope": "individual",
    "iso6393": "zim",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zinza",
    "type": "living",
    "scope": "individual",
    "iso6393": "zin",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Ziriya",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "zir",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zigula",
    "type": "living",
    "scope": "individual",
    "iso6393": "ziw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zizilivakan",
    "type": "living",
    "scope": "individual",
    "iso6393": "ziz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaimbulawa",
    "type": "living",
    "scope": "individual",
    "iso6393": "zka",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koibal",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "zkb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kadu",
    "type": "living",
    "scope": "individual",
    "iso6393": "zkd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Koguryo",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "zkg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khorezmian",
    "type": "historical",
    "scope": "individual",
    "iso6393": "zkh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Karankawa",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "zkk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kanan",
    "type": "living",
    "scope": "individual",
    "iso6393": "zkn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kott",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "zko",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "São Paulo Kaingáng",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "zkp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zakhring",
    "type": "living",
    "scope": "individual",
    "iso6393": "zkr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kitan",
    "type": "historical",
    "scope": "individual",
    "iso6393": "zkt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaurna",
    "type": "living",
    "scope": "individual",
    "iso6393": "zku",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Krevinian",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "zkv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Khazar",
    "type": "historical",
    "scope": "individual",
    "iso6393": "zkz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Liujiang Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zlj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Malay (individual language)",
    "type": "living",
    "scope": "individual",
    "iso6393": "zlm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lianshan Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zln",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Liuqian Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zlq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manda (Australia)",
    "type": "living",
    "scope": "individual",
    "iso6393": "zma",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zimba",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Margany",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "zmc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maridan",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mangerr",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "zme",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mfinu",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marti Ke",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Makolkol",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "zmh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Negeri Sembilan Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maridjabin",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mandandanyi",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "zmk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Matngala",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "zml",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Marimanindji",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbangwe",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Molo",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mpuono",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mituku",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maranunggu",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbesa",
    "type": "living",
    "scope": "individual",
    "iso6393": "zms",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Maringarr",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Muruwari",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "zmu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbariman-Gudhinma",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "zmv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbo (Democratic Republic of Congo)",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Bomitaba",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mariyedi",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mbandja",
    "type": "living",
    "scope": "individual",
    "iso6393": "zmz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zan Gula",
    "type": "living",
    "scope": "individual",
    "iso6393": "zna",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zande (individual language)",
    "type": "living",
    "scope": "individual",
    "iso6393": "zne",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zng",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Manangkari",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "znk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mangas",
    "type": "living",
    "scope": "individual",
    "iso6393": "zns",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Copainalá Zoque",
    "type": "living",
    "scope": "individual",
    "iso6393": "zoc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chimalapa Zoque",
    "type": "living",
    "scope": "individual",
    "iso6393": "zoh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zou",
    "type": "living",
    "scope": "individual",
    "iso6393": "zom",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Asunción Mixtepec Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zoo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tabasco Zoque",
    "type": "living",
    "scope": "individual",
    "iso6393": "zoq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Rayón Zoque",
    "type": "living",
    "scope": "individual",
    "iso6393": "zor",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Francisco León Zoque",
    "type": "living",
    "scope": "individual",
    "iso6393": "zos",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lachiguiri Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yautepec Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Choapan Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpc",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southeastern Ixtlán Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpd",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Petapa Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Pedro Quiatoni Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpf",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Guevea De Humboldt Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Totomachapan Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zph",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Santa María Quiegolani Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpi",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Quiavicuzas Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tlacolulita Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lachixío Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mixtepec Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Santa Inés Yatzechi Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Amatlán Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpo",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "El Alto Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zoogocho Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Santiago Xanica Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Coatlán Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zps",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Vicente Coatlán Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yalálag Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Chichicapan Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpv",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zaniza Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpw",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Baltazar Loxicha Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mazaltepec Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Texmelucan Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zpz",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Qiubei Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zqe",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kara (Korea)",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "zra",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mirgan",
    "type": "living",
    "scope": "individual",
    "iso6393": "zrg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zerenkel",
    "type": "living",
    "scope": "individual",
    "iso6393": "zrn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Záparo",
    "type": "living",
    "scope": "individual",
    "iso6393": "zro",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zarphatic",
    "type": "extinct",
    "scope": "individual",
    "iso6393": "zrp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Mairasi",
    "type": "living",
    "scope": "individual",
    "iso6393": "zrs",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sarasira",
    "type": "living",
    "scope": "individual",
    "iso6393": "zsa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Kaskean",
    "type": "ancient",
    "scope": "individual",
    "iso6393": "zsk",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zambian Sign Language",
    "type": "living",
    "scope": "individual",
    "iso6393": "zsl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Standard Malay",
    "type": "living",
    "scope": "individual",
    "iso6393": "zsm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Southern Rincon Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zsr",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Sukurum",
    "type": "living",
    "scope": "individual",
    "iso6393": "zsu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Elotepec Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zte",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Xanaguía Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "ztg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Lapaguía-Guivini Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "ztl",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "San Agustín Mixtepec Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "ztm",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Santa Catarina Albarradas Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "ztn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Loxicha Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "ztp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Quioquitani-Quierí Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "ztq",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tilquiapan Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zts",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tejalapan Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "ztt",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Güilá Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "ztu",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zaachila Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "ztx",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yatee Zapotec",
    "type": "living",
    "scope": "individual",
    "iso6393": "zty",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zeem",
    "type": "living",
    "scope": "individual",
    "iso6393": "zua",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Tokano",
    "type": "living",
    "scope": "individual",
    "iso6393": "zuh",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zulu",
    "type": "living",
    "scope": "individual",
    "iso6393": "zul",
    "iso6392B": "zul",
    "iso6392T": "zul",
    "iso6391": "zu"
  },
  {
    "name": "Kumzari",
    "type": "living",
    "scope": "individual",
    "iso6393": "zum",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zuni",
    "type": "living",
    "scope": "individual",
    "iso6393": "zun",
    "iso6392B": "zun",
    "iso6392T": "zun",
    "iso6391": null
  },
  {
    "name": "Zumaya",
    "type": "living",
    "scope": "individual",
    "iso6393": "zuy",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zay",
    "type": "living",
    "scope": "individual",
    "iso6393": "zwa",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "No linguistic content",
    "type": "special",
    "scope": "special",
    "iso6393": "zxx",
    "iso6392B": "zxx",
    "iso6392T": "zxx",
    "iso6391": null
  },
  {
    "name": "Yongbei Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zyb",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yang Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zyg",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Youjiang Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zyj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Yongnan Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zyn",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zyphe Chin",
    "type": "living",
    "scope": "individual",
    "iso6393": "zyp",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  },
  {
    "name": "Zaza",
    "type": "living",
    "scope": "macrolanguage",
    "iso6393": "zza",
    "iso6392B": "zza",
    "iso6392T": "zza",
    "iso6391": null
  },
  {
    "name": "Zuojiang Zhuang",
    "type": "living",
    "scope": "individual",
    "iso6393": "zzj",
    "iso6392B": null,
    "iso6392T": null,
    "iso6391": null
  }
]

},{}],247:[function(require,module,exports){

module.exports = isDate;


/**
 * Matching format per: http://www.w3.org/TR/NOTE-datetime
 */

var isoformat = '^\\d{4}-\\d{2}-\\d{2}' +        // Match YYYY-MM-DD
                '((T\\d{2}:\\d{2}(:\\d{2})?)' +  // Match THH:mm:ss
                '(\\.\\d{1,6})?' +               // Match .sssss
                '(Z|(\\+|-)\\d{2}:\\d{2})?)?$';  // Time zone (Z or +hh:mm)


var matcher = new RegExp(isoformat);


function isDate (val) {
  return typeof val === 'string' &&
         matcher.test(val) &&
         !isNaN(Date.parse(val));
}
},{}],248:[function(require,module,exports){
(function (Buffer){
//TODO: handle reviver/dehydrate function like normal
//and handle indentation, like normal.
//if anyone needs this... please send pull request.

exports.stringify = function stringify (o) {
  if('undefined' == typeof o) return o

  if(o && Buffer.isBuffer(o))
    return JSON.stringify(':base64:' + o.toString('base64'))

  if(o && o.toJSON)
    o =  o.toJSON()

  if(o && 'object' === typeof o) {
    var s = ''
    var array = Array.isArray(o)
    s = array ? '[' : '{'
    var first = true

    for(var k in o) {
      var ignore = 'function' == typeof o[k] || (!array && 'undefined' === typeof o[k])
      if(Object.hasOwnProperty.call(o, k) && !ignore) {
        if(!first)
          s += ','
        first = false
        if (array) {
          if(o[k] == undefined)
            s += 'null'
          else
            s += stringify(o[k])
        } else if (o[k] !== void(0)) {
          s += stringify(k) + ':' + stringify(o[k])
        }
      }
    }

    s += array ? ']' : '}'

    return s
  } else if ('string' === typeof o) {
    return JSON.stringify(/^:/.test(o) ? ':' + o : o)
  } else if ('undefined' === typeof o) {
    return 'null';
  } else
    return JSON.stringify(o)
}

exports.parse = function (s) {
  return JSON.parse(s, function (key, value) {
    if('string' === typeof value) {
      if(/^:base64:/.test(value))
        return new Buffer(value.substring(8), 'base64')
      else
        return /^:/.test(value) ? value.substring(1) : value 
    }
    return value
  })
}

}).call(this,require("buffer").Buffer)
},{"buffer":4}],249:[function(require,module,exports){
'use strict';

const EventEmitter = require('events');
const JSONB = require('json-buffer');

const loadStore = opts => {
	const adapters = {
		redis: '@keyv/redis',
		mongodb: '@keyv/mongo',
		mongo: '@keyv/mongo',
		sqlite: '@keyv/sqlite',
		postgresql: '@keyv/postgres',
		postgres: '@keyv/postgres',
		mysql: '@keyv/mysql'
	};
	if (opts.adapter || opts.uri) {
		const adapter = opts.adapter || /^[^:]*/.exec(opts.uri)[0];
		return new (require(adapters[adapter]))(opts);
	}
	return new Map();
};

class Keyv extends EventEmitter {
	constructor(uri, opts) {
		super();
		this.opts = Object.assign(
			{
				namespace: 'keyv',
				serialize: JSONB.stringify,
				deserialize: JSONB.parse
			},
			(typeof uri === 'string') ? { uri } : uri,
			opts
		);

		if (!this.opts.store) {
			const adapterOpts = Object.assign({}, this.opts);
			this.opts.store = loadStore(adapterOpts);
		}

		if (typeof this.opts.store.on === 'function') {
			this.opts.store.on('error', err => this.emit('error', err));
		}

		this.opts.store.namespace = this.opts.namespace;
	}

	_getKeyPrefix(key) {
		return `${this.opts.namespace}:${key}`;
	}

	get(key) {
		key = this._getKeyPrefix(key);
		const store = this.opts.store;
		return Promise.resolve()
			.then(() => store.get(key))
			.then(data => {
				data = (typeof data === 'string') ? this.opts.deserialize(data) : data;
				if (data === undefined) {
					return undefined;
				}
				if (typeof data.expires === 'number' && Date.now() > data.expires) {
					this.delete(key);
					return undefined;
				}
				return data.value;
			});
	}

	set(key, value, ttl) {
		key = this._getKeyPrefix(key);
		if (typeof ttl === 'undefined') {
			ttl = this.opts.ttl;
		}
		if (ttl === 0) {
			ttl = undefined;
		}
		const store = this.opts.store;

		return Promise.resolve()
			.then(() => {
				const expires = (typeof ttl === 'number') ? (Date.now() + ttl) : null;
				value = { value, expires };
				return store.set(key, this.opts.serialize(value), ttl);
			})
			.then(() => true);
	}

	delete(key) {
		key = this._getKeyPrefix(key);
		const store = this.opts.store;
		return Promise.resolve()
			.then(() => store.delete(key));
	}

	clear() {
		const store = this.opts.store;
		return Promise.resolve()
			.then(() => store.clear());
	}
}

module.exports = Keyv;

},{"events":7,"json-buffer":248}],250:[function(require,module,exports){
var toString = Object.prototype.toString;

module.exports = function kindOf(val) {
  if (val === void 0) return 'undefined';
  if (val === null) return 'null';

  var type = typeof val;
  if (type === 'boolean') return 'boolean';
  if (type === 'string') return 'string';
  if (type === 'number') return 'number';
  if (type === 'symbol') return 'symbol';
  if (type === 'function') {
    return isGeneratorFn(val) ? 'generatorfunction' : 'function';
  }

  if (isArray(val)) return 'array';
  if (isBuffer(val)) return 'buffer';
  if (isArguments(val)) return 'arguments';
  if (isDate(val)) return 'date';
  if (isError(val)) return 'error';
  if (isRegexp(val)) return 'regexp';

  switch (ctorName(val)) {
    case 'Symbol': return 'symbol';
    case 'Promise': return 'promise';

    // Set, Map, WeakSet, WeakMap
    case 'WeakMap': return 'weakmap';
    case 'WeakSet': return 'weakset';
    case 'Map': return 'map';
    case 'Set': return 'set';

    // 8-bit typed arrays
    case 'Int8Array': return 'int8array';
    case 'Uint8Array': return 'uint8array';
    case 'Uint8ClampedArray': return 'uint8clampedarray';

    // 16-bit typed arrays
    case 'Int16Array': return 'int16array';
    case 'Uint16Array': return 'uint16array';

    // 32-bit typed arrays
    case 'Int32Array': return 'int32array';
    case 'Uint32Array': return 'uint32array';
    case 'Float32Array': return 'float32array';
    case 'Float64Array': return 'float64array';
  }

  if (isGeneratorObj(val)) {
    return 'generator';
  }

  // Non-plain objects
  type = toString.call(val);
  switch (type) {
    case '[object Object]': return 'object';
    // iterators
    case '[object Map Iterator]': return 'mapiterator';
    case '[object Set Iterator]': return 'setiterator';
    case '[object String Iterator]': return 'stringiterator';
    case '[object Array Iterator]': return 'arrayiterator';
  }

  // other
  return type.slice(8, -1).toLowerCase().replace(/\s/g, '');
};

function ctorName(val) {
  return val.constructor ? val.constructor.name : null;
}

function isArray(val) {
  if (Array.isArray) return Array.isArray(val);
  return val instanceof Array;
}

function isError(val) {
  return val instanceof Error || (typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number');
}

function isDate(val) {
  if (val instanceof Date) return true;
  return typeof val.toDateString === 'function'
    && typeof val.getDate === 'function'
    && typeof val.setDate === 'function';
}

function isRegexp(val) {
  if (val instanceof RegExp) return true;
  return typeof val.flags === 'string'
    && typeof val.ignoreCase === 'boolean'
    && typeof val.multiline === 'boolean'
    && typeof val.global === 'boolean';
}

function isGeneratorFn(name, val) {
  return ctorName(name) === 'GeneratorFunction';
}

function isGeneratorObj(val) {
  return typeof val.throw === 'function'
    && typeof val.return === 'function'
    && typeof val.next === 'function';
}

function isArguments(val) {
  try {
    if (typeof val.length === 'number' && typeof val.callee === 'function') {
      return true;
    }
  } catch (err) {
    if (err.message.indexOf('callee') !== -1) {
      return true;
    }
  }
  return false;
}

/**
 * If you need to support Safari 5-7 (8-10 yr-old browser),
 * take a look at https://github.com/feross/is-buffer
 */

function isBuffer(val) {
  if (val.constructor && typeof val.constructor.isBuffer === 'function') {
    return val.constructor.isBuffer(val);
  }
  return false;
}

},{}],251:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

},{"./_getNative":353,"./_root":402}],252:[function(require,module,exports){
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

},{"./_hashClear":361,"./_hashDelete":362,"./_hashGet":363,"./_hashHas":364,"./_hashSet":365}],253:[function(require,module,exports){
var baseCreate = require('./_baseCreate'),
    baseLodash = require('./_baseLodash');

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;

/**
 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
 *
 * @private
 * @constructor
 * @param {*} value The value to wrap.
 */
function LazyWrapper(value) {
  this.__wrapped__ = value;
  this.__actions__ = [];
  this.__dir__ = 1;
  this.__filtered__ = false;
  this.__iteratees__ = [];
  this.__takeCount__ = MAX_ARRAY_LENGTH;
  this.__views__ = [];
}

// Ensure `LazyWrapper` is an instance of `baseLodash`.
LazyWrapper.prototype = baseCreate(baseLodash.prototype);
LazyWrapper.prototype.constructor = LazyWrapper;

module.exports = LazyWrapper;

},{"./_baseCreate":278,"./_baseLodash":300}],254:[function(require,module,exports){
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

},{"./_listCacheClear":377,"./_listCacheDelete":378,"./_listCacheGet":379,"./_listCacheHas":380,"./_listCacheSet":381}],255:[function(require,module,exports){
var baseCreate = require('./_baseCreate'),
    baseLodash = require('./_baseLodash');

/**
 * The base constructor for creating `lodash` wrapper objects.
 *
 * @private
 * @param {*} value The value to wrap.
 * @param {boolean} [chainAll] Enable explicit method chain sequences.
 */
function LodashWrapper(value, chainAll) {
  this.__wrapped__ = value;
  this.__actions__ = [];
  this.__chain__ = !!chainAll;
  this.__index__ = 0;
  this.__values__ = undefined;
}

LodashWrapper.prototype = baseCreate(baseLodash.prototype);
LodashWrapper.prototype.constructor = LodashWrapper;

module.exports = LodashWrapper;

},{"./_baseCreate":278,"./_baseLodash":300}],256:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

},{"./_getNative":353,"./_root":402}],257:[function(require,module,exports){
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

},{"./_mapCacheClear":382,"./_mapCacheDelete":383,"./_mapCacheGet":384,"./_mapCacheHas":385,"./_mapCacheSet":386}],258:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

},{"./_getNative":353,"./_root":402}],259:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

},{"./_getNative":353,"./_root":402}],260:[function(require,module,exports){
var MapCache = require('./_MapCache'),
    setCacheAdd = require('./_setCacheAdd'),
    setCacheHas = require('./_setCacheHas');

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

},{"./_MapCache":257,"./_setCacheAdd":404,"./_setCacheHas":405}],261:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

},{"./_ListCache":254,"./_stackClear":411,"./_stackDelete":412,"./_stackGet":413,"./_stackHas":414,"./_stackSet":415}],262:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":402}],263:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

},{"./_root":402}],264:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

},{"./_getNative":353,"./_root":402}],265:[function(require,module,exports){
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;

},{}],266:[function(require,module,exports){
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;

},{}],267:[function(require,module,exports){
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

},{}],268:[function(require,module,exports){
var baseIndexOf = require('./_baseIndexOf');

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;

},{"./_baseIndexOf":289}],269:[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

},{"./_baseTimes":316,"./_isIndex":369,"./isArguments":434,"./isArray":435,"./isBuffer":438,"./isTypedArray":445}],270:[function(require,module,exports){
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

},{}],271:[function(require,module,exports){
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

},{}],272:[function(require,module,exports){
/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

module.exports = arrayReduce;

},{}],273:[function(require,module,exports){
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

},{}],274:[function(require,module,exports){
var baseAssignValue = require('./_baseAssignValue'),
    eq = require('./eq');

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignMergeValue;

},{"./_baseAssignValue":277,"./eq":427}],275:[function(require,module,exports){
var baseAssignValue = require('./_baseAssignValue'),
    eq = require('./eq');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;

},{"./_baseAssignValue":277,"./eq":427}],276:[function(require,module,exports){
var eq = require('./eq');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

},{"./eq":427}],277:[function(require,module,exports){
var defineProperty = require('./_defineProperty');

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;

},{"./_defineProperty":341}],278:[function(require,module,exports){
var isObject = require('./isObject');

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;

},{"./isObject":441}],279:[function(require,module,exports){
var baseForOwn = require('./_baseForOwn'),
    createBaseEach = require('./_createBaseEach');

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;

},{"./_baseForOwn":284,"./_createBaseEach":332}],280:[function(require,module,exports){
var baseEach = require('./_baseEach');

/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function baseFilter(collection, predicate) {
  var result = [];
  baseEach(collection, function(value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

module.exports = baseFilter;

},{"./_baseEach":279}],281:[function(require,module,exports){
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;

},{}],282:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    isFlattenable = require('./_isFlattenable');

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;

},{"./_arrayPush":271,"./_isFlattenable":368}],283:[function(require,module,exports){
var createBaseFor = require('./_createBaseFor');

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

},{"./_createBaseFor":333}],284:[function(require,module,exports){
var baseFor = require('./_baseFor'),
    keys = require('./keys');

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

},{"./_baseFor":283,"./keys":446}],285:[function(require,module,exports){
var castPath = require('./_castPath'),
    toKey = require('./_toKey');

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;

},{"./_castPath":321,"./_toKey":418}],286:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    isArray = require('./isArray');

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

},{"./_arrayPush":271,"./isArray":435}],287:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":262,"./_getRawTag":355,"./_objectToString":396}],288:[function(require,module,exports){
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;

},{}],289:[function(require,module,exports){
var baseFindIndex = require('./_baseFindIndex'),
    baseIsNaN = require('./_baseIsNaN'),
    strictIndexOf = require('./_strictIndexOf');

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;

},{"./_baseFindIndex":281,"./_baseIsNaN":294,"./_strictIndexOf":416}],290:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

},{"./_baseGetTag":287,"./isObjectLike":442}],291:[function(require,module,exports){
var baseIsEqualDeep = require('./_baseIsEqualDeep'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":292,"./isObjectLike":442}],292:[function(require,module,exports){
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

},{"./_Stack":261,"./_equalArrays":342,"./_equalByTag":343,"./_equalObjects":344,"./_getTag":357,"./isArray":435,"./isBuffer":438,"./isTypedArray":445}],293:[function(require,module,exports){
var Stack = require('./_Stack'),
    baseIsEqual = require('./_baseIsEqual');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

},{"./_Stack":261,"./_baseIsEqual":291}],294:[function(require,module,exports){
/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;

},{}],295:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isMasked = require('./_isMasked'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

},{"./_isMasked":374,"./_toSource":419,"./isFunction":439,"./isObject":441}],296:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

},{"./_baseGetTag":287,"./isLength":440,"./isObjectLike":442}],297:[function(require,module,exports){
var baseMatches = require('./_baseMatches'),
    baseMatchesProperty = require('./_baseMatchesProperty'),
    identity = require('./identity'),
    isArray = require('./isArray'),
    property = require('./property');

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;

},{"./_baseMatches":302,"./_baseMatchesProperty":303,"./identity":433,"./isArray":435,"./property":455}],298:[function(require,module,exports){
var isPrototype = require('./_isPrototype'),
    nativeKeys = require('./_nativeKeys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

},{"./_isPrototype":375,"./_nativeKeys":393}],299:[function(require,module,exports){
var isObject = require('./isObject'),
    isPrototype = require('./_isPrototype'),
    nativeKeysIn = require('./_nativeKeysIn');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;

},{"./_isPrototype":375,"./_nativeKeysIn":394,"./isObject":441}],300:[function(require,module,exports){
/**
 * The function whose prototype chain sequence wrappers inherit from.
 *
 * @private
 */
function baseLodash() {
  // No operation performed.
}

module.exports = baseLodash;

},{}],301:[function(require,module,exports){
var baseEach = require('./_baseEach'),
    isArrayLike = require('./isArrayLike');

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;

},{"./_baseEach":279,"./isArrayLike":436}],302:[function(require,module,exports){
var baseIsMatch = require('./_baseIsMatch'),
    getMatchData = require('./_getMatchData'),
    matchesStrictComparable = require('./_matchesStrictComparable');

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

},{"./_baseIsMatch":293,"./_getMatchData":352,"./_matchesStrictComparable":388}],303:[function(require,module,exports){
var baseIsEqual = require('./_baseIsEqual'),
    get = require('./get'),
    hasIn = require('./hasIn'),
    isKey = require('./_isKey'),
    isStrictComparable = require('./_isStrictComparable'),
    matchesStrictComparable = require('./_matchesStrictComparable'),
    toKey = require('./_toKey');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;

},{"./_baseIsEqual":291,"./_isKey":371,"./_isStrictComparable":376,"./_matchesStrictComparable":388,"./_toKey":418,"./get":431,"./hasIn":432}],304:[function(require,module,exports){
var Stack = require('./_Stack'),
    assignMergeValue = require('./_assignMergeValue'),
    baseFor = require('./_baseFor'),
    baseMergeDeep = require('./_baseMergeDeep'),
    isObject = require('./isObject'),
    keysIn = require('./keysIn'),
    safeGet = require('./_safeGet');

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

module.exports = baseMerge;

},{"./_Stack":261,"./_assignMergeValue":274,"./_baseFor":283,"./_baseMergeDeep":305,"./_safeGet":403,"./isObject":441,"./keysIn":447}],305:[function(require,module,exports){
var assignMergeValue = require('./_assignMergeValue'),
    cloneBuffer = require('./_cloneBuffer'),
    cloneTypedArray = require('./_cloneTypedArray'),
    copyArray = require('./_copyArray'),
    initCloneObject = require('./_initCloneObject'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLikeObject = require('./isArrayLikeObject'),
    isBuffer = require('./isBuffer'),
    isFunction = require('./isFunction'),
    isObject = require('./isObject'),
    isPlainObject = require('./isPlainObject'),
    isTypedArray = require('./isTypedArray'),
    safeGet = require('./_safeGet'),
    toPlainObject = require('./toPlainObject');

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

module.exports = baseMergeDeep;

},{"./_assignMergeValue":274,"./_cloneBuffer":323,"./_cloneTypedArray":324,"./_copyArray":327,"./_initCloneObject":366,"./_safeGet":403,"./isArguments":434,"./isArray":435,"./isArrayLikeObject":437,"./isBuffer":438,"./isFunction":439,"./isObject":441,"./isPlainObject":443,"./isTypedArray":445,"./toPlainObject":464}],306:[function(require,module,exports){
var basePickBy = require('./_basePickBy'),
    hasIn = require('./hasIn');

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick(object, paths) {
  return basePickBy(object, paths, function(value, path) {
    return hasIn(object, path);
  });
}

module.exports = basePick;

},{"./_basePickBy":307,"./hasIn":432}],307:[function(require,module,exports){
var baseGet = require('./_baseGet'),
    baseSet = require('./_baseSet'),
    castPath = require('./_castPath');

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = baseGet(object, path);

    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }
  return result;
}

module.exports = basePickBy;

},{"./_baseGet":285,"./_baseSet":312,"./_castPath":321}],308:[function(require,module,exports){
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

},{}],309:[function(require,module,exports){
var baseGet = require('./_baseGet');

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

},{"./_baseGet":285}],310:[function(require,module,exports){
/**
 * The base implementation of `_.reduce` and `_.reduceRight`, without support
 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} accumulator The initial value.
 * @param {boolean} initAccum Specify using the first or last element of
 *  `collection` as the initial value.
 * @param {Function} eachFunc The function to iterate over `collection`.
 * @returns {*} Returns the accumulated value.
 */
function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
  eachFunc(collection, function(value, index, collection) {
    accumulator = initAccum
      ? (initAccum = false, value)
      : iteratee(accumulator, value, index, collection);
  });
  return accumulator;
}

module.exports = baseReduce;

},{}],311:[function(require,module,exports){
var identity = require('./identity'),
    overRest = require('./_overRest'),
    setToString = require('./_setToString');

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;

},{"./_overRest":398,"./_setToString":408,"./identity":433}],312:[function(require,module,exports){
var assignValue = require('./_assignValue'),
    castPath = require('./_castPath'),
    isIndex = require('./_isIndex'),
    isObject = require('./isObject'),
    toKey = require('./_toKey');

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;

},{"./_assignValue":275,"./_castPath":321,"./_isIndex":369,"./_toKey":418,"./isObject":441}],313:[function(require,module,exports){
var identity = require('./identity'),
    metaMap = require('./_metaMap');

/**
 * The base implementation of `setData` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */
var baseSetData = !metaMap ? identity : function(func, data) {
  metaMap.set(func, data);
  return func;
};

module.exports = baseSetData;

},{"./_metaMap":391,"./identity":433}],314:[function(require,module,exports){
var constant = require('./constant'),
    defineProperty = require('./_defineProperty'),
    identity = require('./identity');

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;

},{"./_defineProperty":341,"./constant":425,"./identity":433}],315:[function(require,module,exports){
var baseEach = require('./_baseEach');

/**
 * The base implementation of `_.some` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function baseSome(collection, predicate) {
  var result;

  baseEach(collection, function(value, index, collection) {
    result = predicate(value, index, collection);
    return !result;
  });
  return !!result;
}

module.exports = baseSome;

},{"./_baseEach":279}],316:[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],317:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    arrayMap = require('./_arrayMap'),
    isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;

},{"./_Symbol":262,"./_arrayMap":270,"./isArray":435,"./isSymbol":444}],318:[function(require,module,exports){
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;

},{}],319:[function(require,module,exports){
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

},{}],320:[function(require,module,exports){
var identity = require('./identity');

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;

},{"./identity":433}],321:[function(require,module,exports){
var isArray = require('./isArray'),
    isKey = require('./_isKey'),
    stringToPath = require('./_stringToPath'),
    toString = require('./toString');

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

},{"./_isKey":371,"./_stringToPath":417,"./isArray":435,"./toString":465}],322:[function(require,module,exports){
var Uint8Array = require('./_Uint8Array');

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;

},{"./_Uint8Array":263}],323:[function(require,module,exports){
var root = require('./_root');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;

},{"./_root":402}],324:[function(require,module,exports){
var cloneArrayBuffer = require('./_cloneArrayBuffer');

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;

},{"./_cloneArrayBuffer":322}],325:[function(require,module,exports){
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to prepend to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgs(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersLength = holders.length,
      leftIndex = -1,
      leftLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(leftLength + rangeLength),
      isUncurried = !isCurried;

  while (++leftIndex < leftLength) {
    result[leftIndex] = partials[leftIndex];
  }
  while (++argsIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[holders[argsIndex]] = args[argsIndex];
    }
  }
  while (rangeLength--) {
    result[leftIndex++] = args[argsIndex++];
  }
  return result;
}

module.exports = composeArgs;

},{}],326:[function(require,module,exports){
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgsRight(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersIndex = -1,
      holdersLength = holders.length,
      rightIndex = -1,
      rightLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(rangeLength + rightLength),
      isUncurried = !isCurried;

  while (++argsIndex < rangeLength) {
    result[argsIndex] = args[argsIndex];
  }
  var offset = argsIndex;
  while (++rightIndex < rightLength) {
    result[offset + rightIndex] = partials[rightIndex];
  }
  while (++holdersIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[offset + holders[holdersIndex]] = args[argsIndex++];
    }
  }
  return result;
}

module.exports = composeArgsRight;

},{}],327:[function(require,module,exports){
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;

},{}],328:[function(require,module,exports){
var assignValue = require('./_assignValue'),
    baseAssignValue = require('./_baseAssignValue');

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;

},{"./_assignValue":275,"./_baseAssignValue":277}],329:[function(require,module,exports){
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

},{"./_root":402}],330:[function(require,module,exports){
/**
 * Gets the number of `placeholder` occurrences in `array`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} placeholder The placeholder to search for.
 * @returns {number} Returns the placeholder count.
 */
function countHolders(array, placeholder) {
  var length = array.length,
      result = 0;

  while (length--) {
    if (array[length] === placeholder) {
      ++result;
    }
  }
  return result;
}

module.exports = countHolders;

},{}],331:[function(require,module,exports){
var baseRest = require('./_baseRest'),
    isIterateeCall = require('./_isIterateeCall');

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;

},{"./_baseRest":311,"./_isIterateeCall":370}],332:[function(require,module,exports){
var isArrayLike = require('./isArrayLike');

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;

},{"./isArrayLike":436}],333:[function(require,module,exports){
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;

},{}],334:[function(require,module,exports){
var createCtor = require('./_createCtor'),
    root = require('./_root');

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1;

/**
 * Creates a function that wraps `func` to invoke it with the optional `this`
 * binding of `thisArg`.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createBind(func, bitmask, thisArg) {
  var isBind = bitmask & WRAP_BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    return fn.apply(isBind ? thisArg : this, arguments);
  }
  return wrapper;
}

module.exports = createBind;

},{"./_createCtor":335,"./_root":402}],335:[function(require,module,exports){
var baseCreate = require('./_baseCreate'),
    isObject = require('./isObject');

/**
 * Creates a function that produces an instance of `Ctor` regardless of
 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
 *
 * @private
 * @param {Function} Ctor The constructor to wrap.
 * @returns {Function} Returns the new wrapped function.
 */
function createCtor(Ctor) {
  return function() {
    // Use a `switch` statement to work with class constructors. See
    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
    // for more details.
    var args = arguments;
    switch (args.length) {
      case 0: return new Ctor;
      case 1: return new Ctor(args[0]);
      case 2: return new Ctor(args[0], args[1]);
      case 3: return new Ctor(args[0], args[1], args[2]);
      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    }
    var thisBinding = baseCreate(Ctor.prototype),
        result = Ctor.apply(thisBinding, args);

    // Mimic the constructor's `return` behavior.
    // See https://es5.github.io/#x13.2.2 for more details.
    return isObject(result) ? result : thisBinding;
  };
}

module.exports = createCtor;

},{"./_baseCreate":278,"./isObject":441}],336:[function(require,module,exports){
var apply = require('./_apply'),
    createCtor = require('./_createCtor'),
    createHybrid = require('./_createHybrid'),
    createRecurry = require('./_createRecurry'),
    getHolder = require('./_getHolder'),
    replaceHolders = require('./_replaceHolders'),
    root = require('./_root');

/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createCurry(func, bitmask, arity) {
  var Ctor = createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length,
        placeholder = getHolder(wrapper);

    while (index--) {
      args[index] = arguments[index];
    }
    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
      ? []
      : replaceHolders(args, placeholder);

    length -= holders.length;
    if (length < arity) {
      return createRecurry(
        func, bitmask, createHybrid, wrapper.placeholder, undefined,
        args, holders, undefined, undefined, arity - length);
    }
    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    return apply(fn, this, args);
  }
  return wrapper;
}

module.exports = createCurry;

},{"./_apply":265,"./_createCtor":335,"./_createHybrid":337,"./_createRecurry":339,"./_getHolder":350,"./_replaceHolders":401,"./_root":402}],337:[function(require,module,exports){
var composeArgs = require('./_composeArgs'),
    composeArgsRight = require('./_composeArgsRight'),
    countHolders = require('./_countHolders'),
    createCtor = require('./_createCtor'),
    createRecurry = require('./_createRecurry'),
    getHolder = require('./_getHolder'),
    reorder = require('./_reorder'),
    replaceHolders = require('./_replaceHolders'),
    root = require('./_root');

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_ARY_FLAG = 128,
    WRAP_FLIP_FLAG = 512;

/**
 * Creates a function that wraps `func` to invoke it with optional `this`
 * binding of `thisArg`, partial application, and currying.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [partialsRight] The arguments to append to those provided
 *  to the new function.
 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
  var isAry = bitmask & WRAP_ARY_FLAG,
      isBind = bitmask & WRAP_BIND_FLAG,
      isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
      isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
      isFlip = bitmask & WRAP_FLIP_FLAG,
      Ctor = isBindKey ? undefined : createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length;

    while (index--) {
      args[index] = arguments[index];
    }
    if (isCurried) {
      var placeholder = getHolder(wrapper),
          holdersCount = countHolders(args, placeholder);
    }
    if (partials) {
      args = composeArgs(args, partials, holders, isCurried);
    }
    if (partialsRight) {
      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
    }
    length -= holdersCount;
    if (isCurried && length < arity) {
      var newHolders = replaceHolders(args, placeholder);
      return createRecurry(
        func, bitmask, createHybrid, wrapper.placeholder, thisArg,
        args, newHolders, argPos, ary, arity - length
      );
    }
    var thisBinding = isBind ? thisArg : this,
        fn = isBindKey ? thisBinding[func] : func;

    length = args.length;
    if (argPos) {
      args = reorder(args, argPos);
    } else if (isFlip && length > 1) {
      args.reverse();
    }
    if (isAry && ary < length) {
      args.length = ary;
    }
    if (this && this !== root && this instanceof wrapper) {
      fn = Ctor || createCtor(fn);
    }
    return fn.apply(thisBinding, args);
  }
  return wrapper;
}

module.exports = createHybrid;

},{"./_composeArgs":325,"./_composeArgsRight":326,"./_countHolders":330,"./_createCtor":335,"./_createRecurry":339,"./_getHolder":350,"./_reorder":400,"./_replaceHolders":401,"./_root":402}],338:[function(require,module,exports){
var apply = require('./_apply'),
    createCtor = require('./_createCtor'),
    root = require('./_root');

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1;

/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */
function createPartial(func, bitmask, thisArg, partials) {
  var isBind = bitmask & WRAP_BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var argsIndex = -1,
        argsLength = arguments.length,
        leftIndex = -1,
        leftLength = partials.length,
        args = Array(leftLength + argsLength),
        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex];
    }
    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex];
    }
    return apply(fn, isBind ? thisArg : this, args);
  }
  return wrapper;
}

module.exports = createPartial;

},{"./_apply":265,"./_createCtor":335,"./_root":402}],339:[function(require,module,exports){
var isLaziable = require('./_isLaziable'),
    setData = require('./_setData'),
    setWrapToString = require('./_setWrapToString');

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_BOUND_FLAG = 4,
    WRAP_CURRY_FLAG = 8,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64;

/**
 * Creates a function that wraps `func` to continue currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {Function} wrapFunc The function to create the `func` wrapper.
 * @param {*} placeholder The placeholder value.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
  var isCurry = bitmask & WRAP_CURRY_FLAG,
      newHolders = isCurry ? holders : undefined,
      newHoldersRight = isCurry ? undefined : holders,
      newPartials = isCurry ? partials : undefined,
      newPartialsRight = isCurry ? undefined : partials;

  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
  }
  var newData = [
    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
    newHoldersRight, argPos, ary, arity
  ];

  var result = wrapFunc.apply(undefined, newData);
  if (isLaziable(func)) {
    setData(result, newData);
  }
  result.placeholder = placeholder;
  return setWrapToString(result, func, bitmask);
}

module.exports = createRecurry;

},{"./_isLaziable":373,"./_setData":406,"./_setWrapToString":409}],340:[function(require,module,exports){
var baseSetData = require('./_baseSetData'),
    createBind = require('./_createBind'),
    createCurry = require('./_createCurry'),
    createHybrid = require('./_createHybrid'),
    createPartial = require('./_createPartial'),
    getData = require('./_getData'),
    mergeData = require('./_mergeData'),
    setData = require('./_setData'),
    setWrapToString = require('./_setWrapToString'),
    toInteger = require('./toInteger');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates a function that either curries or invokes `func` with optional
 * `this` binding and partially applied arguments.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags.
 *    1 - `_.bind`
 *    2 - `_.bindKey`
 *    4 - `_.curry` or `_.curryRight` of a bound function
 *    8 - `_.curry`
 *   16 - `_.curryRight`
 *   32 - `_.partial`
 *   64 - `_.partialRight`
 *  128 - `_.rearg`
 *  256 - `_.ary`
 *  512 - `_.flip`
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to be partially applied.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
  if (!isBindKey && typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var length = partials ? partials.length : 0;
  if (!length) {
    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
    partials = holders = undefined;
  }
  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
  arity = arity === undefined ? arity : toInteger(arity);
  length -= holders ? holders.length : 0;

  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
    var partialsRight = partials,
        holdersRight = holders;

    partials = holders = undefined;
  }
  var data = isBindKey ? undefined : getData(func);

  var newData = [
    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
    argPos, ary, arity
  ];

  if (data) {
    mergeData(newData, data);
  }
  func = newData[0];
  bitmask = newData[1];
  thisArg = newData[2];
  partials = newData[3];
  holders = newData[4];
  arity = newData[9] = newData[9] === undefined
    ? (isBindKey ? 0 : func.length)
    : nativeMax(newData[9] - length, 0);

  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
  }
  if (!bitmask || bitmask == WRAP_BIND_FLAG) {
    var result = createBind(func, bitmask, thisArg);
  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
    result = createCurry(func, bitmask, arity);
  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
    result = createPartial(func, bitmask, thisArg, partials);
  } else {
    result = createHybrid.apply(undefined, newData);
  }
  var setter = data ? baseSetData : setData;
  return setWrapToString(setter(result, newData), func, bitmask);
}

module.exports = createWrap;

},{"./_baseSetData":313,"./_createBind":334,"./_createCurry":336,"./_createHybrid":337,"./_createPartial":338,"./_getData":348,"./_mergeData":390,"./_setData":406,"./_setWrapToString":409,"./toInteger":462}],341:[function(require,module,exports){
var getNative = require('./_getNative');

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;

},{"./_getNative":353}],342:[function(require,module,exports){
var SetCache = require('./_SetCache'),
    arraySome = require('./_arraySome'),
    cacheHas = require('./_cacheHas');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

},{"./_SetCache":260,"./_arraySome":273,"./_cacheHas":319}],343:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    eq = require('./eq'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

},{"./_Symbol":262,"./_Uint8Array":263,"./_equalArrays":342,"./_mapToArray":387,"./_setToArray":407,"./eq":427}],344:[function(require,module,exports){
var getAllKeys = require('./_getAllKeys');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

},{"./_getAllKeys":347}],345:[function(require,module,exports){
var flatten = require('./flatten'),
    overRest = require('./_overRest'),
    setToString = require('./_setToString');

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;

},{"./_overRest":398,"./_setToString":408,"./flatten":429}],346:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],347:[function(require,module,exports){
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbols = require('./_getSymbols'),
    keys = require('./keys');

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

},{"./_baseGetAllKeys":286,"./_getSymbols":356,"./keys":446}],348:[function(require,module,exports){
var metaMap = require('./_metaMap'),
    noop = require('./noop');

/**
 * Gets metadata for `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {*} Returns the metadata for `func`.
 */
var getData = !metaMap ? noop : function(func) {
  return metaMap.get(func);
};

module.exports = getData;

},{"./_metaMap":391,"./noop":453}],349:[function(require,module,exports){
var realNames = require('./_realNames');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the name of `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {string} Returns the function name.
 */
function getFuncName(func) {
  var result = (func.name + ''),
      array = realNames[result],
      length = hasOwnProperty.call(realNames, result) ? array.length : 0;

  while (length--) {
    var data = array[length],
        otherFunc = data.func;
    if (otherFunc == null || otherFunc == func) {
      return data.name;
    }
  }
  return result;
}

module.exports = getFuncName;

},{"./_realNames":399}],350:[function(require,module,exports){
/**
 * Gets the argument placeholder value for `func`.
 *
 * @private
 * @param {Function} func The function to inspect.
 * @returns {*} Returns the placeholder value.
 */
function getHolder(func) {
  var object = func;
  return object.placeholder;
}

module.exports = getHolder;

},{}],351:[function(require,module,exports){
var isKeyable = require('./_isKeyable');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;

},{"./_isKeyable":372}],352:[function(require,module,exports){
var isStrictComparable = require('./_isStrictComparable'),
    keys = require('./keys');

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;

},{"./_isStrictComparable":376,"./keys":446}],353:[function(require,module,exports){
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./_baseIsNative":295,"./_getValue":358}],354:[function(require,module,exports){
var overArg = require('./_overArg');

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;

},{"./_overArg":397}],355:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":262}],356:[function(require,module,exports){
var arrayFilter = require('./_arrayFilter'),
    stubArray = require('./stubArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;

},{"./_arrayFilter":267,"./stubArray":459}],357:[function(require,module,exports){
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    baseGetTag = require('./_baseGetTag'),
    toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;

},{"./_DataView":251,"./_Map":256,"./_Promise":258,"./_Set":259,"./_WeakMap":264,"./_baseGetTag":287,"./_toSource":419}],358:[function(require,module,exports){
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

},{}],359:[function(require,module,exports){
/** Used to match wrap detail comments. */
var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
    reSplitDetails = /,? & /;

/**
 * Extracts wrapper details from the `source` body comment.
 *
 * @private
 * @param {string} source The source to inspect.
 * @returns {Array} Returns the wrapper details.
 */
function getWrapDetails(source) {
  var match = source.match(reWrapDetails);
  return match ? match[1].split(reSplitDetails) : [];
}

module.exports = getWrapDetails;

},{}],360:[function(require,module,exports){
var castPath = require('./_castPath'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isIndex = require('./_isIndex'),
    isLength = require('./isLength'),
    toKey = require('./_toKey');

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;

},{"./_castPath":321,"./_isIndex":369,"./_toKey":418,"./isArguments":434,"./isArray":435,"./isLength":440}],361:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

},{"./_nativeCreate":392}],362:[function(require,module,exports){
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

},{}],363:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

},{"./_nativeCreate":392}],364:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

},{"./_nativeCreate":392}],365:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

},{"./_nativeCreate":392}],366:[function(require,module,exports){
var baseCreate = require('./_baseCreate'),
    getPrototype = require('./_getPrototype'),
    isPrototype = require('./_isPrototype');

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;

},{"./_baseCreate":278,"./_getPrototype":354,"./_isPrototype":375}],367:[function(require,module,exports){
/** Used to match wrap detail comments. */
var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;

/**
 * Inserts wrapper `details` in a comment at the top of the `source` body.
 *
 * @private
 * @param {string} source The source to modify.
 * @returns {Array} details The details to insert.
 * @returns {string} Returns the modified source.
 */
function insertWrapDetails(source, details) {
  var length = details.length;
  if (!length) {
    return source;
  }
  var lastIndex = length - 1;
  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
  details = details.join(length > 2 ? ', ' : ' ');
  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
}

module.exports = insertWrapDetails;

},{}],368:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray');

/** Built-in value references. */
var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;

},{"./_Symbol":262,"./isArguments":434,"./isArray":435}],369:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

},{}],370:[function(require,module,exports){
var eq = require('./eq'),
    isArrayLike = require('./isArrayLike'),
    isIndex = require('./_isIndex'),
    isObject = require('./isObject');

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;

},{"./_isIndex":369,"./eq":427,"./isArrayLike":436,"./isObject":441}],371:[function(require,module,exports){
var isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;

},{"./isArray":435,"./isSymbol":444}],372:[function(require,module,exports){
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;

},{}],373:[function(require,module,exports){
var LazyWrapper = require('./_LazyWrapper'),
    getData = require('./_getData'),
    getFuncName = require('./_getFuncName'),
    lodash = require('./wrapperLodash');

/**
 * Checks if `func` has a lazy counterpart.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
 *  else `false`.
 */
function isLaziable(func) {
  var funcName = getFuncName(func),
      other = lodash[funcName];

  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
    return false;
  }
  if (func === other) {
    return true;
  }
  var data = getData(other);
  return !!data && func === data[0];
}

module.exports = isLaziable;

},{"./_LazyWrapper":253,"./_getData":348,"./_getFuncName":349,"./wrapperLodash":466}],374:[function(require,module,exports){
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;

},{"./_coreJsData":329}],375:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],376:[function(require,module,exports){
var isObject = require('./isObject');

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

},{"./isObject":441}],377:[function(require,module,exports){
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

},{}],378:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

},{"./_assocIndexOf":276}],379:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

},{"./_assocIndexOf":276}],380:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

},{"./_assocIndexOf":276}],381:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

},{"./_assocIndexOf":276}],382:[function(require,module,exports){
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;

},{"./_Hash":252,"./_ListCache":254,"./_Map":256}],383:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

},{"./_getMapData":351}],384:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

},{"./_getMapData":351}],385:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

},{"./_getMapData":351}],386:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

},{"./_getMapData":351}],387:[function(require,module,exports){
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

},{}],388:[function(require,module,exports){
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;

},{}],389:[function(require,module,exports){
var memoize = require('./memoize');

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

},{"./memoize":450}],390:[function(require,module,exports){
var composeArgs = require('./_composeArgs'),
    composeArgsRight = require('./_composeArgsRight'),
    replaceHolders = require('./_replaceHolders');

/** Used as the internal argument placeholder. */
var PLACEHOLDER = '__lodash_placeholder__';

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_BOUND_FLAG = 4,
    WRAP_CURRY_FLAG = 8,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Merges the function metadata of `source` into `data`.
 *
 * Merging metadata reduces the number of wrappers used to invoke a function.
 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
 * may be applied regardless of execution order. Methods like `_.ary` and
 * `_.rearg` modify function arguments, making the order in which they are
 * executed important, preventing the merging of metadata. However, we make
 * an exception for a safe combined case where curried functions have `_.ary`
 * and or `_.rearg` applied.
 *
 * @private
 * @param {Array} data The destination metadata.
 * @param {Array} source The source metadata.
 * @returns {Array} Returns `data`.
 */
function mergeData(data, source) {
  var bitmask = data[1],
      srcBitmask = source[1],
      newBitmask = bitmask | srcBitmask,
      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

  var isCombo =
    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

  // Exit early if metadata can't be merged.
  if (!(isCommon || isCombo)) {
    return data;
  }
  // Use source `thisArg` if available.
  if (srcBitmask & WRAP_BIND_FLAG) {
    data[2] = source[2];
    // Set when currying a bound function.
    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
  }
  // Compose partial arguments.
  var value = source[3];
  if (value) {
    var partials = data[3];
    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
  }
  // Compose partial right arguments.
  value = source[5];
  if (value) {
    partials = data[5];
    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
  }
  // Use source `argPos` if available.
  value = source[7];
  if (value) {
    data[7] = value;
  }
  // Use source `ary` if it's smaller.
  if (srcBitmask & WRAP_ARY_FLAG) {
    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
  }
  // Use source `arity` if one is not provided.
  if (data[9] == null) {
    data[9] = source[9];
  }
  // Use source `func` and merge bitmasks.
  data[0] = source[0];
  data[1] = newBitmask;

  return data;
}

module.exports = mergeData;

},{"./_composeArgs":325,"./_composeArgsRight":326,"./_replaceHolders":401}],391:[function(require,module,exports){
var WeakMap = require('./_WeakMap');

/** Used to store function metadata. */
var metaMap = WeakMap && new WeakMap;

module.exports = metaMap;

},{"./_WeakMap":264}],392:[function(require,module,exports){
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

},{"./_getNative":353}],393:[function(require,module,exports){
var overArg = require('./_overArg');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

},{"./_overArg":397}],394:[function(require,module,exports){
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;

},{}],395:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

},{"./_freeGlobal":346}],396:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],397:[function(require,module,exports){
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],398:[function(require,module,exports){
var apply = require('./_apply');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;

},{"./_apply":265}],399:[function(require,module,exports){
/** Used to lookup unminified function names. */
var realNames = {};

module.exports = realNames;

},{}],400:[function(require,module,exports){
var copyArray = require('./_copyArray'),
    isIndex = require('./_isIndex');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Reorder `array` according to the specified indexes where the element at
 * the first index is assigned as the first element, the element at
 * the second index is assigned as the second element, and so on.
 *
 * @private
 * @param {Array} array The array to reorder.
 * @param {Array} indexes The arranged array indexes.
 * @returns {Array} Returns `array`.
 */
function reorder(array, indexes) {
  var arrLength = array.length,
      length = nativeMin(indexes.length, arrLength),
      oldArray = copyArray(array);

  while (length--) {
    var index = indexes[length];
    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
  }
  return array;
}

module.exports = reorder;

},{"./_copyArray":327,"./_isIndex":369}],401:[function(require,module,exports){
/** Used as the internal argument placeholder. */
var PLACEHOLDER = '__lodash_placeholder__';

/**
 * Replaces all `placeholder` elements in `array` with an internal placeholder
 * and returns an array of their indexes.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {*} placeholder The placeholder to replace.
 * @returns {Array} Returns the new array of placeholder indexes.
 */
function replaceHolders(array, placeholder) {
  var index = -1,
      length = array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (value === placeholder || value === PLACEHOLDER) {
      array[index] = PLACEHOLDER;
      result[resIndex++] = index;
    }
  }
  return result;
}

module.exports = replaceHolders;

},{}],402:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":346}],403:[function(require,module,exports){
/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

module.exports = safeGet;

},{}],404:[function(require,module,exports){
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

},{}],405:[function(require,module,exports){
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

},{}],406:[function(require,module,exports){
var baseSetData = require('./_baseSetData'),
    shortOut = require('./_shortOut');

/**
 * Sets metadata for `func`.
 *
 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
 * period of time, it will trip its breaker and transition to an identity
 * function to avoid garbage collection pauses in V8. See
 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
 * for more details.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */
var setData = shortOut(baseSetData);

module.exports = setData;

},{"./_baseSetData":313,"./_shortOut":410}],407:[function(require,module,exports){
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

},{}],408:[function(require,module,exports){
var baseSetToString = require('./_baseSetToString'),
    shortOut = require('./_shortOut');

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;

},{"./_baseSetToString":314,"./_shortOut":410}],409:[function(require,module,exports){
var getWrapDetails = require('./_getWrapDetails'),
    insertWrapDetails = require('./_insertWrapDetails'),
    setToString = require('./_setToString'),
    updateWrapDetails = require('./_updateWrapDetails');

/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */
function setWrapToString(wrapper, reference, bitmask) {
  var source = (reference + '');
  return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
}

module.exports = setWrapToString;

},{"./_getWrapDetails":359,"./_insertWrapDetails":367,"./_setToString":408,"./_updateWrapDetails":420}],410:[function(require,module,exports){
/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;

},{}],411:[function(require,module,exports){
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;

},{"./_ListCache":254}],412:[function(require,module,exports){
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

},{}],413:[function(require,module,exports){
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

},{}],414:[function(require,module,exports){
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

},{}],415:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

},{"./_ListCache":254,"./_Map":256,"./_MapCache":257}],416:[function(require,module,exports){
/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;

},{}],417:[function(require,module,exports){
var memoizeCapped = require('./_memoizeCapped');

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;

},{"./_memoizeCapped":389}],418:[function(require,module,exports){
var isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;

},{"./isSymbol":444}],419:[function(require,module,exports){
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

},{}],420:[function(require,module,exports){
var arrayEach = require('./_arrayEach'),
    arrayIncludes = require('./_arrayIncludes');

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256,
    WRAP_FLIP_FLAG = 512;

/** Used to associate wrap methods with their bit flags. */
var wrapFlags = [
  ['ary', WRAP_ARY_FLAG],
  ['bind', WRAP_BIND_FLAG],
  ['bindKey', WRAP_BIND_KEY_FLAG],
  ['curry', WRAP_CURRY_FLAG],
  ['curryRight', WRAP_CURRY_RIGHT_FLAG],
  ['flip', WRAP_FLIP_FLAG],
  ['partial', WRAP_PARTIAL_FLAG],
  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
  ['rearg', WRAP_REARG_FLAG]
];

/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */
function updateWrapDetails(details, bitmask) {
  arrayEach(wrapFlags, function(pair) {
    var value = '_.' + pair[0];
    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
      details.push(value);
    }
  });
  return details.sort();
}

module.exports = updateWrapDetails;

},{"./_arrayEach":266,"./_arrayIncludes":268}],421:[function(require,module,exports){
var LazyWrapper = require('./_LazyWrapper'),
    LodashWrapper = require('./_LodashWrapper'),
    copyArray = require('./_copyArray');

/**
 * Creates a clone of `wrapper`.
 *
 * @private
 * @param {Object} wrapper The wrapper to clone.
 * @returns {Object} Returns the cloned wrapper.
 */
function wrapperClone(wrapper) {
  if (wrapper instanceof LazyWrapper) {
    return wrapper.clone();
  }
  var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
  result.__actions__ = copyArray(wrapper.__actions__);
  result.__index__  = wrapper.__index__;
  result.__values__ = wrapper.__values__;
  return result;
}

module.exports = wrapperClone;

},{"./_LazyWrapper":253,"./_LodashWrapper":255,"./_copyArray":327}],422:[function(require,module,exports){
var assignValue = require('./_assignValue'),
    copyObject = require('./_copyObject'),
    createAssigner = require('./_createAssigner'),
    isArrayLike = require('./isArrayLike'),
    isPrototype = require('./_isPrototype'),
    keys = require('./keys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */
var assign = createAssigner(function(object, source) {
  if (isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});

module.exports = assign;

},{"./_assignValue":275,"./_copyObject":328,"./_createAssigner":331,"./_isPrototype":375,"./isArrayLike":436,"./keys":446}],423:[function(require,module,exports){
var copyObject = require('./_copyObject'),
    createAssigner = require('./_createAssigner'),
    keysIn = require('./keysIn');

/**
 * This method is like `_.assign` except that it iterates over own and
 * inherited source properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias extend
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assign
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
 */
var assignIn = createAssigner(function(object, source) {
  copyObject(source, keysIn(source), object);
});

module.exports = assignIn;

},{"./_copyObject":328,"./_createAssigner":331,"./keysIn":447}],424:[function(require,module,exports){
var baseRest = require('./_baseRest'),
    createWrap = require('./_createWrap'),
    getHolder = require('./_getHolder'),
    replaceHolders = require('./_replaceHolders');

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_PARTIAL_FLAG = 32;

/**
 * Creates a function that invokes `func` with the `this` binding of `thisArg`
 * and `partials` prepended to the arguments it receives.
 *
 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for partially applied arguments.
 *
 * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
 * property of bound functions.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to bind.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {...*} [partials] The arguments to be partially applied.
 * @returns {Function} Returns the new bound function.
 * @example
 *
 * function greet(greeting, punctuation) {
 *   return greeting + ' ' + this.user + punctuation;
 * }
 *
 * var object = { 'user': 'fred' };
 *
 * var bound = _.bind(greet, object, 'hi');
 * bound('!');
 * // => 'hi fred!'
 *
 * // Bound with placeholders.
 * var bound = _.bind(greet, object, _, '!');
 * bound('hi');
 * // => 'hi fred!'
 */
var bind = baseRest(function(func, thisArg, partials) {
  var bitmask = WRAP_BIND_FLAG;
  if (partials.length) {
    var holders = replaceHolders(partials, getHolder(bind));
    bitmask |= WRAP_PARTIAL_FLAG;
  }
  return createWrap(func, bitmask, thisArg, partials, holders);
});

// Assign default placeholders.
bind.placeholder = {};

module.exports = bind;

},{"./_baseRest":311,"./_createWrap":340,"./_getHolder":350,"./_replaceHolders":401}],425:[function(require,module,exports){
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;

},{}],426:[function(require,module,exports){
var baseRest = require('./_baseRest'),
    eq = require('./eq'),
    isIterateeCall = require('./_isIterateeCall'),
    keysIn = require('./keysIn');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own and inherited enumerable string keyed properties of source
 * objects to the destination object for all destination properties that
 * resolve to `undefined`. Source objects are applied from left to right.
 * Once a property is set, additional values of the same property are ignored.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaultsDeep
 * @example
 *
 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var defaults = baseRest(function(object, sources) {
  object = Object(object);

  var index = -1;
  var length = sources.length;
  var guard = length > 2 ? sources[2] : undefined;

  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    length = 1;
  }

  while (++index < length) {
    var source = sources[index];
    var props = keysIn(source);
    var propsIndex = -1;
    var propsLength = props.length;

    while (++propsIndex < propsLength) {
      var key = props[propsIndex];
      var value = object[key];

      if (value === undefined ||
          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        object[key] = source[key];
      }
    }
  }

  return object;
});

module.exports = defaults;

},{"./_baseRest":311,"./_isIterateeCall":370,"./eq":427,"./keysIn":447}],427:[function(require,module,exports){
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;

},{}],428:[function(require,module,exports){
var arrayFilter = require('./_arrayFilter'),
    baseFilter = require('./_baseFilter'),
    baseIteratee = require('./_baseIteratee'),
    isArray = require('./isArray');

/**
 * Iterates over elements of `collection`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * **Note:** Unlike `_.remove`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.reject
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * _.filter(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, { 'age': 36, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.filter(users, 'active');
 * // => objects for ['barney']
 */
function filter(collection, predicate) {
  var func = isArray(collection) ? arrayFilter : baseFilter;
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = filter;

},{"./_arrayFilter":267,"./_baseFilter":280,"./_baseIteratee":297,"./isArray":435}],429:[function(require,module,exports){
var baseFlatten = require('./_baseFlatten');

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;

},{"./_baseFlatten":282}],430:[function(require,module,exports){
var arrayEach = require('./_arrayEach'),
    baseEach = require('./_baseEach'),
    castFunction = require('./_castFunction'),
    isArray = require('./isArray');

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forEach(collection, iteratee) {
  var func = isArray(collection) ? arrayEach : baseEach;
  return func(collection, castFunction(iteratee));
}

module.exports = forEach;

},{"./_arrayEach":266,"./_baseEach":279,"./_castFunction":320,"./isArray":435}],431:[function(require,module,exports){
var baseGet = require('./_baseGet');

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

},{"./_baseGet":285}],432:[function(require,module,exports){
var baseHasIn = require('./_baseHasIn'),
    hasPath = require('./_hasPath');

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

},{"./_baseHasIn":288,"./_hasPath":360}],433:[function(require,module,exports){
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

},{}],434:[function(require,module,exports){
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

},{"./_baseIsArguments":290,"./isObjectLike":442}],435:[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],436:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":439,"./isLength":440}],437:[function(require,module,exports){
var isArrayLike = require('./isArrayLike'),
    isObjectLike = require('./isObjectLike');

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;

},{"./isArrayLike":436,"./isObjectLike":442}],438:[function(require,module,exports){
var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

},{"./_root":402,"./stubFalse":460}],439:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":287,"./isObject":441}],440:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],441:[function(require,module,exports){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],442:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],443:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    getPrototype = require('./_getPrototype'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

},{"./_baseGetTag":287,"./_getPrototype":354,"./isObjectLike":442}],444:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;

},{"./_baseGetTag":287,"./isObjectLike":442}],445:[function(require,module,exports){
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

},{"./_baseIsTypedArray":296,"./_baseUnary":318,"./_nodeUtil":395}],446:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

},{"./_arrayLikeKeys":269,"./_baseKeys":298,"./isArrayLike":436}],447:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeysIn = require('./_baseKeysIn'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;

},{"./_arrayLikeKeys":269,"./_baseKeysIn":299,"./isArrayLike":436}],448:[function(require,module,exports){
(function (global){
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.15';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
      // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/[\r\n]/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      // Like with sourceURL, we take care to not check the option's prototype,
      // as this configuration is a code injection vector.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],449:[function(require,module,exports){
var arrayMap = require('./_arrayMap'),
    baseIteratee = require('./_baseIteratee'),
    baseMap = require('./_baseMap'),
    isArray = require('./isArray');

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;

},{"./_arrayMap":270,"./_baseIteratee":297,"./_baseMap":301,"./isArray":435}],450:[function(require,module,exports){
var MapCache = require('./_MapCache');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;

},{"./_MapCache":257}],451:[function(require,module,exports){
var baseMerge = require('./_baseMerge'),
    createAssigner = require('./_createAssigner');

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

module.exports = merge;

},{"./_baseMerge":304,"./_createAssigner":331}],452:[function(require,module,exports){
/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that negates the result of the predicate `func`. The
 * `func` predicate is invoked with the `this` binding and arguments of the
 * created function.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} predicate The predicate to negate.
 * @returns {Function} Returns the new negated function.
 * @example
 *
 * function isEven(n) {
 *   return n % 2 == 0;
 * }
 *
 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
 * // => [1, 3, 5]
 */
function negate(predicate) {
  if (typeof predicate != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  return function() {
    var args = arguments;
    switch (args.length) {
      case 0: return !predicate.call(this);
      case 1: return !predicate.call(this, args[0]);
      case 2: return !predicate.call(this, args[0], args[1]);
      case 3: return !predicate.call(this, args[0], args[1], args[2]);
    }
    return !predicate.apply(this, args);
  };
}

module.exports = negate;

},{}],453:[function(require,module,exports){
/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = noop;

},{}],454:[function(require,module,exports){
var basePick = require('./_basePick'),
    flatRest = require('./_flatRest');

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = flatRest(function(object, paths) {
  return object == null ? {} : basePick(object, paths);
});

module.exports = pick;

},{"./_basePick":306,"./_flatRest":345}],455:[function(require,module,exports){
var baseProperty = require('./_baseProperty'),
    basePropertyDeep = require('./_basePropertyDeep'),
    isKey = require('./_isKey'),
    toKey = require('./_toKey');

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;

},{"./_baseProperty":308,"./_basePropertyDeep":309,"./_isKey":371,"./_toKey":418}],456:[function(require,module,exports){
var arrayReduce = require('./_arrayReduce'),
    baseEach = require('./_baseEach'),
    baseIteratee = require('./_baseIteratee'),
    baseReduce = require('./_baseReduce'),
    isArray = require('./isArray');

/**
 * Reduces `collection` to a value which is the accumulated result of running
 * each element in `collection` thru `iteratee`, where each successive
 * invocation is supplied the return value of the previous. If `accumulator`
 * is not given, the first element of `collection` is used as the initial
 * value. The iteratee is invoked with four arguments:
 * (accumulator, value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.reduce`, `_.reduceRight`, and `_.transform`.
 *
 * The guarded methods are:
 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
 * and `sortBy`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @returns {*} Returns the accumulated value.
 * @see _.reduceRight
 * @example
 *
 * _.reduce([1, 2], function(sum, n) {
 *   return sum + n;
 * }, 0);
 * // => 3
 *
 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
 *   (result[value] || (result[value] = [])).push(key);
 *   return result;
 * }, {});
 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
 */
function reduce(collection, iteratee, accumulator) {
  var func = isArray(collection) ? arrayReduce : baseReduce,
      initAccum = arguments.length < 3;

  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
}

module.exports = reduce;

},{"./_arrayReduce":272,"./_baseEach":279,"./_baseIteratee":297,"./_baseReduce":310,"./isArray":435}],457:[function(require,module,exports){
var arrayFilter = require('./_arrayFilter'),
    baseFilter = require('./_baseFilter'),
    baseIteratee = require('./_baseIteratee'),
    isArray = require('./isArray'),
    negate = require('./negate');

/**
 * The opposite of `_.filter`; this method returns the elements of `collection`
 * that `predicate` does **not** return truthy for.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.filter
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': true }
 * ];
 *
 * _.reject(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.reject(users, { 'age': 40, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.reject(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.reject(users, 'active');
 * // => objects for ['barney']
 */
function reject(collection, predicate) {
  var func = isArray(collection) ? arrayFilter : baseFilter;
  return func(collection, negate(baseIteratee(predicate, 3)));
}

module.exports = reject;

},{"./_arrayFilter":267,"./_baseFilter":280,"./_baseIteratee":297,"./isArray":435,"./negate":452}],458:[function(require,module,exports){
var arraySome = require('./_arraySome'),
    baseIteratee = require('./_baseIteratee'),
    baseSome = require('./_baseSome'),
    isArray = require('./isArray'),
    isIterateeCall = require('./_isIterateeCall');

/**
 * Checks if `predicate` returns truthy for **any** element of `collection`.
 * Iteration is stopped once `predicate` returns truthy. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 * @example
 *
 * _.some([null, 0, 'yes', false], Boolean);
 * // => true
 *
 * var users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'fred',   'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.some(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.some(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.some(users, 'active');
 * // => true
 */
function some(collection, predicate, guard) {
  var func = isArray(collection) ? arraySome : baseSome;
  if (guard && isIterateeCall(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = some;

},{"./_arraySome":273,"./_baseIteratee":297,"./_baseSome":315,"./_isIterateeCall":370,"./isArray":435}],459:[function(require,module,exports){
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

},{}],460:[function(require,module,exports){
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

},{}],461:[function(require,module,exports){
var toNumber = require('./toNumber');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;

},{"./toNumber":463}],462:[function(require,module,exports){
var toFinite = require('./toFinite');

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;

},{"./toFinite":461}],463:[function(require,module,exports){
var isObject = require('./isObject'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;

},{"./isObject":441,"./isSymbol":444}],464:[function(require,module,exports){
var copyObject = require('./_copyObject'),
    keysIn = require('./keysIn');

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

module.exports = toPlainObject;

},{"./_copyObject":328,"./keysIn":447}],465:[function(require,module,exports){
var baseToString = require('./_baseToString');

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

},{"./_baseToString":317}],466:[function(require,module,exports){
var LazyWrapper = require('./_LazyWrapper'),
    LodashWrapper = require('./_LodashWrapper'),
    baseLodash = require('./_baseLodash'),
    isArray = require('./isArray'),
    isObjectLike = require('./isObjectLike'),
    wrapperClone = require('./_wrapperClone');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates a `lodash` object which wraps `value` to enable implicit method
 * chain sequences. Methods that operate on and return arrays, collections,
 * and functions can be chained together. Methods that retrieve a single value
 * or may return a primitive value will automatically end the chain sequence
 * and return the unwrapped value. Otherwise, the value must be unwrapped
 * with `_#value`.
 *
 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
 * enabled using `_.chain`.
 *
 * The execution of chained methods is lazy, that is, it's deferred until
 * `_#value` is implicitly or explicitly called.
 *
 * Lazy evaluation allows several methods to support shortcut fusion.
 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
 * the creation of intermediate arrays and can greatly reduce the number of
 * iteratee executions. Sections of a chain sequence qualify for shortcut
 * fusion if the section is applied to an array and iteratees accept only
 * one argument. The heuristic for whether a section qualifies for shortcut
 * fusion is subject to change.
 *
 * Chaining is supported in custom builds as long as the `_#value` method is
 * directly or indirectly included in the build.
 *
 * In addition to lodash methods, wrappers have `Array` and `String` methods.
 *
 * The wrapper `Array` methods are:
 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
 *
 * The wrapper `String` methods are:
 * `replace` and `split`
 *
 * The wrapper methods that support shortcut fusion are:
 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
 *
 * The chainable wrapper methods are:
 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
 * `zipObject`, `zipObjectDeep`, and `zipWith`
 *
 * The wrapper methods that are **not** chainable by default are:
 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
 * `upperFirst`, `value`, and `words`
 *
 * @name _
 * @constructor
 * @category Seq
 * @param {*} value The value to wrap in a `lodash` instance.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var wrapped = _([1, 2, 3]);
 *
 * // Returns an unwrapped value.
 * wrapped.reduce(_.add);
 * // => 6
 *
 * // Returns a wrapped value.
 * var squares = wrapped.map(square);
 *
 * _.isArray(squares);
 * // => false
 *
 * _.isArray(squares.value());
 * // => true
 */
function lodash(value) {
  if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
    if (value instanceof LodashWrapper) {
      return value;
    }
    if (hasOwnProperty.call(value, '__wrapped__')) {
      return wrapperClone(value);
    }
  }
  return new LodashWrapper(value);
}

// Ensure wrappers are instances of `baseLodash`.
lodash.prototype = baseLodash.prototype;
lodash.prototype.constructor = lodash;

module.exports = lodash;

},{"./_LazyWrapper":253,"./_LodashWrapper":255,"./_baseLodash":300,"./_wrapperClone":421,"./isArray":435,"./isObjectLike":442}],467:[function(require,module,exports){
'use strict';
module.exports = function (obj) {
	var ret = {};
	var keys = Object.keys(Object(obj));

	for (var i = 0; i < keys.length; i++) {
		ret[keys[i].toLowerCase()] = obj[keys[i]];
	}

	return ret;
};

},{}],468:[function(require,module,exports){
'use strict'

const { map, isArray, isObject, isPlainObject, mapValues } = require('lodash')

const mapValuesDeep = (obj, fn, key) =>
  isArray(obj)
    ? map(obj, (innerObj, idx) => mapValuesDeep(innerObj, fn, idx))
    : isPlainObject(obj)
      ? mapValues(obj, (val, key) => mapValuesDeep(val, fn, key))
      : isObject(obj)
        ? obj
        : fn(obj, key)

module.exports = mapValuesDeep

},{"lodash":448}],469:[function(require,module,exports){
'use strict';

function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
        return false;
    }
    for (var i = 0; i < newInputs.length; i++) {
        if (newInputs[i] !== lastInputs[i]) {
            return false;
        }
    }
    return true;
}

function memoizeOne(resultFn, isEqual) {
    if (isEqual === void 0) { isEqual = areInputsEqual; }
    var lastThis;
    var lastArgs = [];
    var lastResult;
    var calledOnce = false;
    function memoized() {
        var newArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newArgs[_i] = arguments[_i];
        }
        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
            return lastResult;
        }
        lastResult = resultFn.apply(this, newArgs);
        calledOnce = true;
        lastThis = this;
        lastArgs = newArgs;
        return lastResult;
    }
    return memoized;
}

module.exports = memoizeOne;

},{}],470:[function(require,module,exports){
'use strict'

const { $jsonld, $filter, image, toRule } = require('@metascraper/helpers')

const toImage = toRule(image)

const getSrc = el => el.attr('src')

module.exports = () => ({
  image: [
    toImage($ => $('meta[property="og:image:secure_url"]').attr('content')),
    toImage($ => $('meta[property="og:image:url"]').attr('content')),
    toImage($ => $('meta[property="og:image"]').attr('content')),
    toImage($ => $('meta[name="twitter:image:src"]').attr('content')),
    toImage($ => $('meta[name="twitter:image"]').attr('content')),
    toImage($ => $('meta[itemprop="image"]').attr('content')),
    toImage($jsonld('image.0.url')),
    toImage($jsonld('image.url')),
    toImage($jsonld('image.url')),
    toImage($jsonld('image')),
    toImage($ => $filter($, $('article img[src]'), getSrc)),
    toImage($ => $filter($, $('#content img[src]'), getSrc)),
    toImage($ => $('img[alt*="author" i]').attr('src')),
    toImage($ => $('img[src]').attr('src'))
  ]
})

},{"@metascraper/helpers":67}],471:[function(require,module,exports){
'use strict'

const { $jsonld, publisher, toRule } = require('@metascraper/helpers')

const REGEX_RSS = /^(.*?)\s[-|]\satom$/i
const REGEX_TITLE = /^.*?[-|]\s+(.*)$/

const toPublisher = toRule(publisher)

const getFromTitle = (text, regex) => {
  const matches = regex.exec(text)
  if (!matches) return false
  let result = matches[1]
  while (regex.test(result)) result = regex.exec(result)[1]
  return result
}

module.exports = () => ({
  publisher: [
    toPublisher($jsonld('publisher.name')),
    toPublisher($ => $('meta[property="og:site_name"]').attr('content')),
    toPublisher($ => $('meta[name*="application-name" i]').attr('content')),
    toPublisher($ => $('meta[property="al:android:app_name"]').attr('content')),
    toPublisher($ => $('meta[property="al:iphone:app_name"]').attr('content')),
    toPublisher($ => $('meta[property="al:ipad:app_name"]').attr('content')),
    toPublisher($ => $('meta[name="publisher" i]').attr('content')),
    toPublisher($ => $('meta[name="twitter:app:name:iphone"]').attr('content')),
    toPublisher($ => $('meta[name="twitter:app:name:ipad"]').attr('content')),
    toPublisher($ =>
      $('meta[name="twitter:app:name:googleplay"]').attr('content')
    ),
    toPublisher($ => $('#logo').text()),
    toPublisher($ => $('.logo').text()),
    toPublisher($ => $('a[class*="brand" i]').text()),
    toPublisher($ => $('[class*="brand" i]').text()),
    toPublisher($ => $('[class*="logo" i] a img[alt]').attr('alt')),
    toPublisher($ => $('[class*="logo" i] img[alt]').attr('alt')),
    toPublisher($ => getFromTitle($('title').text(), REGEX_TITLE)),
    toPublisher($ =>
      getFromTitle($('link[type*="xml" i]').attr('title'), REGEX_RSS)
    )
  ]
})

},{"@metascraper/helpers":67}],472:[function(require,module,exports){
'use strict'

const { $jsonld, $filter, title, toRule } = require('@metascraper/helpers')

const toTitle = toRule(title)

module.exports = () => ({
  title: [
    toTitle($ => $('meta[property="og:title"]').attr('content')),
    toTitle($ => $('meta[name="twitter:title"]').attr('content')),
    toTitle($ => $filter($, $('title'))),
    toTitle($jsonld('headline')),
    toTitle($ => $('.post-title').text()),
    toTitle($ => $filter($, $('.entry-title'))),
    toTitle($ => $('h1[class*="title" i] a').text()),
    toTitle($ => $('h1[class*="title" i]').text())
  ]
})

},{"@metascraper/helpers":67}],473:[function(require,module,exports){
'use strict'

const { isString, map, fromPairs } = require('lodash')
const mapValuesDeep = require('map-values-deep')
const { has } = require('@metascraper/helpers')
const xss = require('xss')

const truthyTest = () => true

const getValue = async ({ htmlDom, url, rules, meta, ...props }) => {
  const lastIndex = rules.length
  let index = 0
  let value

  do {
    const rule = rules[index++]
    const test = rule.test || truthyTest

    if (test({ htmlDom, url, meta })) {
      value = await rule({ htmlDom, url, meta, ...props })
    }
  } while (!has(value) && index < lastIndex)

  return value
}

const escapeValue = (value, { escape }) => {
  if (!has(value)) return null
  if (!escape) return value
  return mapValuesDeep(value, value => (isString(value) ? xss(value) : value))
}

const getData = async ({ rules, htmlDom, url, escape, ...props }) => {
  const data = await Promise.all(
    map(rules, async ([propName, innerRules]) => {
      const value = escapeValue(
        await getValue({ htmlDom, url, rules: innerRules, ...props }),
        { escape }
      )
      return [propName, value]
    })
  )

  return fromPairs(data)
}

module.exports = getData

},{"@metascraper/helpers":67,"lodash":448,"map-values-deep":468,"xss":540}],474:[function(require,module,exports){
'use strict'

const { isUrl } = require('@metascraper/helpers')
const whoops = require('whoops')

const { loadRules, mergeRules } = require('./rules')
const loadHTML = require('./load-html')
const getData = require('./get-data')

const MetascraperError = whoops('MetascraperError')

module.exports = rules => {
  const loadedRules = loadRules(rules)
  return async ({
    url,
    html,
    rules: inlineRules,
    escape = true,
    ...props
  } = {}) => {
    if (!isUrl(url)) {
      throw new MetascraperError({
        message: 'Need to provide a valid URL.',
        code: 'INVALID_URL'
      })
    }

    return getData({
      url,
      escape,
      htmlDom: loadHTML(html),
      rules: mergeRules(inlineRules, loadedRules),
      ...props
    })
  }
}

},{"./get-data":473,"./load-html":475,"./rules":476,"@metascraper/helpers":67,"whoops":537}],475:[function(require,module,exports){
'use strict'

const cheerio = require('cheerio-advanced-selectors').wrap(require('cheerio'))

module.exports = (html = '') =>
  cheerio.load(html, {
    lowerCaseTags: true,
    decodeEntities: true,
    lowerCaseAttributeNames: true
  })

},{"cheerio":77,"cheerio-advanced-selectors":76}],476:[function(require,module,exports){
'use strict'

const {
  cloneDeep,
  concat,
  first,
  findIndex,
  forEach,
  chain,
  castArray,
  has,
  set
} = require('lodash')

const forEachRule = (collection, fn) => forEach(castArray(collection), fn)

const loadRules = rulesBundle =>
  chain(rulesBundle)
    .reduce((acc, { test, ...rules }) => {
      forEach(rules, (innerRules, propName) => {
        if (test) forEachRule(innerRules, rule => (rule.test = test))

        set(
          acc,
          propName,
          has(acc, propName)
            ? concat(acc[propName], innerRules)
            : concat(innerRules)
        )

        return acc
      })
      return acc
    }, {})
    .toPairs()
    .value()

const mergeRules = (rules, baseRules) =>
  chain(rules)
    .reduce((acc, { test, ...rules }) => {
      forEach(rules, (innerRules, propName) => {
        if (test) forEachRule(innerRules, rule => (rule.test = test))
        // find the rules associated with `propName`
        const index = findIndex(acc, item => first(item) === propName)
        // if `propName` has more rule, add the new rule from the end
        if (index !== -1) acc[index][1] = concat(innerRules, ...acc[index][1])
        // otherwise, create an array of rules
        else acc.push([propName, castArray(innerRules)])
      })
      return acc
    }, cloneDeep(baseRules))
    .value()

module.exports = { mergeRules, loadRules }

},{"lodash":448}],477:[function(require,module,exports){
module.exports={
  "application/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "application/3gpdash-qoe-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/3gpp-ims+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/a2l": {
    "source": "iana"
  },
  "application/activemessage": {
    "source": "iana"
  },
  "application/activity+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-costmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-costmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-directory+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcost+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcostparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointprop+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointpropparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-error+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/aml": {
    "source": "iana"
  },
  "application/andrew-inset": {
    "source": "iana",
    "extensions": ["ez"]
  },
  "application/applefile": {
    "source": "iana"
  },
  "application/applixware": {
    "source": "apache",
    "extensions": ["aw"]
  },
  "application/atf": {
    "source": "iana"
  },
  "application/atfx": {
    "source": "iana"
  },
  "application/atom+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atom"]
  },
  "application/atomcat+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atomcat"]
  },
  "application/atomdeleted+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/atomicmail": {
    "source": "iana"
  },
  "application/atomsvc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atomsvc"]
  },
  "application/atsc-dwd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/atsc-held+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/atsc-rsat+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/atxml": {
    "source": "iana"
  },
  "application/auth-policy+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/bacnet-xdd+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/batch-smtp": {
    "source": "iana"
  },
  "application/bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/beep+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/calendar+json": {
    "source": "iana",
    "compressible": true
  },
  "application/calendar+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/call-completion": {
    "source": "iana"
  },
  "application/cals-1840": {
    "source": "iana"
  },
  "application/cbor": {
    "source": "iana"
  },
  "application/cccex": {
    "source": "iana"
  },
  "application/ccmp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ccxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ccxml"]
  },
  "application/cdfx+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cdmi-capability": {
    "source": "iana",
    "extensions": ["cdmia"]
  },
  "application/cdmi-container": {
    "source": "iana",
    "extensions": ["cdmic"]
  },
  "application/cdmi-domain": {
    "source": "iana",
    "extensions": ["cdmid"]
  },
  "application/cdmi-object": {
    "source": "iana",
    "extensions": ["cdmio"]
  },
  "application/cdmi-queue": {
    "source": "iana",
    "extensions": ["cdmiq"]
  },
  "application/cdni": {
    "source": "iana"
  },
  "application/cea": {
    "source": "iana"
  },
  "application/cea-2018+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cellml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cfw": {
    "source": "iana"
  },
  "application/clue_info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cms": {
    "source": "iana"
  },
  "application/cnrp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/coap-group+json": {
    "source": "iana",
    "compressible": true
  },
  "application/coap-payload": {
    "source": "iana"
  },
  "application/commonground": {
    "source": "iana"
  },
  "application/conference-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cose": {
    "source": "iana"
  },
  "application/cose-key": {
    "source": "iana"
  },
  "application/cose-key-set": {
    "source": "iana"
  },
  "application/cpl+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/csrattrs": {
    "source": "iana"
  },
  "application/csta+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/cstadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/csvm+json": {
    "source": "iana",
    "compressible": true
  },
  "application/cu-seeme": {
    "source": "apache",
    "extensions": ["cu"]
  },
  "application/cwt": {
    "source": "iana"
  },
  "application/cybercash": {
    "source": "iana"
  },
  "application/dart": {
    "compressible": true
  },
  "application/dash+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mpd"]
  },
  "application/dashdelta": {
    "source": "iana"
  },
  "application/davmount+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["davmount"]
  },
  "application/dca-rft": {
    "source": "iana"
  },
  "application/dcd": {
    "source": "iana"
  },
  "application/dec-dx": {
    "source": "iana"
  },
  "application/dialog-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dicom": {
    "source": "iana"
  },
  "application/dicom+json": {
    "source": "iana",
    "compressible": true
  },
  "application/dicom+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dii": {
    "source": "iana"
  },
  "application/dit": {
    "source": "iana"
  },
  "application/dns": {
    "source": "iana"
  },
  "application/dns+json": {
    "source": "iana",
    "compressible": true
  },
  "application/dns-message": {
    "source": "iana"
  },
  "application/docbook+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["dbk"]
  },
  "application/dskpp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/dssc+der": {
    "source": "iana",
    "extensions": ["dssc"]
  },
  "application/dssc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdssc"]
  },
  "application/dvcs": {
    "source": "iana"
  },
  "application/ecmascript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ecma","es"]
  },
  "application/edi-consent": {
    "source": "iana"
  },
  "application/edi-x12": {
    "source": "iana",
    "compressible": false
  },
  "application/edifact": {
    "source": "iana",
    "compressible": false
  },
  "application/efi": {
    "source": "iana"
  },
  "application/emergencycalldata.comment+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.deviceinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.ecall.msd": {
    "source": "iana"
  },
  "application/emergencycalldata.providerinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.serviceinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.subscriberinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emergencycalldata.veds+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/emma+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["emma"]
  },
  "application/emotionml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/encaprtp": {
    "source": "iana"
  },
  "application/epp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/epub+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["epub"]
  },
  "application/eshop": {
    "source": "iana"
  },
  "application/exi": {
    "source": "iana",
    "extensions": ["exi"]
  },
  "application/expect-ct-report+json": {
    "source": "iana",
    "compressible": true
  },
  "application/fastinfoset": {
    "source": "iana"
  },
  "application/fastsoap": {
    "source": "iana"
  },
  "application/fdt+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/fhir+json": {
    "source": "iana",
    "compressible": true
  },
  "application/fhir+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/fido.trusted-apps+json": {
    "compressible": true
  },
  "application/fits": {
    "source": "iana"
  },
  "application/flexfec": {
    "source": "iana"
  },
  "application/font-sfnt": {
    "source": "iana"
  },
  "application/font-tdpfr": {
    "source": "iana",
    "extensions": ["pfr"]
  },
  "application/font-woff": {
    "source": "iana",
    "compressible": false
  },
  "application/framework-attributes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/geo+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["geojson"]
  },
  "application/geo+json-seq": {
    "source": "iana"
  },
  "application/geopackage+sqlite3": {
    "source": "iana"
  },
  "application/geoxacml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/gltf-buffer": {
    "source": "iana"
  },
  "application/gml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["gml"]
  },
  "application/gpx+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["gpx"]
  },
  "application/gxf": {
    "source": "apache",
    "extensions": ["gxf"]
  },
  "application/gzip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["gz"]
  },
  "application/h224": {
    "source": "iana"
  },
  "application/held+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/hjson": {
    "extensions": ["hjson"]
  },
  "application/http": {
    "source": "iana"
  },
  "application/hyperstudio": {
    "source": "iana",
    "extensions": ["stk"]
  },
  "application/ibe-key-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ibe-pkg-reply+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ibe-pp-data": {
    "source": "iana"
  },
  "application/iges": {
    "source": "iana"
  },
  "application/im-iscomposing+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/index": {
    "source": "iana"
  },
  "application/index.cmd": {
    "source": "iana"
  },
  "application/index.obj": {
    "source": "iana"
  },
  "application/index.response": {
    "source": "iana"
  },
  "application/index.vnd": {
    "source": "iana"
  },
  "application/inkml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ink","inkml"]
  },
  "application/iotp": {
    "source": "iana"
  },
  "application/ipfix": {
    "source": "iana",
    "extensions": ["ipfix"]
  },
  "application/ipp": {
    "source": "iana"
  },
  "application/isup": {
    "source": "iana"
  },
  "application/its+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/java-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jar","war","ear"]
  },
  "application/java-serialized-object": {
    "source": "apache",
    "compressible": false,
    "extensions": ["ser"]
  },
  "application/java-vm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["class"]
  },
  "application/javascript": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["js","mjs"]
  },
  "application/jf2feed+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jose": {
    "source": "iana"
  },
  "application/jose+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jrd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["json","map"]
  },
  "application/json-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json-seq": {
    "source": "iana"
  },
  "application/json5": {
    "extensions": ["json5"]
  },
  "application/jsonml+json": {
    "source": "apache",
    "compressible": true,
    "extensions": ["jsonml"]
  },
  "application/jwk+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwk-set+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwt": {
    "source": "iana"
  },
  "application/kpml-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/kpml-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/ld+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["jsonld"]
  },
  "application/lgr+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/link-format": {
    "source": "iana"
  },
  "application/load-control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/lost+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lostxml"]
  },
  "application/lostsync+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/lxf": {
    "source": "iana"
  },
  "application/mac-binhex40": {
    "source": "iana",
    "extensions": ["hqx"]
  },
  "application/mac-compactpro": {
    "source": "apache",
    "extensions": ["cpt"]
  },
  "application/macwriteii": {
    "source": "iana"
  },
  "application/mads+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mads"]
  },
  "application/manifest+json": {
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["webmanifest"]
  },
  "application/marc": {
    "source": "iana",
    "extensions": ["mrc"]
  },
  "application/marcxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mrcx"]
  },
  "application/mathematica": {
    "source": "iana",
    "extensions": ["ma","nb","mb"]
  },
  "application/mathml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mathml"]
  },
  "application/mathml-content+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mathml-presentation+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-associated-procedure-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-deregister+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-envelope+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-msk+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-msk-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-protection-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-reception-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-register+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-register-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-schedule+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbms-user-service-description+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mbox": {
    "source": "iana",
    "extensions": ["mbox"]
  },
  "application/media-policy-dataset+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/media_control+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mediaservercontrol+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mscml"]
  },
  "application/merge-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/metalink+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["metalink"]
  },
  "application/metalink4+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["meta4"]
  },
  "application/mets+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mets"]
  },
  "application/mf4": {
    "source": "iana"
  },
  "application/mikey": {
    "source": "iana"
  },
  "application/mipc": {
    "source": "iana"
  },
  "application/mmt-aei+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mmt-usd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mods+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mods"]
  },
  "application/moss-keys": {
    "source": "iana"
  },
  "application/moss-signature": {
    "source": "iana"
  },
  "application/mosskey-data": {
    "source": "iana"
  },
  "application/mosskey-request": {
    "source": "iana"
  },
  "application/mp21": {
    "source": "iana",
    "extensions": ["m21","mp21"]
  },
  "application/mp4": {
    "source": "iana",
    "extensions": ["mp4s","m4p"]
  },
  "application/mpeg4-generic": {
    "source": "iana"
  },
  "application/mpeg4-iod": {
    "source": "iana"
  },
  "application/mpeg4-iod-xmt": {
    "source": "iana"
  },
  "application/mrb-consumer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/mrb-publish+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/msc-ivr+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/msc-mixer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/msword": {
    "source": "iana",
    "compressible": false,
    "extensions": ["doc","dot"]
  },
  "application/mud+json": {
    "source": "iana",
    "compressible": true
  },
  "application/mxf": {
    "source": "iana",
    "extensions": ["mxf"]
  },
  "application/n-quads": {
    "source": "iana",
    "extensions": ["nq"]
  },
  "application/n-triples": {
    "source": "iana",
    "extensions": ["nt"]
  },
  "application/nasdata": {
    "source": "iana"
  },
  "application/news-checkgroups": {
    "source": "iana"
  },
  "application/news-groupinfo": {
    "source": "iana"
  },
  "application/news-transmission": {
    "source": "iana"
  },
  "application/nlsml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/node": {
    "source": "iana"
  },
  "application/nss": {
    "source": "iana"
  },
  "application/ocsp-request": {
    "source": "iana"
  },
  "application/ocsp-response": {
    "source": "iana"
  },
  "application/octet-stream": {
    "source": "iana",
    "compressible": false,
    "extensions": ["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]
  },
  "application/oda": {
    "source": "iana",
    "extensions": ["oda"]
  },
  "application/odm+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/odx": {
    "source": "iana"
  },
  "application/oebps-package+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["opf"]
  },
  "application/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ogx"]
  },
  "application/omdoc+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["omdoc"]
  },
  "application/onenote": {
    "source": "apache",
    "extensions": ["onetoc","onetoc2","onetmp","onepkg"]
  },
  "application/oscore": {
    "source": "iana"
  },
  "application/oxps": {
    "source": "iana",
    "extensions": ["oxps"]
  },
  "application/p2p-overlay+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/parityfec": {
    "source": "iana"
  },
  "application/passport": {
    "source": "iana"
  },
  "application/patch-ops-error+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xer"]
  },
  "application/pdf": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pdf"]
  },
  "application/pdx": {
    "source": "iana"
  },
  "application/pem-certificate-chain": {
    "source": "iana"
  },
  "application/pgp-encrypted": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pgp"]
  },
  "application/pgp-keys": {
    "source": "iana"
  },
  "application/pgp-signature": {
    "source": "iana",
    "extensions": ["asc","sig"]
  },
  "application/pics-rules": {
    "source": "apache",
    "extensions": ["prf"]
  },
  "application/pidf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/pidf-diff+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/pkcs10": {
    "source": "iana",
    "extensions": ["p10"]
  },
  "application/pkcs12": {
    "source": "iana"
  },
  "application/pkcs7-mime": {
    "source": "iana",
    "extensions": ["p7m","p7c"]
  },
  "application/pkcs7-signature": {
    "source": "iana",
    "extensions": ["p7s"]
  },
  "application/pkcs8": {
    "source": "iana",
    "extensions": ["p8"]
  },
  "application/pkcs8-encrypted": {
    "source": "iana"
  },
  "application/pkix-attr-cert": {
    "source": "iana",
    "extensions": ["ac"]
  },
  "application/pkix-cert": {
    "source": "iana",
    "extensions": ["cer"]
  },
  "application/pkix-crl": {
    "source": "iana",
    "extensions": ["crl"]
  },
  "application/pkix-pkipath": {
    "source": "iana",
    "extensions": ["pkipath"]
  },
  "application/pkixcmp": {
    "source": "iana",
    "extensions": ["pki"]
  },
  "application/pls+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["pls"]
  },
  "application/poc-settings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/postscript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ai","eps","ps"]
  },
  "application/ppsp-tracker+json": {
    "source": "iana",
    "compressible": true
  },
  "application/problem+json": {
    "source": "iana",
    "compressible": true
  },
  "application/problem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/provenance+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/prs.alvestrand.titrax-sheet": {
    "source": "iana"
  },
  "application/prs.cww": {
    "source": "iana",
    "extensions": ["cww"]
  },
  "application/prs.hpub+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/prs.nprend": {
    "source": "iana"
  },
  "application/prs.plucker": {
    "source": "iana"
  },
  "application/prs.rdf-xml-crypt": {
    "source": "iana"
  },
  "application/prs.xsf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/pskc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["pskcxml"]
  },
  "application/qsig": {
    "source": "iana"
  },
  "application/raml+yaml": {
    "compressible": true,
    "extensions": ["raml"]
  },
  "application/raptorfec": {
    "source": "iana"
  },
  "application/rdap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/rdf+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rdf","owl"]
  },
  "application/reginfo+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rif"]
  },
  "application/relax-ng-compact-syntax": {
    "source": "iana",
    "extensions": ["rnc"]
  },
  "application/remote-printing": {
    "source": "iana"
  },
  "application/reputon+json": {
    "source": "iana",
    "compressible": true
  },
  "application/resource-lists+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rl"]
  },
  "application/resource-lists-diff+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rld"]
  },
  "application/rfc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/riscos": {
    "source": "iana"
  },
  "application/rlmi+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/rls-services+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rs"]
  },
  "application/route-apd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/route-s-tsid+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/route-usd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/rpki-ghostbusters": {
    "source": "iana",
    "extensions": ["gbr"]
  },
  "application/rpki-manifest": {
    "source": "iana",
    "extensions": ["mft"]
  },
  "application/rpki-publication": {
    "source": "iana"
  },
  "application/rpki-roa": {
    "source": "iana",
    "extensions": ["roa"]
  },
  "application/rpki-updown": {
    "source": "iana"
  },
  "application/rsd+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["rsd"]
  },
  "application/rss+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["rss"]
  },
  "application/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "application/rtploopback": {
    "source": "iana"
  },
  "application/rtx": {
    "source": "iana"
  },
  "application/samlassertion+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/samlmetadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sbml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sbml"]
  },
  "application/scaip+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/scim+json": {
    "source": "iana",
    "compressible": true
  },
  "application/scvp-cv-request": {
    "source": "iana",
    "extensions": ["scq"]
  },
  "application/scvp-cv-response": {
    "source": "iana",
    "extensions": ["scs"]
  },
  "application/scvp-vp-request": {
    "source": "iana",
    "extensions": ["spq"]
  },
  "application/scvp-vp-response": {
    "source": "iana",
    "extensions": ["spp"]
  },
  "application/sdp": {
    "source": "iana",
    "extensions": ["sdp"]
  },
  "application/secevent+jwt": {
    "source": "iana"
  },
  "application/senml+cbor": {
    "source": "iana"
  },
  "application/senml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/senml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/senml-exi": {
    "source": "iana"
  },
  "application/sensml+cbor": {
    "source": "iana"
  },
  "application/sensml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/sensml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sensml-exi": {
    "source": "iana"
  },
  "application/sep+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sep-exi": {
    "source": "iana"
  },
  "application/session-info": {
    "source": "iana"
  },
  "application/set-payment": {
    "source": "iana"
  },
  "application/set-payment-initiation": {
    "source": "iana",
    "extensions": ["setpay"]
  },
  "application/set-registration": {
    "source": "iana"
  },
  "application/set-registration-initiation": {
    "source": "iana",
    "extensions": ["setreg"]
  },
  "application/sgml": {
    "source": "iana"
  },
  "application/sgml-open-catalog": {
    "source": "iana"
  },
  "application/shf+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["shf"]
  },
  "application/sieve": {
    "source": "iana",
    "extensions": ["siv","sieve"]
  },
  "application/simple-filter+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/simple-message-summary": {
    "source": "iana"
  },
  "application/simplesymbolcontainer": {
    "source": "iana"
  },
  "application/sipc": {
    "source": "iana"
  },
  "application/slate": {
    "source": "iana"
  },
  "application/smil": {
    "source": "iana"
  },
  "application/smil+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["smi","smil"]
  },
  "application/smpte336m": {
    "source": "iana"
  },
  "application/soap+fastinfoset": {
    "source": "iana"
  },
  "application/soap+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sparql-query": {
    "source": "iana",
    "extensions": ["rq"]
  },
  "application/sparql-results+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["srx"]
  },
  "application/spirits-event+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sql": {
    "source": "iana"
  },
  "application/srgs": {
    "source": "iana",
    "extensions": ["gram"]
  },
  "application/srgs+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["grxml"]
  },
  "application/sru+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sru"]
  },
  "application/ssdl+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ssdl"]
  },
  "application/ssml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ssml"]
  },
  "application/stix+json": {
    "source": "iana",
    "compressible": true
  },
  "application/swid+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/tamp-apex-update": {
    "source": "iana"
  },
  "application/tamp-apex-update-confirm": {
    "source": "iana"
  },
  "application/tamp-community-update": {
    "source": "iana"
  },
  "application/tamp-community-update-confirm": {
    "source": "iana"
  },
  "application/tamp-error": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust-confirm": {
    "source": "iana"
  },
  "application/tamp-status-query": {
    "source": "iana"
  },
  "application/tamp-status-response": {
    "source": "iana"
  },
  "application/tamp-update": {
    "source": "iana"
  },
  "application/tamp-update-confirm": {
    "source": "iana"
  },
  "application/tar": {
    "compressible": true
  },
  "application/taxii+json": {
    "source": "iana",
    "compressible": true
  },
  "application/tei+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tei","teicorpus"]
  },
  "application/tetra_isi": {
    "source": "iana"
  },
  "application/thraud+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tfi"]
  },
  "application/timestamp-query": {
    "source": "iana"
  },
  "application/timestamp-reply": {
    "source": "iana"
  },
  "application/timestamped-data": {
    "source": "iana",
    "extensions": ["tsd"]
  },
  "application/tlsrpt+gzip": {
    "source": "iana"
  },
  "application/tlsrpt+json": {
    "source": "iana",
    "compressible": true
  },
  "application/tnauthlist": {
    "source": "iana"
  },
  "application/toml": {
    "compressible": true,
    "extensions": ["toml"]
  },
  "application/trickle-ice-sdpfrag": {
    "source": "iana"
  },
  "application/trig": {
    "source": "iana"
  },
  "application/ttml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/tve-trigger": {
    "source": "iana"
  },
  "application/tzif": {
    "source": "iana"
  },
  "application/tzif-leap": {
    "source": "iana"
  },
  "application/ulpfec": {
    "source": "iana"
  },
  "application/urc-grpsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/urc-ressheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/urc-targetdesc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/urc-uisocketdesc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vcard+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vcard+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vemmi": {
    "source": "iana"
  },
  "application/vividence.scriptfile": {
    "source": "apache"
  },
  "application/vnd.1000minds.decision-model+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp-prose+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp-prose-pc3ch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp-v2x-local-service-information": {
    "source": "iana"
  },
  "application/vnd.3gpp.access-transfer-events+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.bsf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.gmop+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mc-signalling-ear": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-payload": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-signalling": {
    "source": "iana"
  },
  "application/vnd.3gpp.mcdata-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcdata-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-floor-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-location-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-signed+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-ue-init-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcptt-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-location-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-service-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-transmission-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-ue-config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mcvideo-user-profile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.mid-call+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.pic-bw-large": {
    "source": "iana",
    "extensions": ["plb"]
  },
  "application/vnd.3gpp.pic-bw-small": {
    "source": "iana",
    "extensions": ["psb"]
  },
  "application/vnd.3gpp.pic-bw-var": {
    "source": "iana",
    "extensions": ["pvb"]
  },
  "application/vnd.3gpp.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp.sms+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.srvcc-ext+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.srvcc-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.state-and-event-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp.ussd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp2.bcmcsinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.3gpp2.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp2.tcap": {
    "source": "iana",
    "extensions": ["tcap"]
  },
  "application/vnd.3lightssoftware.imagescal": {
    "source": "iana"
  },
  "application/vnd.3m.post-it-notes": {
    "source": "iana",
    "extensions": ["pwn"]
  },
  "application/vnd.accpac.simply.aso": {
    "source": "iana",
    "extensions": ["aso"]
  },
  "application/vnd.accpac.simply.imp": {
    "source": "iana",
    "extensions": ["imp"]
  },
  "application/vnd.acucobol": {
    "source": "iana",
    "extensions": ["acu"]
  },
  "application/vnd.acucorp": {
    "source": "iana",
    "extensions": ["atc","acutc"]
  },
  "application/vnd.adobe.air-application-installer-package+zip": {
    "source": "apache",
    "compressible": false,
    "extensions": ["air"]
  },
  "application/vnd.adobe.flash.movie": {
    "source": "iana"
  },
  "application/vnd.adobe.formscentral.fcdt": {
    "source": "iana",
    "extensions": ["fcdt"]
  },
  "application/vnd.adobe.fxp": {
    "source": "iana",
    "extensions": ["fxp","fxpl"]
  },
  "application/vnd.adobe.partial-upload": {
    "source": "iana"
  },
  "application/vnd.adobe.xdp+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdp"]
  },
  "application/vnd.adobe.xfdf": {
    "source": "iana",
    "extensions": ["xfdf"]
  },
  "application/vnd.aether.imp": {
    "source": "iana"
  },
  "application/vnd.afpc.afplinedata": {
    "source": "iana"
  },
  "application/vnd.afpc.modca": {
    "source": "iana"
  },
  "application/vnd.ah-barcode": {
    "source": "iana"
  },
  "application/vnd.ahead.space": {
    "source": "iana",
    "extensions": ["ahead"]
  },
  "application/vnd.airzip.filesecure.azf": {
    "source": "iana",
    "extensions": ["azf"]
  },
  "application/vnd.airzip.filesecure.azs": {
    "source": "iana",
    "extensions": ["azs"]
  },
  "application/vnd.amadeus+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.amazon.ebook": {
    "source": "apache",
    "extensions": ["azw"]
  },
  "application/vnd.amazon.mobi8-ebook": {
    "source": "iana"
  },
  "application/vnd.americandynamics.acc": {
    "source": "iana",
    "extensions": ["acc"]
  },
  "application/vnd.amiga.ami": {
    "source": "iana",
    "extensions": ["ami"]
  },
  "application/vnd.amundsen.maze+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.android.ota": {
    "source": "iana"
  },
  "application/vnd.android.package-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["apk"]
  },
  "application/vnd.anki": {
    "source": "iana"
  },
  "application/vnd.anser-web-certificate-issue-initiation": {
    "source": "iana",
    "extensions": ["cii"]
  },
  "application/vnd.anser-web-funds-transfer-initiation": {
    "source": "apache",
    "extensions": ["fti"]
  },
  "application/vnd.antix.game-component": {
    "source": "iana",
    "extensions": ["atx"]
  },
  "application/vnd.apache.thrift.binary": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.compact": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.json": {
    "source": "iana"
  },
  "application/vnd.api+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.apothekende.reservation+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.apple.installer+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mpkg"]
  },
  "application/vnd.apple.keynote": {
    "source": "iana",
    "extensions": ["keynote"]
  },
  "application/vnd.apple.mpegurl": {
    "source": "iana",
    "extensions": ["m3u8"]
  },
  "application/vnd.apple.numbers": {
    "source": "iana",
    "extensions": ["numbers"]
  },
  "application/vnd.apple.pages": {
    "source": "iana",
    "extensions": ["pages"]
  },
  "application/vnd.apple.pkpass": {
    "compressible": false,
    "extensions": ["pkpass"]
  },
  "application/vnd.arastra.swi": {
    "source": "iana"
  },
  "application/vnd.aristanetworks.swi": {
    "source": "iana",
    "extensions": ["swi"]
  },
  "application/vnd.artisan+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.artsquare": {
    "source": "iana"
  },
  "application/vnd.astraea-software.iota": {
    "source": "iana",
    "extensions": ["iota"]
  },
  "application/vnd.audiograph": {
    "source": "iana",
    "extensions": ["aep"]
  },
  "application/vnd.autopackage": {
    "source": "iana"
  },
  "application/vnd.avalon+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.avistar+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.balsamiq.bmml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.balsamiq.bmpr": {
    "source": "iana"
  },
  "application/vnd.banana-accounting": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.error": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.msg": {
    "source": "iana"
  },
  "application/vnd.bbf.usp.msg+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.bekitzur-stech+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.bint.med-content": {
    "source": "iana"
  },
  "application/vnd.biopax.rdf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.blink-idb-value-wrapper": {
    "source": "iana"
  },
  "application/vnd.blueice.multipass": {
    "source": "iana",
    "extensions": ["mpm"]
  },
  "application/vnd.bluetooth.ep.oob": {
    "source": "iana"
  },
  "application/vnd.bluetooth.le.oob": {
    "source": "iana"
  },
  "application/vnd.bmi": {
    "source": "iana",
    "extensions": ["bmi"]
  },
  "application/vnd.bpf": {
    "source": "iana"
  },
  "application/vnd.bpf3": {
    "source": "iana"
  },
  "application/vnd.businessobjects": {
    "source": "iana",
    "extensions": ["rep"]
  },
  "application/vnd.byu.uapi+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cab-jscript": {
    "source": "iana"
  },
  "application/vnd.canon-cpdl": {
    "source": "iana"
  },
  "application/vnd.canon-lips": {
    "source": "iana"
  },
  "application/vnd.capasystems-pg+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cendio.thinlinc.clientconf": {
    "source": "iana"
  },
  "application/vnd.century-systems.tcp_stream": {
    "source": "iana"
  },
  "application/vnd.chemdraw+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["cdxml"]
  },
  "application/vnd.chess-pgn": {
    "source": "iana"
  },
  "application/vnd.chipnuts.karaoke-mmd": {
    "source": "iana",
    "extensions": ["mmd"]
  },
  "application/vnd.ciedi": {
    "source": "iana"
  },
  "application/vnd.cinderella": {
    "source": "iana",
    "extensions": ["cdy"]
  },
  "application/vnd.cirpack.isdn-ext": {
    "source": "iana"
  },
  "application/vnd.citationstyles.style+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["csl"]
  },
  "application/vnd.claymore": {
    "source": "iana",
    "extensions": ["cla"]
  },
  "application/vnd.cloanto.rp9": {
    "source": "iana",
    "extensions": ["rp9"]
  },
  "application/vnd.clonk.c4group": {
    "source": "iana",
    "extensions": ["c4g","c4d","c4f","c4p","c4u"]
  },
  "application/vnd.cluetrust.cartomobile-config": {
    "source": "iana",
    "extensions": ["c11amc"]
  },
  "application/vnd.cluetrust.cartomobile-config-pkg": {
    "source": "iana",
    "extensions": ["c11amz"]
  },
  "application/vnd.coffeescript": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.document": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.document-template": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.presentation": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.presentation-template": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.spreadsheet": {
    "source": "iana"
  },
  "application/vnd.collabio.xodocuments.spreadsheet-template": {
    "source": "iana"
  },
  "application/vnd.collection+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.doc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.next+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.comicbook+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.comicbook-rar": {
    "source": "iana"
  },
  "application/vnd.commerce-battelle": {
    "source": "iana"
  },
  "application/vnd.commonspace": {
    "source": "iana",
    "extensions": ["csp"]
  },
  "application/vnd.contact.cmsg": {
    "source": "iana",
    "extensions": ["cdbcmsg"]
  },
  "application/vnd.coreos.ignition+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cosmocaller": {
    "source": "iana",
    "extensions": ["cmc"]
  },
  "application/vnd.crick.clicker": {
    "source": "iana",
    "extensions": ["clkx"]
  },
  "application/vnd.crick.clicker.keyboard": {
    "source": "iana",
    "extensions": ["clkk"]
  },
  "application/vnd.crick.clicker.palette": {
    "source": "iana",
    "extensions": ["clkp"]
  },
  "application/vnd.crick.clicker.template": {
    "source": "iana",
    "extensions": ["clkt"]
  },
  "application/vnd.crick.clicker.wordbank": {
    "source": "iana",
    "extensions": ["clkw"]
  },
  "application/vnd.criticaltools.wbs+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wbs"]
  },
  "application/vnd.cryptii.pipe+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.crypto-shade-file": {
    "source": "iana"
  },
  "application/vnd.ctc-posml": {
    "source": "iana",
    "extensions": ["pml"]
  },
  "application/vnd.ctct.ws+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cups-pdf": {
    "source": "iana"
  },
  "application/vnd.cups-postscript": {
    "source": "iana"
  },
  "application/vnd.cups-ppd": {
    "source": "iana",
    "extensions": ["ppd"]
  },
  "application/vnd.cups-raster": {
    "source": "iana"
  },
  "application/vnd.cups-raw": {
    "source": "iana"
  },
  "application/vnd.curl": {
    "source": "iana"
  },
  "application/vnd.curl.car": {
    "source": "apache",
    "extensions": ["car"]
  },
  "application/vnd.curl.pcurl": {
    "source": "apache",
    "extensions": ["pcurl"]
  },
  "application/vnd.cyan.dean.root+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.cybank": {
    "source": "iana"
  },
  "application/vnd.d2l.coursepackage1p0+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.dart": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dart"]
  },
  "application/vnd.data-vision.rdz": {
    "source": "iana",
    "extensions": ["rdz"]
  },
  "application/vnd.datapackage+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dataresource+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.debian.binary-package": {
    "source": "iana"
  },
  "application/vnd.dece.data": {
    "source": "iana",
    "extensions": ["uvf","uvvf","uvd","uvvd"]
  },
  "application/vnd.dece.ttml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uvt","uvvt"]
  },
  "application/vnd.dece.unspecified": {
    "source": "iana",
    "extensions": ["uvx","uvvx"]
  },
  "application/vnd.dece.zip": {
    "source": "iana",
    "extensions": ["uvz","uvvz"]
  },
  "application/vnd.denovo.fcselayout-link": {
    "source": "iana",
    "extensions": ["fe_launch"]
  },
  "application/vnd.desmume.movie": {
    "source": "iana"
  },
  "application/vnd.dir-bi.plate-dl-nosuffix": {
    "source": "iana"
  },
  "application/vnd.dm.delegation+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dna": {
    "source": "iana",
    "extensions": ["dna"]
  },
  "application/vnd.document+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dolby.mlp": {
    "source": "apache",
    "extensions": ["mlp"]
  },
  "application/vnd.dolby.mobile.1": {
    "source": "iana"
  },
  "application/vnd.dolby.mobile.2": {
    "source": "iana"
  },
  "application/vnd.doremir.scorecloud-binary-document": {
    "source": "iana"
  },
  "application/vnd.dpgraph": {
    "source": "iana",
    "extensions": ["dpg"]
  },
  "application/vnd.dreamfactory": {
    "source": "iana",
    "extensions": ["dfac"]
  },
  "application/vnd.drive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ds-keypoint": {
    "source": "apache",
    "extensions": ["kpxx"]
  },
  "application/vnd.dtg.local": {
    "source": "iana"
  },
  "application/vnd.dtg.local.flash": {
    "source": "iana"
  },
  "application/vnd.dtg.local.html": {
    "source": "iana"
  },
  "application/vnd.dvb.ait": {
    "source": "iana",
    "extensions": ["ait"]
  },
  "application/vnd.dvb.dvbj": {
    "source": "iana"
  },
  "application/vnd.dvb.esgcontainer": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcdftnotifaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess2": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgpdd": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcroaming": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-base": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-enhancement": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-aggregate-root+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-container+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-generic+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-msglist+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-registration-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-ia-registration-response+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.notif-init+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dvb.pfr": {
    "source": "iana"
  },
  "application/vnd.dvb.service": {
    "source": "iana",
    "extensions": ["svc"]
  },
  "application/vnd.dxr": {
    "source": "iana"
  },
  "application/vnd.dynageo": {
    "source": "iana",
    "extensions": ["geo"]
  },
  "application/vnd.dzr": {
    "source": "iana"
  },
  "application/vnd.easykaraoke.cdgdownload": {
    "source": "iana"
  },
  "application/vnd.ecdis-update": {
    "source": "iana"
  },
  "application/vnd.ecip.rlp": {
    "source": "iana"
  },
  "application/vnd.ecowin.chart": {
    "source": "iana",
    "extensions": ["mag"]
  },
  "application/vnd.ecowin.filerequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.fileupdate": {
    "source": "iana"
  },
  "application/vnd.ecowin.series": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesrequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesupdate": {
    "source": "iana"
  },
  "application/vnd.efi.img": {
    "source": "iana"
  },
  "application/vnd.efi.iso": {
    "source": "iana"
  },
  "application/vnd.emclient.accessrequest+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.enliven": {
    "source": "iana",
    "extensions": ["nml"]
  },
  "application/vnd.enphase.envoy": {
    "source": "iana"
  },
  "application/vnd.eprints.data+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.epson.esf": {
    "source": "iana",
    "extensions": ["esf"]
  },
  "application/vnd.epson.msf": {
    "source": "iana",
    "extensions": ["msf"]
  },
  "application/vnd.epson.quickanime": {
    "source": "iana",
    "extensions": ["qam"]
  },
  "application/vnd.epson.salt": {
    "source": "iana",
    "extensions": ["slt"]
  },
  "application/vnd.epson.ssf": {
    "source": "iana",
    "extensions": ["ssf"]
  },
  "application/vnd.ericsson.quickcall": {
    "source": "iana"
  },
  "application/vnd.espass-espass+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.eszigno3+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["es3","et3"]
  },
  "application/vnd.etsi.aoc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.asic-e+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.etsi.asic-s+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.etsi.cug+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvcommand+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvdiscovery+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-bc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-cod+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsad-npvr+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvservice+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvsync+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.iptvueprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.mcid+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.mheg5": {
    "source": "iana"
  },
  "application/vnd.etsi.overload-control-policy-dataset+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.pstn+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.sci+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.simservs+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.timestamp-token": {
    "source": "iana"
  },
  "application/vnd.etsi.tsl+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.etsi.tsl.der": {
    "source": "iana"
  },
  "application/vnd.eudora.data": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.profile": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.settings": {
    "source": "iana"
  },
  "application/vnd.evolv.ecig.theme": {
    "source": "iana"
  },
  "application/vnd.exstream-empower+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.exstream-package": {
    "source": "iana"
  },
  "application/vnd.ezpix-album": {
    "source": "iana",
    "extensions": ["ez2"]
  },
  "application/vnd.ezpix-package": {
    "source": "iana",
    "extensions": ["ez3"]
  },
  "application/vnd.f-secure.mobile": {
    "source": "iana"
  },
  "application/vnd.fastcopy-disk-image": {
    "source": "iana"
  },
  "application/vnd.fdf": {
    "source": "iana",
    "extensions": ["fdf"]
  },
  "application/vnd.fdsn.mseed": {
    "source": "iana",
    "extensions": ["mseed"]
  },
  "application/vnd.fdsn.seed": {
    "source": "iana",
    "extensions": ["seed","dataless"]
  },
  "application/vnd.ffsns": {
    "source": "iana"
  },
  "application/vnd.ficlab.flb+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.filmit.zfc": {
    "source": "iana"
  },
  "application/vnd.fints": {
    "source": "iana"
  },
  "application/vnd.firemonkeys.cloudcell": {
    "source": "iana"
  },
  "application/vnd.flographit": {
    "source": "iana",
    "extensions": ["gph"]
  },
  "application/vnd.fluxtime.clip": {
    "source": "iana",
    "extensions": ["ftc"]
  },
  "application/vnd.font-fontforge-sfd": {
    "source": "iana"
  },
  "application/vnd.framemaker": {
    "source": "iana",
    "extensions": ["fm","frame","maker","book"]
  },
  "application/vnd.frogans.fnc": {
    "source": "iana",
    "extensions": ["fnc"]
  },
  "application/vnd.frogans.ltf": {
    "source": "iana",
    "extensions": ["ltf"]
  },
  "application/vnd.fsc.weblaunch": {
    "source": "iana",
    "extensions": ["fsc"]
  },
  "application/vnd.fujitsu.oasys": {
    "source": "iana",
    "extensions": ["oas"]
  },
  "application/vnd.fujitsu.oasys2": {
    "source": "iana",
    "extensions": ["oa2"]
  },
  "application/vnd.fujitsu.oasys3": {
    "source": "iana",
    "extensions": ["oa3"]
  },
  "application/vnd.fujitsu.oasysgp": {
    "source": "iana",
    "extensions": ["fg5"]
  },
  "application/vnd.fujitsu.oasysprs": {
    "source": "iana",
    "extensions": ["bh2"]
  },
  "application/vnd.fujixerox.art-ex": {
    "source": "iana"
  },
  "application/vnd.fujixerox.art4": {
    "source": "iana"
  },
  "application/vnd.fujixerox.ddd": {
    "source": "iana",
    "extensions": ["ddd"]
  },
  "application/vnd.fujixerox.docuworks": {
    "source": "iana",
    "extensions": ["xdw"]
  },
  "application/vnd.fujixerox.docuworks.binder": {
    "source": "iana",
    "extensions": ["xbd"]
  },
  "application/vnd.fujixerox.docuworks.container": {
    "source": "iana"
  },
  "application/vnd.fujixerox.hbpl": {
    "source": "iana"
  },
  "application/vnd.fut-misnet": {
    "source": "iana"
  },
  "application/vnd.futoin+cbor": {
    "source": "iana"
  },
  "application/vnd.futoin+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.fuzzysheet": {
    "source": "iana",
    "extensions": ["fzs"]
  },
  "application/vnd.genomatix.tuxedo": {
    "source": "iana",
    "extensions": ["txd"]
  },
  "application/vnd.geo+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geocube+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geogebra.file": {
    "source": "iana",
    "extensions": ["ggb"]
  },
  "application/vnd.geogebra.tool": {
    "source": "iana",
    "extensions": ["ggt"]
  },
  "application/vnd.geometry-explorer": {
    "source": "iana",
    "extensions": ["gex","gre"]
  },
  "application/vnd.geonext": {
    "source": "iana",
    "extensions": ["gxt"]
  },
  "application/vnd.geoplan": {
    "source": "iana",
    "extensions": ["g2w"]
  },
  "application/vnd.geospace": {
    "source": "iana",
    "extensions": ["g3w"]
  },
  "application/vnd.gerber": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt-response": {
    "source": "iana"
  },
  "application/vnd.gmx": {
    "source": "iana",
    "extensions": ["gmx"]
  },
  "application/vnd.google-apps.document": {
    "compressible": false,
    "extensions": ["gdoc"]
  },
  "application/vnd.google-apps.presentation": {
    "compressible": false,
    "extensions": ["gslides"]
  },
  "application/vnd.google-apps.spreadsheet": {
    "compressible": false,
    "extensions": ["gsheet"]
  },
  "application/vnd.google-earth.kml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["kml"]
  },
  "application/vnd.google-earth.kmz": {
    "source": "iana",
    "compressible": false,
    "extensions": ["kmz"]
  },
  "application/vnd.gov.sk.e-form+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.gov.sk.e-form+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.gov.sk.xmldatacontainer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.grafeq": {
    "source": "iana",
    "extensions": ["gqf","gqs"]
  },
  "application/vnd.gridmp": {
    "source": "iana"
  },
  "application/vnd.groove-account": {
    "source": "iana",
    "extensions": ["gac"]
  },
  "application/vnd.groove-help": {
    "source": "iana",
    "extensions": ["ghf"]
  },
  "application/vnd.groove-identity-message": {
    "source": "iana",
    "extensions": ["gim"]
  },
  "application/vnd.groove-injector": {
    "source": "iana",
    "extensions": ["grv"]
  },
  "application/vnd.groove-tool-message": {
    "source": "iana",
    "extensions": ["gtm"]
  },
  "application/vnd.groove-tool-template": {
    "source": "iana",
    "extensions": ["tpl"]
  },
  "application/vnd.groove-vcard": {
    "source": "iana",
    "extensions": ["vcg"]
  },
  "application/vnd.hal+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hal+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["hal"]
  },
  "application/vnd.handheld-entertainment+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["zmm"]
  },
  "application/vnd.hbci": {
    "source": "iana",
    "extensions": ["hbci"]
  },
  "application/vnd.hc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hcl-bireports": {
    "source": "iana"
  },
  "application/vnd.hdt": {
    "source": "iana"
  },
  "application/vnd.heroku+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hhe.lesson-player": {
    "source": "iana",
    "extensions": ["les"]
  },
  "application/vnd.hp-hpgl": {
    "source": "iana",
    "extensions": ["hpgl"]
  },
  "application/vnd.hp-hpid": {
    "source": "iana",
    "extensions": ["hpid"]
  },
  "application/vnd.hp-hps": {
    "source": "iana",
    "extensions": ["hps"]
  },
  "application/vnd.hp-jlyt": {
    "source": "iana",
    "extensions": ["jlt"]
  },
  "application/vnd.hp-pcl": {
    "source": "iana",
    "extensions": ["pcl"]
  },
  "application/vnd.hp-pclxl": {
    "source": "iana",
    "extensions": ["pclxl"]
  },
  "application/vnd.httphone": {
    "source": "iana"
  },
  "application/vnd.hydrostatix.sof-data": {
    "source": "iana",
    "extensions": ["sfd-hdstx"]
  },
  "application/vnd.hyper+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hyper-item+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hyperdrive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hzn-3d-crossword": {
    "source": "iana"
  },
  "application/vnd.ibm.afplinedata": {
    "source": "iana"
  },
  "application/vnd.ibm.electronic-media": {
    "source": "iana"
  },
  "application/vnd.ibm.minipay": {
    "source": "iana",
    "extensions": ["mpy"]
  },
  "application/vnd.ibm.modcap": {
    "source": "iana",
    "extensions": ["afp","listafp","list3820"]
  },
  "application/vnd.ibm.rights-management": {
    "source": "iana",
    "extensions": ["irm"]
  },
  "application/vnd.ibm.secure-container": {
    "source": "iana",
    "extensions": ["sc"]
  },
  "application/vnd.iccprofile": {
    "source": "iana",
    "extensions": ["icc","icm"]
  },
  "application/vnd.ieee.1905": {
    "source": "iana"
  },
  "application/vnd.igloader": {
    "source": "iana",
    "extensions": ["igl"]
  },
  "application/vnd.imagemeter.folder+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.imagemeter.image+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.immervision-ivp": {
    "source": "iana",
    "extensions": ["ivp"]
  },
  "application/vnd.immervision-ivu": {
    "source": "iana",
    "extensions": ["ivu"]
  },
  "application/vnd.ims.imsccv1p1": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p2": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p3": {
    "source": "iana"
  },
  "application/vnd.ims.lis.v2.result+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy.id+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings.simple+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.informedcontrol.rms+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.informix-visionary": {
    "source": "iana"
  },
  "application/vnd.infotech.project": {
    "source": "iana"
  },
  "application/vnd.infotech.project+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.innopath.wamp.notification": {
    "source": "iana"
  },
  "application/vnd.insors.igm": {
    "source": "iana",
    "extensions": ["igm"]
  },
  "application/vnd.intercon.formnet": {
    "source": "iana",
    "extensions": ["xpw","xpx"]
  },
  "application/vnd.intergeo": {
    "source": "iana",
    "extensions": ["i2g"]
  },
  "application/vnd.intertrust.digibox": {
    "source": "iana"
  },
  "application/vnd.intertrust.nncp": {
    "source": "iana"
  },
  "application/vnd.intu.qbo": {
    "source": "iana",
    "extensions": ["qbo"]
  },
  "application/vnd.intu.qfx": {
    "source": "iana",
    "extensions": ["qfx"]
  },
  "application/vnd.iptc.g2.catalogitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.conceptitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.knowledgeitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.newsitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.newsmessage+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.packageitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.iptc.g2.planningitem+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ipunplugged.rcprofile": {
    "source": "iana",
    "extensions": ["rcprofile"]
  },
  "application/vnd.irepository.package+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["irp"]
  },
  "application/vnd.is-xpr": {
    "source": "iana",
    "extensions": ["xpr"]
  },
  "application/vnd.isac.fcs": {
    "source": "iana",
    "extensions": ["fcs"]
  },
  "application/vnd.iso11783-10+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.jam": {
    "source": "iana",
    "extensions": ["jam"]
  },
  "application/vnd.japannet-directory-service": {
    "source": "iana"
  },
  "application/vnd.japannet-jpnstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-payment-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-registration": {
    "source": "iana"
  },
  "application/vnd.japannet-registration-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-setstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-verification": {
    "source": "iana"
  },
  "application/vnd.japannet-verification-wakeup": {
    "source": "iana"
  },
  "application/vnd.jcp.javame.midlet-rms": {
    "source": "iana",
    "extensions": ["rms"]
  },
  "application/vnd.jisp": {
    "source": "iana",
    "extensions": ["jisp"]
  },
  "application/vnd.joost.joda-archive": {
    "source": "iana",
    "extensions": ["joda"]
  },
  "application/vnd.jsk.isdn-ngn": {
    "source": "iana"
  },
  "application/vnd.kahootz": {
    "source": "iana",
    "extensions": ["ktz","ktr"]
  },
  "application/vnd.kde.karbon": {
    "source": "iana",
    "extensions": ["karbon"]
  },
  "application/vnd.kde.kchart": {
    "source": "iana",
    "extensions": ["chrt"]
  },
  "application/vnd.kde.kformula": {
    "source": "iana",
    "extensions": ["kfo"]
  },
  "application/vnd.kde.kivio": {
    "source": "iana",
    "extensions": ["flw"]
  },
  "application/vnd.kde.kontour": {
    "source": "iana",
    "extensions": ["kon"]
  },
  "application/vnd.kde.kpresenter": {
    "source": "iana",
    "extensions": ["kpr","kpt"]
  },
  "application/vnd.kde.kspread": {
    "source": "iana",
    "extensions": ["ksp"]
  },
  "application/vnd.kde.kword": {
    "source": "iana",
    "extensions": ["kwd","kwt"]
  },
  "application/vnd.kenameaapp": {
    "source": "iana",
    "extensions": ["htke"]
  },
  "application/vnd.kidspiration": {
    "source": "iana",
    "extensions": ["kia"]
  },
  "application/vnd.kinar": {
    "source": "iana",
    "extensions": ["kne","knp"]
  },
  "application/vnd.koan": {
    "source": "iana",
    "extensions": ["skp","skd","skt","skm"]
  },
  "application/vnd.kodak-descriptor": {
    "source": "iana",
    "extensions": ["sse"]
  },
  "application/vnd.las": {
    "source": "iana"
  },
  "application/vnd.las.las+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.las.las+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lasxml"]
  },
  "application/vnd.laszip": {
    "source": "iana"
  },
  "application/vnd.leap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.liberty-request+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.llamagraphics.life-balance.desktop": {
    "source": "iana",
    "extensions": ["lbd"]
  },
  "application/vnd.llamagraphics.life-balance.exchange+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["lbe"]
  },
  "application/vnd.logipipe.circuit+zip": {
    "source": "iana",
    "compressible": false
  },
  "application/vnd.loom": {
    "source": "iana"
  },
  "application/vnd.lotus-1-2-3": {
    "source": "iana",
    "extensions": ["123"]
  },
  "application/vnd.lotus-approach": {
    "source": "iana",
    "extensions": ["apr"]
  },
  "application/vnd.lotus-freelance": {
    "source": "iana",
    "extensions": ["pre"]
  },
  "application/vnd.lotus-notes": {
    "source": "iana",
    "extensions": ["nsf"]
  },
  "application/vnd.lotus-organizer": {
    "source": "iana",
    "extensions": ["org"]
  },
  "application/vnd.lotus-screencam": {
    "source": "iana",
    "extensions": ["scm"]
  },
  "application/vnd.lotus-wordpro": {
    "source": "iana",
    "extensions": ["lwp"]
  },
  "application/vnd.macports.portpkg": {
    "source": "iana",
    "extensions": ["portpkg"]
  },
  "application/vnd.mapbox-vector-tile": {
    "source": "iana"
  },
  "application/vnd.marlin.drm.actiontoken+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.conftoken+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.license+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.marlin.drm.mdcf": {
    "source": "iana"
  },
  "application/vnd.mason+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.maxmind.maxmind-db": {
    "source": "iana"
  },
  "application/vnd.mcd": {
    "source": "iana",
    "extensions": ["mcd"]
  },
  "application/vnd.medcalcdata": {
    "source": "iana",
    "extensions": ["mc1"]
  },
  "application/vnd.mediastation.cdkey": {
    "source": "iana",
    "extensions": ["cdkey"]
  },
  "application/vnd.meridian-slingshot": {
    "source": "iana"
  },
  "application/vnd.mfer": {
    "source": "iana",
    "extensions": ["mwf"]
  },
  "application/vnd.mfmp": {
    "source": "iana",
    "extensions": ["mfm"]
  },
  "application/vnd.micro+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.micrografx.flo": {
    "source": "iana",
    "extensions": ["flo"]
  },
  "application/vnd.micrografx.igx": {
    "source": "iana",
    "extensions": ["igx"]
  },
  "application/vnd.microsoft.portable-executable": {
    "source": "iana"
  },
  "application/vnd.microsoft.windows.thumbnail-cache": {
    "source": "iana"
  },
  "application/vnd.miele+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.mif": {
    "source": "iana",
    "extensions": ["mif"]
  },
  "application/vnd.minisoft-hp3000-save": {
    "source": "iana"
  },
  "application/vnd.mitsubishi.misty-guard.trustweb": {
    "source": "iana"
  },
  "application/vnd.mobius.daf": {
    "source": "iana",
    "extensions": ["daf"]
  },
  "application/vnd.mobius.dis": {
    "source": "iana",
    "extensions": ["dis"]
  },
  "application/vnd.mobius.mbk": {
    "source": "iana",
    "extensions": ["mbk"]
  },
  "application/vnd.mobius.mqy": {
    "source": "iana",
    "extensions": ["mqy"]
  },
  "application/vnd.mobius.msl": {
    "source": "iana",
    "extensions": ["msl"]
  },
  "application/vnd.mobius.plc": {
    "source": "iana",
    "extensions": ["plc"]
  },
  "application/vnd.mobius.txf": {
    "source": "iana",
    "extensions": ["txf"]
  },
  "application/vnd.mophun.application": {
    "source": "iana",
    "extensions": ["mpn"]
  },
  "application/vnd.mophun.certificate": {
    "source": "iana",
    "extensions": ["mpc"]
  },
  "application/vnd.motorola.flexsuite": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.adsi": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.fis": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.gotap": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.kmr": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.ttc": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.wem": {
    "source": "iana"
  },
  "application/vnd.motorola.iprm": {
    "source": "iana"
  },
  "application/vnd.mozilla.xul+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xul"]
  },
  "application/vnd.ms-3mfdocument": {
    "source": "iana"
  },
  "application/vnd.ms-artgalry": {
    "source": "iana",
    "extensions": ["cil"]
  },
  "application/vnd.ms-asf": {
    "source": "iana"
  },
  "application/vnd.ms-cab-compressed": {
    "source": "iana",
    "extensions": ["cab"]
  },
  "application/vnd.ms-color.iccprofile": {
    "source": "apache"
  },
  "application/vnd.ms-excel": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xls","xlm","xla","xlc","xlt","xlw"]
  },
  "application/vnd.ms-excel.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlam"]
  },
  "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsb"]
  },
  "application/vnd.ms-excel.sheet.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsm"]
  },
  "application/vnd.ms-excel.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["xltm"]
  },
  "application/vnd.ms-fontobject": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eot"]
  },
  "application/vnd.ms-htmlhelp": {
    "source": "iana",
    "extensions": ["chm"]
  },
  "application/vnd.ms-ims": {
    "source": "iana",
    "extensions": ["ims"]
  },
  "application/vnd.ms-lrm": {
    "source": "iana",
    "extensions": ["lrm"]
  },
  "application/vnd.ms-office.activex+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-officetheme": {
    "source": "iana",
    "extensions": ["thmx"]
  },
  "application/vnd.ms-opentype": {
    "source": "apache",
    "compressible": true
  },
  "application/vnd.ms-outlook": {
    "compressible": false,
    "extensions": ["msg"]
  },
  "application/vnd.ms-package.obfuscated-opentype": {
    "source": "apache"
  },
  "application/vnd.ms-pki.seccat": {
    "source": "apache",
    "extensions": ["cat"]
  },
  "application/vnd.ms-pki.stl": {
    "source": "apache",
    "extensions": ["stl"]
  },
  "application/vnd.ms-playready.initiator+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-powerpoint": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ppt","pps","pot"]
  },
  "application/vnd.ms-powerpoint.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppam"]
  },
  "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
    "source": "iana",
    "extensions": ["pptm"]
  },
  "application/vnd.ms-powerpoint.slide.macroenabled.12": {
    "source": "iana",
    "extensions": ["sldm"]
  },
  "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppsm"]
  },
  "application/vnd.ms-powerpoint.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["potm"]
  },
  "application/vnd.ms-printdevicecapabilities+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-printing.printticket+xml": {
    "source": "apache",
    "compressible": true
  },
  "application/vnd.ms-printschematicket+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ms-project": {
    "source": "iana",
    "extensions": ["mpp","mpt"]
  },
  "application/vnd.ms-tnef": {
    "source": "iana"
  },
  "application/vnd.ms-windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.nwprinting.oob": {
    "source": "iana"
  },
  "application/vnd.ms-windows.printerpairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.wsd.oob": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-resp": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-resp": {
    "source": "iana"
  },
  "application/vnd.ms-word.document.macroenabled.12": {
    "source": "iana",
    "extensions": ["docm"]
  },
  "application/vnd.ms-word.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["dotm"]
  },
  "application/vnd.ms-works": {
    "source": "iana",
    "extensions": ["wps","wks","wcm","wdb"]
  },
  "application/vnd.ms-wpl": {
    "source": "iana",
    "extensions": ["wpl"]
  },
  "application/vnd.ms-xpsdocument": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xps"]
  },
  "application/vnd.msa-disk-image": {
    "source": "iana"
  },
  "application/vnd.mseq": {
    "source": "iana",
    "extensions": ["mseq"]
  },
  "application/vnd.msign": {
    "source": "iana"
  },
  "application/vnd.multiad.creator": {
    "source": "iana"
  },
  "application/vnd.multiad.creator.cif": {
    "source": "iana"
  },
  "application/vnd.music-niff": {
    "source": "iana"
  },
  "application/vnd.musician": {
    "source": "iana",
    "extensions": ["mus"]
  },
  "application/vnd.muvee.style": {
    "source": "iana",
    "extensions": ["msty"]
  },
  "application/vnd.mynfc": {
    "source": "iana",
    "extensions": ["taglet"]
  },
  "application/vnd.ncd.control": {
    "source": "iana"
  },
  "application/vnd.ncd.reference": {
    "source": "iana"
  },
  "application/vnd.nearst.inv+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nervana": {
    "source": "iana"
  },
  "application/vnd.netfpx": {
    "source": "iana"
  },
  "application/vnd.neurolanguage.nlu": {
    "source": "iana",
    "extensions": ["nlu"]
  },
  "application/vnd.nimn": {
    "source": "iana"
  },
  "application/vnd.nintendo.nitro.rom": {
    "source": "iana"
  },
  "application/vnd.nintendo.snes.rom": {
    "source": "iana"
  },
  "application/vnd.nitf": {
    "source": "iana",
    "extensions": ["ntf","nitf"]
  },
  "application/vnd.noblenet-directory": {
    "source": "iana",
    "extensions": ["nnd"]
  },
  "application/vnd.noblenet-sealer": {
    "source": "iana",
    "extensions": ["nns"]
  },
  "application/vnd.noblenet-web": {
    "source": "iana",
    "extensions": ["nnw"]
  },
  "application/vnd.nokia.catalogs": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.iptv.config+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.isds-radio-presets": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.landmarkcollection+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.n-gage.ac+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.n-gage.data": {
    "source": "iana",
    "extensions": ["ngdat"]
  },
  "application/vnd.nokia.n-gage.symbian.install": {
    "source": "iana",
    "extensions": ["n-gage"]
  },
  "application/vnd.nokia.ncd": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.nokia.radio-preset": {
    "source": "iana",
    "extensions": ["rpst"]
  },
  "application/vnd.nokia.radio-presets": {
    "source": "iana",
    "extensions": ["rpss"]
  },
  "application/vnd.novadigm.edm": {
    "source": "iana",
    "extensions": ["edm"]
  },
  "application/vnd.novadigm.edx": {
    "source": "iana",
    "extensions": ["edx"]
  },
  "application/vnd.novadigm.ext": {
    "source": "iana",
    "extensions": ["ext"]
  },
  "application/vnd.ntt-local.content-share": {
    "source": "iana"
  },
  "application/vnd.ntt-local.file-transfer": {
    "source": "iana"
  },
  "application/vnd.ntt-local.ogw_remote-access": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_remote": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_tcp_stream": {
    "source": "iana"
  },
  "application/vnd.oasis.opendocument.chart": {
    "source": "iana",
    "extensions": ["odc"]
  },
  "application/vnd.oasis.opendocument.chart-template": {
    "source": "iana",
    "extensions": ["otc"]
  },
  "application/vnd.oasis.opendocument.database": {
    "source": "iana",
    "extensions": ["odb"]
  },
  "application/vnd.oasis.opendocument.formula": {
    "source": "iana",
    "extensions": ["odf"]
  },
  "application/vnd.oasis.opendocument.formula-template": {
    "source": "iana",
    "extensions": ["odft"]
  },
  "application/vnd.oasis.opendocument.graphics": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odg"]
  },
  "application/vnd.oasis.opendocument.graphics-template": {
    "source": "iana",
    "extensions": ["otg"]
  },
  "application/vnd.oasis.opendocument.image": {
    "source": "iana",
    "extensions": ["odi"]
  },
  "application/vnd.oasis.opendocument.image-template": {
    "source": "iana",
    "extensions": ["oti"]
  },
  "application/vnd.oasis.opendocument.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odp"]
  },
  "application/vnd.oasis.opendocument.presentation-template": {
    "source": "iana",
    "extensions": ["otp"]
  },
  "application/vnd.oasis.opendocument.spreadsheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ods"]
  },
  "application/vnd.oasis.opendocument.spreadsheet-template": {
    "source": "iana",
    "extensions": ["ots"]
  },
  "application/vnd.oasis.opendocument.text": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odt"]
  },
  "application/vnd.oasis.opendocument.text-master": {
    "source": "iana",
    "extensions": ["odm"]
  },
  "application/vnd.oasis.opendocument.text-template": {
    "source": "iana",
    "extensions": ["ott"]
  },
  "application/vnd.oasis.opendocument.text-web": {
    "source": "iana",
    "extensions": ["oth"]
  },
  "application/vnd.obn": {
    "source": "iana"
  },
  "application/vnd.ocf+cbor": {
    "source": "iana"
  },
  "application/vnd.oftn.l10n+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.contentaccessdownload+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.contentaccessstreaming+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.cspg-hexbinary": {
    "source": "iana"
  },
  "application/vnd.oipf.dae.svg+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.dae.xhtml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.mippvcontrolmessage+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.pae.gem": {
    "source": "iana"
  },
  "application/vnd.oipf.spdiscovery+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.spdlist+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.ueprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.userprofile+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.olpc-sugar": {
    "source": "iana",
    "extensions": ["xo"]
  },
  "application/vnd.oma-scws-config": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-request": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-response": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.drm-trigger+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.imd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.ltkm": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.notification+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.provisioningtrigger": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgboot": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgdd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.sgdu": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.simple-symbol-container": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.smartcard-trigger+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.sprov+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.bcast.stkm": {
    "source": "iana"
  },
  "application/vnd.oma.cab-address-book+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-feature-handler+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-pcc+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-subs-invite+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.cab-user-prefs+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.dcd": {
    "source": "iana"
  },
  "application/vnd.oma.dcdc": {
    "source": "iana"
  },
  "application/vnd.oma.dd2+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dd2"]
  },
  "application/vnd.oma.drm.risd+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.group-usage-list+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.lwm2m+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.lwm2m+tlv": {
    "source": "iana"
  },
  "application/vnd.oma.pal+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.detailed-progress-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.final-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.groups+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.invocation-descriptor+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.poc.optimized-progress-report+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.push": {
    "source": "iana"
  },
  "application/vnd.oma.scidm.messages+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oma.xcap-directory+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.omads-email+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.omads-file+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.omads-folder+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.omaloc-supl-init": {
    "source": "iana"
  },
  "application/vnd.onepager": {
    "source": "iana"
  },
  "application/vnd.onepagertamp": {
    "source": "iana"
  },
  "application/vnd.onepagertamx": {
    "source": "iana"
  },
  "application/vnd.onepagertat": {
    "source": "iana"
  },
  "application/vnd.onepagertatp": {
    "source": "iana"
  },
  "application/vnd.onepagertatx": {
    "source": "iana"
  },
  "application/vnd.openblox.game+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openblox.game-binary": {
    "source": "iana"
  },
  "application/vnd.openeye.oeb": {
    "source": "iana"
  },
  "application/vnd.openofficeorg.extension": {
    "source": "apache",
    "extensions": ["oxt"]
  },
  "application/vnd.openstreetmap.data+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawing+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pptx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide": {
    "source": "iana",
    "extensions": ["sldx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
    "source": "iana",
    "extensions": ["ppsx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template": {
    "source": "iana",
    "extensions": ["potx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xlsx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
    "source": "iana",
    "extensions": ["xltx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.theme+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.vmldrawing": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
    "source": "iana",
    "compressible": false,
    "extensions": ["docx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
    "source": "iana",
    "extensions": ["dotx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.core-properties+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.openxmlformats-package.relationships+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oracle.resource+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.orange.indata": {
    "source": "iana"
  },
  "application/vnd.osa.netdeploy": {
    "source": "iana"
  },
  "application/vnd.osgeo.mapguide.package": {
    "source": "iana",
    "extensions": ["mgp"]
  },
  "application/vnd.osgi.bundle": {
    "source": "iana"
  },
  "application/vnd.osgi.dp": {
    "source": "iana",
    "extensions": ["dp"]
  },
  "application/vnd.osgi.subsystem": {
    "source": "iana",
    "extensions": ["esa"]
  },
  "application/vnd.otps.ct-kip+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oxli.countgraph": {
    "source": "iana"
  },
  "application/vnd.pagerduty+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.palm": {
    "source": "iana",
    "extensions": ["pdb","pqa","oprc"]
  },
  "application/vnd.panoply": {
    "source": "iana"
  },
  "application/vnd.paos.xml": {
    "source": "iana"
  },
  "application/vnd.patentdive": {
    "source": "iana"
  },
  "application/vnd.patientecommsdoc": {
    "source": "iana"
  },
  "application/vnd.pawaafile": {
    "source": "iana",
    "extensions": ["paw"]
  },
  "application/vnd.pcos": {
    "source": "iana"
  },
  "application/vnd.pg.format": {
    "source": "iana",
    "extensions": ["str"]
  },
  "application/vnd.pg.osasli": {
    "source": "iana",
    "extensions": ["ei6"]
  },
  "application/vnd.piaccess.application-licence": {
    "source": "iana"
  },
  "application/vnd.picsel": {
    "source": "iana",
    "extensions": ["efif"]
  },
  "application/vnd.pmi.widget": {
    "source": "iana",
    "extensions": ["wg"]
  },
  "application/vnd.poc.group-advertisement+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.pocketlearn": {
    "source": "iana",
    "extensions": ["plf"]
  },
  "application/vnd.powerbuilder6": {
    "source": "iana",
    "extensions": ["pbd"]
  },
  "application/vnd.powerbuilder6-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75-s": {
    "source": "iana"
  },
  "application/vnd.preminet": {
    "source": "iana"
  },
  "application/vnd.previewsystems.box": {
    "source": "iana",
    "extensions": ["box"]
  },
  "application/vnd.proteus.magazine": {
    "source": "iana",
    "extensions": ["mgz"]
  },
  "application/vnd.psfs": {
    "source": "iana"
  },
  "application/vnd.publishare-delta-tree": {
    "source": "iana",
    "extensions": ["qps"]
  },
  "application/vnd.pvi.ptid1": {
    "source": "iana",
    "extensions": ["ptid"]
  },
  "application/vnd.pwg-multiplexed": {
    "source": "iana"
  },
  "application/vnd.pwg-xhtml-print+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.qualcomm.brew-app-res": {
    "source": "iana"
  },
  "application/vnd.quarantainenet": {
    "source": "iana"
  },
  "application/vnd.quark.quarkxpress": {
    "source": "iana",
    "extensions": ["qxd","qxt","qwd","qwt","qxl","qxb"]
  },
  "application/vnd.quobject-quoxdocument": {
    "source": "iana"
  },
  "application/vnd.radisys.moml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-conf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-conn+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-dialog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-audit-stream+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-conf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-base+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-group+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-speech+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.radisys.msml-dialog-transform+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.rainstor.data": {
    "source": "iana"
  },
  "application/vnd.rapid": {
    "source": "iana"
  },
  "application/vnd.rar": {
    "source": "iana"
  },
  "application/vnd.realvnc.bed": {
    "source": "iana",
    "extensions": ["bed"]
  },
  "application/vnd.recordare.musicxml": {
    "source": "iana",
    "extensions": ["mxl"]
  },
  "application/vnd.recordare.musicxml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["musicxml"]
  },
  "application/vnd.renlearn.rlprint": {
    "source": "iana"
  },
  "application/vnd.restful+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.rig.cryptonote": {
    "source": "iana",
    "extensions": ["cryptonote"]
  },
  "application/vnd.rim.cod": {
    "source": "apache",
    "extensions": ["cod"]
  },
  "application/vnd.rn-realmedia": {
    "source": "apache",
    "extensions": ["rm"]
  },
  "application/vnd.rn-realmedia-vbr": {
    "source": "apache",
    "extensions": ["rmvb"]
  },
  "application/vnd.route66.link66+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["link66"]
  },
  "application/vnd.rs-274x": {
    "source": "iana"
  },
  "application/vnd.ruckus.download": {
    "source": "iana"
  },
  "application/vnd.s3sms": {
    "source": "iana"
  },
  "application/vnd.sailingtracker.track": {
    "source": "iana",
    "extensions": ["st"]
  },
  "application/vnd.sbm.cid": {
    "source": "iana"
  },
  "application/vnd.sbm.mid2": {
    "source": "iana"
  },
  "application/vnd.scribus": {
    "source": "iana"
  },
  "application/vnd.sealed.3df": {
    "source": "iana"
  },
  "application/vnd.sealed.csf": {
    "source": "iana"
  },
  "application/vnd.sealed.doc": {
    "source": "iana"
  },
  "application/vnd.sealed.eml": {
    "source": "iana"
  },
  "application/vnd.sealed.mht": {
    "source": "iana"
  },
  "application/vnd.sealed.net": {
    "source": "iana"
  },
  "application/vnd.sealed.ppt": {
    "source": "iana"
  },
  "application/vnd.sealed.tiff": {
    "source": "iana"
  },
  "application/vnd.sealed.xls": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.html": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.pdf": {
    "source": "iana"
  },
  "application/vnd.seemail": {
    "source": "iana",
    "extensions": ["see"]
  },
  "application/vnd.sema": {
    "source": "iana",
    "extensions": ["sema"]
  },
  "application/vnd.semd": {
    "source": "iana",
    "extensions": ["semd"]
  },
  "application/vnd.semf": {
    "source": "iana",
    "extensions": ["semf"]
  },
  "application/vnd.shade-save-file": {
    "source": "iana"
  },
  "application/vnd.shana.informed.formdata": {
    "source": "iana",
    "extensions": ["ifm"]
  },
  "application/vnd.shana.informed.formtemplate": {
    "source": "iana",
    "extensions": ["itp"]
  },
  "application/vnd.shana.informed.interchange": {
    "source": "iana",
    "extensions": ["iif"]
  },
  "application/vnd.shana.informed.package": {
    "source": "iana",
    "extensions": ["ipk"]
  },
  "application/vnd.shootproof+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.shopkick+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.sigrok.session": {
    "source": "iana"
  },
  "application/vnd.simtech-mindmapper": {
    "source": "iana",
    "extensions": ["twd","twds"]
  },
  "application/vnd.siren+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.smaf": {
    "source": "iana",
    "extensions": ["mmf"]
  },
  "application/vnd.smart.notebook": {
    "source": "iana"
  },
  "application/vnd.smart.teacher": {
    "source": "iana",
    "extensions": ["teacher"]
  },
  "application/vnd.software602.filler.form+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.software602.filler.form-xml-zip": {
    "source": "iana"
  },
  "application/vnd.solent.sdkm+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["sdkm","sdkd"]
  },
  "application/vnd.spotfire.dxp": {
    "source": "iana",
    "extensions": ["dxp"]
  },
  "application/vnd.spotfire.sfs": {
    "source": "iana",
    "extensions": ["sfs"]
  },
  "application/vnd.sqlite3": {
    "source": "iana"
  },
  "application/vnd.sss-cod": {
    "source": "iana"
  },
  "application/vnd.sss-dtf": {
    "source": "iana"
  },
  "application/vnd.sss-ntf": {
    "source": "iana"
  },
  "application/vnd.stardivision.calc": {
    "source": "apache",
    "extensions": ["sdc"]
  },
  "application/vnd.stardivision.draw": {
    "source": "apache",
    "extensions": ["sda"]
  },
  "application/vnd.stardivision.impress": {
    "source": "apache",
    "extensions": ["sdd"]
  },
  "application/vnd.stardivision.math": {
    "source": "apache",
    "extensions": ["smf"]
  },
  "application/vnd.stardivision.writer": {
    "source": "apache",
    "extensions": ["sdw","vor"]
  },
  "application/vnd.stardivision.writer-global": {
    "source": "apache",
    "extensions": ["sgl"]
  },
  "application/vnd.stepmania.package": {
    "source": "iana",
    "extensions": ["smzip"]
  },
  "application/vnd.stepmania.stepchart": {
    "source": "iana",
    "extensions": ["sm"]
  },
  "application/vnd.street-stream": {
    "source": "iana"
  },
  "application/vnd.sun.wadl+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wadl"]
  },
  "application/vnd.sun.xml.calc": {
    "source": "apache",
    "extensions": ["sxc"]
  },
  "application/vnd.sun.xml.calc.template": {
    "source": "apache",
    "extensions": ["stc"]
  },
  "application/vnd.sun.xml.draw": {
    "source": "apache",
    "extensions": ["sxd"]
  },
  "application/vnd.sun.xml.draw.template": {
    "source": "apache",
    "extensions": ["std"]
  },
  "application/vnd.sun.xml.impress": {
    "source": "apache",
    "extensions": ["sxi"]
  },
  "application/vnd.sun.xml.impress.template": {
    "source": "apache",
    "extensions": ["sti"]
  },
  "application/vnd.sun.xml.math": {
    "source": "apache",
    "extensions": ["sxm"]
  },
  "application/vnd.sun.xml.writer": {
    "source": "apache",
    "extensions": ["sxw"]
  },
  "application/vnd.sun.xml.writer.global": {
    "source": "apache",
    "extensions": ["sxg"]
  },
  "application/vnd.sun.xml.writer.template": {
    "source": "apache",
    "extensions": ["stw"]
  },
  "application/vnd.sus-calendar": {
    "source": "iana",
    "extensions": ["sus","susp"]
  },
  "application/vnd.svd": {
    "source": "iana",
    "extensions": ["svd"]
  },
  "application/vnd.swiftview-ics": {
    "source": "iana"
  },
  "application/vnd.symbian.install": {
    "source": "apache",
    "extensions": ["sis","sisx"]
  },
  "application/vnd.syncml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xsm"]
  },
  "application/vnd.syncml.dm+wbxml": {
    "source": "iana",
    "extensions": ["bdm"]
  },
  "application/vnd.syncml.dm+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdm"]
  },
  "application/vnd.syncml.dm.notification": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.syncml.dmtnds+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmtnds+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.syncml.ds.notification": {
    "source": "iana"
  },
  "application/vnd.tableschema+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tao.intent-module-archive": {
    "source": "iana",
    "extensions": ["tao"]
  },
  "application/vnd.tcpdump.pcap": {
    "source": "iana",
    "extensions": ["pcap","cap","dmp"]
  },
  "application/vnd.think-cell.ppttc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tmd.mediaflex.api+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.tml": {
    "source": "iana"
  },
  "application/vnd.tmobile-livetv": {
    "source": "iana",
    "extensions": ["tmo"]
  },
  "application/vnd.tri.onesource": {
    "source": "iana"
  },
  "application/vnd.trid.tpt": {
    "source": "iana",
    "extensions": ["tpt"]
  },
  "application/vnd.triscape.mxs": {
    "source": "iana",
    "extensions": ["mxs"]
  },
  "application/vnd.trueapp": {
    "source": "iana",
    "extensions": ["tra"]
  },
  "application/vnd.truedoc": {
    "source": "iana"
  },
  "application/vnd.ubisoft.webplayer": {
    "source": "iana"
  },
  "application/vnd.ufdl": {
    "source": "iana",
    "extensions": ["ufd","ufdl"]
  },
  "application/vnd.uiq.theme": {
    "source": "iana",
    "extensions": ["utz"]
  },
  "application/vnd.umajin": {
    "source": "iana",
    "extensions": ["umj"]
  },
  "application/vnd.unity": {
    "source": "iana",
    "extensions": ["unityweb"]
  },
  "application/vnd.uoml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uoml"]
  },
  "application/vnd.uplanet.alert": {
    "source": "iana"
  },
  "application/vnd.uplanet.alert-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.list": {
    "source": "iana"
  },
  "application/vnd.uplanet.list-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.signal": {
    "source": "iana"
  },
  "application/vnd.uri-map": {
    "source": "iana"
  },
  "application/vnd.valve.source.material": {
    "source": "iana"
  },
  "application/vnd.vcx": {
    "source": "iana",
    "extensions": ["vcx"]
  },
  "application/vnd.vd-study": {
    "source": "iana"
  },
  "application/vnd.vectorworks": {
    "source": "iana"
  },
  "application/vnd.vel+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.verimatrix.vcas": {
    "source": "iana"
  },
  "application/vnd.veryant.thin": {
    "source": "iana"
  },
  "application/vnd.ves.encrypted": {
    "source": "iana"
  },
  "application/vnd.vidsoft.vidconference": {
    "source": "iana"
  },
  "application/vnd.visio": {
    "source": "iana",
    "extensions": ["vsd","vst","vss","vsw"]
  },
  "application/vnd.visionary": {
    "source": "iana",
    "extensions": ["vis"]
  },
  "application/vnd.vividence.scriptfile": {
    "source": "iana"
  },
  "application/vnd.vsf": {
    "source": "iana",
    "extensions": ["vsf"]
  },
  "application/vnd.wap.sic": {
    "source": "iana"
  },
  "application/vnd.wap.slc": {
    "source": "iana"
  },
  "application/vnd.wap.wbxml": {
    "source": "iana",
    "extensions": ["wbxml"]
  },
  "application/vnd.wap.wmlc": {
    "source": "iana",
    "extensions": ["wmlc"]
  },
  "application/vnd.wap.wmlscriptc": {
    "source": "iana",
    "extensions": ["wmlsc"]
  },
  "application/vnd.webturbo": {
    "source": "iana",
    "extensions": ["wtb"]
  },
  "application/vnd.wfa.p2p": {
    "source": "iana"
  },
  "application/vnd.wfa.wsc": {
    "source": "iana"
  },
  "application/vnd.windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.wmc": {
    "source": "iana"
  },
  "application/vnd.wmf.bootstrap": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica.package": {
    "source": "iana"
  },
  "application/vnd.wolfram.player": {
    "source": "iana",
    "extensions": ["nbp"]
  },
  "application/vnd.wordperfect": {
    "source": "iana",
    "extensions": ["wpd"]
  },
  "application/vnd.wqd": {
    "source": "iana",
    "extensions": ["wqd"]
  },
  "application/vnd.wrq-hp3000-labelled": {
    "source": "iana"
  },
  "application/vnd.wt.stf": {
    "source": "iana",
    "extensions": ["stf"]
  },
  "application/vnd.wv.csp+wbxml": {
    "source": "iana"
  },
  "application/vnd.wv.csp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.wv.ssp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xacml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xara": {
    "source": "iana",
    "extensions": ["xar"]
  },
  "application/vnd.xfdl": {
    "source": "iana",
    "extensions": ["xfdl"]
  },
  "application/vnd.xfdl.webform": {
    "source": "iana"
  },
  "application/vnd.xmi+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xmpie.cpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.dpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.plan": {
    "source": "iana"
  },
  "application/vnd.xmpie.ppkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.xlim": {
    "source": "iana"
  },
  "application/vnd.yamaha.hv-dic": {
    "source": "iana",
    "extensions": ["hvd"]
  },
  "application/vnd.yamaha.hv-script": {
    "source": "iana",
    "extensions": ["hvs"]
  },
  "application/vnd.yamaha.hv-voice": {
    "source": "iana",
    "extensions": ["hvp"]
  },
  "application/vnd.yamaha.openscoreformat": {
    "source": "iana",
    "extensions": ["osf"]
  },
  "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["osfpvg"]
  },
  "application/vnd.yamaha.remote-setup": {
    "source": "iana"
  },
  "application/vnd.yamaha.smaf-audio": {
    "source": "iana",
    "extensions": ["saf"]
  },
  "application/vnd.yamaha.smaf-phrase": {
    "source": "iana",
    "extensions": ["spf"]
  },
  "application/vnd.yamaha.through-ngn": {
    "source": "iana"
  },
  "application/vnd.yamaha.tunnel-udpencap": {
    "source": "iana"
  },
  "application/vnd.yaoweme": {
    "source": "iana"
  },
  "application/vnd.yellowriver-custom-menu": {
    "source": "iana",
    "extensions": ["cmp"]
  },
  "application/vnd.youtube.yt": {
    "source": "iana"
  },
  "application/vnd.zul": {
    "source": "iana",
    "extensions": ["zir","zirz"]
  },
  "application/vnd.zzazz.deck+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["zaz"]
  },
  "application/voicexml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["vxml"]
  },
  "application/voucher-cms+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vq-rtcpxr": {
    "source": "iana"
  },
  "application/wasm": {
    "compressible": true,
    "extensions": ["wasm"]
  },
  "application/watcherinfo+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/webpush-options+json": {
    "source": "iana",
    "compressible": true
  },
  "application/whoispp-query": {
    "source": "iana"
  },
  "application/whoispp-response": {
    "source": "iana"
  },
  "application/widget": {
    "source": "iana",
    "extensions": ["wgt"]
  },
  "application/winhlp": {
    "source": "apache",
    "extensions": ["hlp"]
  },
  "application/wita": {
    "source": "iana"
  },
  "application/wordperfect5.1": {
    "source": "iana"
  },
  "application/wsdl+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wsdl"]
  },
  "application/wspolicy+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["wspolicy"]
  },
  "application/x-7z-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["7z"]
  },
  "application/x-abiword": {
    "source": "apache",
    "extensions": ["abw"]
  },
  "application/x-ace-compressed": {
    "source": "apache",
    "extensions": ["ace"]
  },
  "application/x-amf": {
    "source": "apache"
  },
  "application/x-apple-diskimage": {
    "source": "apache",
    "extensions": ["dmg"]
  },
  "application/x-arj": {
    "compressible": false,
    "extensions": ["arj"]
  },
  "application/x-authorware-bin": {
    "source": "apache",
    "extensions": ["aab","x32","u32","vox"]
  },
  "application/x-authorware-map": {
    "source": "apache",
    "extensions": ["aam"]
  },
  "application/x-authorware-seg": {
    "source": "apache",
    "extensions": ["aas"]
  },
  "application/x-bcpio": {
    "source": "apache",
    "extensions": ["bcpio"]
  },
  "application/x-bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/x-bittorrent": {
    "source": "apache",
    "extensions": ["torrent"]
  },
  "application/x-blorb": {
    "source": "apache",
    "extensions": ["blb","blorb"]
  },
  "application/x-bzip": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz"]
  },
  "application/x-bzip2": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz2","boz"]
  },
  "application/x-cbr": {
    "source": "apache",
    "extensions": ["cbr","cba","cbt","cbz","cb7"]
  },
  "application/x-cdlink": {
    "source": "apache",
    "extensions": ["vcd"]
  },
  "application/x-cfs-compressed": {
    "source": "apache",
    "extensions": ["cfs"]
  },
  "application/x-chat": {
    "source": "apache",
    "extensions": ["chat"]
  },
  "application/x-chess-pgn": {
    "source": "apache",
    "extensions": ["pgn"]
  },
  "application/x-chrome-extension": {
    "extensions": ["crx"]
  },
  "application/x-cocoa": {
    "source": "nginx",
    "extensions": ["cco"]
  },
  "application/x-compress": {
    "source": "apache"
  },
  "application/x-conference": {
    "source": "apache",
    "extensions": ["nsc"]
  },
  "application/x-cpio": {
    "source": "apache",
    "extensions": ["cpio"]
  },
  "application/x-csh": {
    "source": "apache",
    "extensions": ["csh"]
  },
  "application/x-deb": {
    "compressible": false
  },
  "application/x-debian-package": {
    "source": "apache",
    "extensions": ["deb","udeb"]
  },
  "application/x-dgc-compressed": {
    "source": "apache",
    "extensions": ["dgc"]
  },
  "application/x-director": {
    "source": "apache",
    "extensions": ["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]
  },
  "application/x-doom": {
    "source": "apache",
    "extensions": ["wad"]
  },
  "application/x-dtbncx+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ncx"]
  },
  "application/x-dtbook+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["dtb"]
  },
  "application/x-dtbresource+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["res"]
  },
  "application/x-dvi": {
    "source": "apache",
    "compressible": false,
    "extensions": ["dvi"]
  },
  "application/x-envoy": {
    "source": "apache",
    "extensions": ["evy"]
  },
  "application/x-eva": {
    "source": "apache",
    "extensions": ["eva"]
  },
  "application/x-font-bdf": {
    "source": "apache",
    "extensions": ["bdf"]
  },
  "application/x-font-dos": {
    "source": "apache"
  },
  "application/x-font-framemaker": {
    "source": "apache"
  },
  "application/x-font-ghostscript": {
    "source": "apache",
    "extensions": ["gsf"]
  },
  "application/x-font-libgrx": {
    "source": "apache"
  },
  "application/x-font-linux-psf": {
    "source": "apache",
    "extensions": ["psf"]
  },
  "application/x-font-pcf": {
    "source": "apache",
    "extensions": ["pcf"]
  },
  "application/x-font-snf": {
    "source": "apache",
    "extensions": ["snf"]
  },
  "application/x-font-speedo": {
    "source": "apache"
  },
  "application/x-font-sunos-news": {
    "source": "apache"
  },
  "application/x-font-type1": {
    "source": "apache",
    "extensions": ["pfa","pfb","pfm","afm"]
  },
  "application/x-font-vfont": {
    "source": "apache"
  },
  "application/x-freearc": {
    "source": "apache",
    "extensions": ["arc"]
  },
  "application/x-futuresplash": {
    "source": "apache",
    "extensions": ["spl"]
  },
  "application/x-gca-compressed": {
    "source": "apache",
    "extensions": ["gca"]
  },
  "application/x-glulx": {
    "source": "apache",
    "extensions": ["ulx"]
  },
  "application/x-gnumeric": {
    "source": "apache",
    "extensions": ["gnumeric"]
  },
  "application/x-gramps-xml": {
    "source": "apache",
    "extensions": ["gramps"]
  },
  "application/x-gtar": {
    "source": "apache",
    "extensions": ["gtar"]
  },
  "application/x-gzip": {
    "source": "apache"
  },
  "application/x-hdf": {
    "source": "apache",
    "extensions": ["hdf"]
  },
  "application/x-httpd-php": {
    "compressible": true,
    "extensions": ["php"]
  },
  "application/x-install-instructions": {
    "source": "apache",
    "extensions": ["install"]
  },
  "application/x-iso9660-image": {
    "source": "apache",
    "extensions": ["iso"]
  },
  "application/x-java-archive-diff": {
    "source": "nginx",
    "extensions": ["jardiff"]
  },
  "application/x-java-jnlp-file": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jnlp"]
  },
  "application/x-javascript": {
    "compressible": true
  },
  "application/x-latex": {
    "source": "apache",
    "compressible": false,
    "extensions": ["latex"]
  },
  "application/x-lua-bytecode": {
    "extensions": ["luac"]
  },
  "application/x-lzh-compressed": {
    "source": "apache",
    "extensions": ["lzh","lha"]
  },
  "application/x-makeself": {
    "source": "nginx",
    "extensions": ["run"]
  },
  "application/x-mie": {
    "source": "apache",
    "extensions": ["mie"]
  },
  "application/x-mobipocket-ebook": {
    "source": "apache",
    "extensions": ["prc","mobi"]
  },
  "application/x-mpegurl": {
    "compressible": false
  },
  "application/x-ms-application": {
    "source": "apache",
    "extensions": ["application"]
  },
  "application/x-ms-shortcut": {
    "source": "apache",
    "extensions": ["lnk"]
  },
  "application/x-ms-wmd": {
    "source": "apache",
    "extensions": ["wmd"]
  },
  "application/x-ms-wmz": {
    "source": "apache",
    "extensions": ["wmz"]
  },
  "application/x-ms-xbap": {
    "source": "apache",
    "extensions": ["xbap"]
  },
  "application/x-msaccess": {
    "source": "apache",
    "extensions": ["mdb"]
  },
  "application/x-msbinder": {
    "source": "apache",
    "extensions": ["obd"]
  },
  "application/x-mscardfile": {
    "source": "apache",
    "extensions": ["crd"]
  },
  "application/x-msclip": {
    "source": "apache",
    "extensions": ["clp"]
  },
  "application/x-msdos-program": {
    "extensions": ["exe"]
  },
  "application/x-msdownload": {
    "source": "apache",
    "extensions": ["exe","dll","com","bat","msi"]
  },
  "application/x-msmediaview": {
    "source": "apache",
    "extensions": ["mvb","m13","m14"]
  },
  "application/x-msmetafile": {
    "source": "apache",
    "extensions": ["wmf","wmz","emf","emz"]
  },
  "application/x-msmoney": {
    "source": "apache",
    "extensions": ["mny"]
  },
  "application/x-mspublisher": {
    "source": "apache",
    "extensions": ["pub"]
  },
  "application/x-msschedule": {
    "source": "apache",
    "extensions": ["scd"]
  },
  "application/x-msterminal": {
    "source": "apache",
    "extensions": ["trm"]
  },
  "application/x-mswrite": {
    "source": "apache",
    "extensions": ["wri"]
  },
  "application/x-netcdf": {
    "source": "apache",
    "extensions": ["nc","cdf"]
  },
  "application/x-ns-proxy-autoconfig": {
    "compressible": true,
    "extensions": ["pac"]
  },
  "application/x-nzb": {
    "source": "apache",
    "extensions": ["nzb"]
  },
  "application/x-perl": {
    "source": "nginx",
    "extensions": ["pl","pm"]
  },
  "application/x-pilot": {
    "source": "nginx",
    "extensions": ["prc","pdb"]
  },
  "application/x-pkcs12": {
    "source": "apache",
    "compressible": false,
    "extensions": ["p12","pfx"]
  },
  "application/x-pkcs7-certificates": {
    "source": "apache",
    "extensions": ["p7b","spc"]
  },
  "application/x-pkcs7-certreqresp": {
    "source": "apache",
    "extensions": ["p7r"]
  },
  "application/x-rar-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["rar"]
  },
  "application/x-redhat-package-manager": {
    "source": "nginx",
    "extensions": ["rpm"]
  },
  "application/x-research-info-systems": {
    "source": "apache",
    "extensions": ["ris"]
  },
  "application/x-sea": {
    "source": "nginx",
    "extensions": ["sea"]
  },
  "application/x-sh": {
    "source": "apache",
    "compressible": true,
    "extensions": ["sh"]
  },
  "application/x-shar": {
    "source": "apache",
    "extensions": ["shar"]
  },
  "application/x-shockwave-flash": {
    "source": "apache",
    "compressible": false,
    "extensions": ["swf"]
  },
  "application/x-silverlight-app": {
    "source": "apache",
    "extensions": ["xap"]
  },
  "application/x-sql": {
    "source": "apache",
    "extensions": ["sql"]
  },
  "application/x-stuffit": {
    "source": "apache",
    "compressible": false,
    "extensions": ["sit"]
  },
  "application/x-stuffitx": {
    "source": "apache",
    "extensions": ["sitx"]
  },
  "application/x-subrip": {
    "source": "apache",
    "extensions": ["srt"]
  },
  "application/x-sv4cpio": {
    "source": "apache",
    "extensions": ["sv4cpio"]
  },
  "application/x-sv4crc": {
    "source": "apache",
    "extensions": ["sv4crc"]
  },
  "application/x-t3vm-image": {
    "source": "apache",
    "extensions": ["t3"]
  },
  "application/x-tads": {
    "source": "apache",
    "extensions": ["gam"]
  },
  "application/x-tar": {
    "source": "apache",
    "compressible": true,
    "extensions": ["tar"]
  },
  "application/x-tcl": {
    "source": "apache",
    "extensions": ["tcl","tk"]
  },
  "application/x-tex": {
    "source": "apache",
    "extensions": ["tex"]
  },
  "application/x-tex-tfm": {
    "source": "apache",
    "extensions": ["tfm"]
  },
  "application/x-texinfo": {
    "source": "apache",
    "extensions": ["texinfo","texi"]
  },
  "application/x-tgif": {
    "source": "apache",
    "extensions": ["obj"]
  },
  "application/x-ustar": {
    "source": "apache",
    "extensions": ["ustar"]
  },
  "application/x-virtualbox-hdd": {
    "compressible": true,
    "extensions": ["hdd"]
  },
  "application/x-virtualbox-ova": {
    "compressible": true,
    "extensions": ["ova"]
  },
  "application/x-virtualbox-ovf": {
    "compressible": true,
    "extensions": ["ovf"]
  },
  "application/x-virtualbox-vbox": {
    "compressible": true,
    "extensions": ["vbox"]
  },
  "application/x-virtualbox-vbox-extpack": {
    "compressible": false,
    "extensions": ["vbox-extpack"]
  },
  "application/x-virtualbox-vdi": {
    "compressible": true,
    "extensions": ["vdi"]
  },
  "application/x-virtualbox-vhd": {
    "compressible": true,
    "extensions": ["vhd"]
  },
  "application/x-virtualbox-vmdk": {
    "compressible": true,
    "extensions": ["vmdk"]
  },
  "application/x-wais-source": {
    "source": "apache",
    "extensions": ["src"]
  },
  "application/x-web-app-manifest+json": {
    "compressible": true,
    "extensions": ["webapp"]
  },
  "application/x-www-form-urlencoded": {
    "source": "iana",
    "compressible": true
  },
  "application/x-x509-ca-cert": {
    "source": "apache",
    "extensions": ["der","crt","pem"]
  },
  "application/x-xfig": {
    "source": "apache",
    "extensions": ["fig"]
  },
  "application/x-xliff+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xlf"]
  },
  "application/x-xpinstall": {
    "source": "apache",
    "compressible": false,
    "extensions": ["xpi"]
  },
  "application/x-xz": {
    "source": "apache",
    "extensions": ["xz"]
  },
  "application/x-zmachine": {
    "source": "apache",
    "extensions": ["z1","z2","z3","z4","z5","z6","z7","z8"]
  },
  "application/x400-bp": {
    "source": "iana"
  },
  "application/xacml+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xaml+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xaml"]
  },
  "application/xcap-att+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xcap-caps+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xcap-diff+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xdf"]
  },
  "application/xcap-el+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xcap-error+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xcap-ns+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xcon-conference-info+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xcon-conference-info-diff+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xenc+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xenc"]
  },
  "application/xhtml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xhtml","xht"]
  },
  "application/xhtml-voice+xml": {
    "source": "apache",
    "compressible": true
  },
  "application/xliff+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml","xsl","xsd","rng"]
  },
  "application/xml-dtd": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dtd"]
  },
  "application/xml-external-parsed-entity": {
    "source": "iana"
  },
  "application/xml-patch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xmpp+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/xop+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xop"]
  },
  "application/xproc+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xpl"]
  },
  "application/xslt+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xslt"]
  },
  "application/xspf+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["xspf"]
  },
  "application/xv+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["mxml","xhvml","xvml","xvm"]
  },
  "application/yang": {
    "source": "iana",
    "extensions": ["yang"]
  },
  "application/yang-data+json": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-data+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/yang-patch+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/yin+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["yin"]
  },
  "application/zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["zip"]
  },
  "application/zlib": {
    "source": "iana"
  },
  "application/zstd": {
    "source": "iana"
  },
  "audio/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "audio/32kadpcm": {
    "source": "iana"
  },
  "audio/3gpp": {
    "source": "iana",
    "compressible": false,
    "extensions": ["3gpp"]
  },
  "audio/3gpp2": {
    "source": "iana"
  },
  "audio/aac": {
    "source": "iana"
  },
  "audio/ac3": {
    "source": "iana"
  },
  "audio/adpcm": {
    "source": "apache",
    "extensions": ["adp"]
  },
  "audio/amr": {
    "source": "iana"
  },
  "audio/amr-wb": {
    "source": "iana"
  },
  "audio/amr-wb+": {
    "source": "iana"
  },
  "audio/aptx": {
    "source": "iana"
  },
  "audio/asc": {
    "source": "iana"
  },
  "audio/atrac-advanced-lossless": {
    "source": "iana"
  },
  "audio/atrac-x": {
    "source": "iana"
  },
  "audio/atrac3": {
    "source": "iana"
  },
  "audio/basic": {
    "source": "iana",
    "compressible": false,
    "extensions": ["au","snd"]
  },
  "audio/bv16": {
    "source": "iana"
  },
  "audio/bv32": {
    "source": "iana"
  },
  "audio/clearmode": {
    "source": "iana"
  },
  "audio/cn": {
    "source": "iana"
  },
  "audio/dat12": {
    "source": "iana"
  },
  "audio/dls": {
    "source": "iana"
  },
  "audio/dsr-es201108": {
    "source": "iana"
  },
  "audio/dsr-es202050": {
    "source": "iana"
  },
  "audio/dsr-es202211": {
    "source": "iana"
  },
  "audio/dsr-es202212": {
    "source": "iana"
  },
  "audio/dv": {
    "source": "iana"
  },
  "audio/dvi4": {
    "source": "iana"
  },
  "audio/eac3": {
    "source": "iana"
  },
  "audio/encaprtp": {
    "source": "iana"
  },
  "audio/evrc": {
    "source": "iana"
  },
  "audio/evrc-qcp": {
    "source": "iana"
  },
  "audio/evrc0": {
    "source": "iana"
  },
  "audio/evrc1": {
    "source": "iana"
  },
  "audio/evrcb": {
    "source": "iana"
  },
  "audio/evrcb0": {
    "source": "iana"
  },
  "audio/evrcb1": {
    "source": "iana"
  },
  "audio/evrcnw": {
    "source": "iana"
  },
  "audio/evrcnw0": {
    "source": "iana"
  },
  "audio/evrcnw1": {
    "source": "iana"
  },
  "audio/evrcwb": {
    "source": "iana"
  },
  "audio/evrcwb0": {
    "source": "iana"
  },
  "audio/evrcwb1": {
    "source": "iana"
  },
  "audio/evs": {
    "source": "iana"
  },
  "audio/flexfec": {
    "source": "iana"
  },
  "audio/fwdred": {
    "source": "iana"
  },
  "audio/g711-0": {
    "source": "iana"
  },
  "audio/g719": {
    "source": "iana"
  },
  "audio/g722": {
    "source": "iana"
  },
  "audio/g7221": {
    "source": "iana"
  },
  "audio/g723": {
    "source": "iana"
  },
  "audio/g726-16": {
    "source": "iana"
  },
  "audio/g726-24": {
    "source": "iana"
  },
  "audio/g726-32": {
    "source": "iana"
  },
  "audio/g726-40": {
    "source": "iana"
  },
  "audio/g728": {
    "source": "iana"
  },
  "audio/g729": {
    "source": "iana"
  },
  "audio/g7291": {
    "source": "iana"
  },
  "audio/g729d": {
    "source": "iana"
  },
  "audio/g729e": {
    "source": "iana"
  },
  "audio/gsm": {
    "source": "iana"
  },
  "audio/gsm-efr": {
    "source": "iana"
  },
  "audio/gsm-hr-08": {
    "source": "iana"
  },
  "audio/ilbc": {
    "source": "iana"
  },
  "audio/ip-mr_v2.5": {
    "source": "iana"
  },
  "audio/isac": {
    "source": "apache"
  },
  "audio/l16": {
    "source": "iana"
  },
  "audio/l20": {
    "source": "iana"
  },
  "audio/l24": {
    "source": "iana",
    "compressible": false
  },
  "audio/l8": {
    "source": "iana"
  },
  "audio/lpc": {
    "source": "iana"
  },
  "audio/melp": {
    "source": "iana"
  },
  "audio/melp1200": {
    "source": "iana"
  },
  "audio/melp2400": {
    "source": "iana"
  },
  "audio/melp600": {
    "source": "iana"
  },
  "audio/midi": {
    "source": "apache",
    "extensions": ["mid","midi","kar","rmi"]
  },
  "audio/mobile-xmf": {
    "source": "iana"
  },
  "audio/mp3": {
    "compressible": false,
    "extensions": ["mp3"]
  },
  "audio/mp4": {
    "source": "iana",
    "compressible": false,
    "extensions": ["m4a","mp4a"]
  },
  "audio/mp4a-latm": {
    "source": "iana"
  },
  "audio/mpa": {
    "source": "iana"
  },
  "audio/mpa-robust": {
    "source": "iana"
  },
  "audio/mpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mpga","mp2","mp2a","mp3","m2a","m3a"]
  },
  "audio/mpeg4-generic": {
    "source": "iana"
  },
  "audio/musepack": {
    "source": "apache"
  },
  "audio/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["oga","ogg","spx"]
  },
  "audio/opus": {
    "source": "iana"
  },
  "audio/parityfec": {
    "source": "iana"
  },
  "audio/pcma": {
    "source": "iana"
  },
  "audio/pcma-wb": {
    "source": "iana"
  },
  "audio/pcmu": {
    "source": "iana"
  },
  "audio/pcmu-wb": {
    "source": "iana"
  },
  "audio/prs.sid": {
    "source": "iana"
  },
  "audio/qcelp": {
    "source": "iana"
  },
  "audio/raptorfec": {
    "source": "iana"
  },
  "audio/red": {
    "source": "iana"
  },
  "audio/rtp-enc-aescm128": {
    "source": "iana"
  },
  "audio/rtp-midi": {
    "source": "iana"
  },
  "audio/rtploopback": {
    "source": "iana"
  },
  "audio/rtx": {
    "source": "iana"
  },
  "audio/s3m": {
    "source": "apache",
    "extensions": ["s3m"]
  },
  "audio/silk": {
    "source": "apache",
    "extensions": ["sil"]
  },
  "audio/smv": {
    "source": "iana"
  },
  "audio/smv-qcp": {
    "source": "iana"
  },
  "audio/smv0": {
    "source": "iana"
  },
  "audio/sp-midi": {
    "source": "iana"
  },
  "audio/speex": {
    "source": "iana"
  },
  "audio/t140c": {
    "source": "iana"
  },
  "audio/t38": {
    "source": "iana"
  },
  "audio/telephone-event": {
    "source": "iana"
  },
  "audio/tetra_acelp": {
    "source": "iana"
  },
  "audio/tone": {
    "source": "iana"
  },
  "audio/uemclip": {
    "source": "iana"
  },
  "audio/ulpfec": {
    "source": "iana"
  },
  "audio/usac": {
    "source": "iana"
  },
  "audio/vdvi": {
    "source": "iana"
  },
  "audio/vmr-wb": {
    "source": "iana"
  },
  "audio/vnd.3gpp.iufp": {
    "source": "iana"
  },
  "audio/vnd.4sb": {
    "source": "iana"
  },
  "audio/vnd.audiokoz": {
    "source": "iana"
  },
  "audio/vnd.celp": {
    "source": "iana"
  },
  "audio/vnd.cisco.nse": {
    "source": "iana"
  },
  "audio/vnd.cmles.radio-events": {
    "source": "iana"
  },
  "audio/vnd.cns.anp1": {
    "source": "iana"
  },
  "audio/vnd.cns.inf1": {
    "source": "iana"
  },
  "audio/vnd.dece.audio": {
    "source": "iana",
    "extensions": ["uva","uvva"]
  },
  "audio/vnd.digital-winds": {
    "source": "iana",
    "extensions": ["eol"]
  },
  "audio/vnd.dlna.adts": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.1": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.2": {
    "source": "iana"
  },
  "audio/vnd.dolby.mlp": {
    "source": "iana"
  },
  "audio/vnd.dolby.mps": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2x": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2z": {
    "source": "iana"
  },
  "audio/vnd.dolby.pulse.1": {
    "source": "iana"
  },
  "audio/vnd.dra": {
    "source": "iana",
    "extensions": ["dra"]
  },
  "audio/vnd.dts": {
    "source": "iana",
    "extensions": ["dts"]
  },
  "audio/vnd.dts.hd": {
    "source": "iana",
    "extensions": ["dtshd"]
  },
  "audio/vnd.dts.uhd": {
    "source": "iana"
  },
  "audio/vnd.dvb.file": {
    "source": "iana"
  },
  "audio/vnd.everad.plj": {
    "source": "iana"
  },
  "audio/vnd.hns.audio": {
    "source": "iana"
  },
  "audio/vnd.lucent.voice": {
    "source": "iana",
    "extensions": ["lvp"]
  },
  "audio/vnd.ms-playready.media.pya": {
    "source": "iana",
    "extensions": ["pya"]
  },
  "audio/vnd.nokia.mobile-xmf": {
    "source": "iana"
  },
  "audio/vnd.nortel.vbk": {
    "source": "iana"
  },
  "audio/vnd.nuera.ecelp4800": {
    "source": "iana",
    "extensions": ["ecelp4800"]
  },
  "audio/vnd.nuera.ecelp7470": {
    "source": "iana",
    "extensions": ["ecelp7470"]
  },
  "audio/vnd.nuera.ecelp9600": {
    "source": "iana",
    "extensions": ["ecelp9600"]
  },
  "audio/vnd.octel.sbc": {
    "source": "iana"
  },
  "audio/vnd.presonus.multitrack": {
    "source": "iana"
  },
  "audio/vnd.qcelp": {
    "source": "iana"
  },
  "audio/vnd.rhetorex.32kadpcm": {
    "source": "iana"
  },
  "audio/vnd.rip": {
    "source": "iana",
    "extensions": ["rip"]
  },
  "audio/vnd.rn-realaudio": {
    "compressible": false
  },
  "audio/vnd.sealedmedia.softseal.mpeg": {
    "source": "iana"
  },
  "audio/vnd.vmx.cvsd": {
    "source": "iana"
  },
  "audio/vnd.wave": {
    "compressible": false
  },
  "audio/vorbis": {
    "source": "iana",
    "compressible": false
  },
  "audio/vorbis-config": {
    "source": "iana"
  },
  "audio/wav": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/wave": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["weba"]
  },
  "audio/x-aac": {
    "source": "apache",
    "compressible": false,
    "extensions": ["aac"]
  },
  "audio/x-aiff": {
    "source": "apache",
    "extensions": ["aif","aiff","aifc"]
  },
  "audio/x-caf": {
    "source": "apache",
    "compressible": false,
    "extensions": ["caf"]
  },
  "audio/x-flac": {
    "source": "apache",
    "extensions": ["flac"]
  },
  "audio/x-m4a": {
    "source": "nginx",
    "extensions": ["m4a"]
  },
  "audio/x-matroska": {
    "source": "apache",
    "extensions": ["mka"]
  },
  "audio/x-mpegurl": {
    "source": "apache",
    "extensions": ["m3u"]
  },
  "audio/x-ms-wax": {
    "source": "apache",
    "extensions": ["wax"]
  },
  "audio/x-ms-wma": {
    "source": "apache",
    "extensions": ["wma"]
  },
  "audio/x-pn-realaudio": {
    "source": "apache",
    "extensions": ["ram","ra"]
  },
  "audio/x-pn-realaudio-plugin": {
    "source": "apache",
    "extensions": ["rmp"]
  },
  "audio/x-realaudio": {
    "source": "nginx",
    "extensions": ["ra"]
  },
  "audio/x-tta": {
    "source": "apache"
  },
  "audio/x-wav": {
    "source": "apache",
    "extensions": ["wav"]
  },
  "audio/xm": {
    "source": "apache",
    "extensions": ["xm"]
  },
  "chemical/x-cdx": {
    "source": "apache",
    "extensions": ["cdx"]
  },
  "chemical/x-cif": {
    "source": "apache",
    "extensions": ["cif"]
  },
  "chemical/x-cmdf": {
    "source": "apache",
    "extensions": ["cmdf"]
  },
  "chemical/x-cml": {
    "source": "apache",
    "extensions": ["cml"]
  },
  "chemical/x-csml": {
    "source": "apache",
    "extensions": ["csml"]
  },
  "chemical/x-pdb": {
    "source": "apache"
  },
  "chemical/x-xyz": {
    "source": "apache",
    "extensions": ["xyz"]
  },
  "font/collection": {
    "source": "iana",
    "extensions": ["ttc"]
  },
  "font/otf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["otf"]
  },
  "font/sfnt": {
    "source": "iana"
  },
  "font/ttf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ttf"]
  },
  "font/woff": {
    "source": "iana",
    "extensions": ["woff"]
  },
  "font/woff2": {
    "source": "iana",
    "extensions": ["woff2"]
  },
  "image/aces": {
    "source": "iana",
    "extensions": ["exr"]
  },
  "image/apng": {
    "compressible": false,
    "extensions": ["apng"]
  },
  "image/avci": {
    "source": "iana"
  },
  "image/avcs": {
    "source": "iana"
  },
  "image/bmp": {
    "source": "iana",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/cgm": {
    "source": "iana",
    "extensions": ["cgm"]
  },
  "image/dicom-rle": {
    "source": "iana",
    "extensions": ["drle"]
  },
  "image/emf": {
    "source": "iana",
    "extensions": ["emf"]
  },
  "image/fits": {
    "source": "iana",
    "extensions": ["fits"]
  },
  "image/g3fax": {
    "source": "iana",
    "extensions": ["g3"]
  },
  "image/gif": {
    "source": "iana",
    "compressible": false,
    "extensions": ["gif"]
  },
  "image/heic": {
    "source": "iana",
    "extensions": ["heic"]
  },
  "image/heic-sequence": {
    "source": "iana",
    "extensions": ["heics"]
  },
  "image/heif": {
    "source": "iana",
    "extensions": ["heif"]
  },
  "image/heif-sequence": {
    "source": "iana",
    "extensions": ["heifs"]
  },
  "image/hej2k": {
    "source": "iana",
    "extensions": ["hej2"]
  },
  "image/hsj2": {
    "source": "iana",
    "extensions": ["hsj2"]
  },
  "image/ief": {
    "source": "iana",
    "extensions": ["ief"]
  },
  "image/jls": {
    "source": "iana",
    "extensions": ["jls"]
  },
  "image/jp2": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jp2","jpg2"]
  },
  "image/jpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpeg","jpg","jpe"]
  },
  "image/jph": {
    "source": "iana",
    "extensions": ["jph"]
  },
  "image/jphc": {
    "source": "iana",
    "extensions": ["jhc"]
  },
  "image/jpm": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpm"]
  },
  "image/jpx": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpx","jpf"]
  },
  "image/jxr": {
    "source": "iana",
    "extensions": ["jxr"]
  },
  "image/jxra": {
    "source": "iana",
    "extensions": ["jxra"]
  },
  "image/jxrs": {
    "source": "iana",
    "extensions": ["jxrs"]
  },
  "image/jxs": {
    "source": "iana",
    "extensions": ["jxs"]
  },
  "image/jxsc": {
    "source": "iana",
    "extensions": ["jxsc"]
  },
  "image/jxsi": {
    "source": "iana",
    "extensions": ["jxsi"]
  },
  "image/jxss": {
    "source": "iana",
    "extensions": ["jxss"]
  },
  "image/ktx": {
    "source": "iana",
    "extensions": ["ktx"]
  },
  "image/naplps": {
    "source": "iana"
  },
  "image/pjpeg": {
    "compressible": false
  },
  "image/png": {
    "source": "iana",
    "compressible": false,
    "extensions": ["png"]
  },
  "image/prs.btif": {
    "source": "iana",
    "extensions": ["btif"]
  },
  "image/prs.pti": {
    "source": "iana",
    "extensions": ["pti"]
  },
  "image/pwg-raster": {
    "source": "iana"
  },
  "image/sgi": {
    "source": "apache",
    "extensions": ["sgi"]
  },
  "image/svg+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["svg","svgz"]
  },
  "image/t38": {
    "source": "iana",
    "extensions": ["t38"]
  },
  "image/tiff": {
    "source": "iana",
    "compressible": false,
    "extensions": ["tif","tiff"]
  },
  "image/tiff-fx": {
    "source": "iana",
    "extensions": ["tfx"]
  },
  "image/vnd.adobe.photoshop": {
    "source": "iana",
    "compressible": true,
    "extensions": ["psd"]
  },
  "image/vnd.airzip.accelerator.azv": {
    "source": "iana",
    "extensions": ["azv"]
  },
  "image/vnd.cns.inf2": {
    "source": "iana"
  },
  "image/vnd.dece.graphic": {
    "source": "iana",
    "extensions": ["uvi","uvvi","uvg","uvvg"]
  },
  "image/vnd.djvu": {
    "source": "iana",
    "extensions": ["djvu","djv"]
  },
  "image/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "image/vnd.dwg": {
    "source": "iana",
    "extensions": ["dwg"]
  },
  "image/vnd.dxf": {
    "source": "iana",
    "extensions": ["dxf"]
  },
  "image/vnd.fastbidsheet": {
    "source": "iana",
    "extensions": ["fbs"]
  },
  "image/vnd.fpx": {
    "source": "iana",
    "extensions": ["fpx"]
  },
  "image/vnd.fst": {
    "source": "iana",
    "extensions": ["fst"]
  },
  "image/vnd.fujixerox.edmics-mmr": {
    "source": "iana",
    "extensions": ["mmr"]
  },
  "image/vnd.fujixerox.edmics-rlc": {
    "source": "iana",
    "extensions": ["rlc"]
  },
  "image/vnd.globalgraphics.pgb": {
    "source": "iana"
  },
  "image/vnd.microsoft.icon": {
    "source": "iana",
    "extensions": ["ico"]
  },
  "image/vnd.mix": {
    "source": "iana"
  },
  "image/vnd.mozilla.apng": {
    "source": "iana"
  },
  "image/vnd.ms-dds": {
    "extensions": ["dds"]
  },
  "image/vnd.ms-modi": {
    "source": "iana",
    "extensions": ["mdi"]
  },
  "image/vnd.ms-photo": {
    "source": "apache",
    "extensions": ["wdp"]
  },
  "image/vnd.net-fpx": {
    "source": "iana",
    "extensions": ["npx"]
  },
  "image/vnd.radiance": {
    "source": "iana"
  },
  "image/vnd.sealed.png": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.gif": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.jpg": {
    "source": "iana"
  },
  "image/vnd.svf": {
    "source": "iana"
  },
  "image/vnd.tencent.tap": {
    "source": "iana",
    "extensions": ["tap"]
  },
  "image/vnd.valve.source.texture": {
    "source": "iana",
    "extensions": ["vtf"]
  },
  "image/vnd.wap.wbmp": {
    "source": "iana",
    "extensions": ["wbmp"]
  },
  "image/vnd.xiff": {
    "source": "iana",
    "extensions": ["xif"]
  },
  "image/vnd.zbrush.pcx": {
    "source": "iana",
    "extensions": ["pcx"]
  },
  "image/webp": {
    "source": "apache",
    "extensions": ["webp"]
  },
  "image/wmf": {
    "source": "iana",
    "extensions": ["wmf"]
  },
  "image/x-3ds": {
    "source": "apache",
    "extensions": ["3ds"]
  },
  "image/x-cmu-raster": {
    "source": "apache",
    "extensions": ["ras"]
  },
  "image/x-cmx": {
    "source": "apache",
    "extensions": ["cmx"]
  },
  "image/x-freehand": {
    "source": "apache",
    "extensions": ["fh","fhc","fh4","fh5","fh7"]
  },
  "image/x-icon": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ico"]
  },
  "image/x-jng": {
    "source": "nginx",
    "extensions": ["jng"]
  },
  "image/x-mrsid-image": {
    "source": "apache",
    "extensions": ["sid"]
  },
  "image/x-ms-bmp": {
    "source": "nginx",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/x-pcx": {
    "source": "apache",
    "extensions": ["pcx"]
  },
  "image/x-pict": {
    "source": "apache",
    "extensions": ["pic","pct"]
  },
  "image/x-portable-anymap": {
    "source": "apache",
    "extensions": ["pnm"]
  },
  "image/x-portable-bitmap": {
    "source": "apache",
    "extensions": ["pbm"]
  },
  "image/x-portable-graymap": {
    "source": "apache",
    "extensions": ["pgm"]
  },
  "image/x-portable-pixmap": {
    "source": "apache",
    "extensions": ["ppm"]
  },
  "image/x-rgb": {
    "source": "apache",
    "extensions": ["rgb"]
  },
  "image/x-tga": {
    "source": "apache",
    "extensions": ["tga"]
  },
  "image/x-xbitmap": {
    "source": "apache",
    "extensions": ["xbm"]
  },
  "image/x-xcf": {
    "compressible": false
  },
  "image/x-xpixmap": {
    "source": "apache",
    "extensions": ["xpm"]
  },
  "image/x-xwindowdump": {
    "source": "apache",
    "extensions": ["xwd"]
  },
  "message/cpim": {
    "source": "iana"
  },
  "message/delivery-status": {
    "source": "iana"
  },
  "message/disposition-notification": {
    "source": "iana",
    "extensions": [
      "disposition-notification"
    ]
  },
  "message/external-body": {
    "source": "iana"
  },
  "message/feedback-report": {
    "source": "iana"
  },
  "message/global": {
    "source": "iana",
    "extensions": ["u8msg"]
  },
  "message/global-delivery-status": {
    "source": "iana",
    "extensions": ["u8dsn"]
  },
  "message/global-disposition-notification": {
    "source": "iana",
    "extensions": ["u8mdn"]
  },
  "message/global-headers": {
    "source": "iana",
    "extensions": ["u8hdr"]
  },
  "message/http": {
    "source": "iana",
    "compressible": false
  },
  "message/imdn+xml": {
    "source": "iana",
    "compressible": true
  },
  "message/news": {
    "source": "iana"
  },
  "message/partial": {
    "source": "iana",
    "compressible": false
  },
  "message/rfc822": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eml","mime"]
  },
  "message/s-http": {
    "source": "iana"
  },
  "message/sip": {
    "source": "iana"
  },
  "message/sipfrag": {
    "source": "iana"
  },
  "message/tracking-status": {
    "source": "iana"
  },
  "message/vnd.si.simp": {
    "source": "iana"
  },
  "message/vnd.wfa.wsc": {
    "source": "iana",
    "extensions": ["wsc"]
  },
  "model/3mf": {
    "source": "iana",
    "extensions": ["3mf"]
  },
  "model/gltf+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["gltf"]
  },
  "model/gltf-binary": {
    "source": "iana",
    "compressible": true,
    "extensions": ["glb"]
  },
  "model/iges": {
    "source": "iana",
    "compressible": false,
    "extensions": ["igs","iges"]
  },
  "model/mesh": {
    "source": "iana",
    "compressible": false,
    "extensions": ["msh","mesh","silo"]
  },
  "model/stl": {
    "source": "iana",
    "extensions": ["stl"]
  },
  "model/vnd.collada+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dae"]
  },
  "model/vnd.dwf": {
    "source": "iana",
    "extensions": ["dwf"]
  },
  "model/vnd.flatland.3dml": {
    "source": "iana"
  },
  "model/vnd.gdl": {
    "source": "iana",
    "extensions": ["gdl"]
  },
  "model/vnd.gs-gdl": {
    "source": "apache"
  },
  "model/vnd.gs.gdl": {
    "source": "iana"
  },
  "model/vnd.gtw": {
    "source": "iana",
    "extensions": ["gtw"]
  },
  "model/vnd.moml+xml": {
    "source": "iana",
    "compressible": true
  },
  "model/vnd.mts": {
    "source": "iana",
    "extensions": ["mts"]
  },
  "model/vnd.opengex": {
    "source": "iana",
    "extensions": ["ogex"]
  },
  "model/vnd.parasolid.transmit.binary": {
    "source": "iana",
    "extensions": ["x_b"]
  },
  "model/vnd.parasolid.transmit.text": {
    "source": "iana",
    "extensions": ["x_t"]
  },
  "model/vnd.rosette.annotated-data-model": {
    "source": "iana"
  },
  "model/vnd.usdz+zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["usdz"]
  },
  "model/vnd.valve.source.compiled-map": {
    "source": "iana",
    "extensions": ["bsp"]
  },
  "model/vnd.vtu": {
    "source": "iana",
    "extensions": ["vtu"]
  },
  "model/vrml": {
    "source": "iana",
    "compressible": false,
    "extensions": ["wrl","vrml"]
  },
  "model/x3d+binary": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3db","x3dbz"]
  },
  "model/x3d+fastinfoset": {
    "source": "iana",
    "extensions": ["x3db"]
  },
  "model/x3d+vrml": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3dv","x3dvz"]
  },
  "model/x3d+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["x3d","x3dz"]
  },
  "model/x3d-vrml": {
    "source": "iana",
    "extensions": ["x3dv"]
  },
  "multipart/alternative": {
    "source": "iana",
    "compressible": false
  },
  "multipart/appledouble": {
    "source": "iana"
  },
  "multipart/byteranges": {
    "source": "iana"
  },
  "multipart/digest": {
    "source": "iana"
  },
  "multipart/encrypted": {
    "source": "iana",
    "compressible": false
  },
  "multipart/form-data": {
    "source": "iana",
    "compressible": false
  },
  "multipart/header-set": {
    "source": "iana"
  },
  "multipart/mixed": {
    "source": "iana"
  },
  "multipart/multilingual": {
    "source": "iana"
  },
  "multipart/parallel": {
    "source": "iana"
  },
  "multipart/related": {
    "source": "iana",
    "compressible": false
  },
  "multipart/report": {
    "source": "iana"
  },
  "multipart/signed": {
    "source": "iana",
    "compressible": false
  },
  "multipart/vnd.bint.med-plus": {
    "source": "iana"
  },
  "multipart/voice-message": {
    "source": "iana"
  },
  "multipart/x-mixed-replace": {
    "source": "iana"
  },
  "text/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "text/cache-manifest": {
    "source": "iana",
    "compressible": true,
    "extensions": ["appcache","manifest"]
  },
  "text/calendar": {
    "source": "iana",
    "extensions": ["ics","ifb"]
  },
  "text/calender": {
    "compressible": true
  },
  "text/cmd": {
    "compressible": true
  },
  "text/coffeescript": {
    "extensions": ["coffee","litcoffee"]
  },
  "text/css": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["css"]
  },
  "text/csv": {
    "source": "iana",
    "compressible": true,
    "extensions": ["csv"]
  },
  "text/csv-schema": {
    "source": "iana"
  },
  "text/directory": {
    "source": "iana"
  },
  "text/dns": {
    "source": "iana"
  },
  "text/ecmascript": {
    "source": "iana"
  },
  "text/encaprtp": {
    "source": "iana"
  },
  "text/enriched": {
    "source": "iana"
  },
  "text/flexfec": {
    "source": "iana"
  },
  "text/fwdred": {
    "source": "iana"
  },
  "text/grammar-ref-list": {
    "source": "iana"
  },
  "text/html": {
    "source": "iana",
    "compressible": true,
    "extensions": ["html","htm","shtml"]
  },
  "text/jade": {
    "extensions": ["jade"]
  },
  "text/javascript": {
    "source": "iana",
    "compressible": true
  },
  "text/jcr-cnd": {
    "source": "iana"
  },
  "text/jsx": {
    "compressible": true,
    "extensions": ["jsx"]
  },
  "text/less": {
    "compressible": true,
    "extensions": ["less"]
  },
  "text/markdown": {
    "source": "iana",
    "compressible": true,
    "extensions": ["markdown","md"]
  },
  "text/mathml": {
    "source": "nginx",
    "extensions": ["mml"]
  },
  "text/mdx": {
    "compressible": true,
    "extensions": ["mdx"]
  },
  "text/mizar": {
    "source": "iana"
  },
  "text/n3": {
    "source": "iana",
    "compressible": true,
    "extensions": ["n3"]
  },
  "text/parameters": {
    "source": "iana"
  },
  "text/parityfec": {
    "source": "iana"
  },
  "text/plain": {
    "source": "iana",
    "compressible": true,
    "extensions": ["txt","text","conf","def","list","log","in","ini"]
  },
  "text/provenance-notation": {
    "source": "iana"
  },
  "text/prs.fallenstein.rst": {
    "source": "iana"
  },
  "text/prs.lines.tag": {
    "source": "iana",
    "extensions": ["dsc"]
  },
  "text/prs.prop.logic": {
    "source": "iana"
  },
  "text/raptorfec": {
    "source": "iana"
  },
  "text/red": {
    "source": "iana"
  },
  "text/rfc822-headers": {
    "source": "iana"
  },
  "text/richtext": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtx"]
  },
  "text/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "text/rtp-enc-aescm128": {
    "source": "iana"
  },
  "text/rtploopback": {
    "source": "iana"
  },
  "text/rtx": {
    "source": "iana"
  },
  "text/sgml": {
    "source": "iana",
    "extensions": ["sgml","sgm"]
  },
  "text/shex": {
    "extensions": ["shex"]
  },
  "text/slim": {
    "extensions": ["slim","slm"]
  },
  "text/strings": {
    "source": "iana"
  },
  "text/stylus": {
    "extensions": ["stylus","styl"]
  },
  "text/t140": {
    "source": "iana"
  },
  "text/tab-separated-values": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tsv"]
  },
  "text/troff": {
    "source": "iana",
    "extensions": ["t","tr","roff","man","me","ms"]
  },
  "text/turtle": {
    "source": "iana",
    "charset": "UTF-8",
    "extensions": ["ttl"]
  },
  "text/ulpfec": {
    "source": "iana"
  },
  "text/uri-list": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uri","uris","urls"]
  },
  "text/vcard": {
    "source": "iana",
    "compressible": true,
    "extensions": ["vcard"]
  },
  "text/vnd.a": {
    "source": "iana"
  },
  "text/vnd.abc": {
    "source": "iana"
  },
  "text/vnd.ascii-art": {
    "source": "iana"
  },
  "text/vnd.curl": {
    "source": "iana",
    "extensions": ["curl"]
  },
  "text/vnd.curl.dcurl": {
    "source": "apache",
    "extensions": ["dcurl"]
  },
  "text/vnd.curl.mcurl": {
    "source": "apache",
    "extensions": ["mcurl"]
  },
  "text/vnd.curl.scurl": {
    "source": "apache",
    "extensions": ["scurl"]
  },
  "text/vnd.debian.copyright": {
    "source": "iana"
  },
  "text/vnd.dmclientscript": {
    "source": "iana"
  },
  "text/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "text/vnd.esmertec.theme-descriptor": {
    "source": "iana"
  },
  "text/vnd.ficlab.flt": {
    "source": "iana"
  },
  "text/vnd.fly": {
    "source": "iana",
    "extensions": ["fly"]
  },
  "text/vnd.fmi.flexstor": {
    "source": "iana",
    "extensions": ["flx"]
  },
  "text/vnd.gml": {
    "source": "iana"
  },
  "text/vnd.graphviz": {
    "source": "iana",
    "extensions": ["gv"]
  },
  "text/vnd.hgl": {
    "source": "iana"
  },
  "text/vnd.in3d.3dml": {
    "source": "iana",
    "extensions": ["3dml"]
  },
  "text/vnd.in3d.spot": {
    "source": "iana",
    "extensions": ["spot"]
  },
  "text/vnd.iptc.newsml": {
    "source": "iana"
  },
  "text/vnd.iptc.nitf": {
    "source": "iana"
  },
  "text/vnd.latex-z": {
    "source": "iana"
  },
  "text/vnd.motorola.reflex": {
    "source": "iana"
  },
  "text/vnd.ms-mediapackage": {
    "source": "iana"
  },
  "text/vnd.net2phone.commcenter.command": {
    "source": "iana"
  },
  "text/vnd.radisys.msml-basic-layout": {
    "source": "iana"
  },
  "text/vnd.senx.warpscript": {
    "source": "iana"
  },
  "text/vnd.si.uricatalogue": {
    "source": "iana"
  },
  "text/vnd.sosi": {
    "source": "iana"
  },
  "text/vnd.sun.j2me.app-descriptor": {
    "source": "iana",
    "extensions": ["jad"]
  },
  "text/vnd.trolltech.linguist": {
    "source": "iana"
  },
  "text/vnd.wap.si": {
    "source": "iana"
  },
  "text/vnd.wap.sl": {
    "source": "iana"
  },
  "text/vnd.wap.wml": {
    "source": "iana",
    "extensions": ["wml"]
  },
  "text/vnd.wap.wmlscript": {
    "source": "iana",
    "extensions": ["wmls"]
  },
  "text/vtt": {
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["vtt"]
  },
  "text/x-asm": {
    "source": "apache",
    "extensions": ["s","asm"]
  },
  "text/x-c": {
    "source": "apache",
    "extensions": ["c","cc","cxx","cpp","h","hh","dic"]
  },
  "text/x-component": {
    "source": "nginx",
    "extensions": ["htc"]
  },
  "text/x-fortran": {
    "source": "apache",
    "extensions": ["f","for","f77","f90"]
  },
  "text/x-gwt-rpc": {
    "compressible": true
  },
  "text/x-handlebars-template": {
    "extensions": ["hbs"]
  },
  "text/x-java-source": {
    "source": "apache",
    "extensions": ["java"]
  },
  "text/x-jquery-tmpl": {
    "compressible": true
  },
  "text/x-lua": {
    "extensions": ["lua"]
  },
  "text/x-markdown": {
    "compressible": true,
    "extensions": ["mkd"]
  },
  "text/x-nfo": {
    "source": "apache",
    "extensions": ["nfo"]
  },
  "text/x-opml": {
    "source": "apache",
    "extensions": ["opml"]
  },
  "text/x-org": {
    "compressible": true,
    "extensions": ["org"]
  },
  "text/x-pascal": {
    "source": "apache",
    "extensions": ["p","pas"]
  },
  "text/x-processing": {
    "compressible": true,
    "extensions": ["pde"]
  },
  "text/x-sass": {
    "extensions": ["sass"]
  },
  "text/x-scss": {
    "extensions": ["scss"]
  },
  "text/x-setext": {
    "source": "apache",
    "extensions": ["etx"]
  },
  "text/x-sfv": {
    "source": "apache",
    "extensions": ["sfv"]
  },
  "text/x-suse-ymp": {
    "compressible": true,
    "extensions": ["ymp"]
  },
  "text/x-uuencode": {
    "source": "apache",
    "extensions": ["uu"]
  },
  "text/x-vcalendar": {
    "source": "apache",
    "extensions": ["vcs"]
  },
  "text/x-vcard": {
    "source": "apache",
    "extensions": ["vcf"]
  },
  "text/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml"]
  },
  "text/xml-external-parsed-entity": {
    "source": "iana"
  },
  "text/yaml": {
    "extensions": ["yaml","yml"]
  },
  "video/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "video/3gpp": {
    "source": "iana",
    "extensions": ["3gp","3gpp"]
  },
  "video/3gpp-tt": {
    "source": "iana"
  },
  "video/3gpp2": {
    "source": "iana",
    "extensions": ["3g2"]
  },
  "video/bmpeg": {
    "source": "iana"
  },
  "video/bt656": {
    "source": "iana"
  },
  "video/celb": {
    "source": "iana"
  },
  "video/dv": {
    "source": "iana"
  },
  "video/encaprtp": {
    "source": "iana"
  },
  "video/flexfec": {
    "source": "iana"
  },
  "video/h261": {
    "source": "iana",
    "extensions": ["h261"]
  },
  "video/h263": {
    "source": "iana",
    "extensions": ["h263"]
  },
  "video/h263-1998": {
    "source": "iana"
  },
  "video/h263-2000": {
    "source": "iana"
  },
  "video/h264": {
    "source": "iana",
    "extensions": ["h264"]
  },
  "video/h264-rcdo": {
    "source": "iana"
  },
  "video/h264-svc": {
    "source": "iana"
  },
  "video/h265": {
    "source": "iana"
  },
  "video/iso.segment": {
    "source": "iana"
  },
  "video/jpeg": {
    "source": "iana",
    "extensions": ["jpgv"]
  },
  "video/jpeg2000": {
    "source": "iana"
  },
  "video/jpm": {
    "source": "apache",
    "extensions": ["jpm","jpgm"]
  },
  "video/mj2": {
    "source": "iana",
    "extensions": ["mj2","mjp2"]
  },
  "video/mp1s": {
    "source": "iana"
  },
  "video/mp2p": {
    "source": "iana"
  },
  "video/mp2t": {
    "source": "iana",
    "extensions": ["ts"]
  },
  "video/mp4": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mp4","mp4v","mpg4"]
  },
  "video/mp4v-es": {
    "source": "iana"
  },
  "video/mpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mpeg","mpg","mpe","m1v","m2v"]
  },
  "video/mpeg4-generic": {
    "source": "iana"
  },
  "video/mpv": {
    "source": "iana"
  },
  "video/nv": {
    "source": "iana"
  },
  "video/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ogv"]
  },
  "video/parityfec": {
    "source": "iana"
  },
  "video/pointer": {
    "source": "iana"
  },
  "video/quicktime": {
    "source": "iana",
    "compressible": false,
    "extensions": ["qt","mov"]
  },
  "video/raptorfec": {
    "source": "iana"
  },
  "video/raw": {
    "source": "iana"
  },
  "video/rtp-enc-aescm128": {
    "source": "iana"
  },
  "video/rtploopback": {
    "source": "iana"
  },
  "video/rtx": {
    "source": "iana"
  },
  "video/smpte291": {
    "source": "iana"
  },
  "video/smpte292m": {
    "source": "iana"
  },
  "video/ulpfec": {
    "source": "iana"
  },
  "video/vc1": {
    "source": "iana"
  },
  "video/vc2": {
    "source": "iana"
  },
  "video/vnd.cctv": {
    "source": "iana"
  },
  "video/vnd.dece.hd": {
    "source": "iana",
    "extensions": ["uvh","uvvh"]
  },
  "video/vnd.dece.mobile": {
    "source": "iana",
    "extensions": ["uvm","uvvm"]
  },
  "video/vnd.dece.mp4": {
    "source": "iana"
  },
  "video/vnd.dece.pd": {
    "source": "iana",
    "extensions": ["uvp","uvvp"]
  },
  "video/vnd.dece.sd": {
    "source": "iana",
    "extensions": ["uvs","uvvs"]
  },
  "video/vnd.dece.video": {
    "source": "iana",
    "extensions": ["uvv","uvvv"]
  },
  "video/vnd.directv.mpeg": {
    "source": "iana"
  },
  "video/vnd.directv.mpeg-tts": {
    "source": "iana"
  },
  "video/vnd.dlna.mpeg-tts": {
    "source": "iana"
  },
  "video/vnd.dvb.file": {
    "source": "iana",
    "extensions": ["dvb"]
  },
  "video/vnd.fvt": {
    "source": "iana",
    "extensions": ["fvt"]
  },
  "video/vnd.hns.video": {
    "source": "iana"
  },
  "video/vnd.iptvforum.1dparityfec-1010": {
    "source": "iana"
  },
  "video/vnd.iptvforum.1dparityfec-2005": {
    "source": "iana"
  },
  "video/vnd.iptvforum.2dparityfec-1010": {
    "source": "iana"
  },
  "video/vnd.iptvforum.2dparityfec-2005": {
    "source": "iana"
  },
  "video/vnd.iptvforum.ttsavc": {
    "source": "iana"
  },
  "video/vnd.iptvforum.ttsmpeg2": {
    "source": "iana"
  },
  "video/vnd.motorola.video": {
    "source": "iana"
  },
  "video/vnd.motorola.videop": {
    "source": "iana"
  },
  "video/vnd.mpegurl": {
    "source": "iana",
    "extensions": ["mxu","m4u"]
  },
  "video/vnd.ms-playready.media.pyv": {
    "source": "iana",
    "extensions": ["pyv"]
  },
  "video/vnd.nokia.interleaved-multimedia": {
    "source": "iana"
  },
  "video/vnd.nokia.mp4vr": {
    "source": "iana"
  },
  "video/vnd.nokia.videovoip": {
    "source": "iana"
  },
  "video/vnd.objectvideo": {
    "source": "iana"
  },
  "video/vnd.radgamettools.bink": {
    "source": "iana"
  },
  "video/vnd.radgamettools.smacker": {
    "source": "iana"
  },
  "video/vnd.sealed.mpeg1": {
    "source": "iana"
  },
  "video/vnd.sealed.mpeg4": {
    "source": "iana"
  },
  "video/vnd.sealed.swf": {
    "source": "iana"
  },
  "video/vnd.sealedmedia.softseal.mov": {
    "source": "iana"
  },
  "video/vnd.uvvu.mp4": {
    "source": "iana",
    "extensions": ["uvu","uvvu"]
  },
  "video/vnd.vivo": {
    "source": "iana",
    "extensions": ["viv"]
  },
  "video/vnd.youtube.yt": {
    "source": "iana"
  },
  "video/vp8": {
    "source": "iana"
  },
  "video/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["webm"]
  },
  "video/x-f4v": {
    "source": "apache",
    "extensions": ["f4v"]
  },
  "video/x-fli": {
    "source": "apache",
    "extensions": ["fli"]
  },
  "video/x-flv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["flv"]
  },
  "video/x-m4v": {
    "source": "apache",
    "extensions": ["m4v"]
  },
  "video/x-matroska": {
    "source": "apache",
    "compressible": false,
    "extensions": ["mkv","mk3d","mks"]
  },
  "video/x-mng": {
    "source": "apache",
    "extensions": ["mng"]
  },
  "video/x-ms-asf": {
    "source": "apache",
    "extensions": ["asf","asx"]
  },
  "video/x-ms-vob": {
    "source": "apache",
    "extensions": ["vob"]
  },
  "video/x-ms-wm": {
    "source": "apache",
    "extensions": ["wm"]
  },
  "video/x-ms-wmv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["wmv"]
  },
  "video/x-ms-wmx": {
    "source": "apache",
    "extensions": ["wmx"]
  },
  "video/x-ms-wvx": {
    "source": "apache",
    "extensions": ["wvx"]
  },
  "video/x-msvideo": {
    "source": "apache",
    "extensions": ["avi"]
  },
  "video/x-sgi-movie": {
    "source": "apache",
    "extensions": ["movie"]
  },
  "video/x-smv": {
    "source": "apache",
    "extensions": ["smv"]
  },
  "x-conference/x-cooltalk": {
    "source": "apache",
    "extensions": ["ice"]
  },
  "x-shader/x-fragment": {
    "compressible": true
  },
  "x-shader/x-vertex": {
    "compressible": true
  }
}

},{}],478:[function(require,module,exports){
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */

/**
 * Module exports.
 */

module.exports = require('./db.json')

},{"./db.json":477}],479:[function(require,module,exports){
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module dependencies.
 * @private
 */

var db = require('mime-db')
var extname = require('path').extname

/**
 * Module variables.
 * @private
 */

var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/
var TEXT_TYPE_REGEXP = /^text\//i

/**
 * Module exports.
 * @public
 */

exports.charset = charset
exports.charsets = { lookup: charset }
exports.contentType = contentType
exports.extension = extension
exports.extensions = Object.create(null)
exports.lookup = lookup
exports.types = Object.create(null)

// Populate the extensions/types maps
populateMaps(exports.extensions, exports.types)

/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function charset (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type)
  var mime = match && db[match[1].toLowerCase()]

  if (mime && mime.charset) {
    return mime.charset
  }

  // default text/* to utf-8
  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
    return 'UTF-8'
  }

  return false
}

/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */

function contentType (str) {
  // TODO: should this even be in this module?
  if (!str || typeof str !== 'string') {
    return false
  }

  var mime = str.indexOf('/') === -1
    ? exports.lookup(str)
    : str

  if (!mime) {
    return false
  }

  // TODO: use content-type or other module
  if (mime.indexOf('charset') === -1) {
    var charset = exports.charset(mime)
    if (charset) mime += '; charset=' + charset.toLowerCase()
  }

  return mime
}

/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */

function extension (type) {
  if (!type || typeof type !== 'string') {
    return false
  }

  // TODO: use media-typer
  var match = EXTRACT_TYPE_REGEXP.exec(type)

  // get extensions
  var exts = match && exports.extensions[match[1].toLowerCase()]

  if (!exts || !exts.length) {
    return false
  }

  return exts[0]
}

/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */

function lookup (path) {
  if (!path || typeof path !== 'string') {
    return false
  }

  // get the extension ("ext" or ".ext" or full path)
  var extension = extname('x.' + path)
    .toLowerCase()
    .substr(1)

  if (!extension) {
    return false
  }

  return exports.types[extension] || false
}

/**
 * Populate the extensions and types maps.
 * @private
 */

function populateMaps (extensions, types) {
  // source preference (least -> most)
  var preference = ['nginx', 'apache', undefined, 'iana']

  Object.keys(db).forEach(function forEachMimeType (type) {
    var mime = db[type]
    var exts = mime.extensions

    if (!exts || !exts.length) {
      return
    }

    // mime -> extensions
    extensions[type] = exts

    // extension -> mime
    for (var i = 0; i < exts.length; i++) {
      var extension = exts[i]

      if (types[extension]) {
        var from = preference.indexOf(db[types[extension]].source)
        var to = preference.indexOf(mime.source)

        if (types[extension] !== 'application/octet-stream' &&
          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {
          // skip the remapping
          continue
        }
      }

      // set the extension -> mime
      types[extension] = type
    }
  })
}

},{"mime-db":478,"path":14}],480:[function(require,module,exports){
'use strict';

const mimicFn = (to, from) => {
	for (const prop of Reflect.ownKeys(from)) {
		Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
	}

	return to;
};

module.exports = mimicFn;
module.exports.default = mimicFn;

},{}],481:[function(require,module,exports){
'use strict';

// We define these manually to ensure they're always copied
// even if they would move up the prototype chain
// https://nodejs.org/api/http.html#http_class_http_incomingmessage
const knownProps = [
	'destroy',
	'setTimeout',
	'socket',
	'headers',
	'trailers',
	'rawHeaders',
	'statusCode',
	'httpVersion',
	'httpVersionMinor',
	'httpVersionMajor',
	'rawTrailers',
	'statusMessage'
];

module.exports = (fromStream, toStream) => {
	const fromProps = new Set(Object.keys(fromStream).concat(knownProps));

	for (const prop of fromProps) {
		// Don't overwrite existing properties
		if (prop in toStream) {
			continue;
		}

		toStream[prop] = typeof fromStream[prop] === 'function' ? fromStream[prop].bind(fromStream) : fromStream[prop];
	}
};

},{}],482:[function(require,module,exports){
//! moment.js locale configuration

;(function (global, factory) {
   typeof exports === 'object' && typeof module !== 'undefined'
       && typeof require === 'function' ? factory(require('../moment')) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


var fr = moment.defineLocale('fr', {
    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
    monthsParseExact : true,
    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Aujourd’hui à] LT',
        nextDay : '[Demain à] LT',
        nextWeek : 'dddd [à] LT',
        lastDay : '[Hier à] LT',
        lastWeek : 'dddd [dernier à] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dans %s',
        past : 'il y a %s',
        s : 'quelques secondes',
        ss : '%d secondes',
        m : 'une minute',
        mm : '%d minutes',
        h : 'une heure',
        hh : '%d heures',
        d : 'un jour',
        dd : '%d jours',
        M : 'un mois',
        MM : '%d mois',
        y : 'un an',
        yy : '%d ans'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
    ordinal : function (number, period) {
        switch (period) {
            // TODO: Return 'e' when day of month > 1. Move this case inside
            // block for masculine words below.
            // See https://github.com/moment/moment/issues/3375
            case 'D':
                return number + (number === 1 ? 'er' : '');

            // Words with masculine grammatical gender: mois, trimestre, jour
            default:
            case 'M':
            case 'Q':
            case 'DDD':
            case 'd':
                return number + (number === 1 ? 'er' : 'e');

            // Words with feminine grammatical gender: semaine
            case 'w':
            case 'W':
                return number + (number === 1 ? 're' : 'e');
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

return fr;

})));

},{"../moment":483}],483:[function(require,module,exports){
//! moment.js

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

var hookCallback;

function hooks () {
    return hookCallback.apply(null, arguments);
}

// This is done to register the method called with moment()
// without creating circular dependencies.
function setHookCallback (callback) {
    hookCallback = callback;
}

function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
}

function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
}

function isObjectEmpty(obj) {
    if (Object.getOwnPropertyNames) {
        return (Object.getOwnPropertyNames(obj).length === 0);
    } else {
        var k;
        for (k in obj) {
            if (obj.hasOwnProperty(k)) {
                return false;
            }
        }
        return true;
    }
}

function isUndefined(input) {
    return input === void 0;
}

function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
}

function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
}

function map(arr, fn) {
    var res = [], i;
    for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
    }
    return res;
}

function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}

function extend(a, b) {
    for (var i in b) {
        if (hasOwnProp(b, i)) {
            a[i] = b[i];
        }
    }

    if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
    }

    return a;
}

function createUTC (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
}

function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false,
        parsedDateParts : [],
        meridiem        : null,
        rfc2822         : false,
        weekdayMismatch : false
    };
}

function getParsingFlags(m) {
    if (m._pf == null) {
        m._pf = defaultParsingFlags();
    }
    return m._pf;
}

var some;
if (Array.prototype.some) {
    some = Array.prototype.some;
} else {
    some = function (fun) {
        var t = Object(this);
        var len = t.length >>> 0;

        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
                return true;
            }
        }

        return false;
    };
}

function isValid(m) {
    if (m._isValid == null) {
        var flags = getParsingFlags(m);
        var parsedParts = some.call(flags.parsedDateParts, function (i) {
            return i != null;
        });
        var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.weekdayMismatch &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

        if (m._strict) {
            isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
        }

        if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
        }
        else {
            return isNowValid;
        }
    }
    return m._isValid;
}

function createInvalid (flags) {
    var m = createUTC(NaN);
    if (flags != null) {
        extend(getParsingFlags(m), flags);
    }
    else {
        getParsingFlags(m).userInvalidated = true;
    }

    return m;
}

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
        to._i = from._i;
    }
    if (!isUndefined(from._f)) {
        to._f = from._f;
    }
    if (!isUndefined(from._l)) {
        to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
        to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
        to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
        to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
        for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
                to[prop] = val;
            }
        }
    }

    return to;
}

var updateInProgress = false;

// Moment prototype object
function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
        this._d = new Date(NaN);
    }
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    }
}

function isMoment (obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
}

function absFloor (number) {
    if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
    } else {
        return Math.floor(number);
    }
}

function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
    }

    return value;
}

// compare two arrays, return the number of differences
function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
            diffs++;
        }
    }
    return diffs + lengthDiff;
}

function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) {
        console.warn('Deprecation warning: ' + msg);
    }
}

function deprecate(msg, fn) {
    var firstTime = true;

    return extend(function () {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
                arg = '';
                if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                } else {
                    arg = arguments[i];
                }
                args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        }
        return fn.apply(this, arguments);
    }, fn);
}

var deprecations = {};

function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
    }
}

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}

function set (config) {
    var prop, i;
    for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
            this[i] = prop;
        } else {
            this['_' + i] = prop;
        }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
    // TODO: Remove "ordinalParse" fallback in next major release.
    this._dayOfMonthOrdinalParseLenient = new RegExp(
        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
            '|' + (/\d{1,2}/).source);
}

function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig), prop;
    for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
            } else {
                delete res[prop];
            }
        }
    }
    for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
        }
    }
    return res;
}

function Locale(config) {
    if (config != null) {
        this.set(config);
    }
}

var keys;

if (Object.keys) {
    keys = Object.keys;
} else {
    keys = function (obj) {
        var i, res = [];
        for (i in obj) {
            if (hasOwnProp(obj, i)) {
                res.push(i);
            }
        }
        return res;
    };
}

var defaultCalendar = {
    sameDay : '[Today at] LT',
    nextDay : '[Tomorrow at] LT',
    nextWeek : 'dddd [at] LT',
    lastDay : '[Yesterday at] LT',
    lastWeek : '[Last] dddd [at] LT',
    sameElse : 'L'
};

function calendar (key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
}

var defaultLongDateFormat = {
    LTS  : 'h:mm:ss A',
    LT   : 'h:mm A',
    L    : 'MM/DD/YYYY',
    LL   : 'MMMM D, YYYY',
    LLL  : 'MMMM D, YYYY h:mm A',
    LLLL : 'dddd, MMMM D, YYYY h:mm A'
};

function longDateFormat (key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
        return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1);
    });

    return this._longDateFormat[key];
}

var defaultInvalidDate = 'Invalid date';

function invalidDate () {
    return this._invalidDate;
}

var defaultOrdinal = '%d';
var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

function ordinal (number) {
    return this._ordinal.replace('%d', number);
}

var defaultRelativeTime = {
    future : 'in %s',
    past   : '%s ago',
    s  : 'a few seconds',
    ss : '%d seconds',
    m  : 'a minute',
    mm : '%d minutes',
    h  : 'an hour',
    hh : '%d hours',
    d  : 'a day',
    dd : '%d days',
    M  : 'a month',
    MM : '%d months',
    y  : 'a year',
    yy : '%d years'
};

function relativeTime (number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return (isFunction(output)) ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
}

function pastFuture (diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
}

var aliases = {};

function addUnitAlias (unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
}

function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
}

function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
            }
        }
    }

    return normalizedInput;
}

var priorities = {};

function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
}

function getPrioritizedUnits(unitsObj) {
    var units = [];
    for (var u in unitsObj) {
        units.push({unit: u, priority: priorities[u]});
    }
    units.sort(function (a, b) {
        return a.priority - b.priority;
    });
    return units;
}

function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}

var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

var formatFunctions = {};

var formatTokenFunctions = {};

// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () { this.month() + 1 }
function addFormatToken (token, padded, ordinal, callback) {
    var func = callback;
    if (typeof callback === 'string') {
        func = function () {
            return this[callback]();
        };
    }
    if (token) {
        formatTokenFunctions[token] = func;
    }
    if (padded) {
        formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
    }
    if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
}

function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
}

function makeFormatFunction(format) {
    var array = format.match(formattingTokens), i, length;

    for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
        } else {
            array[i] = removeFormattingTokens(array[i]);
        }
    }

    return function (mom) {
        var output = '', i;
        for (i = 0; i < length; i++) {
            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
        }
        return output;
    };
}

// format date using native date object
function formatMoment(m, format) {
    if (!m.isValid()) {
        return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
}

function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
    }

    return format;
}

var match1         = /\d/;            //       0 - 9
var match2         = /\d\d/;          //      00 - 99
var match3         = /\d{3}/;         //     000 - 999
var match4         = /\d{4}/;         //    0000 - 9999
var match6         = /[+-]?\d{6}/;    // -999999 - 999999
var match1to2      = /\d\d?/;         //       0 - 99
var match3to4      = /\d\d\d\d?/;     //     999 - 9999
var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
var match1to3      = /\d{1,3}/;       //       0 - 999
var match1to4      = /\d{1,4}/;       //       0 - 9999
var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

var matchUnsigned  = /\d+/;           //       0 - inf
var matchSigned    = /[+-]?\d+/;      //    -inf - inf

var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

var regexes = {};

function addRegexToken (token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return (isStrict && strictRegex) ? strictRegex : regex;
    };
}

function getParseRegexForToken (token, config) {
    if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
}

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
    }));
}

function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}

var tokens = {};

function addParseToken (token, callback) {
    var i, func = callback;
    if (typeof token === 'string') {
        token = [token];
    }
    if (isNumber(callback)) {
        func = function (input, array) {
            array[callback] = toInt(input);
        };
    }
    for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
    }
}

function addWeekParseToken (token, callback) {
    addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
    });
}

function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
    }
}

var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;

// FORMATTING

addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
});

addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
});

addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
});

// HELPERS

function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}

// HOOKS

hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
};

// MOMENTS

var getSetYear = makeGetSet('FullYear', true);

function getIsLeapYear () {
    return isLeapYear(this.year());
}

function makeGetSet (unit, keepTime) {
    return function (value) {
        if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        } else {
            return get(this, unit);
        }
    };
}

function get (mom, unit) {
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}

function set$1 (mom, unit, value) {
    if (mom.isValid() && !isNaN(value)) {
        if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
        }
        else {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }
}

// MOMENTS

function stringGet (units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
        return this[units]();
    }
    return this;
}


function stringSet (units, value) {
    if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
        }
    } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units](value);
        }
    }
    return this;
}

function mod(n, x) {
    return ((n % x) + x) % x;
}

var indexOf;

if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
} else {
    indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
                return i;
            }
        }
        return -1;
    };
}

function daysInMonth(year, month) {
    if (isNaN(year) || isNaN(month)) {
        return NaN;
    }
    var modMonth = mod(month, 12);
    year += (month - modMonth) / 12;
    return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
}

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
});

addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
});

addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
});

// ALIASES

addUnitAlias('month', 'M');

// PRIORITY

addUnitPriority('month', 8);

// PARSING

addRegexToken('M',    match1to2);
addRegexToken('MM',   match1to2, match2);
addRegexToken('MMM',  function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
});
addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
});

addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
});

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
        array[MONTH] = month;
    } else {
        getParsingFlags(config).invalidMonth = input;
    }
});

// LOCALES

var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
function localeMonths (m, format) {
    if (!m) {
        return isArray(this._months) ? this._months :
            this._months['standalone'];
    }
    return isArray(this._months) ? this._months[m.month()] :
        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
}

var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
function localeMonthsShort (m, format) {
    if (!m) {
        return isArray(this._monthsShort) ? this._monthsShort :
            this._monthsShort['standalone'];
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
}

function handleStrictParse(monthName, format, strict) {
    var i, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeMonthsParse (monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
        }
    }
}

// MOMENTS

function setMonth (mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
        // No op
        return mom;
    }

    if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
            value = toInt(value);
        } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
                return mom;
            }
        }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
}

function getSetMonth (value) {
    if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    } else {
        return get(this, 'Month');
    }
}

function getDaysInMonth () {
    return daysInMonth(this.year(), this.month());
}

var defaultMonthsShortRegex = matchWord;
function monthsShortRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsShortStrictRegex;
        } else {
            return this._monthsShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ?
            this._monthsShortStrictRegex : this._monthsShortRegex;
    }
}

var defaultMonthsRegex = matchWord;
function monthsRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsStrictRegex;
        } else {
            return this._monthsRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ?
            this._monthsStrictRegex : this._monthsRegex;
    }
}

function computeMonthsParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom;
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''));
    }
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
}

function createDate (y, m, d, h, M, s, ms) {
    // can't just apply() to create a date:
    // https://stackoverflow.com/q/181348
    var date = new Date(y, m, d, h, M, s, ms);

    // the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y);
    }
    return date;
}

function createUTCDate (y) {
    var date = new Date(Date.UTC.apply(null, arguments));

    // the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
    }
    return date;
}

// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
}

// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear, resDayOfYear;

    if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
    } else {
        resYear = year;
        resDayOfYear = dayOfYear;
    }

    return {
        year: resYear,
        dayOfYear: resDayOfYear
    };
}

function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek, resYear;

    if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
    } else {
        resYear = mom.year();
        resWeek = week;
    }

    return {
        week: resWeek,
        year: resYear
    };
}

function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}

// FORMATTING

addFormatToken('w', ['ww', 2], 'wo', 'week');
addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

// ALIASES

addUnitAlias('week', 'w');
addUnitAlias('isoWeek', 'W');

// PRIORITIES

addUnitPriority('week', 5);
addUnitPriority('isoWeek', 5);

// PARSING

addRegexToken('w',  match1to2);
addRegexToken('ww', match1to2, match2);
addRegexToken('W',  match1to2);
addRegexToken('WW', match1to2, match2);

addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
});

// HELPERS

// LOCALES

function localeWeek (mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
}

var defaultLocaleWeek = {
    dow : 0, // Sunday is the first day of the week.
    doy : 6  // The week that contains Jan 1st is the first week of the year.
};

function localeFirstDayOfWeek () {
    return this._week.dow;
}

function localeFirstDayOfYear () {
    return this._week.doy;
}

// MOMENTS

function getSetWeek (input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
}

function getSetISOWeek (input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
}

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
});

addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
});

addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
});

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
});
addRegexToken('ddd',   function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
});
addRegexToken('dddd',   function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
});

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
        week.d = weekday;
    } else {
        getParsingFlags(config).invalidWeekday = input;
    }
});

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
});

// HELPERS

function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
        return input;
    }

    if (!isNaN(input)) {
        return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
        return input;
    }

    return null;
}

function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
}

// LOCALES

var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
function localeWeekdays (m, format) {
    if (!m) {
        return isArray(this._weekdays) ? this._weekdays :
            this._weekdays['standalone'];
    }
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
}

var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
function localeWeekdaysShort (m) {
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}

var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
function localeWeekdaysMin (m) {
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}

function handleStrictParse$1(weekdayName, format, strict) {
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeWeekdaysParse (weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
        }
    }
}

// MOMENTS

function getSetDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    } else {
        return day;
    }
}

function getSetLocaleDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
}

function getSetISODayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
        return this.day() || 7;
    }
}

var defaultWeekdaysRegex = matchWord;
function weekdaysRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysStrictRegex;
        } else {
            return this._weekdaysRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    }
}

var defaultWeekdaysShortRegex = matchWord;
function weekdaysShortRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysShortStrictRegex;
        } else {
            return this._weekdaysShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
}

var defaultWeekdaysMinRegex = matchWord;
function weekdaysMinRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysMinStrictRegex;
        } else {
            return this._weekdaysMinRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
}


function computeWeekdaysParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
}

// FORMATTING

function hFormat() {
    return this.hours() % 12 || 12;
}

function kFormat() {
    return this.hours() || 24;
}

addFormatToken('H', ['HH', 2], 0, 'hour');
addFormatToken('h', ['hh', 2], 0, hFormat);
addFormatToken('k', ['kk', 2], 0, kFormat);

addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});

addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
});

addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

function meridiem (token, lowercase) {
    addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
}

meridiem('a', true);
meridiem('A', false);

// ALIASES

addUnitAlias('hour', 'h');

// PRIORITY
addUnitPriority('hour', 13);

// PARSING

function matchMeridiem (isStrict, locale) {
    return locale._meridiemParse;
}

addRegexToken('a',  matchMeridiem);
addRegexToken('A',  matchMeridiem);
addRegexToken('H',  match1to2);
addRegexToken('h',  match1to2);
addRegexToken('k',  match1to2);
addRegexToken('HH', match1to2, match2);
addRegexToken('hh', match1to2, match2);
addRegexToken('kk', match1to2, match2);

addRegexToken('hmm', match3to4);
addRegexToken('hmmss', match5to6);
addRegexToken('Hmm', match3to4);
addRegexToken('Hmmss', match5to6);

addParseToken(['H', 'HH'], HOUR);
addParseToken(['k', 'kk'], function (input, array, config) {
    var kInput = toInt(input);
    array[HOUR] = kInput === 24 ? 0 : kInput;
});
addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
});
addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
});
addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
});
addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
});

// LOCALES

function localeIsPM (input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
}

var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem (hours, minutes, isLower) {
    if (hours > 11) {
        return isLower ? 'pm' : 'PM';
    } else {
        return isLower ? 'am' : 'AM';
    }
}


// MOMENTS

// Setting the hour should keep the time, because the user explicitly
// specified which hour he wants. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
var getSetHour = makeGetSet('Hours', true);

var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse
};

// internal storage for locale config files
var locales = {};
var localeFamilies = {};
var globalLocale;

function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
}

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) {
    var i = 0, j, next, locale, split;

    while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
                return locale;
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                //the next array item is better than a shallower substring of this one
                break;
            }
            j--;
        }
        i++;
    }
    return globalLocale;
}

function loadLocale(name) {
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
        try {
            oldLocale = globalLocale._abbr;
            var aliasedRequire = require;
            aliasedRequire('./locale/' + name);
            getSetGlobalLocale(oldLocale);
        } catch (e) {}
    }
    return locales[name];
}

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function getSetGlobalLocale (key, values) {
    var data;
    if (key) {
        if (isUndefined(values)) {
            data = getLocale(key);
        }
        else {
            data = defineLocale(key, values);
        }

        if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        }
        else {
            if ((typeof console !==  'undefined') && console.warn) {
                //warn user if arguments are passed but the locale could not be set
                console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
            }
        }
    }

    return globalLocale._abbr;
}

function defineLocale (name, config) {
    if (config !== null) {
        var locale, parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
                parentConfig = locales[config.parentLocale]._config;
            } else {
                locale = loadLocale(config.parentLocale);
                if (locale != null) {
                    parentConfig = locale._config;
                } else {
                    if (!localeFamilies[config.parentLocale]) {
                        localeFamilies[config.parentLocale] = [];
                    }
                    localeFamilies[config.parentLocale].push({
                        name: name,
                        config: config
                    });
                    return null;
                }
            }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
                defineLocale(x.name, x.config);
            });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    } else {
        // useful for testing
        delete locales[name];
        return null;
    }
}

function updateLocale(name, config) {
    if (config != null) {
        var locale, tmpLocale, parentConfig = baseConfig;
        // MERGE
        tmpLocale = loadLocale(name);
        if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
        }
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
                delete locales[name];
            }
        }
    }
    return locales[name];
}

// returns locale data
function getLocale (key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
    }

    if (!key) {
        return globalLocale;
    }

    if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
            return locale;
        }
        key = [key];
    }

    return chooseLocale(key);
}

function listLocales() {
    return keys(locales);
}

function checkOverflow (m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
        overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
        }

        getParsingFlags(m).overflow = overflow;
    }

    return m;
}

// Pick the first defined of two or three arguments.
function defaults(a, b, c) {
    if (a != null) {
        return a;
    }
    if (b != null) {
        return b;
    }
    return c;
}

function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function configFromArray (config) {
    var i, date, input = [], currentDate, expectedWeekday, yearToUse;

    if (config._d) {
        return;
    }

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
    }

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear != null) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
        }

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    }

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
    }

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
        config._a[HOUR] = 24;
    }

    // check for mismatching day of week
    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
        getParsingFlags(config).weekdayMismatch = true;
    }
}

function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
        }
    } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
            }
        } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
            }
        } else {
            // default to begining of week
            weekday = dow;
        }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
    } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
}

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    ['YYYY-DDD', /\d{4}-\d{3}/],
    ['YYYY-MM', /\d{4}-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d{10}/],
    ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/],
    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    ['YYYYDDD', /\d{7}/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
function configFromISO(config) {
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) {
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
        }
        if (dateFormat == null) {
            config._isValid = false;
            return;
        }
        if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (timeFormat == null) {
                config._isValid = false;
                return;
            }
        }
        if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
        }
        if (match[4]) {
            if (tzRegex.exec(match[4])) {
                tzFormat = 'Z';
            } else {
                config._isValid = false;
                return;
            }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    } else {
        config._isValid = false;
    }
}

// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    var result = [
        untruncateYear(yearStr),
        defaultLocaleMonthsShort.indexOf(monthStr),
        parseInt(dayStr, 10),
        parseInt(hourStr, 10),
        parseInt(minuteStr, 10)
    ];

    if (secondStr) {
        result.push(parseInt(secondStr, 10));
    }

    return result;
}

function untruncateYear(yearStr) {
    var year = parseInt(yearStr, 10);
    if (year <= 49) {
        return 2000 + year;
    } else if (year <= 999) {
        return 1900 + year;
    }
    return year;
}

function preprocessRFC2822(s) {
    // Remove comments and folding whitespace and replace multiple-spaces with a single space
    return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').trim();
}

function checkWeekday(weekdayStr, parsedInput, config) {
    if (weekdayStr) {
        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
            weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
        if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
        }
    }
    return true;
}

var obsOffsets = {
    UT: 0,
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60
};

function calculateOffset(obsOffset, militaryOffset, numOffset) {
    if (obsOffset) {
        return obsOffsets[obsOffset];
    } else if (militaryOffset) {
        // the only allowed military tz is Z
        return 0;
    } else {
        var hm = parseInt(numOffset, 10);
        var m = hm % 100, h = (hm - m) / 100;
        return h * 60 + m;
    }
}

// date and time from ref 2822 format
function configFromRFC2822(config) {
    var match = rfc2822.exec(preprocessRFC2822(config._i));
    if (match) {
        var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
        if (!checkWeekday(match[1], parsedArray, config)) {
            return;
        }

        config._a = parsedArray;
        config._tzm = calculateOffset(match[8], match[9], match[10]);

        config._d = createUTCDate.apply(null, config._a);
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

        getParsingFlags(config).rfc2822 = true;
    } else {
        config._isValid = false;
    }
}

// date from iso format or fallback
function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
    }

    configFromISO(config);
    if (config._isValid === false) {
        delete config._isValid;
    } else {
        return;
    }

    configFromRFC2822(config);
    if (config._isValid === false) {
        delete config._isValid;
    } else {
        return;
    }

    // Final attempt, use Input Fallback
    hooks.createFromInputFallback(config);
}

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    }
);

// constant that refers to the ISO standard
hooks.ISO_8601 = function () {};

// constant that refers to the RFC 2822 form
hooks.RFC_2822 = function () {};

// date from string and format string
function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
    }
    if (config._f === hooks.RFC_2822) {
        configFromRFC2822(config);
        return;
    }
    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
            if (parsedInput) {
                getParsingFlags(config).empty = false;
            }
            else {
                getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
        }
        else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
        }
    }

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
    }

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
}


function meridiemFixWrap (locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
        // nothing to do
        return hour;
    }
    if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
            hour += 12;
        }
        if (!isPm && hour === 12) {
            hour = 0;
        }
        return hour;
    } else {
        // this is not supposed to happen
        return hour;
    }
}

// date from string and array of format strings
function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

    if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    }

    for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!isValid(tempConfig)) {
            continue;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
        }
    }

    extend(config, bestMoment || tempConfig);
}

function configFromObject(config) {
    if (config._d) {
        return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
    });

    configFromArray(config);
}

function createFromConfig (config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    }

    return res;
}

function prepareConfig (config) {
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) {
        return createInvalid({nullInput: true});
    }

    if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
        return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
        config._d = input;
    } else if (isArray(format)) {
        configFromStringAndArray(config);
    } else if (format) {
        configFromStringAndFormat(config);
    }  else {
        configFromInput(config);
    }

    if (!isValid(config)) {
        config._d = null;
    }

    return config;
}

function configFromInput(config) {
    var input = config._i;
    if (isUndefined(input)) {
        config._d = new Date(hooks.now());
    } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
        configFromString(config);
    } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
        });
        configFromArray(config);
    } else if (isObject(input)) {
        configFromObject(config);
    } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
    } else {
        hooks.createFromInputFallback(config);
    }
}

function createLocalOrUTC (input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
    }

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) {
        input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
}

function createLocal (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
}

var prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

var prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function pickBy(fn, moments) {
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
    }
    if (!moments.length) {
        return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
        }
    }
    return res;
}

// TODO: Use [].sort instead?
function min () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
}

function max () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
}

var now = function () {
    return Date.now ? Date.now() : +(new Date());
};

var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

function isDurationValid(m) {
    for (var key in m) {
        if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
        }
    }

    var unitHasDecimal = false;
    for (var i = 0; i < ordering.length; ++i) {
        if (m[ordering[i]]) {
            if (unitHasDecimal) {
                return false; // only allow non-integers for smallest unit
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                unitHasDecimal = true;
            }
        }
    }

    return true;
}

function isValid$1() {
    return this._isValid;
}

function createInvalid$1() {
    return createDuration(NaN);
}

function Duration (duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

    this._isValid = isDurationValid(normalizedInput);

    // representation for dateAddRemove
    this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days +
        weeks * 7;
    // It is impossible to translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months +
        quarters * 3 +
        years * 12;

    this._data = {};

    this._locale = getLocale();

    this._bubble();
}

function isDuration (obj) {
    return obj instanceof Duration;
}

function absRound (number) {
    if (number < 0) {
        return Math.round(-1 * number) * -1;
    } else {
        return Math.round(number);
    }
}

// FORMATTING

function offset (token, separator) {
    addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
            offset = -offset;
            sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
}

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
});

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
        return null;
    }

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
}

// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) {
    var res, diff;
    if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    } else {
        return createLocal(input).local();
    }
}

function getDateOffset (m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
}

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () {};

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset (input, keepLocalTime, keepMinutes) {
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    if (input != null) {
        if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
                return this;
            }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    } else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}

function getSetZone (input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
    } else {
        return -this.utcOffset();
    }
}

function setOffsetToUTC (keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}

function setOffsetToLocal (keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}

function setOffsetToParsedOffset () {
    if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
    } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        }
        else {
            this.utcOffset(0, true);
        }
    }
    return this;
}

function hasAlignedHourOffset (input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
}

function isDaylightSavingTime () {
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
}

function isDaylightSavingTimeShifted () {
    if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
    }

    var c = {};

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    } else {
        this._isDSTShifted = false;
    }

    return this._isDSTShifted;
}

function isLocal () {
    return this.isValid() ? !this._isUTC : false;
}

function isUtcOffset () {
    return this.isValid() ? this._isUTC : false;
}

function isUtc () {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}

// ASP.NET json date format regex
var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
// and further modified to allow for strings containing both week and day
var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

function createDuration (input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
        duration = {
            ms : input._milliseconds,
            d  : input._days,
            M  : input._months
        };
    } else if (isNumber(input)) {
        duration = {};
        if (key) {
            duration[key] = input;
        } else {
            duration.milliseconds = input;
        }
    } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y  : 0,
            d  : toInt(match[DATE])                         * sign,
            h  : toInt(match[HOUR])                         * sign,
            m  : toInt(match[MINUTE])                       * sign,
            s  : toInt(match[SECOND])                       * sign,
            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
    } else if (!!(match = isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;
        duration = {
            y : parseIso(match[2], sign),
            M : parseIso(match[3], sign),
            w : parseIso(match[4], sign),
            d : parseIso(match[5], sign),
            h : parseIso(match[6], sign),
            m : parseIso(match[7], sign),
            s : parseIso(match[8], sign)
        };
    } else if (duration == null) {// checks for null or undefined
        duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
    }

    return ret;
}

createDuration.fn = Duration.prototype;
createDuration.invalid = createInvalid$1;

function parseIso (inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
}

function positiveMomentsDifference(base, other) {
    var res = {milliseconds: 0, months: 0};

    res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
    }

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
}

function momentsDifference(base, other) {
    var res;
    if (!(base.isValid() && other.isValid())) {
        return {milliseconds: 0, months: 0};
    }

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
    } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
    }

    return res;
}

// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) {
    return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val; val = period; period = tmp;
        }

        val = typeof val === 'string' ? +val : val;
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    };
}

function addSubtract (mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
        // No op
        return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (updateOffset) {
        hooks.updateOffset(mom, days || months);
    }
}

var add      = createAdder(1, 'add');
var subtract = createAdder(-1, 'subtract');

function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';
}

function calendar$1 (time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';

    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
}

function clone () {
    return new Moment(this);
}

function isAfter (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
    } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
}

function isBefore (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
    } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
}

function isBetween (from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
}

function isSame (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
    } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
}

function isSameOrAfter (input, units) {
    return this.isSame(input, units) || this.isAfter(input,units);
}

function isSameOrBefore (input, units) {
    return this.isSame(input, units) || this.isBefore(input,units);
}

function diff (input, units, asFloat) {
    var that,
        zoneDelta,
        output;

    if (!this.isValid()) {
        return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
        return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    switch (units) {
        case 'year': output = monthDiff(this, that) / 12; break;
        case 'month': output = monthDiff(this, that); break;
        case 'quarter': output = monthDiff(this, that) / 3; break;
        case 'second': output = (this - that) / 1e3; break; // 1000
        case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
        case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
        case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
        case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
        default: output = this - that;
    }

    return asFloat ? output : absFloor(output);
}

function monthDiff (a, b) {
    // difference in months
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

    if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
    } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
    }

    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
}

hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

function toString () {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
}

function toISOString(keepOffset) {
    if (!this.isValid()) {
        return null;
    }
    var utc = keepOffset !== true;
    var m = utc ? this.clone().utc() : this;
    if (m.year() < 0 || m.year() > 9999) {
        return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }
    if (isFunction(Date.prototype.toISOString)) {
        // native implementation is ~50x faster, use it when we can
        if (utc) {
            return this.toDate().toISOString();
        } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
        }
    }
    return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
}

/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
function inspect () {
    if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
    }
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
    }
    var prefix = '[' + func + '("]';
    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';

    return this.format(prefix + year + datetime + suffix);
}

function format (inputString) {
    if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
}

function from (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function fromNow (withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
}

function to (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function toNow (withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
}

// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function locale (key) {
    var newLocaleData;

    if (key === undefined) {
        return this._locale._abbr;
    } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
            this._locale = newLocaleData;
        }
        return this;
    }
}

var lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    }
);

function localeData () {
    return this._locale;
}

function startOf (units) {
    units = normalizeUnits(units);
    // the following switch intentionally omits break keywords
    // to utilize falling through the cases.
    switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
    }

    // weeks are a special case
    if (units === 'week') {
        this.weekday(0);
    }
    if (units === 'isoWeek') {
        this.isoWeekday(1);
    }

    // quarters are also special
    if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
    }

    return this;
}

function endOf (units) {
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') {
        return this;
    }

    // 'date' is an alias for 'day', so it should be considered as such.
    if (units === 'date') {
        units = 'day';
    }

    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
}

function valueOf () {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
}

function unix () {
    return Math.floor(this.valueOf() / 1000);
}

function toDate () {
    return new Date(this.valueOf());
}

function toArray () {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
}

function toObject () {
    var m = this;
    return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
    };
}

function toJSON () {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
}

function isValid$2 () {
    return isValid(this);
}

function parsingFlags () {
    return extend({}, getParsingFlags(this));
}

function invalidAt () {
    return getParsingFlags(this).overflow;
}

function creationData() {
    return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
    };
}

// FORMATTING

addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
});

addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
});

function addWeekYearFormatToken (token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
}

addWeekYearFormatToken('gggg',     'weekYear');
addWeekYearFormatToken('ggggg',    'weekYear');
addWeekYearFormatToken('GGGG',  'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');

// ALIASES

addUnitAlias('weekYear', 'gg');
addUnitAlias('isoWeekYear', 'GG');

// PRIORITY

addUnitPriority('weekYear', 1);
addUnitPriority('isoWeekYear', 1);


// PARSING

addRegexToken('G',      matchSigned);
addRegexToken('g',      matchSigned);
addRegexToken('GG',     match1to2, match2);
addRegexToken('gg',     match1to2, match2);
addRegexToken('GGGG',   match1to4, match4);
addRegexToken('gggg',   match1to4, match4);
addRegexToken('GGGGG',  match1to6, match6);
addRegexToken('ggggg',  match1to6, match6);

addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
});

addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
});

// MOMENTS

function getSetWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
}

function getSetISOWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
}

function getISOWeeksInYear () {
    return weeksInYear(this.year(), 1, 4);
}

function getWeeksInYear () {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}

function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
        return weekOfYear(this, dow, doy).year;
    } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
            week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
}

function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
}

// FORMATTING

addFormatToken('Q', 0, 'Qo', 'quarter');

// ALIASES

addUnitAlias('quarter', 'Q');

// PRIORITY

addUnitPriority('quarter', 7);

// PARSING

addRegexToken('Q', match1);
addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
});

// MOMENTS

function getSetQuarter (input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}

// FORMATTING

addFormatToken('D', ['DD', 2], 'Do', 'date');

// ALIASES

addUnitAlias('date', 'D');

// PRIOROITY
addUnitPriority('date', 9);

// PARSING

addRegexToken('D',  match1to2);
addRegexToken('DD', match1to2, match2);
addRegexToken('Do', function (isStrict, locale) {
    // TODO: Remove "ordinalParse" fallback in next major release.
    return isStrict ?
      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
      locale._dayOfMonthOrdinalParseLenient;
});

addParseToken(['D', 'DD'], DATE);
addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0]);
});

// MOMENTS

var getSetDayOfMonth = makeGetSet('Date', true);

// FORMATTING

addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

// ALIASES

addUnitAlias('dayOfYear', 'DDD');

// PRIORITY
addUnitPriority('dayOfYear', 4);

// PARSING

addRegexToken('DDD',  match1to3);
addRegexToken('DDDD', match3);
addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
});

// HELPERS

// MOMENTS

function getSetDayOfYear (input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
}

// FORMATTING

addFormatToken('m', ['mm', 2], 0, 'minute');

// ALIASES

addUnitAlias('minute', 'm');

// PRIORITY

addUnitPriority('minute', 14);

// PARSING

addRegexToken('m',  match1to2);
addRegexToken('mm', match1to2, match2);
addParseToken(['m', 'mm'], MINUTE);

// MOMENTS

var getSetMinute = makeGetSet('Minutes', false);

// FORMATTING

addFormatToken('s', ['ss', 2], 0, 'second');

// ALIASES

addUnitAlias('second', 's');

// PRIORITY

addUnitPriority('second', 15);

// PARSING

addRegexToken('s',  match1to2);
addRegexToken('ss', match1to2, match2);
addParseToken(['s', 'ss'], SECOND);

// MOMENTS

var getSetSecond = makeGetSet('Seconds', false);

// FORMATTING

addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
});

addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
});

addFormatToken(0, ['SSS', 3], 0, 'millisecond');
addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
});
addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
});
addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
});
addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
});
addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
});
addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
});


// ALIASES

addUnitAlias('millisecond', 'ms');

// PRIORITY

addUnitPriority('millisecond', 16);

// PARSING

addRegexToken('S',    match1to3, match1);
addRegexToken('SS',   match1to3, match2);
addRegexToken('SSS',  match1to3, match3);

var token;
for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
}

function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
}

for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
}
// MOMENTS

var getSetMillisecond = makeGetSet('Milliseconds', false);

// FORMATTING

addFormatToken('z',  0, 0, 'zoneAbbr');
addFormatToken('zz', 0, 0, 'zoneName');

// MOMENTS

function getZoneAbbr () {
    return this._isUTC ? 'UTC' : '';
}

function getZoneName () {
    return this._isUTC ? 'Coordinated Universal Time' : '';
}

var proto = Moment.prototype;

proto.add               = add;
proto.calendar          = calendar$1;
proto.clone             = clone;
proto.diff              = diff;
proto.endOf             = endOf;
proto.format            = format;
proto.from              = from;
proto.fromNow           = fromNow;
proto.to                = to;
proto.toNow             = toNow;
proto.get               = stringGet;
proto.invalidAt         = invalidAt;
proto.isAfter           = isAfter;
proto.isBefore          = isBefore;
proto.isBetween         = isBetween;
proto.isSame            = isSame;
proto.isSameOrAfter     = isSameOrAfter;
proto.isSameOrBefore    = isSameOrBefore;
proto.isValid           = isValid$2;
proto.lang              = lang;
proto.locale            = locale;
proto.localeData        = localeData;
proto.max               = prototypeMax;
proto.min               = prototypeMin;
proto.parsingFlags      = parsingFlags;
proto.set               = stringSet;
proto.startOf           = startOf;
proto.subtract          = subtract;
proto.toArray           = toArray;
proto.toObject          = toObject;
proto.toDate            = toDate;
proto.toISOString       = toISOString;
proto.inspect           = inspect;
proto.toJSON            = toJSON;
proto.toString          = toString;
proto.unix              = unix;
proto.valueOf           = valueOf;
proto.creationData      = creationData;
proto.year       = getSetYear;
proto.isLeapYear = getIsLeapYear;
proto.weekYear    = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;
proto.quarter = proto.quarters = getSetQuarter;
proto.month       = getSetMonth;
proto.daysInMonth = getDaysInMonth;
proto.week           = proto.weeks        = getSetWeek;
proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
proto.weeksInYear    = getWeeksInYear;
proto.isoWeeksInYear = getISOWeeksInYear;
proto.date       = getSetDayOfMonth;
proto.day        = proto.days             = getSetDayOfWeek;
proto.weekday    = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear  = getSetDayOfYear;
proto.hour = proto.hours = getSetHour;
proto.minute = proto.minutes = getSetMinute;
proto.second = proto.seconds = getSetSecond;
proto.millisecond = proto.milliseconds = getSetMillisecond;
proto.utcOffset            = getSetOffset;
proto.utc                  = setOffsetToUTC;
proto.local                = setOffsetToLocal;
proto.parseZone            = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST                = isDaylightSavingTime;
proto.isLocal              = isLocal;
proto.isUtcOffset          = isUtcOffset;
proto.isUtc                = isUtc;
proto.isUTC                = isUtc;
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;
proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

function createUnix (input) {
    return createLocal(input * 1000);
}

function createInZone () {
    return createLocal.apply(null, arguments).parseZone();
}

function preParsePostFormat (string) {
    return string;
}

var proto$1 = Locale.prototype;

proto$1.calendar        = calendar;
proto$1.longDateFormat  = longDateFormat;
proto$1.invalidDate     = invalidDate;
proto$1.ordinal         = ordinal;
proto$1.preparse        = preParsePostFormat;
proto$1.postformat      = preParsePostFormat;
proto$1.relativeTime    = relativeTime;
proto$1.pastFuture      = pastFuture;
proto$1.set             = set;

proto$1.months            =        localeMonths;
proto$1.monthsShort       =        localeMonthsShort;
proto$1.monthsParse       =        localeMonthsParse;
proto$1.monthsRegex       = monthsRegex;
proto$1.monthsShortRegex  = monthsShortRegex;
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;

proto$1.weekdays       =        localeWeekdays;
proto$1.weekdaysMin    =        localeWeekdaysMin;
proto$1.weekdaysShort  =        localeWeekdaysShort;
proto$1.weekdaysParse  =        localeWeekdaysParse;

proto$1.weekdaysRegex       =        weekdaysRegex;
proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;

function get$1 (format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
}

function listMonthsImpl (format, index, field) {
    if (isNumber(format)) {
        index = format;
        format = undefined;
    }

    format = format || '';

    if (index != null) {
        return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];
    for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
    }
    return out;
}

// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function listWeekdaysImpl (localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    } else {
        format = localeSorted;
        index = format;
        localeSorted = false;

        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];
    for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
}

function listMonths (format, index) {
    return listMonthsImpl(format, index, 'months');
}

function listMonthsShort (format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
}

function listWeekdays (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
}

function listWeekdaysShort (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
}

function listWeekdaysMin (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
}

getSetGlobalLocale('en', {
    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

// Side effect imports

hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

var mathAbs = Math.abs;

function abs () {
    var data           = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days         = mathAbs(this._days);
    this._months       = mathAbs(this._months);

    data.milliseconds  = mathAbs(data.milliseconds);
    data.seconds       = mathAbs(data.seconds);
    data.minutes       = mathAbs(data.minutes);
    data.hours         = mathAbs(data.hours);
    data.months        = mathAbs(data.months);
    data.years         = mathAbs(data.years);

    return this;
}

function addSubtract$1 (duration, input, value, direction) {
    var other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days         += direction * other._days;
    duration._months       += direction * other._months;

    return duration._bubble();
}

// supports only 2.0-style add(1, 's') or add(duration)
function add$1 (input, value) {
    return addSubtract$1(this, input, value, 1);
}

// supports only 2.0-style subtract(1, 's') or subtract(duration)
function subtract$1 (input, value) {
    return addSubtract$1(this, input, value, -1);
}

function absCeil (number) {
    if (number < 0) {
        return Math.floor(number);
    } else {
        return Math.ceil(number);
    }
}

function bubble () {
    var milliseconds = this._milliseconds;
    var days         = this._days;
    var months       = this._months;
    var data         = this._data;
    var seconds, minutes, hours, years, monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    }

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds           = absFloor(milliseconds / 1000);
    data.seconds      = seconds % 60;

    minutes           = absFloor(seconds / 60);
    data.minutes      = minutes % 60;

    hours             = absFloor(minutes / 60);
    data.hours        = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days   = days;
    data.months = months;
    data.years  = years;

    return this;
}

function daysToMonths (days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
}

function monthsToDays (months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
}

function as (units) {
    if (!this.isValid()) {
        return NaN;
    }
    var days;
    var months;
    var milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') {
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
    } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
            case 'week'   : return days / 7     + milliseconds / 6048e5;
            case 'day'    : return days         + milliseconds / 864e5;
            case 'hour'   : return days * 24    + milliseconds / 36e5;
            case 'minute' : return days * 1440  + milliseconds / 6e4;
            case 'second' : return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
            default: throw new Error('Unknown unit ' + units);
        }
    }
}

// TODO: Use this.as('ms')?
function valueOf$1 () {
    if (!this.isValid()) {
        return NaN;
    }
    return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
    );
}

function makeAs (alias) {
    return function () {
        return this.as(alias);
    };
}

var asMilliseconds = makeAs('ms');
var asSeconds      = makeAs('s');
var asMinutes      = makeAs('m');
var asHours        = makeAs('h');
var asDays         = makeAs('d');
var asWeeks        = makeAs('w');
var asMonths       = makeAs('M');
var asYears        = makeAs('y');

function clone$1 () {
    return createDuration(this);
}

function get$2 (units) {
    units = normalizeUnits(units);
    return this.isValid() ? this[units + 's']() : NaN;
}

function makeGetter(name) {
    return function () {
        return this.isValid() ? this._data[name] : NaN;
    };
}

var milliseconds = makeGetter('milliseconds');
var seconds      = makeGetter('seconds');
var minutes      = makeGetter('minutes');
var hours        = makeGetter('hours');
var days         = makeGetter('days');
var months       = makeGetter('months');
var years        = makeGetter('years');

function weeks () {
    return absFloor(this.days() / 7);
}

var round = Math.round;
var thresholds = {
    ss: 44,         // a few seconds to seconds
    s : 45,         // seconds to minute
    m : 45,         // minutes to hour
    h : 22,         // hours to day
    d : 26,         // days to month
    M : 11          // months to year
};

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}

function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds  = round(duration.as('s'));
    var minutes  = round(duration.as('m'));
    var hours    = round(duration.as('h'));
    var days     = round(duration.as('d'));
    var months   = round(duration.as('M'));
    var years    = round(duration.as('y'));

    var a = seconds <= thresholds.ss && ['s', seconds]  ||
            seconds < thresholds.s   && ['ss', seconds] ||
            minutes <= 1             && ['m']           ||
            minutes < thresholds.m   && ['mm', minutes] ||
            hours   <= 1             && ['h']           ||
            hours   < thresholds.h   && ['hh', hours]   ||
            days    <= 1             && ['d']           ||
            days    < thresholds.d   && ['dd', days]    ||
            months  <= 1             && ['M']           ||
            months  < thresholds.M   && ['MM', months]  ||
            years   <= 1             && ['y']           || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
}

// This function allows you to set the rounding function for relative time strings
function getSetRelativeTimeRounding (roundingFunction) {
    if (roundingFunction === undefined) {
        return round;
    }
    if (typeof(roundingFunction) === 'function') {
        round = roundingFunction;
        return true;
    }
    return false;
}

// This function allows you to set a threshold for relative time strings
function getSetRelativeTimeThreshold (threshold, limit) {
    if (thresholds[threshold] === undefined) {
        return false;
    }
    if (limit === undefined) {
        return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    if (threshold === 's') {
        thresholds.ss = limit - 1;
    }
    return true;
}

function humanize (withSuffix) {
    if (!this.isValid()) {
        return this.localeData().invalidDate();
    }

    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
        output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
}

var abs$1 = Math.abs;

function sign(x) {
    return ((x > 0) - (x < 0)) || +x;
}

function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    if (!this.isValid()) {
        return this.localeData().invalidDate();
    }

    var seconds = abs$1(this._milliseconds) / 1000;
    var days         = abs$1(this._days);
    var months       = abs$1(this._months);
    var minutes, hours, years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes           = absFloor(seconds / 60);
    hours             = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years  = absFloor(months / 12);
    months %= 12;


    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
    var total = this.asSeconds();

    if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
    }

    var totalSign = total < 0 ? '-' : '';
    var ymSign = sign(this._months) !== sign(total) ? '-' : '';
    var daysSign = sign(this._days) !== sign(total) ? '-' : '';
    var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

    return totalSign + 'P' +
        (Y ? ymSign + Y + 'Y' : '') +
        (M ? ymSign + M + 'M' : '') +
        (D ? daysSign + D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? hmsSign + h + 'H' : '') +
        (m ? hmsSign + m + 'M' : '') +
        (s ? hmsSign + s + 'S' : '');
}

var proto$2 = Duration.prototype;

proto$2.isValid        = isValid$1;
proto$2.abs            = abs;
proto$2.add            = add$1;
proto$2.subtract       = subtract$1;
proto$2.as             = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds      = asSeconds;
proto$2.asMinutes      = asMinutes;
proto$2.asHours        = asHours;
proto$2.asDays         = asDays;
proto$2.asWeeks        = asWeeks;
proto$2.asMonths       = asMonths;
proto$2.asYears        = asYears;
proto$2.valueOf        = valueOf$1;
proto$2._bubble        = bubble;
proto$2.clone          = clone$1;
proto$2.get            = get$2;
proto$2.milliseconds   = milliseconds;
proto$2.seconds        = seconds;
proto$2.minutes        = minutes;
proto$2.hours          = hours;
proto$2.days           = days;
proto$2.weeks          = weeks;
proto$2.months         = months;
proto$2.years          = years;
proto$2.humanize       = humanize;
proto$2.toISOString    = toISOString$1;
proto$2.toString       = toISOString$1;
proto$2.toJSON         = toISOString$1;
proto$2.locale         = locale;
proto$2.localeData     = localeData;

proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
proto$2.lang = lang;

// Side effect imports

// FORMATTING

addFormatToken('X', 0, 0, 'unix');
addFormatToken('x', 0, 0, 'valueOf');

// PARSING

addRegexToken('x', matchSigned);
addRegexToken('X', matchTimestamp);
addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
});
addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
});

// Side effect imports


hooks.version = '2.21.0';

setHookCallback(createLocal);

hooks.fn                    = proto;
hooks.min                   = min;
hooks.max                   = max;
hooks.now                   = now;
hooks.utc                   = createUTC;
hooks.unix                  = createUnix;
hooks.months                = listMonths;
hooks.isDate                = isDate;
hooks.locale                = getSetGlobalLocale;
hooks.invalid               = createInvalid;
hooks.duration              = createDuration;
hooks.isMoment              = isMoment;
hooks.weekdays              = listWeekdays;
hooks.parseZone             = createInZone;
hooks.localeData            = getLocale;
hooks.isDuration            = isDuration;
hooks.monthsShort           = listMonthsShort;
hooks.weekdaysMin           = listWeekdaysMin;
hooks.defineLocale          = defineLocale;
hooks.updateLocale          = updateLocale;
hooks.locales               = listLocales;
hooks.weekdaysShort         = listWeekdaysShort;
hooks.normalizeUnits        = normalizeUnits;
hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat        = getCalendarFormat;
hooks.prototype             = proto;

// currently HTML5 input type only supports 24-hour formats
hooks.HTML5_FMT = {
    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
    DATE: 'YYYY-MM-DD',                             // <input type="date" />
    TIME: 'HH:mm',                                  // <input type="time" />
    TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
    TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
    WEEK: 'YYYY-[W]WW',                             // <input type="week" />
    MONTH: 'YYYY-MM'                                // <input type="month" />
};

return hooks;

})));

},{}],484:[function(require,module,exports){
'use strict';
// TODO: Use the `URL` global when targeting Node.js 10
const URLParser = typeof URL === 'undefined' ? require('url').URL : URL;

// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs
const DATA_URL_DEFAULT_MIME_TYPE = 'text/plain';
const DATA_URL_DEFAULT_CHARSET = 'us-ascii';

const testParameter = (name, filters) => {
	return filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);
};

const normalizeDataURL = (urlString, {stripHash}) => {
	const parts = urlString.match(/^data:(.*?),(.*?)(?:#(.*))?$/);

	if (!parts) {
		throw new Error(`Invalid URL: ${urlString}`);
	}

	const mediaType = parts[1].split(';');
	const body = parts[2];
	const hash = stripHash ? '' : parts[3];

	let base64 = false;

	if (mediaType[mediaType.length - 1] === 'base64') {
		mediaType.pop();
		base64 = true;
	}

	// Lowercase MIME type
	const mimeType = (mediaType.shift() || '').toLowerCase();
	const attributes = mediaType
		.map(attribute => {
			let [key, value = ''] = attribute.split('=').map(string => string.trim());

			// Lowercase `charset`
			if (key === 'charset') {
				value = value.toLowerCase();

				if (value === DATA_URL_DEFAULT_CHARSET) {
					return '';
				}
			}

			return `${key}${value ? `=${value}` : ''}`;
		})
		.filter(Boolean);

	const normalizedMediaType = [
		...attributes
	];

	if (base64) {
		normalizedMediaType.push('base64');
	}

	if (normalizedMediaType.length !== 0 || (mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE)) {
		normalizedMediaType.unshift(mimeType);
	}

	return `data:${normalizedMediaType.join(';')},${base64 ? body.trim() : body}${hash ? `#${hash}` : ''}`;
};

const normalizeUrl = (urlString, options) => {
	options = {
		defaultProtocol: 'http:',
		normalizeProtocol: true,
		forceHttp: false,
		forceHttps: false,
		stripAuthentication: true,
		stripHash: false,
		stripWWW: true,
		removeQueryParameters: [/^utm_\w+/i],
		removeTrailingSlash: true,
		removeDirectoryIndex: false,
		sortQueryParameters: true,
		...options
	};

	// TODO: Remove this at some point in the future
	if (Reflect.has(options, 'normalizeHttps')) {
		throw new Error('options.normalizeHttps is renamed to options.forceHttp');
	}

	if (Reflect.has(options, 'normalizeHttp')) {
		throw new Error('options.normalizeHttp is renamed to options.forceHttps');
	}

	if (Reflect.has(options, 'stripFragment')) {
		throw new Error('options.stripFragment is renamed to options.stripHash');
	}

	urlString = urlString.trim();

	// Data URL
	if (/^data:/i.test(urlString)) {
		return normalizeDataURL(urlString, options);
	}

	const hasRelativeProtocol = urlString.startsWith('//');
	const isRelativeUrl = !hasRelativeProtocol && /^\.*\//.test(urlString);

	// Prepend protocol
	if (!isRelativeUrl) {
		urlString = urlString.replace(/^(?!(?:\w+:)?\/\/)|^\/\//, options.defaultProtocol);
	}

	const urlObj = new URLParser(urlString);

	if (options.forceHttp && options.forceHttps) {
		throw new Error('The `forceHttp` and `forceHttps` options cannot be used together');
	}

	if (options.forceHttp && urlObj.protocol === 'https:') {
		urlObj.protocol = 'http:';
	}

	if (options.forceHttps && urlObj.protocol === 'http:') {
		urlObj.protocol = 'https:';
	}

	// Remove auth
	if (options.stripAuthentication) {
		urlObj.username = '';
		urlObj.password = '';
	}

	// Remove hash
	if (options.stripHash) {
		urlObj.hash = '';
	}

	// Remove duplicate slashes if not preceded by a protocol
	if (urlObj.pathname) {
		// TODO: Use the following instead when targeting Node.js 10
		// `urlObj.pathname = urlObj.pathname.replace(/(?<!https?:)\/{2,}/g, '/');`
		urlObj.pathname = urlObj.pathname.replace(/((?!:).|^)\/{2,}/g, (_, p1) => {
			if (/^(?!\/)/g.test(p1)) {
				return `${p1}/`;
			}

			return '/';
		});
	}

	// Decode URI octets
	if (urlObj.pathname) {
		urlObj.pathname = decodeURI(urlObj.pathname);
	}

	// Remove directory index
	if (options.removeDirectoryIndex === true) {
		options.removeDirectoryIndex = [/^index\.[a-z]+$/];
	}

	if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {
		let pathComponents = urlObj.pathname.split('/');
		const lastComponent = pathComponents[pathComponents.length - 1];

		if (testParameter(lastComponent, options.removeDirectoryIndex)) {
			pathComponents = pathComponents.slice(0, pathComponents.length - 1);
			urlObj.pathname = pathComponents.slice(1).join('/') + '/';
		}
	}

	if (urlObj.hostname) {
		// Remove trailing dot
		urlObj.hostname = urlObj.hostname.replace(/\.$/, '');

		// Remove `www.`
		if (options.stripWWW && /^www\.([a-z\-\d]{2,63})\.([a-z.]{2,5})$/.test(urlObj.hostname)) {
			// Each label should be max 63 at length (min: 2).
			// The extension should be max 5 at length (min: 2).
			// Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names
			urlObj.hostname = urlObj.hostname.replace(/^www\./, '');
		}
	}

	// Remove query unwanted parameters
	if (Array.isArray(options.removeQueryParameters)) {
		for (const key of [...urlObj.searchParams.keys()]) {
			if (testParameter(key, options.removeQueryParameters)) {
				urlObj.searchParams.delete(key);
			}
		}
	}

	// Sort query parameters
	if (options.sortQueryParameters) {
		urlObj.searchParams.sort();
	}

	if (options.removeTrailingSlash) {
		urlObj.pathname = urlObj.pathname.replace(/\/$/, '');
	}

	// Take advantage of many of the Node `url` normalizations
	urlString = urlObj.toString();

	// Remove ending `/`
	if ((options.removeTrailingSlash || urlObj.pathname === '/') && urlObj.hash === '') {
		urlString = urlString.replace(/\/$/, '');
	}

	// Restore relative protocol, if applicable
	if (hasRelativeProtocol && !options.normalizeProtocol) {
		urlString = urlString.replace(/^http:\/\//, '//');
	}

	// Remove http/https
	if (options.stripProtocol) {
		urlString = urlString.replace(/^(?:https?:)?\/\//, '');
	}

	return urlString;
};

module.exports = normalizeUrl;
// TODO: Remove this for the next major release
module.exports.default = normalizeUrl;

},{"url":59}],485:[function(require,module,exports){
module.exports = compile;

var BaseFuncs = require("boolbase"),
    trueFunc  = BaseFuncs.trueFunc,
    falseFunc = BaseFuncs.falseFunc;

/*
	returns a function that checks if an elements index matches the given rule
	highly optimized to return the fastest solution
*/
function compile(parsed){
	var a = parsed[0],
	    b = parsed[1] - 1;

	//when b <= 0, a*n won't be possible for any matches when a < 0
	//besides, the specification says that no element is matched when a and b are 0
	if(b < 0 && a <= 0) return falseFunc;

	//when a is in the range -1..1, it matches any element (so only b is checked)
	if(a ===-1) return function(pos){ return pos <= b; };
	if(a === 0) return function(pos){ return pos === b; };
	//when b <= 0 and a === 1, they match any element
	if(a === 1) return b < 0 ? trueFunc : function(pos){ return pos >= b; };

	//when a > 0, modulo can be used to check if there is a match
	var bMod = b % a;
	if(bMod < 0) bMod += a;

	if(a > 1){
		return function(pos){
			return pos >= b && pos % a === bMod;
		};
	}

	a *= -1; //make `a` positive

	return function(pos){
		return pos <= b && pos % a === bMod;
	};
}
},{"boolbase":71}],486:[function(require,module,exports){
var parse = require("./parse.js"),
    compile = require("./compile.js");

module.exports = function nthCheck(formula){
	return compile(parse(formula));
};

module.exports.parse = parse;
module.exports.compile = compile;
},{"./compile.js":485,"./parse.js":487}],487:[function(require,module,exports){
module.exports = parse;

//following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo

//[ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
var re_nthElement = /^([+\-]?\d*n)?\s*(?:([+\-]?)\s*(\d+))?$/;

/*
	parses a nth-check formula, returns an array of two numbers
*/
function parse(formula){
	formula = formula.trim().toLowerCase();

	if(formula === "even"){
		return [2, 0];
	} else if(formula === "odd"){
		return [2, 1];
	} else {
		var parsed = formula.match(re_nthElement);

		if(!parsed){
			throw new SyntaxError("n-th rule couldn't be parsed ('" + formula + "')");
		}

		var a;

		if(parsed[1]){
			a = parseInt(parsed[1], 10);
			if(isNaN(a)){
				if(parsed[1].charAt(0) === "-") a = -1;
				else a = 1;
			}
		} else a = 0;

		return [
			a,
			parsed[3] ? parseInt((parsed[2] || "") + parsed[3], 10) : 0
		];
	}
}

},{}],488:[function(require,module,exports){
var wrappy = require('wrappy')
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}

},{"wrappy":538}],489:[function(require,module,exports){
'use strict';

class CancelError extends Error {
	constructor(reason) {
		super(reason || 'Promise was canceled');
		this.name = 'CancelError';
	}

	get isCanceled() {
		return true;
	}
}

class PCancelable {
	static fn(userFn) {
		return (...args) => {
			return new PCancelable((resolve, reject, onCancel) => {
				args.push(onCancel);
				userFn(...args).then(resolve, reject);
			});
		};
	}

	constructor(executor) {
		this._cancelHandlers = [];
		this._isPending = true;
		this._isCanceled = false;
		this._rejectOnCancel = true;

		this._promise = new Promise((resolve, reject) => {
			this._reject = reject;

			const onResolve = value => {
				this._isPending = false;
				resolve(value);
			};

			const onReject = error => {
				this._isPending = false;
				reject(error);
			};

			const onCancel = handler => {
				this._cancelHandlers.push(handler);
			};

			Object.defineProperties(onCancel, {
				shouldReject: {
					get: () => this._rejectOnCancel,
					set: bool => {
						this._rejectOnCancel = bool;
					}
				}
			});

			return executor(onResolve, onReject, onCancel);
		});
	}

	then(onFulfilled, onRejected) {
		return this._promise.then(onFulfilled, onRejected);
	}

	catch(onRejected) {
		return this._promise.catch(onRejected);
	}

	finally(onFinally) {
		return this._promise.finally(onFinally);
	}

	cancel(reason) {
		if (!this._isPending || this._isCanceled) {
			return;
		}

		if (this._cancelHandlers.length > 0) {
			try {
				for (const handler of this._cancelHandlers) {
					handler();
				}
			} catch (error) {
				this._reject(error);
			}
		}

		this._isCanceled = true;
		if (this._rejectOnCancel) {
			this._reject(new CancelError(reason));
		}
	}

	get isCanceled() {
		return this._isCanceled;
	}
}

Object.setPrototypeOf(PCancelable.prototype, Promise.prototype);

module.exports = PCancelable;
module.exports.default = PCancelable;

module.exports.CancelError = CancelError;

},{}],490:[function(require,module,exports){
'use strict'

module.exports = function parseURI (str, opts) {
  opts = opts || {}

  var o = {
    key: ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'],
    q: {
      name: 'queryKey',
      parser: /(?:^|&)([^&=]*)=?([^&]*)/g
    },
    parser: {
      strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
      loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
    }
  }

  var m = o.parser[opts.strictMode ? 'strict' : 'loose'].exec(str)
  var uri = {}
  var i = 14

  while (i--) uri[o.key[i]] = m[i] || ''

  uri[o.q.name] = {}
  uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
    if ($1) uri[o.q.name][$1] = $2
  })

  return uri
}

},{}],491:[function(require,module,exports){
'use strict';

var DOCUMENT_MODE = require('./html').DOCUMENT_MODE;

//Const
var VALID_DOCTYPE_NAME = 'html',
    QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd',
    QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
        '+//silmaril//dtd html pro v0r11 19970101//en',
        '-//advasoft ltd//dtd html 3.0 aswedit + extensions//en',
        '-//as//dtd html 3.0 aswedit + extensions//en',
        '-//ietf//dtd html 2.0 level 1//en',
        '-//ietf//dtd html 2.0 level 2//en',
        '-//ietf//dtd html 2.0 strict level 1//en',
        '-//ietf//dtd html 2.0 strict level 2//en',
        '-//ietf//dtd html 2.0 strict//en',
        '-//ietf//dtd html 2.0//en',
        '-//ietf//dtd html 2.1e//en',
        '-//ietf//dtd html 3.0//en',
        '-//ietf//dtd html 3.0//en//',
        '-//ietf//dtd html 3.2 final//en',
        '-//ietf//dtd html 3.2//en',
        '-//ietf//dtd html 3//en',
        '-//ietf//dtd html level 0//en',
        '-//ietf//dtd html level 0//en//2.0',
        '-//ietf//dtd html level 1//en',
        '-//ietf//dtd html level 1//en//2.0',
        '-//ietf//dtd html level 2//en',
        '-//ietf//dtd html level 2//en//2.0',
        '-//ietf//dtd html level 3//en',
        '-//ietf//dtd html level 3//en//3.0',
        '-//ietf//dtd html strict level 0//en',
        '-//ietf//dtd html strict level 0//en//2.0',
        '-//ietf//dtd html strict level 1//en',
        '-//ietf//dtd html strict level 1//en//2.0',
        '-//ietf//dtd html strict level 2//en',
        '-//ietf//dtd html strict level 2//en//2.0',
        '-//ietf//dtd html strict level 3//en',
        '-//ietf//dtd html strict level 3//en//3.0',
        '-//ietf//dtd html strict//en',
        '-//ietf//dtd html strict//en//2.0',
        '-//ietf//dtd html strict//en//3.0',
        '-//ietf//dtd html//en',
        '-//ietf//dtd html//en//2.0',
        '-//ietf//dtd html//en//3.0',
        '-//metrius//dtd metrius presentational//en',
        '-//microsoft//dtd internet explorer 2.0 html strict//en',
        '-//microsoft//dtd internet explorer 2.0 html//en',
        '-//microsoft//dtd internet explorer 2.0 tables//en',
        '-//microsoft//dtd internet explorer 3.0 html strict//en',
        '-//microsoft//dtd internet explorer 3.0 html//en',
        '-//microsoft//dtd internet explorer 3.0 tables//en',
        '-//netscape comm. corp.//dtd html//en',
        '-//netscape comm. corp.//dtd strict html//en',
        '-//o\'reilly and associates//dtd html 2.0//en',
        '-//o\'reilly and associates//dtd html extended 1.0//en',
        '-//spyglass//dtd html 2.0 extended//en',
        '-//sq//dtd html 2.0 hotmetal + extensions//en',
        '-//sun microsystems corp.//dtd hotjava html//en',
        '-//sun microsystems corp.//dtd hotjava strict html//en',
        '-//w3c//dtd html 3 1995-03-24//en',
        '-//w3c//dtd html 3.2 draft//en',
        '-//w3c//dtd html 3.2 final//en',
        '-//w3c//dtd html 3.2//en',
        '-//w3c//dtd html 3.2s draft//en',
        '-//w3c//dtd html 4.0 frameset//en',
        '-//w3c//dtd html 4.0 transitional//en',
        '-//w3c//dtd html experimental 19960712//en',
        '-//w3c//dtd html experimental 970421//en',
        '-//w3c//dtd w3 html//en',
        '-//w3o//dtd w3 html 3.0//en',
        '-//w3o//dtd w3 html 3.0//en//',
        '-//webtechs//dtd mozilla html 2.0//en',
        '-//webtechs//dtd mozilla html//en'
    ],
    QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = QUIRKS_MODE_PUBLIC_ID_PREFIXES.concat([
        '-//w3c//dtd html 4.01 frameset//',
        '-//w3c//dtd html 4.01 transitional//'
    ]),
    QUIRKS_MODE_PUBLIC_IDS = [
        '-//w3o//dtd w3 html strict 3.0//en//',
        '-/w3c/dtd html 4.0 transitional/en',
        'html'
    ],
    LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = [
        '-//W3C//DTD XHTML 1.0 Frameset//',
        '-//W3C//DTD XHTML 1.0 Transitional//'
    ],
    LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = LIMITED_QUIRKS_PUBLIC_ID_PREFIXES.concat([
        '-//W3C//DTD HTML 4.01 Frameset//',
        '-//W3C//DTD HTML 4.01 Transitional//'
    ]);


//Utils
function enquoteDoctypeId(id) {
    var quote = id.indexOf('"') !== -1 ? '\'' : '"';

    return quote + id + quote;
}

function hasPrefix(publicId, prefixes) {
    for (var i = 0; i < prefixes.length; i++) {
        if (publicId.indexOf(prefixes[i]) === 0)
            return true;
    }

    return false;
}


//API
exports.getDocumentMode = function (name, publicId, systemId) {
    if (name !== VALID_DOCTYPE_NAME)
        return DOCUMENT_MODE.QUIRKS;

    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID)
        return DOCUMENT_MODE.QUIRKS;

    if (publicId !== null) {
        publicId = publicId.toLowerCase();

        if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1)
            return DOCUMENT_MODE.QUIRKS;

        var prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;

        if (hasPrefix(publicId, prefixes))
            return DOCUMENT_MODE.QUIRKS;

        prefixes = systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;

        if (hasPrefix(publicId, prefixes))
            return DOCUMENT_MODE.LIMITED_QUIRKS;
    }

    return DOCUMENT_MODE.NO_QUIRKS;
};

exports.serializeContent = function (name, publicId, systemId) {
    var str = '!DOCTYPE ';

    if (name)
        str += name;

    if (publicId !== null)
        str += ' PUBLIC ' + enquoteDoctypeId(publicId);

    else if (systemId !== null)
        str += ' SYSTEM';

    if (systemId !== null)
        str += ' ' + enquoteDoctypeId(systemId);

    return str;
};

},{"./html":493}],492:[function(require,module,exports){
'use strict';

var Tokenizer = require('../tokenizer'),
    HTML = require('./html');

//Aliases
var $ = HTML.TAG_NAMES,
    NS = HTML.NAMESPACES,
    ATTRS = HTML.ATTRS;


//MIME types
var MIME_TYPES = {
    TEXT_HTML: 'text/html',
    APPLICATION_XML: 'application/xhtml+xml'
};

//Attributes
var DEFINITION_URL_ATTR = 'definitionurl',
    ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL',
    SVG_ATTRS_ADJUSTMENT_MAP = {
        'attributename': 'attributeName',
        'attributetype': 'attributeType',
        'basefrequency': 'baseFrequency',
        'baseprofile': 'baseProfile',
        'calcmode': 'calcMode',
        'clippathunits': 'clipPathUnits',
        'diffuseconstant': 'diffuseConstant',
        'edgemode': 'edgeMode',
        'filterunits': 'filterUnits',
        'glyphref': 'glyphRef',
        'gradienttransform': 'gradientTransform',
        'gradientunits': 'gradientUnits',
        'kernelmatrix': 'kernelMatrix',
        'kernelunitlength': 'kernelUnitLength',
        'keypoints': 'keyPoints',
        'keysplines': 'keySplines',
        'keytimes': 'keyTimes',
        'lengthadjust': 'lengthAdjust',
        'limitingconeangle': 'limitingConeAngle',
        'markerheight': 'markerHeight',
        'markerunits': 'markerUnits',
        'markerwidth': 'markerWidth',
        'maskcontentunits': 'maskContentUnits',
        'maskunits': 'maskUnits',
        'numoctaves': 'numOctaves',
        'pathlength': 'pathLength',
        'patterncontentunits': 'patternContentUnits',
        'patterntransform': 'patternTransform',
        'patternunits': 'patternUnits',
        'pointsatx': 'pointsAtX',
        'pointsaty': 'pointsAtY',
        'pointsatz': 'pointsAtZ',
        'preservealpha': 'preserveAlpha',
        'preserveaspectratio': 'preserveAspectRatio',
        'primitiveunits': 'primitiveUnits',
        'refx': 'refX',
        'refy': 'refY',
        'repeatcount': 'repeatCount',
        'repeatdur': 'repeatDur',
        'requiredextensions': 'requiredExtensions',
        'requiredfeatures': 'requiredFeatures',
        'specularconstant': 'specularConstant',
        'specularexponent': 'specularExponent',
        'spreadmethod': 'spreadMethod',
        'startoffset': 'startOffset',
        'stddeviation': 'stdDeviation',
        'stitchtiles': 'stitchTiles',
        'surfacescale': 'surfaceScale',
        'systemlanguage': 'systemLanguage',
        'tablevalues': 'tableValues',
        'targetx': 'targetX',
        'targety': 'targetY',
        'textlength': 'textLength',
        'viewbox': 'viewBox',
        'viewtarget': 'viewTarget',
        'xchannelselector': 'xChannelSelector',
        'ychannelselector': 'yChannelSelector',
        'zoomandpan': 'zoomAndPan'
    },
    XML_ATTRS_ADJUSTMENT_MAP = {
        'xlink:actuate': {prefix: 'xlink', name: 'actuate', namespace: NS.XLINK},
        'xlink:arcrole': {prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK},
        'xlink:href': {prefix: 'xlink', name: 'href', namespace: NS.XLINK},
        'xlink:role': {prefix: 'xlink', name: 'role', namespace: NS.XLINK},
        'xlink:show': {prefix: 'xlink', name: 'show', namespace: NS.XLINK},
        'xlink:title': {prefix: 'xlink', name: 'title', namespace: NS.XLINK},
        'xlink:type': {prefix: 'xlink', name: 'type', namespace: NS.XLINK},
        'xml:base': {prefix: 'xml', name: 'base', namespace: NS.XML},
        'xml:lang': {prefix: 'xml', name: 'lang', namespace: NS.XML},
        'xml:space': {prefix: 'xml', name: 'space', namespace: NS.XML},
        'xmlns': {prefix: '', name: 'xmlns', namespace: NS.XMLNS},
        'xmlns:xlink': {prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS}

    };

//SVG tag names adjustment map
var SVG_TAG_NAMES_ADJUSTMENT_MAP = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = {
    'altglyph': 'altGlyph',
    'altglyphdef': 'altGlyphDef',
    'altglyphitem': 'altGlyphItem',
    'animatecolor': 'animateColor',
    'animatemotion': 'animateMotion',
    'animatetransform': 'animateTransform',
    'clippath': 'clipPath',
    'feblend': 'feBlend',
    'fecolormatrix': 'feColorMatrix',
    'fecomponenttransfer': 'feComponentTransfer',
    'fecomposite': 'feComposite',
    'feconvolvematrix': 'feConvolveMatrix',
    'fediffuselighting': 'feDiffuseLighting',
    'fedisplacementmap': 'feDisplacementMap',
    'fedistantlight': 'feDistantLight',
    'feflood': 'feFlood',
    'fefunca': 'feFuncA',
    'fefuncb': 'feFuncB',
    'fefuncg': 'feFuncG',
    'fefuncr': 'feFuncR',
    'fegaussianblur': 'feGaussianBlur',
    'feimage': 'feImage',
    'femerge': 'feMerge',
    'femergenode': 'feMergeNode',
    'femorphology': 'feMorphology',
    'feoffset': 'feOffset',
    'fepointlight': 'fePointLight',
    'fespecularlighting': 'feSpecularLighting',
    'fespotlight': 'feSpotLight',
    'fetile': 'feTile',
    'feturbulence': 'feTurbulence',
    'foreignobject': 'foreignObject',
    'glyphref': 'glyphRef',
    'lineargradient': 'linearGradient',
    'radialgradient': 'radialGradient',
    'textpath': 'textPath'
};

//Tags that causes exit from foreign content
var EXITS_FOREIGN_CONTENT = Object.create(null);

EXITS_FOREIGN_CONTENT[$.B] = true;
EXITS_FOREIGN_CONTENT[$.BIG] = true;
EXITS_FOREIGN_CONTENT[$.BLOCKQUOTE] = true;
EXITS_FOREIGN_CONTENT[$.BODY] = true;
EXITS_FOREIGN_CONTENT[$.BR] = true;
EXITS_FOREIGN_CONTENT[$.CENTER] = true;
EXITS_FOREIGN_CONTENT[$.CODE] = true;
EXITS_FOREIGN_CONTENT[$.DD] = true;
EXITS_FOREIGN_CONTENT[$.DIV] = true;
EXITS_FOREIGN_CONTENT[$.DL] = true;
EXITS_FOREIGN_CONTENT[$.DT] = true;
EXITS_FOREIGN_CONTENT[$.EM] = true;
EXITS_FOREIGN_CONTENT[$.EMBED] = true;
EXITS_FOREIGN_CONTENT[$.H1] = true;
EXITS_FOREIGN_CONTENT[$.H2] = true;
EXITS_FOREIGN_CONTENT[$.H3] = true;
EXITS_FOREIGN_CONTENT[$.H4] = true;
EXITS_FOREIGN_CONTENT[$.H5] = true;
EXITS_FOREIGN_CONTENT[$.H6] = true;
EXITS_FOREIGN_CONTENT[$.HEAD] = true;
EXITS_FOREIGN_CONTENT[$.HR] = true;
EXITS_FOREIGN_CONTENT[$.I] = true;
EXITS_FOREIGN_CONTENT[$.IMG] = true;
EXITS_FOREIGN_CONTENT[$.LI] = true;
EXITS_FOREIGN_CONTENT[$.LISTING] = true;
EXITS_FOREIGN_CONTENT[$.MENU] = true;
EXITS_FOREIGN_CONTENT[$.META] = true;
EXITS_FOREIGN_CONTENT[$.NOBR] = true;
EXITS_FOREIGN_CONTENT[$.OL] = true;
EXITS_FOREIGN_CONTENT[$.P] = true;
EXITS_FOREIGN_CONTENT[$.PRE] = true;
EXITS_FOREIGN_CONTENT[$.RUBY] = true;
EXITS_FOREIGN_CONTENT[$.S] = true;
EXITS_FOREIGN_CONTENT[$.SMALL] = true;
EXITS_FOREIGN_CONTENT[$.SPAN] = true;
EXITS_FOREIGN_CONTENT[$.STRONG] = true;
EXITS_FOREIGN_CONTENT[$.STRIKE] = true;
EXITS_FOREIGN_CONTENT[$.SUB] = true;
EXITS_FOREIGN_CONTENT[$.SUP] = true;
EXITS_FOREIGN_CONTENT[$.TABLE] = true;
EXITS_FOREIGN_CONTENT[$.TT] = true;
EXITS_FOREIGN_CONTENT[$.U] = true;
EXITS_FOREIGN_CONTENT[$.UL] = true;
EXITS_FOREIGN_CONTENT[$.VAR] = true;

//Check exit from foreign content
exports.causesExit = function (startTagToken) {
    var tn = startTagToken.tagName;
    var isFontWithAttrs = tn === $.FONT && (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null ||
                                            Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null ||
                                            Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null);

    return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn];
};

//Token adjustments
exports.adjustTokenMathMLAttrs = function (token) {
    for (var i = 0; i < token.attrs.length; i++) {
        if (token.attrs[i].name === DEFINITION_URL_ATTR) {
            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
            break;
        }
    }
};

exports.adjustTokenSVGAttrs = function (token) {
    for (var i = 0; i < token.attrs.length; i++) {
        var adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

        if (adjustedAttrName)
            token.attrs[i].name = adjustedAttrName;
    }
};

exports.adjustTokenXMLAttrs = function (token) {
    for (var i = 0; i < token.attrs.length; i++) {
        var adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

        if (adjustedAttrEntry) {
            token.attrs[i].prefix = adjustedAttrEntry.prefix;
            token.attrs[i].name = adjustedAttrEntry.name;
            token.attrs[i].namespace = adjustedAttrEntry.namespace;
        }
    }
};

exports.adjustTokenSVGTagName = function (token) {
    var adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];

    if (adjustedTagName)
        token.tagName = adjustedTagName;
};

//Integration points
function isMathMLTextIntegrationPoint(tn, ns) {
    return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);
}

function isHtmlIntegrationPoint(tn, ns, attrs) {
    if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {
        for (var i = 0; i < attrs.length; i++) {
            if (attrs[i].name === ATTRS.ENCODING) {
                var value = attrs[i].value.toLowerCase();

                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
            }
        }
    }

    return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);
}

exports.isIntegrationPoint = function (tn, ns, attrs, foreignNS) {
    if ((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs))
        return true;

    if ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns))
        return true;

    return false;
};

},{"../tokenizer":510,"./html":493}],493:[function(require,module,exports){
'use strict';

var NS = exports.NAMESPACES = {
    HTML: 'http://www.w3.org/1999/xhtml',
    MATHML: 'http://www.w3.org/1998/Math/MathML',
    SVG: 'http://www.w3.org/2000/svg',
    XLINK: 'http://www.w3.org/1999/xlink',
    XML: 'http://www.w3.org/XML/1998/namespace',
    XMLNS: 'http://www.w3.org/2000/xmlns/'
};

exports.ATTRS = {
    TYPE: 'type',
    ACTION: 'action',
    ENCODING: 'encoding',
    PROMPT: 'prompt',
    NAME: 'name',
    COLOR: 'color',
    FACE: 'face',
    SIZE: 'size'
};

exports.DOCUMENT_MODE = {
    NO_QUIRKS: 'no-quirks',
    QUIRKS: 'quirks',
    LIMITED_QUIRKS: 'limited-quirks'
};

var $ = exports.TAG_NAMES = {
    A: 'a',
    ADDRESS: 'address',
    ANNOTATION_XML: 'annotation-xml',
    APPLET: 'applet',
    AREA: 'area',
    ARTICLE: 'article',
    ASIDE: 'aside',

    B: 'b',
    BASE: 'base',
    BASEFONT: 'basefont',
    BGSOUND: 'bgsound',
    BIG: 'big',
    BLOCKQUOTE: 'blockquote',
    BODY: 'body',
    BR: 'br',
    BUTTON: 'button',

    CAPTION: 'caption',
    CENTER: 'center',
    CODE: 'code',
    COL: 'col',
    COLGROUP: 'colgroup',

    DD: 'dd',
    DESC: 'desc',
    DETAILS: 'details',
    DIALOG: 'dialog',
    DIR: 'dir',
    DIV: 'div',
    DL: 'dl',
    DT: 'dt',

    EM: 'em',
    EMBED: 'embed',

    FIELDSET: 'fieldset',
    FIGCAPTION: 'figcaption',
    FIGURE: 'figure',
    FONT: 'font',
    FOOTER: 'footer',
    FOREIGN_OBJECT: 'foreignObject',
    FORM: 'form',
    FRAME: 'frame',
    FRAMESET: 'frameset',

    H1: 'h1',
    H2: 'h2',
    H3: 'h3',
    H4: 'h4',
    H5: 'h5',
    H6: 'h6',
    HEAD: 'head',
    HEADER: 'header',
    HGROUP: 'hgroup',
    HR: 'hr',
    HTML: 'html',

    I: 'i',
    IMG: 'img',
    IMAGE: 'image',
    INPUT: 'input',
    IFRAME: 'iframe',

    KEYGEN: 'keygen',

    LABEL: 'label',
    LI: 'li',
    LINK: 'link',
    LISTING: 'listing',

    MAIN: 'main',
    MALIGNMARK: 'malignmark',
    MARQUEE: 'marquee',
    MATH: 'math',
    MENU: 'menu',
    MENUITEM: 'menuitem',
    META: 'meta',
    MGLYPH: 'mglyph',
    MI: 'mi',
    MO: 'mo',
    MN: 'mn',
    MS: 'ms',
    MTEXT: 'mtext',

    NAV: 'nav',
    NOBR: 'nobr',
    NOFRAMES: 'noframes',
    NOEMBED: 'noembed',
    NOSCRIPT: 'noscript',

    OBJECT: 'object',
    OL: 'ol',
    OPTGROUP: 'optgroup',
    OPTION: 'option',

    P: 'p',
    PARAM: 'param',
    PLAINTEXT: 'plaintext',
    PRE: 'pre',

    RB: 'rb',
    RP: 'rp',
    RT: 'rt',
    RTC: 'rtc',
    RUBY: 'ruby',

    S: 's',
    SCRIPT: 'script',
    SECTION: 'section',
    SELECT: 'select',
    SOURCE: 'source',
    SMALL: 'small',
    SPAN: 'span',
    STRIKE: 'strike',
    STRONG: 'strong',
    STYLE: 'style',
    SUB: 'sub',
    SUMMARY: 'summary',
    SUP: 'sup',

    TABLE: 'table',
    TBODY: 'tbody',
    TEMPLATE: 'template',
    TEXTAREA: 'textarea',
    TFOOT: 'tfoot',
    TD: 'td',
    TH: 'th',
    THEAD: 'thead',
    TITLE: 'title',
    TR: 'tr',
    TRACK: 'track',
    TT: 'tt',

    U: 'u',
    UL: 'ul',

    SVG: 'svg',

    VAR: 'var',

    WBR: 'wbr',

    XMP: 'xmp'
};

var SPECIAL_ELEMENTS = exports.SPECIAL_ELEMENTS = Object.create(null);

SPECIAL_ELEMENTS[NS.HTML] = Object.create(null);
SPECIAL_ELEMENTS[NS.HTML][$.ADDRESS] = true;
SPECIAL_ELEMENTS[NS.HTML][$.APPLET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.AREA] = true;
SPECIAL_ELEMENTS[NS.HTML][$.ARTICLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.ASIDE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BASE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BASEFONT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BGSOUND] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BLOCKQUOTE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BODY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BUTTON] = true;
SPECIAL_ELEMENTS[NS.HTML][$.CAPTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.CENTER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.COL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.COLGROUP] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DETAILS] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DIR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DIV] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.EMBED] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIELDSET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIGCAPTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIGURE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FOOTER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FORM] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FRAME] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FRAMESET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H1] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H2] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H3] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H4] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H5] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H6] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HEAD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HEADER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HGROUP] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HTML] = true;
SPECIAL_ELEMENTS[NS.HTML][$.IFRAME] = true;
SPECIAL_ELEMENTS[NS.HTML][$.IMG] = true;
SPECIAL_ELEMENTS[NS.HTML][$.INPUT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LI] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LINK] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LISTING] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MAIN] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MARQUEE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MENU] = true;
SPECIAL_ELEMENTS[NS.HTML][$.META] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NAV] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOEMBED] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOFRAMES] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOSCRIPT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.OBJECT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.OL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.P] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PARAM] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PLAINTEXT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PRE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SCRIPT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SECTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SELECT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SOURCE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.STYLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SUMMARY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TABLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TBODY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TEMPLATE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TEXTAREA] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TFOOT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TH] = true;
SPECIAL_ELEMENTS[NS.HTML][$.THEAD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TITLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TRACK] = true;
SPECIAL_ELEMENTS[NS.HTML][$.UL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.WBR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.XMP] = true;

SPECIAL_ELEMENTS[NS.MATHML] = Object.create(null);
SPECIAL_ELEMENTS[NS.MATHML][$.MI] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MO] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MN] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MS] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MTEXT] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.ANNOTATION_XML] = true;

SPECIAL_ELEMENTS[NS.SVG] = Object.create(null);
SPECIAL_ELEMENTS[NS.SVG][$.TITLE] = true;
SPECIAL_ELEMENTS[NS.SVG][$.FOREIGN_OBJECT] = true;
SPECIAL_ELEMENTS[NS.SVG][$.DESC] = true;

},{}],494:[function(require,module,exports){
'use strict';

exports.REPLACEMENT_CHARACTER = '\uFFFD';

exports.CODE_POINTS = {
    EOF: -1,
    NULL: 0x00,
    TABULATION: 0x09,
    CARRIAGE_RETURN: 0x0D,
    LINE_FEED: 0x0A,
    FORM_FEED: 0x0C,
    SPACE: 0x20,
    EXCLAMATION_MARK: 0x21,
    QUOTATION_MARK: 0x22,
    NUMBER_SIGN: 0x23,
    AMPERSAND: 0x26,
    APOSTROPHE: 0x27,
    HYPHEN_MINUS: 0x2D,
    SOLIDUS: 0x2F,
    DIGIT_0: 0x30,
    DIGIT_9: 0x39,
    SEMICOLON: 0x3B,
    LESS_THAN_SIGN: 0x3C,
    EQUALS_SIGN: 0x3D,
    GREATER_THAN_SIGN: 0x3E,
    QUESTION_MARK: 0x3F,
    LATIN_CAPITAL_A: 0x41,
    LATIN_CAPITAL_F: 0x46,
    LATIN_CAPITAL_X: 0x58,
    LATIN_CAPITAL_Z: 0x5A,
    GRAVE_ACCENT: 0x60,
    LATIN_SMALL_A: 0x61,
    LATIN_SMALL_F: 0x66,
    LATIN_SMALL_X: 0x78,
    LATIN_SMALL_Z: 0x7A,
    REPLACEMENT_CHARACTER: 0xFFFD
};

exports.CODE_POINT_SEQUENCES = {
    DASH_DASH_STRING: [0x2D, 0x2D], //--
    DOCTYPE_STRING: [0x44, 0x4F, 0x43, 0x54, 0x59, 0x50, 0x45], //DOCTYPE
    CDATA_START_STRING: [0x5B, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5B], //[CDATA[
    CDATA_END_STRING: [0x5D, 0x5D, 0x3E], //]]>
    SCRIPT_STRING: [0x73, 0x63, 0x72, 0x69, 0x70, 0x74], //script
    PUBLIC_STRING: [0x50, 0x55, 0x42, 0x4C, 0x49, 0x43], //PUBLIC
    SYSTEM_STRING: [0x53, 0x59, 0x53, 0x54, 0x45, 0x4D] //SYSTEM
};

},{}],495:[function(require,module,exports){
'use strict';

var Mixin = require('../../utils/mixin'),
    inherits = require('util').inherits;

var LocationInfoOpenElementStackMixin = module.exports = function (stack, options) {
    Mixin.call(this, stack);

    this.onItemPop = options.onItemPop;
};

inherits(LocationInfoOpenElementStackMixin, Mixin);

LocationInfoOpenElementStackMixin.prototype._getOverriddenMethods = function (mxn, orig) {
    return {
        pop: function () {
            mxn.onItemPop(this.current);
            orig.pop.call(this);
        },

        popAllUpToHtmlElement: function () {
            for (var i = this.stackTop; i > 0; i--)
                mxn.onItemPop(this.items[i]);

            orig.popAllUpToHtmlElement.call(this);
        },

        remove: function (element) {
            mxn.onItemPop(this.current);
            orig.remove.call(this, element);
        }
    };
};


},{"../../utils/mixin":516,"util":64}],496:[function(require,module,exports){
'use strict';

var Mixin = require('../../utils/mixin'),
    Tokenizer = require('../../tokenizer'),
    LocationInfoTokenizerMixin = require('./tokenizer_mixin'),
    PositionTrackingPreprocessorMixin = require('../position_tracking/preprocessor_mixin'),
    LocationInfoOpenElementStackMixin = require('./open_element_stack_mixin'),
    HTML = require('../../common/html'),
    inherits = require('util').inherits;


//Aliases
var $ = HTML.TAG_NAMES;

var LocationInfoParserMixin = module.exports = function (parser) {
    Mixin.call(this, parser);

    this.parser = parser;
    this.posTracker = null;
    this.lastStartTagToken = null;
    this.lastFosterParentingLocation = null;
    this.currentToken = null;
};

inherits(LocationInfoParserMixin, Mixin);


LocationInfoParserMixin.prototype._setStartLocation = function (element) {
    if (this.lastStartTagToken) {
        element.__location = Object.create(this.lastStartTagToken.location);
        element.__location.startTag = this.lastStartTagToken.location;
    }
    else
        element.__location = null;
};

LocationInfoParserMixin.prototype._setEndLocation = function (element, closingToken) {
    var loc = element.__location;

    if (loc) {
        if (closingToken.location) {
            var ctLoc = closingToken.location,
                tn = this.parser.treeAdapter.getTagName(element);

            // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing
            // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.
            var isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;

            if (isClosingEndTag) {
                loc.endTag = Object.create(ctLoc);
                loc.endOffset = ctLoc.endOffset;
            }

            else
                loc.endOffset = ctLoc.startOffset;
        }

        else if (closingToken.type === Tokenizer.EOF_TOKEN)
            loc.endOffset = this.posTracker.offset;
    }
};

LocationInfoParserMixin.prototype._getOverriddenMethods = function (mxn, orig) {
    return {
        _bootstrap: function (document, fragmentContext) {
            orig._bootstrap.call(this, document, fragmentContext);

            mxn.lastStartTagToken = null;
            mxn.lastFosterParentingLocation = null;
            mxn.currentToken = null;
            mxn.posTracker = new PositionTrackingPreprocessorMixin(this.tokenizer.preprocessor);

            new LocationInfoTokenizerMixin(this.tokenizer);

            new LocationInfoOpenElementStackMixin(this.openElements, {
                onItemPop: function (element) {
                    mxn._setEndLocation(element, mxn.currentToken);
                }
            });
        },

        _runParsingLoop: function (scriptHandler) {
            orig._runParsingLoop.call(this, scriptHandler);

            // NOTE: generate location info for elements
            // that remains on open element stack
            for (var i = this.openElements.stackTop; i >= 0; i--)
                mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);
        },


        //Token processing
        _processTokenInForeignContent: function (token) {
            mxn.currentToken = token;
            orig._processTokenInForeignContent.call(this, token);
        },

        _processToken: function (token) {
            mxn.currentToken = token;
            orig._processToken.call(this, token);

            //NOTE: <body> and <html> are never popped from the stack, so we need to updated
            //their end location explicitly.
            var requireExplicitUpdate = token.type === Tokenizer.END_TAG_TOKEN &&
                                        (token.tagName === $.HTML ||
                                         token.tagName === $.BODY && this.openElements.hasInScope($.BODY));

            if (requireExplicitUpdate) {
                for (var i = this.openElements.stackTop; i >= 0; i--) {
                    var element = this.openElements.items[i];

                    if (this.treeAdapter.getTagName(element) === token.tagName) {
                        mxn._setEndLocation(element, token);
                        break;
                    }
                }
            }
        },


        //Doctype
        _setDocumentType: function (token) {
            orig._setDocumentType.call(this, token);

            var documentChildren = this.treeAdapter.getChildNodes(this.document),
                cnLength = documentChildren.length;

            for (var i = 0; i < cnLength; i++) {
                var node = documentChildren[i];

                if (this.treeAdapter.isDocumentTypeNode(node)) {
                    node.__location = token.location;
                    break;
                }
            }
        },


        //Elements
        _attachElementToTree: function (element) {
            //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.
            //So we will use token location stored in this methods for the element.
            mxn._setStartLocation(element);
            mxn.lastStartTagToken = null;
            orig._attachElementToTree.call(this, element);
        },

        _appendElement: function (token, namespaceURI) {
            mxn.lastStartTagToken = token;
            orig._appendElement.call(this, token, namespaceURI);
        },

        _insertElement: function (token, namespaceURI) {
            mxn.lastStartTagToken = token;
            orig._insertElement.call(this, token, namespaceURI);
        },

        _insertTemplate: function (token) {
            mxn.lastStartTagToken = token;
            orig._insertTemplate.call(this, token);

            var tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);

            tmplContent.__location = null;
        },

        _insertFakeRootElement: function () {
            orig._insertFakeRootElement.call(this);
            this.openElements.current.__location = null;
        },

        //Comments
        _appendCommentNode: function (token, parent) {
            orig._appendCommentNode.call(this, token, parent);

            var children = this.treeAdapter.getChildNodes(parent),
                commentNode = children[children.length - 1];

            commentNode.__location = token.location;
        },

        //Text
        _findFosterParentingLocation: function () {
            //NOTE: store last foster parenting location, so we will be able to find inserted text
            //in case of foster parenting
            mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);

            return mxn.lastFosterParentingLocation;
        },

        _insertCharacters: function (token) {
            orig._insertCharacters.call(this, token);

            var hasFosterParent = this._shouldFosterParentOnInsertion(),
                parent = hasFosterParent && mxn.lastFosterParentingLocation.parent ||
                         this.openElements.currentTmplContent ||
                         this.openElements.current,
                siblings = this.treeAdapter.getChildNodes(parent),
                textNodeIdx = hasFosterParent && mxn.lastFosterParentingLocation.beforeElement ?
                siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1 :
                siblings.length - 1,
                textNode = siblings[textNodeIdx];

            //NOTE: if we have location assigned by another token, then just update end position
            if (textNode.__location)
                textNode.__location.endOffset = token.location.endOffset;

            else
                textNode.__location = token.location;
        }
    };
};


},{"../../common/html":493,"../../tokenizer":510,"../../utils/mixin":516,"../position_tracking/preprocessor_mixin":498,"./open_element_stack_mixin":495,"./tokenizer_mixin":497,"util":64}],497:[function(require,module,exports){
'use strict';

var Mixin = require('../../utils/mixin'),
    Tokenizer = require('../../tokenizer'),
    PositionTrackingPreprocessorMixin = require('../position_tracking/preprocessor_mixin'),
    inherits = require('util').inherits;

var LocationInfoTokenizerMixin = module.exports = function (tokenizer) {
    Mixin.call(this, tokenizer);

    this.tokenizer = tokenizer;
    this.posTracker = new PositionTrackingPreprocessorMixin(tokenizer.preprocessor);
    this.currentAttrLocation = null;
    this.currentTokenLocation = null;
};

inherits(LocationInfoTokenizerMixin, Mixin);

LocationInfoTokenizerMixin.prototype._getCurrentLocation = function () {
    return {
        line: this.posTracker.line,
        col: this.posTracker.col,
        startOffset: this.posTracker.offset,
        endOffset: -1
    };
};

LocationInfoTokenizerMixin.prototype._attachCurrentAttrLocationInfo = function () {
    this.currentAttrLocation.endOffset = this.posTracker.offset;

    var currentToken = this.tokenizer.currentToken,
        currentAttr = this.tokenizer.currentAttr;

    if (!currentToken.location.attrs)
        currentToken.location.attrs = Object.create(null);

    currentToken.location.attrs[currentAttr.name] = this.currentAttrLocation;
};

LocationInfoTokenizerMixin.prototype._getOverriddenMethods = function (mxn, orig) {
    var methods = {
        _createStartTagToken: function () {
            orig._createStartTagToken.call(this);
            this.currentToken.location = mxn.currentTokenLocation;
        },

        _createEndTagToken: function () {
            orig._createEndTagToken.call(this);
            this.currentToken.location = mxn.currentTokenLocation;
        },

        _createCommentToken: function () {
            orig._createCommentToken.call(this);
            this.currentToken.location = mxn.currentTokenLocation;
        },

        _createDoctypeToken: function (initialName) {
            orig._createDoctypeToken.call(this, initialName);
            this.currentToken.location = mxn.currentTokenLocation;
        },

        _createCharacterToken: function (type, ch) {
            orig._createCharacterToken.call(this, type, ch);
            this.currentCharacterToken.location = mxn.currentTokenLocation;
        },

        _createAttr: function (attrNameFirstCh) {
            orig._createAttr.call(this, attrNameFirstCh);
            mxn.currentAttrLocation = mxn._getCurrentLocation();
        },

        _leaveAttrName: function (toState) {
            orig._leaveAttrName.call(this, toState);
            mxn._attachCurrentAttrLocationInfo();
        },

        _leaveAttrValue: function (toState) {
            orig._leaveAttrValue.call(this, toState);
            mxn._attachCurrentAttrLocationInfo();
        },

        _emitCurrentToken: function () {
            //NOTE: if we have pending character token make it's end location equal to the
            //current token's start location.
            if (this.currentCharacterToken)
                this.currentCharacterToken.location.endOffset = this.currentToken.location.startOffset;

            this.currentToken.location.endOffset = mxn.posTracker.offset + 1;
            orig._emitCurrentToken.call(this);
        },

        _emitCurrentCharacterToken: function () {
            //NOTE: if we have character token and it's location wasn't set in the _emitCurrentToken(),
            //then set it's location at the current preprocessor position.
            //We don't need to increment preprocessor position, since character token
            //emission is always forced by the start of the next character token here.
            //So, we already have advanced position.
            if (this.currentCharacterToken && this.currentCharacterToken.location.endOffset === -1)
                this.currentCharacterToken.location.endOffset = mxn.posTracker.offset;

            orig._emitCurrentCharacterToken.call(this);
        }
    };

    //NOTE: patch initial states for each mode to obtain token start position
    Object.keys(Tokenizer.MODE).forEach(function (modeName) {
        var state = Tokenizer.MODE[modeName];

        methods[state] = function (cp) {
            mxn.currentTokenLocation = mxn._getCurrentLocation();
            orig[state].call(this, cp);
        };
    });

    return methods;
};


},{"../../tokenizer":510,"../../utils/mixin":516,"../position_tracking/preprocessor_mixin":498,"util":64}],498:[function(require,module,exports){
'use strict';

var Mixin = require('../../utils/mixin'),
    inherits = require('util').inherits,
    UNICODE = require('../../common/unicode');

//Aliases
var $ = UNICODE.CODE_POINTS;

var PositionTrackingPreprocessorMixin = module.exports = function (preprocessor) {
    // NOTE: avoid installing tracker twice
    if (!preprocessor.__locTracker) {
        preprocessor.__locTracker = this;

        Mixin.call(this, preprocessor);

        this.preprocessor = preprocessor;
        this.isEol = false;
        this.lineStartPos = 0;
        this.droppedBufferSize = 0;

        this.col = -1;
        this.line = 1;
    }

    return preprocessor.__locTracker;
};

inherits(PositionTrackingPreprocessorMixin, Mixin);

Object.defineProperty(PositionTrackingPreprocessorMixin.prototype, 'offset', {
    get: function () {
        return this.droppedBufferSize + this.preprocessor.pos;
    }
});

PositionTrackingPreprocessorMixin.prototype._getOverriddenMethods = function (mxn, orig) {
    return {
        advance: function () {
            var cp = orig.advance.call(this);

            //NOTE: LF should be in the last column of the line
            if (mxn.isEol) {
                mxn.isEol = false;
                mxn.line++;
                mxn.lineStartPos = mxn.offset;
            }

            if (cp === $.LINE_FEED)
                mxn.isEol = true;

            mxn.col = mxn.offset - mxn.lineStartPos + 1;

            return cp;
        },

        retreat: function () {
            orig.retreat.call(this);
            mxn.isEol = false;

            mxn.col = mxn.offset - mxn.lineStartPos + 1;
        },

        dropParsedChunk: function () {
            var prevPos = this.pos;

            orig.dropParsedChunk.call(this);

            mxn.droppedBufferSize += prevPos - this.pos;
        }
    };
};

},{"../../common/unicode":494,"../../utils/mixin":516,"util":64}],499:[function(require,module,exports){
'use strict';

var Parser = require('./parser'),
    Serializer = require('./serializer');


// Shorthands
exports.parse = function parse(html, options) {
    var parser = new Parser(options);

    return parser.parse(html);
};

exports.parseFragment = function parseFragment(fragmentContext, html, options) {
    if (typeof fragmentContext === 'string') {
        options = html;
        html = fragmentContext;
        fragmentContext = null;
    }

    var parser = new Parser(options);

    return parser.parseFragment(html, fragmentContext);
};

exports.serialize = function (node, options) {
    var serializer = new Serializer(node, options);

    return serializer.serialize();
};


// Tree adapters
exports.treeAdapters = {
    default: require('./tree_adapters/default'),
    htmlparser2: require('./tree_adapters/htmlparser2')
};


// Streaming
exports.ParserStream = require('./parser/parser_stream');
exports.PlainTextConversionStream = require('./parser/plain_text_conversion_stream');
exports.SerializerStream = require('./serializer/serializer_stream');
exports.SAXParser = require('./sax');

},{"./parser":501,"./parser/parser_stream":503,"./parser/plain_text_conversion_stream":504,"./sax":506,"./serializer":508,"./serializer/serializer_stream":509,"./tree_adapters/default":513,"./tree_adapters/htmlparser2":514}],500:[function(require,module,exports){
'use strict';

//Const
var NOAH_ARK_CAPACITY = 3;

//List of formatting elements
var FormattingElementList = module.exports = function (treeAdapter) {
    this.length = 0;
    this.entries = [];
    this.treeAdapter = treeAdapter;
    this.bookmark = null;
};

//Entry types
FormattingElementList.MARKER_ENTRY = 'MARKER_ENTRY';
FormattingElementList.ELEMENT_ENTRY = 'ELEMENT_ENTRY';

//Noah Ark's condition
//OPTIMIZATION: at first we try to find possible candidates for exclusion using
//lightweight heuristics without thorough attributes check.
FormattingElementList.prototype._getNoahArkConditionCandidates = function (newElement) {
    var candidates = [];

    if (this.length >= NOAH_ARK_CAPACITY) {
        var neAttrsLength = this.treeAdapter.getAttrList(newElement).length,
            neTagName = this.treeAdapter.getTagName(newElement),
            neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);

        for (var i = this.length - 1; i >= 0; i--) {
            var entry = this.entries[i];

            if (entry.type === FormattingElementList.MARKER_ENTRY)
                break;

            var element = entry.element,
                elementAttrs = this.treeAdapter.getAttrList(element),
                isCandidate = this.treeAdapter.getTagName(element) === neTagName &&
                              this.treeAdapter.getNamespaceURI(element) === neNamespaceURI &&
                              elementAttrs.length === neAttrsLength;

            if (isCandidate)
                candidates.push({idx: i, attrs: elementAttrs});
        }
    }

    return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
};

FormattingElementList.prototype._ensureNoahArkCondition = function (newElement) {
    var candidates = this._getNoahArkConditionCandidates(newElement),
        cLength = candidates.length;

    if (cLength) {
        var neAttrs = this.treeAdapter.getAttrList(newElement),
            neAttrsLength = neAttrs.length,
            neAttrsMap = Object.create(null);

        //NOTE: build attrs map for the new element so we can perform fast lookups
        for (var i = 0; i < neAttrsLength; i++) {
            var neAttr = neAttrs[i];

            neAttrsMap[neAttr.name] = neAttr.value;
        }

        for (i = 0; i < neAttrsLength; i++) {
            for (var j = 0; j < cLength; j++) {
                var cAttr = candidates[j].attrs[i];

                if (neAttrsMap[cAttr.name] !== cAttr.value) {
                    candidates.splice(j, 1);
                    cLength--;
                }

                if (candidates.length < NOAH_ARK_CAPACITY)
                    return;
            }
        }

        //NOTE: remove bottommost candidates until Noah's Ark condition will not be met
        for (i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {
            this.entries.splice(candidates[i].idx, 1);
            this.length--;
        }
    }
};

//Mutations
FormattingElementList.prototype.insertMarker = function () {
    this.entries.push({type: FormattingElementList.MARKER_ENTRY});
    this.length++;
};

FormattingElementList.prototype.pushElement = function (element, token) {
    this._ensureNoahArkCondition(element);

    this.entries.push({
        type: FormattingElementList.ELEMENT_ENTRY,
        element: element,
        token: token
    });

    this.length++;
};

FormattingElementList.prototype.insertElementAfterBookmark = function (element, token) {
    var bookmarkIdx = this.length - 1;

    for (; bookmarkIdx >= 0; bookmarkIdx--) {
        if (this.entries[bookmarkIdx] === this.bookmark)
            break;
    }

    this.entries.splice(bookmarkIdx + 1, 0, {
        type: FormattingElementList.ELEMENT_ENTRY,
        element: element,
        token: token
    });

    this.length++;
};

FormattingElementList.prototype.removeEntry = function (entry) {
    for (var i = this.length - 1; i >= 0; i--) {
        if (this.entries[i] === entry) {
            this.entries.splice(i, 1);
            this.length--;
            break;
        }
    }
};

FormattingElementList.prototype.clearToLastMarker = function () {
    while (this.length) {
        var entry = this.entries.pop();

        this.length--;

        if (entry.type === FormattingElementList.MARKER_ENTRY)
            break;
    }
};

//Search
FormattingElementList.prototype.getElementEntryInScopeWithTagName = function (tagName) {
    for (var i = this.length - 1; i >= 0; i--) {
        var entry = this.entries[i];

        if (entry.type === FormattingElementList.MARKER_ENTRY)
            return null;

        if (this.treeAdapter.getTagName(entry.element) === tagName)
            return entry;
    }

    return null;
};

FormattingElementList.prototype.getElementEntry = function (element) {
    for (var i = this.length - 1; i >= 0; i--) {
        var entry = this.entries[i];

        if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element)
            return entry;
    }

    return null;
};

},{}],501:[function(require,module,exports){
'use strict';

var Tokenizer = require('../tokenizer'),
    OpenElementStack = require('./open_element_stack'),
    FormattingElementList = require('./formatting_element_list'),
    LocationInfoParserMixin = require('../extensions/location_info/parser_mixin'),
    defaultTreeAdapter = require('../tree_adapters/default'),
    mergeOptions = require('../utils/merge_options'),
    doctype = require('../common/doctype'),
    foreignContent = require('../common/foreign_content'),
    UNICODE = require('../common/unicode'),
    HTML = require('../common/html');

//Aliases
var $ = HTML.TAG_NAMES,
    NS = HTML.NAMESPACES,
    ATTRS = HTML.ATTRS;

var DEFAULT_OPTIONS = {
    locationInfo: false,
    treeAdapter: defaultTreeAdapter
};

//Misc constants
var HIDDEN_INPUT_TYPE = 'hidden';

//Adoption agency loops iteration count
var AA_OUTER_LOOP_ITER = 8,
    AA_INNER_LOOP_ITER = 3;

//Insertion modes
var INITIAL_MODE = 'INITIAL_MODE',
    BEFORE_HTML_MODE = 'BEFORE_HTML_MODE',
    BEFORE_HEAD_MODE = 'BEFORE_HEAD_MODE',
    IN_HEAD_MODE = 'IN_HEAD_MODE',
    AFTER_HEAD_MODE = 'AFTER_HEAD_MODE',
    IN_BODY_MODE = 'IN_BODY_MODE',
    TEXT_MODE = 'TEXT_MODE',
    IN_TABLE_MODE = 'IN_TABLE_MODE',
    IN_TABLE_TEXT_MODE = 'IN_TABLE_TEXT_MODE',
    IN_CAPTION_MODE = 'IN_CAPTION_MODE',
    IN_COLUMN_GROUP_MODE = 'IN_COLUMN_GROUP_MODE',
    IN_TABLE_BODY_MODE = 'IN_TABLE_BODY_MODE',
    IN_ROW_MODE = 'IN_ROW_MODE',
    IN_CELL_MODE = 'IN_CELL_MODE',
    IN_SELECT_MODE = 'IN_SELECT_MODE',
    IN_SELECT_IN_TABLE_MODE = 'IN_SELECT_IN_TABLE_MODE',
    IN_TEMPLATE_MODE = 'IN_TEMPLATE_MODE',
    AFTER_BODY_MODE = 'AFTER_BODY_MODE',
    IN_FRAMESET_MODE = 'IN_FRAMESET_MODE',
    AFTER_FRAMESET_MODE = 'AFTER_FRAMESET_MODE',
    AFTER_AFTER_BODY_MODE = 'AFTER_AFTER_BODY_MODE',
    AFTER_AFTER_FRAMESET_MODE = 'AFTER_AFTER_FRAMESET_MODE';

//Insertion mode reset map
var INSERTION_MODE_RESET_MAP = Object.create(null);

INSERTION_MODE_RESET_MAP[$.TR] = IN_ROW_MODE;
INSERTION_MODE_RESET_MAP[$.TBODY] =
INSERTION_MODE_RESET_MAP[$.THEAD] =
INSERTION_MODE_RESET_MAP[$.TFOOT] = IN_TABLE_BODY_MODE;
INSERTION_MODE_RESET_MAP[$.CAPTION] = IN_CAPTION_MODE;
INSERTION_MODE_RESET_MAP[$.COLGROUP] = IN_COLUMN_GROUP_MODE;
INSERTION_MODE_RESET_MAP[$.TABLE] = IN_TABLE_MODE;
INSERTION_MODE_RESET_MAP[$.BODY] = IN_BODY_MODE;
INSERTION_MODE_RESET_MAP[$.FRAMESET] = IN_FRAMESET_MODE;

//Template insertion mode switch map
var TEMPLATE_INSERTION_MODE_SWITCH_MAP = Object.create(null);

TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.CAPTION] =
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COLGROUP] =
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TBODY] =
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TFOOT] =
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.THEAD] = IN_TABLE_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COL] = IN_COLUMN_GROUP_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TR] = IN_TABLE_BODY_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TD] =
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TH] = IN_ROW_MODE;

//Token handlers map for insertion modes
var _ = Object.create(null);

_[INITIAL_MODE] = Object.create(null);
_[INITIAL_MODE][Tokenizer.CHARACTER_TOKEN] =
_[INITIAL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInInitialMode;
_[INITIAL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[INITIAL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[INITIAL_MODE][Tokenizer.DOCTYPE_TOKEN] = doctypeInInitialMode;
_[INITIAL_MODE][Tokenizer.START_TAG_TOKEN] =
_[INITIAL_MODE][Tokenizer.END_TAG_TOKEN] =
_[INITIAL_MODE][Tokenizer.EOF_TOKEN] = tokenInInitialMode;

_[BEFORE_HTML_MODE] = Object.create(null);
_[BEFORE_HTML_MODE][Tokenizer.CHARACTER_TOKEN] =
_[BEFORE_HTML_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[BEFORE_HTML_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[BEFORE_HTML_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[BEFORE_HTML_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHtml;

_[BEFORE_HEAD_MODE] = Object.create(null);
_[BEFORE_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] =
_[BEFORE_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[BEFORE_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[BEFORE_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[BEFORE_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHead;

_[IN_HEAD_MODE] = Object.create(null);
_[IN_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] =
_[IN_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInHead;
_[IN_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagInHead;
_[IN_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagInHead;
_[IN_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenInHead;

_[AFTER_HEAD_MODE] = Object.create(null);
_[AFTER_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] =
_[AFTER_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[AFTER_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[AFTER_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenAfterHead;

_[IN_BODY_MODE] = Object.create(null);
_[IN_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInBody;
_[IN_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInBody;
_[IN_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[TEXT_MODE] = Object.create(null);
_[TEXT_MODE][Tokenizer.CHARACTER_TOKEN] =
_[TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
_[TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[TEXT_MODE][Tokenizer.COMMENT_TOKEN] =
_[TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] =
_[TEXT_MODE][Tokenizer.START_TAG_TOKEN] = ignoreToken;
_[TEXT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInText;
_[TEXT_MODE][Tokenizer.EOF_TOKEN] = eofInText;

_[IN_TABLE_MODE] = Object.create(null);
_[IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] =
_[IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
_[IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTable;
_[IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTable;
_[IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_TABLE_TEXT_MODE] = Object.create(null);
_[IN_TABLE_TEXT_MODE][Tokenizer.CHARACTER_TOKEN] = characterInTableText;
_[IN_TABLE_TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_TABLE_TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInTableText;
_[IN_TABLE_TEXT_MODE][Tokenizer.COMMENT_TOKEN] =
_[IN_TABLE_TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] =
_[IN_TABLE_TEXT_MODE][Tokenizer.START_TAG_TOKEN] =
_[IN_TABLE_TEXT_MODE][Tokenizer.END_TAG_TOKEN] =
_[IN_TABLE_TEXT_MODE][Tokenizer.EOF_TOKEN] = tokenInTableText;

_[IN_CAPTION_MODE] = Object.create(null);
_[IN_CAPTION_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_CAPTION_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_CAPTION_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_CAPTION_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_CAPTION_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_CAPTION_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCaption;
_[IN_CAPTION_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCaption;
_[IN_CAPTION_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_COLUMN_GROUP_MODE] = Object.create(null);
_[IN_COLUMN_GROUP_MODE][Tokenizer.CHARACTER_TOKEN] =
_[IN_COLUMN_GROUP_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_COLUMN_GROUP_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_COLUMN_GROUP_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_COLUMN_GROUP_MODE][Tokenizer.START_TAG_TOKEN] = startTagInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.END_TAG_TOKEN] = endTagInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_TABLE_BODY_MODE] = Object.create(null);
_[IN_TABLE_BODY_MODE][Tokenizer.CHARACTER_TOKEN] =
_[IN_TABLE_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
_[IN_TABLE_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_TABLE_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TABLE_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TABLE_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTableBody;
_[IN_TABLE_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTableBody;
_[IN_TABLE_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_ROW_MODE] = Object.create(null);
_[IN_ROW_MODE][Tokenizer.CHARACTER_TOKEN] =
_[IN_ROW_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
_[IN_ROW_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_ROW_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_ROW_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_ROW_MODE][Tokenizer.START_TAG_TOKEN] = startTagInRow;
_[IN_ROW_MODE][Tokenizer.END_TAG_TOKEN] = endTagInRow;
_[IN_ROW_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_CELL_MODE] = Object.create(null);
_[IN_CELL_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_CELL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_CELL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_CELL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_CELL_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_CELL_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCell;
_[IN_CELL_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCell;
_[IN_CELL_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_SELECT_MODE] = Object.create(null);
_[IN_SELECT_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_SELECT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_SELECT_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_SELECT_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelect;
_[IN_SELECT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelect;
_[IN_SELECT_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_SELECT_IN_TABLE_MODE] = Object.create(null);
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelectInTable;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelectInTable;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

_[IN_TEMPLATE_MODE] = Object.create(null);
_[IN_TEMPLATE_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_TEMPLATE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_TEMPLATE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_TEMPLATE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TEMPLATE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TEMPLATE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTemplate;
_[IN_TEMPLATE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTemplate;
_[IN_TEMPLATE_MODE][Tokenizer.EOF_TOKEN] = eofInTemplate;

_[AFTER_BODY_MODE] = Object.create(null);
_[AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] =
_[AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterBody;
_[AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToRootHtmlElement;
_[AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterBody;
_[AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterBody;
_[AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

_[IN_FRAMESET_MODE] = Object.create(null);
_[IN_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] =
_[IN_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagInFrameset;
_[IN_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagInFrameset;
_[IN_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

_[AFTER_FRAMESET_MODE] = Object.create(null);
_[AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] =
_[AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterFrameset;
_[AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterFrameset;
_[AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

_[AFTER_AFTER_BODY_MODE] = Object.create(null);
_[AFTER_AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
_[AFTER_AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

_[AFTER_AFTER_FRAMESET_MODE] = Object.create(null);
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] =
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterFrameset;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;


//Parser
var Parser = module.exports = function (options) {
    this.options = mergeOptions(DEFAULT_OPTIONS, options);

    this.treeAdapter = this.options.treeAdapter;
    this.pendingScript = null;

    if (this.options.locationInfo)
        new LocationInfoParserMixin(this);
};

// API
Parser.prototype.parse = function (html) {
    var document = this.treeAdapter.createDocument();

    this._bootstrap(document, null);
    this.tokenizer.write(html, true);
    this._runParsingLoop(null);

    return document;
};

Parser.prototype.parseFragment = function (html, fragmentContext) {
    //NOTE: use <template> element as a fragment context if context element was not provided,
    //so we will parse in "forgiving" manner
    if (!fragmentContext)
        fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);

    //NOTE: create fake element which will be used as 'document' for fragment parsing.
    //This is important for jsdom there 'document' can't be recreated, therefore
    //fragment parsing causes messing of the main `document`.
    var documentMock = this.treeAdapter.createElement('documentmock', NS.HTML, []);

    this._bootstrap(documentMock, fragmentContext);

    if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE)
        this._pushTmplInsertionMode(IN_TEMPLATE_MODE);

    this._initTokenizerForFragmentParsing();
    this._insertFakeRootElement();
    this._resetInsertionMode();
    this._findFormInFragmentContext();
    this.tokenizer.write(html, true);
    this._runParsingLoop(null);

    var rootElement = this.treeAdapter.getFirstChild(documentMock),
        fragment = this.treeAdapter.createDocumentFragment();

    this._adoptNodes(rootElement, fragment);

    return fragment;
};

//Bootstrap parser
Parser.prototype._bootstrap = function (document, fragmentContext) {
    this.tokenizer = new Tokenizer(this.options);

    this.stopped = false;

    this.insertionMode = INITIAL_MODE;
    this.originalInsertionMode = '';

    this.document = document;
    this.fragmentContext = fragmentContext;

    this.headElement = null;
    this.formElement = null;

    this.openElements = new OpenElementStack(this.document, this.treeAdapter);
    this.activeFormattingElements = new FormattingElementList(this.treeAdapter);

    this.tmplInsertionModeStack = [];
    this.tmplInsertionModeStackTop = -1;
    this.currentTmplInsertionMode = null;

    this.pendingCharacterTokens = [];
    this.hasNonWhitespacePendingCharacterToken = false;

    this.framesetOk = true;
    this.skipNextNewLine = false;
    this.fosterParentingEnabled = false;
};

//Parsing loop
Parser.prototype._runParsingLoop  = function (scriptHandler) {
    while (!this.stopped) {
        this._setupTokenizerCDATAMode();

        var token = this.tokenizer.getNextToken();

        if (token.type === Tokenizer.HIBERNATION_TOKEN)
            break;

        if (this.skipNextNewLine) {
            this.skipNextNewLine = false;

            if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\n') {
                if (token.chars.length === 1)
                    continue;

                token.chars = token.chars.substr(1);
            }
        }

        this._processInputToken(token);

        if (scriptHandler && this.pendingScript)
            break;
    }
};

Parser.prototype.runParsingLoopForCurrentChunk = function (writeCallback, scriptHandler) {
    this._runParsingLoop(scriptHandler);

    if (scriptHandler && this.pendingScript) {
        var script = this.pendingScript;

        this.pendingScript = null;

        scriptHandler(script);

        return;
    }

    if (writeCallback)
        writeCallback();
};

//Text parsing
Parser.prototype._setupTokenizerCDATAMode = function () {
    var current = this._getAdjustedCurrentElement();

    this.tokenizer.allowCDATA = current && current !== this.document &&
                                this.treeAdapter.getNamespaceURI(current) !== NS.HTML && !this._isIntegrationPoint(current);
};

Parser.prototype._switchToTextParsing = function (currentToken, nextTokenizerState) {
    this._insertElement(currentToken, NS.HTML);
    this.tokenizer.state = nextTokenizerState;
    this.originalInsertionMode = this.insertionMode;
    this.insertionMode = TEXT_MODE;
};

Parser.prototype.switchToPlaintextParsing = function () {
    this.insertionMode = TEXT_MODE;
    this.originalInsertionMode = IN_BODY_MODE;
    this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
};

//Fragment parsing
Parser.prototype._getAdjustedCurrentElement = function () {
    return this.openElements.stackTop === 0 && this.fragmentContext ?
        this.fragmentContext :
        this.openElements.current;
};

Parser.prototype._findFormInFragmentContext = function () {
    var node = this.fragmentContext;

    do {
        if (this.treeAdapter.getTagName(node) === $.FORM) {
            this.formElement = node;
            break;
        }

        node = this.treeAdapter.getParentNode(node);
    } while (node);
};

Parser.prototype._initTokenizerForFragmentParsing = function () {
    if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {
        var tn = this.treeAdapter.getTagName(this.fragmentContext);

        if (tn === $.TITLE || tn === $.TEXTAREA)
            this.tokenizer.state = Tokenizer.MODE.RCDATA;

        else if (tn === $.STYLE || tn === $.XMP || tn === $.IFRAME ||
                 tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT)
            this.tokenizer.state = Tokenizer.MODE.RAWTEXT;

        else if (tn === $.SCRIPT)
            this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;

        else if (tn === $.PLAINTEXT)
            this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
    }
};

//Tree mutation
Parser.prototype._setDocumentType = function (token) {
    this.treeAdapter.setDocumentType(this.document, token.name, token.publicId, token.systemId);
};

Parser.prototype._attachElementToTree = function (element) {
    if (this._shouldFosterParentOnInsertion())
        this._fosterParentElement(element);

    else {
        var parent = this.openElements.currentTmplContent || this.openElements.current;

        this.treeAdapter.appendChild(parent, element);
    }
};

Parser.prototype._appendElement = function (token, namespaceURI) {
    var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

    this._attachElementToTree(element);
};

Parser.prototype._insertElement = function (token, namespaceURI) {
    var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

    this._attachElementToTree(element);
    this.openElements.push(element);
};

Parser.prototype._insertFakeElement = function (tagName) {
    var element = this.treeAdapter.createElement(tagName, NS.HTML, []);

    this._attachElementToTree(element);
    this.openElements.push(element);
};

Parser.prototype._insertTemplate = function (token) {
    var tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs),
        content = this.treeAdapter.createDocumentFragment();

    this.treeAdapter.setTemplateContent(tmpl, content);
    this._attachElementToTree(tmpl);
    this.openElements.push(tmpl);
};

Parser.prototype._insertFakeRootElement = function () {
    var element = this.treeAdapter.createElement($.HTML, NS.HTML, []);

    this.treeAdapter.appendChild(this.openElements.current, element);
    this.openElements.push(element);
};

Parser.prototype._appendCommentNode = function (token, parent) {
    var commentNode = this.treeAdapter.createCommentNode(token.data);

    this.treeAdapter.appendChild(parent, commentNode);
};

Parser.prototype._insertCharacters = function (token) {
    if (this._shouldFosterParentOnInsertion())
        this._fosterParentText(token.chars);

    else {
        var parent = this.openElements.currentTmplContent || this.openElements.current;

        this.treeAdapter.insertText(parent, token.chars);
    }
};

Parser.prototype._adoptNodes = function (donor, recipient) {
    while (true) {
        var child = this.treeAdapter.getFirstChild(donor);

        if (!child)
            break;

        this.treeAdapter.detachNode(child);
        this.treeAdapter.appendChild(recipient, child);
    }
};

//Token processing
Parser.prototype._shouldProcessTokenInForeignContent = function (token) {
    var current = this._getAdjustedCurrentElement();

    if (!current || current === this.document)
        return false;

    var ns = this.treeAdapter.getNamespaceURI(current);

    if (ns === NS.HTML)
        return false;

    if (this.treeAdapter.getTagName(current) === $.ANNOTATION_XML && ns === NS.MATHML &&
        token.type === Tokenizer.START_TAG_TOKEN && token.tagName === $.SVG)
        return false;

    var isCharacterToken = token.type === Tokenizer.CHARACTER_TOKEN ||
                           token.type === Tokenizer.NULL_CHARACTER_TOKEN ||
                           token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN,
        isMathMLTextStartTag = token.type === Tokenizer.START_TAG_TOKEN &&
                               token.tagName !== $.MGLYPH &&
                               token.tagName !== $.MALIGNMARK;

    if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML))
        return false;

    if ((token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isIntegrationPoint(current, NS.HTML))
        return false;

    return token.type !== Tokenizer.EOF_TOKEN;
};

Parser.prototype._processToken = function (token) {
    _[this.insertionMode][token.type](this, token);
};

Parser.prototype._processTokenInBodyMode = function (token) {
    _[IN_BODY_MODE][token.type](this, token);
};

Parser.prototype._processTokenInForeignContent = function (token) {
    if (token.type === Tokenizer.CHARACTER_TOKEN)
        characterInForeignContent(this, token);

    else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN)
        nullCharacterInForeignContent(this, token);

    else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN)
        insertCharacters(this, token);

    else if (token.type === Tokenizer.COMMENT_TOKEN)
        appendComment(this, token);

    else if (token.type === Tokenizer.START_TAG_TOKEN)
        startTagInForeignContent(this, token);

    else if (token.type === Tokenizer.END_TAG_TOKEN)
        endTagInForeignContent(this, token);
};

Parser.prototype._processInputToken = function (token) {
    if (this._shouldProcessTokenInForeignContent(token))
        this._processTokenInForeignContent(token);

    else
        this._processToken(token);
};

//Integration points
Parser.prototype._isIntegrationPoint = function (element, foreignNS) {
    var tn = this.treeAdapter.getTagName(element),
        ns = this.treeAdapter.getNamespaceURI(element),
        attrs = this.treeAdapter.getAttrList(element);

    return foreignContent.isIntegrationPoint(tn, ns, attrs, foreignNS);
};

//Active formatting elements reconstruction
Parser.prototype._reconstructActiveFormattingElements = function () {
    var listLength = this.activeFormattingElements.length;

    if (listLength) {
        var unopenIdx = listLength,
            entry = null;

        do {
            unopenIdx--;
            entry = this.activeFormattingElements.entries[unopenIdx];

            if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
                unopenIdx++;
                break;
            }
        } while (unopenIdx > 0);

        for (var i = unopenIdx; i < listLength; i++) {
            entry = this.activeFormattingElements.entries[i];
            this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
            entry.element = this.openElements.current;
        }
    }
};

//Close elements
Parser.prototype._closeTableCell = function () {
    this.openElements.generateImpliedEndTags();
    this.openElements.popUntilTableCellPopped();
    this.activeFormattingElements.clearToLastMarker();
    this.insertionMode = IN_ROW_MODE;
};

Parser.prototype._closePElement = function () {
    this.openElements.generateImpliedEndTagsWithExclusion($.P);
    this.openElements.popUntilTagNamePopped($.P);
};

//Insertion modes
Parser.prototype._resetInsertionMode = function () {
    for (var i = this.openElements.stackTop, last = false; i >= 0; i--) {
        var element = this.openElements.items[i];

        if (i === 0) {
            last = true;

            if (this.fragmentContext)
                element = this.fragmentContext;
        }

        var tn = this.treeAdapter.getTagName(element),
            newInsertionMode = INSERTION_MODE_RESET_MAP[tn];

        if (newInsertionMode) {
            this.insertionMode = newInsertionMode;
            break;
        }

        else if (!last && (tn === $.TD || tn === $.TH)) {
            this.insertionMode = IN_CELL_MODE;
            break;
        }

        else if (!last && tn === $.HEAD) {
            this.insertionMode = IN_HEAD_MODE;
            break;
        }

        else if (tn === $.SELECT) {
            this._resetInsertionModeForSelect(i);
            break;
        }

        else if (tn === $.TEMPLATE) {
            this.insertionMode = this.currentTmplInsertionMode;
            break;
        }

        else if (tn === $.HTML) {
            this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
            break;
        }

        else if (last) {
            this.insertionMode = IN_BODY_MODE;
            break;
        }
    }
};

Parser.prototype._resetInsertionModeForSelect = function (selectIdx) {
    if (selectIdx > 0) {
        for (var i = selectIdx - 1; i > 0; i--) {
            var ancestor = this.openElements.items[i],
                tn = this.treeAdapter.getTagName(ancestor);

            if (tn === $.TEMPLATE)
                break;

            else if (tn === $.TABLE) {
                this.insertionMode = IN_SELECT_IN_TABLE_MODE;
                return;
            }
        }
    }

    this.insertionMode = IN_SELECT_MODE;
};

Parser.prototype._pushTmplInsertionMode = function (mode) {
    this.tmplInsertionModeStack.push(mode);
    this.tmplInsertionModeStackTop++;
    this.currentTmplInsertionMode = mode;
};

Parser.prototype._popTmplInsertionMode = function () {
    this.tmplInsertionModeStack.pop();
    this.tmplInsertionModeStackTop--;
    this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
};

//Foster parenting
Parser.prototype._isElementCausesFosterParenting = function (element) {
    var tn = this.treeAdapter.getTagName(element);

    return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR;
};

Parser.prototype._shouldFosterParentOnInsertion = function () {
    return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
};

Parser.prototype._findFosterParentingLocation = function () {
    var location = {
        parent: null,
        beforeElement: null
    };

    for (var i = this.openElements.stackTop; i >= 0; i--) {
        var openElement = this.openElements.items[i],
            tn = this.treeAdapter.getTagName(openElement),
            ns = this.treeAdapter.getNamespaceURI(openElement);

        if (tn === $.TEMPLATE && ns === NS.HTML) {
            location.parent = this.treeAdapter.getTemplateContent(openElement);
            break;
        }

        else if (tn === $.TABLE) {
            location.parent = this.treeAdapter.getParentNode(openElement);

            if (location.parent)
                location.beforeElement = openElement;
            else
                location.parent = this.openElements.items[i - 1];

            break;
        }
    }

    if (!location.parent)
        location.parent = this.openElements.items[0];

    return location;
};

Parser.prototype._fosterParentElement = function (element) {
    var location = this._findFosterParentingLocation();

    if (location.beforeElement)
        this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
    else
        this.treeAdapter.appendChild(location.parent, element);
};

Parser.prototype._fosterParentText = function (chars) {
    var location = this._findFosterParentingLocation();

    if (location.beforeElement)
        this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);
    else
        this.treeAdapter.insertText(location.parent, chars);
};

//Special elements
Parser.prototype._isSpecialElement = function (element) {
    var tn = this.treeAdapter.getTagName(element),
        ns = this.treeAdapter.getNamespaceURI(element);

    return HTML.SPECIAL_ELEMENTS[ns][tn];
};

//Adoption agency algorithm
//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)
//------------------------------------------------------------------

//Steps 5-8 of the algorithm
function aaObtainFormattingElementEntry(p, token) {
    var formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);

    if (formattingElementEntry) {
        if (!p.openElements.contains(formattingElementEntry.element)) {
            p.activeFormattingElements.removeEntry(formattingElementEntry);
            formattingElementEntry = null;
        }

        else if (!p.openElements.hasInScope(token.tagName))
            formattingElementEntry = null;
    }

    else
        genericEndTagInBody(p, token);

    return formattingElementEntry;
}

//Steps 9 and 10 of the algorithm
function aaObtainFurthestBlock(p, formattingElementEntry) {
    var furthestBlock = null;

    for (var i = p.openElements.stackTop; i >= 0; i--) {
        var element = p.openElements.items[i];

        if (element === formattingElementEntry.element)
            break;

        if (p._isSpecialElement(element))
            furthestBlock = element;
    }

    if (!furthestBlock) {
        p.openElements.popUntilElementPopped(formattingElementEntry.element);
        p.activeFormattingElements.removeEntry(formattingElementEntry);
    }

    return furthestBlock;
}

//Step 13 of the algorithm
function aaInnerLoop(p, furthestBlock, formattingElement) {
    var lastElement = furthestBlock,
        nextElement = p.openElements.getCommonAncestor(furthestBlock);

    for (var i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
        //NOTE: store next element for the next loop iteration (it may be deleted from the stack by step 9.5)
        nextElement = p.openElements.getCommonAncestor(element);

        var elementEntry = p.activeFormattingElements.getElementEntry(element),
            counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER,
            shouldRemoveFromOpenElements = !elementEntry || counterOverflow;

        if (shouldRemoveFromOpenElements) {
            if (counterOverflow)
                p.activeFormattingElements.removeEntry(elementEntry);

            p.openElements.remove(element);
        }

        else {
            element = aaRecreateElementFromEntry(p, elementEntry);

            if (lastElement === furthestBlock)
                p.activeFormattingElements.bookmark = elementEntry;

            p.treeAdapter.detachNode(lastElement);
            p.treeAdapter.appendChild(element, lastElement);
            lastElement = element;
        }
    }

    return lastElement;
}

//Step 13.7 of the algorithm
function aaRecreateElementFromEntry(p, elementEntry) {
    var ns = p.treeAdapter.getNamespaceURI(elementEntry.element),
        newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);

    p.openElements.replace(elementEntry.element, newElement);
    elementEntry.element = newElement;

    return newElement;
}

//Step 14 of the algorithm
function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
    if (p._isElementCausesFosterParenting(commonAncestor))
        p._fosterParentElement(lastElement);

    else {
        var tn = p.treeAdapter.getTagName(commonAncestor),
            ns = p.treeAdapter.getNamespaceURI(commonAncestor);

        if (tn === $.TEMPLATE && ns === NS.HTML)
            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);

        p.treeAdapter.appendChild(commonAncestor, lastElement);
    }
}

//Steps 15-19 of the algorithm
function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
    var ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element),
        token = formattingElementEntry.token,
        newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);

    p._adoptNodes(furthestBlock, newElement);
    p.treeAdapter.appendChild(furthestBlock, newElement);

    p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
    p.activeFormattingElements.removeEntry(formattingElementEntry);

    p.openElements.remove(formattingElementEntry.element);
    p.openElements.insertAfter(furthestBlock, newElement);
}

//Algorithm entry point
function callAdoptionAgency(p, token) {
    var formattingElementEntry;

    for (var i = 0; i < AA_OUTER_LOOP_ITER; i++) {
        formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);

        if (!formattingElementEntry)
            break;

        var furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);

        if (!furthestBlock)
            break;

        p.activeFormattingElements.bookmark = formattingElementEntry;

        var lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element),
            commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);

        p.treeAdapter.detachNode(lastElement);
        aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
    }
}


//Generic token handlers
//------------------------------------------------------------------
function ignoreToken() {
    //NOTE: do nothing =)
}

function appendComment(p, token) {
    p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);
}

function appendCommentToRootHtmlElement(p, token) {
    p._appendCommentNode(token, p.openElements.items[0]);
}

function appendCommentToDocument(p, token) {
    p._appendCommentNode(token, p.document);
}

function insertCharacters(p, token) {
    p._insertCharacters(token);
}

function stopParsing(p) {
    p.stopped = true;
}

//12.2.5.4.1 The "initial" insertion mode
//------------------------------------------------------------------
function doctypeInInitialMode(p, token) {
    p._setDocumentType(token);

    var mode = token.forceQuirks ?
        HTML.DOCUMENT_MODE.QUIRKS :
        doctype.getDocumentMode(token.name, token.publicId, token.systemId);

    p.treeAdapter.setDocumentMode(p.document, mode);

    p.insertionMode = BEFORE_HTML_MODE;
}

function tokenInInitialMode(p, token) {
    p.treeAdapter.setDocumentMode(p.document, HTML.DOCUMENT_MODE.QUIRKS);
    p.insertionMode = BEFORE_HTML_MODE;
    p._processToken(token);
}


//12.2.5.4.2 The "before html" insertion mode
//------------------------------------------------------------------
function startTagBeforeHtml(p, token) {
    if (token.tagName === $.HTML) {
        p._insertElement(token, NS.HTML);
        p.insertionMode = BEFORE_HEAD_MODE;
    }

    else
        tokenBeforeHtml(p, token);
}

function endTagBeforeHtml(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR)
        tokenBeforeHtml(p, token);
}

function tokenBeforeHtml(p, token) {
    p._insertFakeRootElement();
    p.insertionMode = BEFORE_HEAD_MODE;
    p._processToken(token);
}


//12.2.5.4.3 The "before head" insertion mode
//------------------------------------------------------------------
function startTagBeforeHead(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.HEAD) {
        p._insertElement(token, NS.HTML);
        p.headElement = p.openElements.current;
        p.insertionMode = IN_HEAD_MODE;
    }

    else
        tokenBeforeHead(p, token);
}

function endTagBeforeHead(p, token) {
    var tn = token.tagName;

    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR)
        tokenBeforeHead(p, token);
}

function tokenBeforeHead(p, token) {
    p._insertFakeElement($.HEAD);
    p.headElement = p.openElements.current;
    p.insertionMode = IN_HEAD_MODE;
    p._processToken(token);
}


//12.2.5.4.4 The "in head" insertion mode
//------------------------------------------------------------------
function startTagInHead(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META)
        p._appendElement(token, NS.HTML);

    else if (tn === $.TITLE)
        p._switchToTextParsing(token, Tokenizer.MODE.RCDATA);

    //NOTE: here we assume that we always act as an interactive user agent with enabled scripting, so we parse
    //<noscript> as a rawtext.
    else if (tn === $.NOSCRIPT || tn === $.NOFRAMES || tn === $.STYLE)
        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);

    else if (tn === $.SCRIPT)
        p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);

    else if (tn === $.TEMPLATE) {
        p._insertTemplate(token, NS.HTML);
        p.activeFormattingElements.insertMarker();
        p.framesetOk = false;
        p.insertionMode = IN_TEMPLATE_MODE;
        p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
    }

    else if (tn !== $.HEAD)
        tokenInHead(p, token);
}

function endTagInHead(p, token) {
    var tn = token.tagName;

    if (tn === $.HEAD) {
        p.openElements.pop();
        p.insertionMode = AFTER_HEAD_MODE;
    }

    else if (tn === $.BODY || tn === $.BR || tn === $.HTML)
        tokenInHead(p, token);

    else if (tn === $.TEMPLATE && p.openElements.tmplCount > 0) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped($.TEMPLATE);
        p.activeFormattingElements.clearToLastMarker();
        p._popTmplInsertionMode();
        p._resetInsertionMode();
    }
}

function tokenInHead(p, token) {
    p.openElements.pop();
    p.insertionMode = AFTER_HEAD_MODE;
    p._processToken(token);
}


//12.2.5.4.6 The "after head" insertion mode
//------------------------------------------------------------------
function startTagAfterHead(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.BODY) {
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
        p.insertionMode = IN_BODY_MODE;
    }

    else if (tn === $.FRAMESET) {
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_FRAMESET_MODE;
    }

    else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META ||
             tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
        p.openElements.push(p.headElement);
        startTagInHead(p, token);
        p.openElements.remove(p.headElement);
    }

    else if (tn !== $.HEAD)
        tokenAfterHead(p, token);
}

function endTagAfterHead(p, token) {
    var tn = token.tagName;

    if (tn === $.BODY || tn === $.HTML || tn === $.BR)
        tokenAfterHead(p, token);

    else if (tn === $.TEMPLATE)
        endTagInHead(p, token);
}

function tokenAfterHead(p, token) {
    p._insertFakeElement($.BODY);
    p.insertionMode = IN_BODY_MODE;
    p._processToken(token);
}


//12.2.5.4.7 The "in body" insertion mode
//------------------------------------------------------------------
function whitespaceCharacterInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertCharacters(token);
}

function characterInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertCharacters(token);
    p.framesetOk = false;
}

function htmlStartTagInBody(p, token) {
    if (p.openElements.tmplCount === 0)
        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
}

function bodyStartTagInBody(p, token) {
    var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

    if (bodyElement && p.openElements.tmplCount === 0) {
        p.framesetOk = false;
        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
    }
}

function framesetStartTagInBody(p, token) {
    var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

    if (p.framesetOk && bodyElement) {
        p.treeAdapter.detachNode(bodyElement);
        p.openElements.popAllUpToHtmlElement();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_FRAMESET_MODE;
    }
}

function addressStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    p._insertElement(token, NS.HTML);
}

function numberedHeaderStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    var tn = p.openElements.currentTagName;

    if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
        p.openElements.pop();

    p._insertElement(token, NS.HTML);
}

function preStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    p._insertElement(token, NS.HTML);
    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)
    p.skipNextNewLine = true;
    p.framesetOk = false;
}

function formStartTagInBody(p, token) {
    var inTemplate = p.openElements.tmplCount > 0;

    if (!p.formElement || inTemplate) {
        if (p.openElements.hasInButtonScope($.P))
            p._closePElement();

        p._insertElement(token, NS.HTML);

        if (!inTemplate)
            p.formElement = p.openElements.current;
    }
}

function listItemStartTagInBody(p, token) {
    p.framesetOk = false;

    var tn = token.tagName;

    for (var i = p.openElements.stackTop; i >= 0; i--) {
        var element = p.openElements.items[i],
            elementTn = p.treeAdapter.getTagName(element),
            closeTn = null;

        if (tn === $.LI && elementTn === $.LI)
            closeTn = $.LI;

        else if ((tn === $.DD || tn === $.DT) && (elementTn === $.DD || elementTn === $.DT))
            closeTn = elementTn;

        if (closeTn) {
            p.openElements.generateImpliedEndTagsWithExclusion(closeTn);
            p.openElements.popUntilTagNamePopped(closeTn);
            break;
        }

        if (elementTn !== $.ADDRESS && elementTn !== $.DIV && elementTn !== $.P && p._isSpecialElement(element))
            break;
    }

    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    p._insertElement(token, NS.HTML);
}

function plaintextStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    p._insertElement(token, NS.HTML);
    p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
}

function buttonStartTagInBody(p, token) {
    if (p.openElements.hasInScope($.BUTTON)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped($.BUTTON);
    }

    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.framesetOk = false;
}

function aStartTagInBody(p, token) {
    var activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);

    if (activeElementEntry) {
        callAdoptionAgency(p, token);
        p.openElements.remove(activeElementEntry.element);
        p.activeFormattingElements.removeEntry(activeElementEntry);
    }

    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function bStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function nobrStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();

    if (p.openElements.hasInScope($.NOBR)) {
        callAdoptionAgency(p, token);
        p._reconstructActiveFormattingElements();
    }

    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function appletStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.insertMarker();
    p.framesetOk = false;
}

function tableStartTagInBody(p, token) {
    if (p.treeAdapter.getDocumentMode(p.document) !== HTML.DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P))
        p._closePElement();

    p._insertElement(token, NS.HTML);
    p.framesetOk = false;
    p.insertionMode = IN_TABLE_MODE;
}

function areaStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._appendElement(token, NS.HTML);
    p.framesetOk = false;
}

function inputStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._appendElement(token, NS.HTML);

    var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);

    if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE)
        p.framesetOk = false;

}

function paramStartTagInBody(p, token) {
    p._appendElement(token, NS.HTML);
}

function hrStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    if (p.openElements.currentTagName === $.MENUITEM)
        p.openElements.pop();

    p._appendElement(token, NS.HTML);
    p.framesetOk = false;
}

function imageStartTagInBody(p, token) {
    token.tagName = $.IMG;
    areaStartTagInBody(p, token);
}

function textareaStartTagInBody(p, token) {
    p._insertElement(token, NS.HTML);
    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)
    p.skipNextNewLine = true;
    p.tokenizer.state = Tokenizer.MODE.RCDATA;
    p.originalInsertionMode = p.insertionMode;
    p.framesetOk = false;
    p.insertionMode = TEXT_MODE;
}

function xmpStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    p._reconstructActiveFormattingElements();
    p.framesetOk = false;
    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}

function iframeStartTagInBody(p, token) {
    p.framesetOk = false;
    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}

//NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse
//<noembed> as a rawtext.
function noembedStartTagInBody(p, token) {
    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}

function selectStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.framesetOk = false;

    if (p.insertionMode === IN_TABLE_MODE ||
        p.insertionMode === IN_CAPTION_MODE ||
        p.insertionMode === IN_TABLE_BODY_MODE ||
        p.insertionMode === IN_ROW_MODE ||
        p.insertionMode === IN_CELL_MODE)

        p.insertionMode = IN_SELECT_IN_TABLE_MODE;

    else
        p.insertionMode = IN_SELECT_MODE;
}

function optgroupStartTagInBody(p, token) {
    if (p.openElements.currentTagName === $.OPTION)
        p.openElements.pop();

    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
}

function rbStartTagInBody(p, token) {
    if (p.openElements.hasInScope($.RUBY))
        p.openElements.generateImpliedEndTags();

    p._insertElement(token, NS.HTML);
}

function rtStartTagInBody(p, token) {
    if (p.openElements.hasInScope($.RUBY))
        p.openElements.generateImpliedEndTagsWithExclusion($.RTC);

    p._insertElement(token, NS.HTML);
}

function menuitemStartTagInBody(p, token) {
    if (p.openElements.currentTagName === $.MENUITEM)
        p.openElements.pop();

    // TODO needs clarification, see https://github.com/whatwg/html/pull/907/files#r73505877
    p._reconstructActiveFormattingElements();

    p._insertElement(token, NS.HTML);
}

function menuStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope($.P))
        p._closePElement();

    if (p.openElements.currentTagName === $.MENUITEM)
        p.openElements.pop();

    p._insertElement(token, NS.HTML);
}

function mathStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();

    foreignContent.adjustTokenMathMLAttrs(token);
    foreignContent.adjustTokenXMLAttrs(token);

    if (token.selfClosing)
        p._appendElement(token, NS.MATHML);
    else
        p._insertElement(token, NS.MATHML);
}

function svgStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();

    foreignContent.adjustTokenSVGAttrs(token);
    foreignContent.adjustTokenXMLAttrs(token);

    if (token.selfClosing)
        p._appendElement(token, NS.SVG);
    else
        p._insertElement(token, NS.SVG);
}

function genericStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
}

//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
//It's faster than using dictionary.
function startTagInBody(p, token) {
    var tn = token.tagName;

    switch (tn.length) {
        case 1:
            if (tn === $.I || tn === $.S || tn === $.B || tn === $.U)
                bStartTagInBody(p, token);

            else if (tn === $.P)
                addressStartTagInBody(p, token);

            else if (tn === $.A)
                aStartTagInBody(p, token);

            else
                genericStartTagInBody(p, token);

            break;

        case 2:
            if (tn === $.DL || tn === $.OL || tn === $.UL)
                addressStartTagInBody(p, token);

            else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
                numberedHeaderStartTagInBody(p, token);

            else if (tn === $.LI || tn === $.DD || tn === $.DT)
                listItemStartTagInBody(p, token);

            else if (tn === $.EM || tn === $.TT)
                bStartTagInBody(p, token);

            else if (tn === $.BR)
                areaStartTagInBody(p, token);

            else if (tn === $.HR)
                hrStartTagInBody(p, token);

            else if (tn === $.RB)
                rbStartTagInBody(p, token);

            else if (tn === $.RT || tn === $.RP)
                rtStartTagInBody(p, token);

            else if (tn !== $.TH && tn !== $.TD && tn !== $.TR)
                genericStartTagInBody(p, token);

            break;

        case 3:
            if (tn === $.DIV || tn === $.DIR || tn === $.NAV)
                addressStartTagInBody(p, token);

            else if (tn === $.PRE)
                preStartTagInBody(p, token);

            else if (tn === $.BIG)
                bStartTagInBody(p, token);

            else if (tn === $.IMG || tn === $.WBR)
                areaStartTagInBody(p, token);

            else if (tn === $.XMP)
                xmpStartTagInBody(p, token);

            else if (tn === $.SVG)
                svgStartTagInBody(p, token);

            else if (tn === $.RTC)
                rbStartTagInBody(p, token);

            else if (tn !== $.COL)
                genericStartTagInBody(p, token);

            break;

        case 4:
            if (tn === $.HTML)
                htmlStartTagInBody(p, token);

            else if (tn === $.BASE || tn === $.LINK || tn === $.META)
                startTagInHead(p, token);

            else if (tn === $.BODY)
                bodyStartTagInBody(p, token);

            else if (tn === $.MAIN)
                addressStartTagInBody(p, token);

            else if (tn === $.FORM)
                formStartTagInBody(p, token);

            else if (tn === $.CODE || tn === $.FONT)
                bStartTagInBody(p, token);

            else if (tn === $.NOBR)
                nobrStartTagInBody(p, token);

            else if (tn === $.AREA)
                areaStartTagInBody(p, token);

            else if (tn === $.MATH)
                mathStartTagInBody(p, token);

            else if (tn === $.MENU)
                menuStartTagInBody(p, token);

            else if (tn !== $.HEAD)
                genericStartTagInBody(p, token);

            break;

        case 5:
            if (tn === $.STYLE || tn === $.TITLE)
                startTagInHead(p, token);

            else if (tn === $.ASIDE)
                addressStartTagInBody(p, token);

            else if (tn === $.SMALL)
                bStartTagInBody(p, token);

            else if (tn === $.TABLE)
                tableStartTagInBody(p, token);

            else if (tn === $.EMBED)
                areaStartTagInBody(p, token);

            else if (tn === $.INPUT)
                inputStartTagInBody(p, token);

            else if (tn === $.PARAM || tn === $.TRACK)
                paramStartTagInBody(p, token);

            else if (tn === $.IMAGE)
                imageStartTagInBody(p, token);

            else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD)
                genericStartTagInBody(p, token);

            break;

        case 6:
            if (tn === $.SCRIPT)
                startTagInHead(p, token);

            else if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP)
                addressStartTagInBody(p, token);

            else if (tn === $.BUTTON)
                buttonStartTagInBody(p, token);

            else if (tn === $.STRIKE || tn === $.STRONG)
                bStartTagInBody(p, token);

            else if (tn === $.APPLET || tn === $.OBJECT)
                appletStartTagInBody(p, token);

            else if (tn === $.KEYGEN)
                areaStartTagInBody(p, token);

            else if (tn === $.SOURCE)
                paramStartTagInBody(p, token);

            else if (tn === $.IFRAME)
                iframeStartTagInBody(p, token);

            else if (tn === $.SELECT)
                selectStartTagInBody(p, token);

            else if (tn === $.OPTION)
                optgroupStartTagInBody(p, token);

            else
                genericStartTagInBody(p, token);

            break;

        case 7:
            if (tn === $.BGSOUND)
                startTagInHead(p, token);

            else if (tn === $.DETAILS || tn === $.ADDRESS || tn === $.ARTICLE || tn === $.SECTION || tn === $.SUMMARY)
                addressStartTagInBody(p, token);

            else if (tn === $.LISTING)
                preStartTagInBody(p, token);

            else if (tn === $.MARQUEE)
                appletStartTagInBody(p, token);

            else if (tn === $.NOEMBED)
                noembedStartTagInBody(p, token);

            else if (tn !== $.CAPTION)
                genericStartTagInBody(p, token);

            break;

        case 8:
            if (tn === $.BASEFONT)
                startTagInHead(p, token);

            else if (tn === $.MENUITEM)
                menuitemStartTagInBody(p, token);

            else if (tn === $.FRAMESET)
                framesetStartTagInBody(p, token);

            else if (tn === $.FIELDSET)
                addressStartTagInBody(p, token);

            else if (tn === $.TEXTAREA)
                textareaStartTagInBody(p, token);

            else if (tn === $.TEMPLATE)
                startTagInHead(p, token);

            else if (tn === $.NOSCRIPT)
                noembedStartTagInBody(p, token);

            else if (tn === $.OPTGROUP)
                optgroupStartTagInBody(p, token);

            else if (tn !== $.COLGROUP)
                genericStartTagInBody(p, token);

            break;

        case 9:
            if (tn === $.PLAINTEXT)
                plaintextStartTagInBody(p, token);

            else
                genericStartTagInBody(p, token);

            break;

        case 10:
            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION)
                addressStartTagInBody(p, token);

            else
                genericStartTagInBody(p, token);

            break;

        default:
            genericStartTagInBody(p, token);
    }
}

function bodyEndTagInBody(p) {
    if (p.openElements.hasInScope($.BODY))
        p.insertionMode = AFTER_BODY_MODE;
}

function htmlEndTagInBody(p, token) {
    if (p.openElements.hasInScope($.BODY)) {
        p.insertionMode = AFTER_BODY_MODE;
        p._processToken(token);
    }
}

function addressEndTagInBody(p, token) {
    var tn = token.tagName;

    if (p.openElements.hasInScope(tn)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped(tn);
    }
}

function formEndTagInBody(p) {
    var inTemplate = p.openElements.tmplCount > 0,
        formElement = p.formElement;

    if (!inTemplate)
        p.formElement = null;

    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
        p.openElements.generateImpliedEndTags();

        if (inTemplate)
            p.openElements.popUntilTagNamePopped($.FORM);

        else
            p.openElements.remove(formElement);
    }
}

function pEndTagInBody(p) {
    if (!p.openElements.hasInButtonScope($.P))
        p._insertFakeElement($.P);

    p._closePElement();
}

function liEndTagInBody(p) {
    if (p.openElements.hasInListItemScope($.LI)) {
        p.openElements.generateImpliedEndTagsWithExclusion($.LI);
        p.openElements.popUntilTagNamePopped($.LI);
    }
}

function ddEndTagInBody(p, token) {
    var tn = token.tagName;

    if (p.openElements.hasInScope(tn)) {
        p.openElements.generateImpliedEndTagsWithExclusion(tn);
        p.openElements.popUntilTagNamePopped(tn);
    }
}

function numberedHeaderEndTagInBody(p) {
    if (p.openElements.hasNumberedHeaderInScope()) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilNumberedHeaderPopped();
    }
}

function appletEndTagInBody(p, token) {
    var tn = token.tagName;

    if (p.openElements.hasInScope(tn)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped(tn);
        p.activeFormattingElements.clearToLastMarker();
    }
}

function brEndTagInBody(p) {
    p._reconstructActiveFormattingElements();
    p._insertFakeElement($.BR);
    p.openElements.pop();
    p.framesetOk = false;
}

function genericEndTagInBody(p, token) {
    var tn = token.tagName;

    for (var i = p.openElements.stackTop; i > 0; i--) {
        var element = p.openElements.items[i];

        if (p.treeAdapter.getTagName(element) === tn) {
            p.openElements.generateImpliedEndTagsWithExclusion(tn);
            p.openElements.popUntilElementPopped(element);
            break;
        }

        if (p._isSpecialElement(element))
            break;
    }
}

//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
//It's faster than using dictionary.
function endTagInBody(p, token) {
    var tn = token.tagName;

    switch (tn.length) {
        case 1:
            if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn === $.U)
                callAdoptionAgency(p, token);

            else if (tn === $.P)
                pEndTagInBody(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 2:
            if (tn === $.DL || tn === $.UL || tn === $.OL)
                addressEndTagInBody(p, token);

            else if (tn === $.LI)
                liEndTagInBody(p, token);

            else if (tn === $.DD || tn === $.DT)
                ddEndTagInBody(p, token);

            else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
                numberedHeaderEndTagInBody(p, token);

            else if (tn === $.BR)
                brEndTagInBody(p, token);

            else if (tn === $.EM || tn === $.TT)
                callAdoptionAgency(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 3:
            if (tn === $.BIG)
                callAdoptionAgency(p, token);

            else if (tn === $.DIR || tn === $.DIV || tn === $.NAV)
                addressEndTagInBody(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 4:
            if (tn === $.BODY)
                bodyEndTagInBody(p, token);

            else if (tn === $.HTML)
                htmlEndTagInBody(p, token);

            else if (tn === $.FORM)
                formEndTagInBody(p, token);

            else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR)
                callAdoptionAgency(p, token);

            else if (tn === $.MAIN || tn === $.MENU)
                addressEndTagInBody(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 5:
            if (tn === $.ASIDE)
                addressEndTagInBody(p, token);

            else if (tn === $.SMALL)
                callAdoptionAgency(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 6:
            if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP)
                addressEndTagInBody(p, token);

            else if (tn === $.APPLET || tn === $.OBJECT)
                appletEndTagInBody(p, token);

            else if (tn === $.STRIKE || tn === $.STRONG)
                callAdoptionAgency(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 7:
            if (tn === $.ADDRESS || tn === $.ARTICLE || tn === $.DETAILS || tn === $.SECTION || tn === $.SUMMARY)
                addressEndTagInBody(p, token);

            else if (tn === $.MARQUEE)
                appletEndTagInBody(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 8:
            if (tn === $.FIELDSET)
                addressEndTagInBody(p, token);

            else if (tn === $.TEMPLATE)
                endTagInHead(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        case 10:
            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION)
                addressEndTagInBody(p, token);

            else
                genericEndTagInBody(p, token);

            break;

        default :
            genericEndTagInBody(p, token);
    }
}

function eofInBody(p, token) {
    if (p.tmplInsertionModeStackTop > -1)
        eofInTemplate(p, token);

    else
        p.stopped = true;
}

//12.2.5.4.8 The "text" insertion mode
//------------------------------------------------------------------
function endTagInText(p, token) {
    if (token.tagName === $.SCRIPT)
        p.pendingScript = p.openElements.current;

    p.openElements.pop();
    p.insertionMode = p.originalInsertionMode;
}


function eofInText(p, token) {
    p.openElements.pop();
    p.insertionMode = p.originalInsertionMode;
    p._processToken(token);
}


//12.2.5.4.9 The "in table" insertion mode
//------------------------------------------------------------------
function characterInTable(p, token) {
    var curTn = p.openElements.currentTagName;

    if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
        p.pendingCharacterTokens = [];
        p.hasNonWhitespacePendingCharacterToken = false;
        p.originalInsertionMode = p.insertionMode;
        p.insertionMode = IN_TABLE_TEXT_MODE;
        p._processToken(token);
    }

    else
        tokenInTable(p, token);
}

function captionStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p.activeFormattingElements.insertMarker();
    p._insertElement(token, NS.HTML);
    p.insertionMode = IN_CAPTION_MODE;
}

function colgroupStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertElement(token, NS.HTML);
    p.insertionMode = IN_COLUMN_GROUP_MODE;
}

function colStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertFakeElement($.COLGROUP);
    p.insertionMode = IN_COLUMN_GROUP_MODE;
    p._processToken(token);
}

function tbodyStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertElement(token, NS.HTML);
    p.insertionMode = IN_TABLE_BODY_MODE;
}

function tdStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertFakeElement($.TBODY);
    p.insertionMode = IN_TABLE_BODY_MODE;
    p._processToken(token);
}

function tableStartTagInTable(p, token) {
    if (p.openElements.hasInTableScope($.TABLE)) {
        p.openElements.popUntilTagNamePopped($.TABLE);
        p._resetInsertionMode();
        p._processToken(token);
    }
}

function inputStartTagInTable(p, token) {
    var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);

    if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE)
        p._appendElement(token, NS.HTML);

    else
        tokenInTable(p, token);
}

function formStartTagInTable(p, token) {
    if (!p.formElement && p.openElements.tmplCount === 0) {
        p._insertElement(token, NS.HTML);
        p.formElement = p.openElements.current;
        p.openElements.pop();
    }
}

function startTagInTable(p, token) {
    var tn = token.tagName;

    switch (tn.length) {
        case 2:
            if (tn === $.TD || tn === $.TH || tn === $.TR)
                tdStartTagInTable(p, token);

            else
                tokenInTable(p, token);

            break;

        case 3:
            if (tn === $.COL)
                colStartTagInTable(p, token);

            else
                tokenInTable(p, token);

            break;

        case 4:
            if (tn === $.FORM)
                formStartTagInTable(p, token);

            else
                tokenInTable(p, token);

            break;

        case 5:
            if (tn === $.TABLE)
                tableStartTagInTable(p, token);

            else if (tn === $.STYLE)
                startTagInHead(p, token);

            else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD)
                tbodyStartTagInTable(p, token);

            else if (tn === $.INPUT)
                inputStartTagInTable(p, token);

            else
                tokenInTable(p, token);

            break;

        case 6:
            if (tn === $.SCRIPT)
                startTagInHead(p, token);

            else
                tokenInTable(p, token);

            break;

        case 7:
            if (tn === $.CAPTION)
                captionStartTagInTable(p, token);

            else
                tokenInTable(p, token);

            break;

        case 8:
            if (tn === $.COLGROUP)
                colgroupStartTagInTable(p, token);

            else if (tn === $.TEMPLATE)
                startTagInHead(p, token);

            else
                tokenInTable(p, token);

            break;

        default:
            tokenInTable(p, token);
    }

}

function endTagInTable(p, token) {
    var tn = token.tagName;

    if (tn === $.TABLE) {
        if (p.openElements.hasInTableScope($.TABLE)) {
            p.openElements.popUntilTagNamePopped($.TABLE);
            p._resetInsertionMode();
        }
    }

    else if (tn === $.TEMPLATE)
        endTagInHead(p, token);

    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML &&
             tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR)
        tokenInTable(p, token);
}

function tokenInTable(p, token) {
    var savedFosterParentingState = p.fosterParentingEnabled;

    p.fosterParentingEnabled = true;
    p._processTokenInBodyMode(token);
    p.fosterParentingEnabled = savedFosterParentingState;
}


//12.2.5.4.10 The "in table text" insertion mode
//------------------------------------------------------------------
function whitespaceCharacterInTableText(p, token) {
    p.pendingCharacterTokens.push(token);
}

function characterInTableText(p, token) {
    p.pendingCharacterTokens.push(token);
    p.hasNonWhitespacePendingCharacterToken = true;
}

function tokenInTableText(p, token) {
    var i = 0;

    if (p.hasNonWhitespacePendingCharacterToken) {
        for (; i < p.pendingCharacterTokens.length; i++)
            tokenInTable(p, p.pendingCharacterTokens[i]);
    }

    else {
        for (; i < p.pendingCharacterTokens.length; i++)
            p._insertCharacters(p.pendingCharacterTokens[i]);
    }

    p.insertionMode = p.originalInsertionMode;
    p._processToken(token);
}


//12.2.5.4.11 The "in caption" insertion mode
//------------------------------------------------------------------
function startTagInCaption(p, token) {
    var tn = token.tagName;

    if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY ||
        tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
        if (p.openElements.hasInTableScope($.CAPTION)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped($.CAPTION);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
        }
    }

    else
        startTagInBody(p, token);
}

function endTagInCaption(p, token) {
    var tn = token.tagName;

    if (tn === $.CAPTION || tn === $.TABLE) {
        if (p.openElements.hasInTableScope($.CAPTION)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped($.CAPTION);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_TABLE_MODE;

            if (tn === $.TABLE)
                p._processToken(token);
        }
    }

    else if (tn !== $.BODY && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY &&
             tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR)
        endTagInBody(p, token);
}


//12.2.5.4.12 The "in column group" insertion mode
//------------------------------------------------------------------
function startTagInColumnGroup(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.COL)
        p._appendElement(token, NS.HTML);

    else if (tn === $.TEMPLATE)
        startTagInHead(p, token);

    else
        tokenInColumnGroup(p, token);
}

function endTagInColumnGroup(p, token) {
    var tn = token.tagName;

    if (tn === $.COLGROUP) {
        if (p.openElements.currentTagName === $.COLGROUP) {
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
        }
    }

    else if (tn === $.TEMPLATE)
        endTagInHead(p, token);

    else if (tn !== $.COL)
        tokenInColumnGroup(p, token);
}

function tokenInColumnGroup(p, token) {
    if (p.openElements.currentTagName === $.COLGROUP) {
        p.openElements.pop();
        p.insertionMode = IN_TABLE_MODE;
        p._processToken(token);
    }
}

//12.2.5.4.13 The "in table body" insertion mode
//------------------------------------------------------------------
function startTagInTableBody(p, token) {
    var tn = token.tagName;

    if (tn === $.TR) {
        p.openElements.clearBackToTableBodyContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_ROW_MODE;
    }

    else if (tn === $.TH || tn === $.TD) {
        p.openElements.clearBackToTableBodyContext();
        p._insertFakeElement($.TR);
        p.insertionMode = IN_ROW_MODE;
        p._processToken(token);
    }

    else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP ||
             tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {

        if (p.openElements.hasTableBodyContextInTableScope()) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
        }
    }

    else
        startTagInTable(p, token);
}

function endTagInTableBody(p, token) {
    var tn = token.tagName;

    if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
        if (p.openElements.hasInTableScope(tn)) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
        }
    }

    else if (tn === $.TABLE) {
        if (p.openElements.hasTableBodyContextInTableScope()) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
        }
    }

    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP ||
             tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR)
        endTagInTable(p, token);
}

//12.2.5.4.14 The "in row" insertion mode
//------------------------------------------------------------------
function startTagInRow(p, token) {
    var tn = token.tagName;

    if (tn === $.TH || tn === $.TD) {
        p.openElements.clearBackToTableRowContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_CELL_MODE;
        p.activeFormattingElements.insertMarker();
    }

    else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY ||
             tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
        if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
        }
    }

    else
        startTagInTable(p, token);
}

function endTagInRow(p, token) {
    var tn = token.tagName;

    if (tn === $.TR) {
        if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
        }
    }

    else if (tn === $.TABLE) {
        if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
        }
    }

    else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
        if (p.openElements.hasInTableScope(tn) || p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
        }
    }

    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP ||
             tn !== $.HTML && tn !== $.TD && tn !== $.TH)
        endTagInTable(p, token);
}


//12.2.5.4.15 The "in cell" insertion mode
//------------------------------------------------------------------
function startTagInCell(p, token) {
    var tn = token.tagName;

    if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY ||
        tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {

        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
            p._closeTableCell();
            p._processToken(token);
        }
    }

    else
        startTagInBody(p, token);
}

function endTagInCell(p, token) {
    var tn = token.tagName;

    if (tn === $.TD || tn === $.TH) {
        if (p.openElements.hasInTableScope(tn)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped(tn);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_ROW_MODE;
        }
    }

    else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
        if (p.openElements.hasInTableScope(tn)) {
            p._closeTableCell();
            p._processToken(token);
        }
    }

    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML)
        endTagInBody(p, token);
}

//12.2.5.4.16 The "in select" insertion mode
//------------------------------------------------------------------
function startTagInSelect(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.OPTION) {
        if (p.openElements.currentTagName === $.OPTION)
            p.openElements.pop();

        p._insertElement(token, NS.HTML);
    }

    else if (tn === $.OPTGROUP) {
        if (p.openElements.currentTagName === $.OPTION)
            p.openElements.pop();

        if (p.openElements.currentTagName === $.OPTGROUP)
            p.openElements.pop();

        p._insertElement(token, NS.HTML);
    }

    else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA || tn === $.SELECT) {
        if (p.openElements.hasInSelectScope($.SELECT)) {
            p.openElements.popUntilTagNamePopped($.SELECT);
            p._resetInsertionMode();

            if (tn !== $.SELECT)
                p._processToken(token);
        }
    }

    else if (tn === $.SCRIPT || tn === $.TEMPLATE)
        startTagInHead(p, token);
}

function endTagInSelect(p, token) {
    var tn = token.tagName;

    if (tn === $.OPTGROUP) {
        var prevOpenElement = p.openElements.items[p.openElements.stackTop - 1],
            prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);

        if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP)
            p.openElements.pop();

        if (p.openElements.currentTagName === $.OPTGROUP)
            p.openElements.pop();
    }

    else if (tn === $.OPTION) {
        if (p.openElements.currentTagName === $.OPTION)
            p.openElements.pop();
    }

    else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
        p.openElements.popUntilTagNamePopped($.SELECT);
        p._resetInsertionMode();
    }

    else if (tn === $.TEMPLATE)
        endTagInHead(p, token);
}

//12.2.5.4.17 The "in select in table" insertion mode
//------------------------------------------------------------------
function startTagInSelectInTable(p, token) {
    var tn = token.tagName;

    if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT ||
        tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
        p.openElements.popUntilTagNamePopped($.SELECT);
        p._resetInsertionMode();
        p._processToken(token);
    }

    else
        startTagInSelect(p, token);
}

function endTagInSelectInTable(p, token) {
    var tn = token.tagName;

    if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT ||
        tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
        if (p.openElements.hasInTableScope(tn)) {
            p.openElements.popUntilTagNamePopped($.SELECT);
            p._resetInsertionMode();
            p._processToken(token);
        }
    }

    else
        endTagInSelect(p, token);
}

//12.2.5.4.18 The "in template" insertion mode
//------------------------------------------------------------------
function startTagInTemplate(p, token) {
    var tn = token.tagName;

    if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META ||
        tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE)
        startTagInHead(p, token);

    else {
        var newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;

        p._popTmplInsertionMode();
        p._pushTmplInsertionMode(newInsertionMode);
        p.insertionMode = newInsertionMode;
        p._processToken(token);
    }
}

function endTagInTemplate(p, token) {
    if (token.tagName === $.TEMPLATE)
        endTagInHead(p, token);
}

function eofInTemplate(p, token) {
    if (p.openElements.tmplCount > 0) {
        p.openElements.popUntilTagNamePopped($.TEMPLATE);
        p.activeFormattingElements.clearToLastMarker();
        p._popTmplInsertionMode();
        p._resetInsertionMode();
        p._processToken(token);
    }

    else
        p.stopped = true;
}


//12.2.5.4.19 The "after body" insertion mode
//------------------------------------------------------------------
function startTagAfterBody(p, token) {
    if (token.tagName === $.HTML)
        startTagInBody(p, token);

    else
        tokenAfterBody(p, token);
}

function endTagAfterBody(p, token) {
    if (token.tagName === $.HTML) {
        if (!p.fragmentContext)
            p.insertionMode = AFTER_AFTER_BODY_MODE;
    }

    else
        tokenAfterBody(p, token);
}

function tokenAfterBody(p, token) {
    p.insertionMode = IN_BODY_MODE;
    p._processToken(token);
}

//12.2.5.4.20 The "in frameset" insertion mode
//------------------------------------------------------------------
function startTagInFrameset(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.FRAMESET)
        p._insertElement(token, NS.HTML);

    else if (tn === $.FRAME)
        p._appendElement(token, NS.HTML);

    else if (tn === $.NOFRAMES)
        startTagInHead(p, token);
}

function endTagInFrameset(p, token) {
    if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
        p.openElements.pop();

        if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET)
            p.insertionMode = AFTER_FRAMESET_MODE;
    }
}

//12.2.5.4.21 The "after frameset" insertion mode
//------------------------------------------------------------------
function startTagAfterFrameset(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.NOFRAMES)
        startTagInHead(p, token);
}

function endTagAfterFrameset(p, token) {
    if (token.tagName === $.HTML)
        p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
}

//12.2.5.4.22 The "after after body" insertion mode
//------------------------------------------------------------------
function startTagAfterAfterBody(p, token) {
    if (token.tagName === $.HTML)
        startTagInBody(p, token);

    else
        tokenAfterAfterBody(p, token);
}

function tokenAfterAfterBody(p, token) {
    p.insertionMode = IN_BODY_MODE;
    p._processToken(token);
}

//12.2.5.4.23 The "after after frameset" insertion mode
//------------------------------------------------------------------
function startTagAfterAfterFrameset(p, token) {
    var tn = token.tagName;

    if (tn === $.HTML)
        startTagInBody(p, token);

    else if (tn === $.NOFRAMES)
        startTagInHead(p, token);
}


//12.2.5.5 The rules for parsing tokens in foreign content
//------------------------------------------------------------------
function nullCharacterInForeignContent(p, token) {
    token.chars = UNICODE.REPLACEMENT_CHARACTER;
    p._insertCharacters(token);
}

function characterInForeignContent(p, token) {
    p._insertCharacters(token);
    p.framesetOk = false;
}

function startTagInForeignContent(p, token) {
    if (foreignContent.causesExit(token) && !p.fragmentContext) {
        while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isIntegrationPoint(p.openElements.current))
            p.openElements.pop();

        p._processToken(token);
    }

    else {
        var current = p._getAdjustedCurrentElement(),
            currentNs = p.treeAdapter.getNamespaceURI(current);

        if (currentNs === NS.MATHML)
            foreignContent.adjustTokenMathMLAttrs(token);

        else if (currentNs === NS.SVG) {
            foreignContent.adjustTokenSVGTagName(token);
            foreignContent.adjustTokenSVGAttrs(token);
        }

        foreignContent.adjustTokenXMLAttrs(token);

        if (token.selfClosing)
            p._appendElement(token, currentNs);
        else
            p._insertElement(token, currentNs);
    }
}

function endTagInForeignContent(p, token) {
    for (var i = p.openElements.stackTop; i > 0; i--) {
        var element = p.openElements.items[i];

        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
            p._processToken(token);
            break;
        }

        if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
            p.openElements.popUntilElementPopped(element);
            break;
        }
    }
}

},{"../common/doctype":491,"../common/foreign_content":492,"../common/html":493,"../common/unicode":494,"../extensions/location_info/parser_mixin":496,"../tokenizer":510,"../tree_adapters/default":513,"../utils/merge_options":515,"./formatting_element_list":500,"./open_element_stack":502}],502:[function(require,module,exports){
'use strict';

var HTML = require('../common/html');

//Aliases
var $ = HTML.TAG_NAMES,
    NS = HTML.NAMESPACES;

//Element utils

//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
//It's faster than using dictionary.
function isImpliedEndTagRequired(tn) {
    switch (tn.length) {
        case 1:
            return tn === $.P;

        case 2:
            return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;

        case 3:
            return tn === $.RTC;

        case 6:
            return tn === $.OPTION;

        case 8:
            return tn === $.OPTGROUP || tn === $.MENUITEM;
    }

    return false;
}

function isScopingElement(tn, ns) {
    switch (tn.length) {
        case 2:
            if (tn === $.TD || tn === $.TH)
                return ns === NS.HTML;

            else if (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS)
                return ns === NS.MATHML;

            break;

        case 4:
            if (tn === $.HTML)
                return ns === NS.HTML;

            else if (tn === $.DESC)
                return ns === NS.SVG;

            break;

        case 5:
            if (tn === $.TABLE)
                return ns === NS.HTML;

            else if (tn === $.MTEXT)
                return ns === NS.MATHML;

            else if (tn === $.TITLE)
                return ns === NS.SVG;

            break;

        case 6:
            return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;

        case 7:
            return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;

        case 8:
            return tn === $.TEMPLATE && ns === NS.HTML;

        case 13:
            return tn === $.FOREIGN_OBJECT && ns === NS.SVG;

        case 14:
            return tn === $.ANNOTATION_XML && ns === NS.MATHML;
    }

    return false;
}

//Stack of open elements
var OpenElementStack = module.exports = function (document, treeAdapter) {
    this.stackTop = -1;
    this.items = [];
    this.current = document;
    this.currentTagName = null;
    this.currentTmplContent = null;
    this.tmplCount = 0;
    this.treeAdapter = treeAdapter;
};

//Index of element
OpenElementStack.prototype._indexOf = function (element) {
    var idx = -1;

    for (var i = this.stackTop; i >= 0; i--) {
        if (this.items[i] === element) {
            idx = i;
            break;
        }
    }
    return idx;
};

//Update current element
OpenElementStack.prototype._isInTemplate = function () {
    return this.currentTagName === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
};

OpenElementStack.prototype._updateCurrentElement = function () {
    this.current = this.items[this.stackTop];
    this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);

    this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;
};

//Mutations
OpenElementStack.prototype.push = function (element) {
    this.items[++this.stackTop] = element;
    this._updateCurrentElement();

    if (this._isInTemplate())
        this.tmplCount++;

};

OpenElementStack.prototype.pop = function () {
    this.stackTop--;

    if (this.tmplCount > 0 && this._isInTemplate())
        this.tmplCount--;

    this._updateCurrentElement();
};

OpenElementStack.prototype.replace = function (oldElement, newElement) {
    var idx = this._indexOf(oldElement);

    this.items[idx] = newElement;

    if (idx === this.stackTop)
        this._updateCurrentElement();
};

OpenElementStack.prototype.insertAfter = function (referenceElement, newElement) {
    var insertionIdx = this._indexOf(referenceElement) + 1;

    this.items.splice(insertionIdx, 0, newElement);

    if (insertionIdx === ++this.stackTop)
        this._updateCurrentElement();
};

OpenElementStack.prototype.popUntilTagNamePopped = function (tagName) {
    while (this.stackTop > -1) {
        var tn = this.currentTagName,
            ns = this.treeAdapter.getNamespaceURI(this.current);

        this.pop();

        if (tn === tagName && ns === NS.HTML)
            break;
    }
};

OpenElementStack.prototype.popUntilElementPopped = function (element) {
    while (this.stackTop > -1) {
        var poppedElement = this.current;

        this.pop();

        if (poppedElement === element)
            break;
    }
};

OpenElementStack.prototype.popUntilNumberedHeaderPopped = function () {
    while (this.stackTop > -1) {
        var tn = this.currentTagName,
            ns = this.treeAdapter.getNamespaceURI(this.current);

        this.pop();

        if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6 && ns === NS.HTML)
            break;
    }
};

OpenElementStack.prototype.popUntilTableCellPopped = function () {
    while (this.stackTop > -1) {
        var tn = this.currentTagName,
            ns = this.treeAdapter.getNamespaceURI(this.current);

        this.pop();

        if (tn === $.TD || tn === $.TH && ns === NS.HTML)
            break;
    }
};

OpenElementStack.prototype.popAllUpToHtmlElement = function () {
    //NOTE: here we assume that root <html> element is always first in the open element stack, so
    //we perform this fast stack clean up.
    this.stackTop = 0;
    this._updateCurrentElement();
};

OpenElementStack.prototype.clearBackToTableContext = function () {
    while (this.currentTagName !== $.TABLE &&
           this.currentTagName !== $.TEMPLATE &&
           this.currentTagName !== $.HTML ||
           this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML)
        this.pop();
};

OpenElementStack.prototype.clearBackToTableBodyContext = function () {
    while (this.currentTagName !== $.TBODY &&
           this.currentTagName !== $.TFOOT &&
           this.currentTagName !== $.THEAD &&
           this.currentTagName !== $.TEMPLATE &&
           this.currentTagName !== $.HTML ||
           this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML)
        this.pop();
};

OpenElementStack.prototype.clearBackToTableRowContext = function () {
    while (this.currentTagName !== $.TR &&
           this.currentTagName !== $.TEMPLATE &&
           this.currentTagName !== $.HTML ||
           this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML)
        this.pop();
};

OpenElementStack.prototype.remove = function (element) {
    for (var i = this.stackTop; i >= 0; i--) {
        if (this.items[i] === element) {
            this.items.splice(i, 1);
            this.stackTop--;
            this._updateCurrentElement();
            break;
        }
    }
};

//Search
OpenElementStack.prototype.tryPeekProperlyNestedBodyElement = function () {
    //Properly nested <body> element (should be second element in stack).
    var element = this.items[1];

    return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;
};

OpenElementStack.prototype.contains = function (element) {
    return this._indexOf(element) > -1;
};

OpenElementStack.prototype.getCommonAncestor = function (element) {
    var elementIdx = this._indexOf(element);

    return --elementIdx >= 0 ? this.items[elementIdx] : null;
};

OpenElementStack.prototype.isRootHtmlElementCurrent = function () {
    return this.stackTop === 0 && this.currentTagName === $.HTML;
};

//Element in scope
OpenElementStack.prototype.hasInScope = function (tagName) {
    for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]),
            ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (tn === tagName && ns === NS.HTML)
            return true;

        if (isScopingElement(tn, ns))
            return false;
    }

    return true;
};

OpenElementStack.prototype.hasNumberedHeaderInScope = function () {
    for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]),
            ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if ((tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) && ns === NS.HTML)
            return true;

        if (isScopingElement(tn, ns))
            return false;
    }

    return true;
};

OpenElementStack.prototype.hasInListItemScope = function (tagName) {
    for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]),
            ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (tn === tagName && ns === NS.HTML)
            return true;

        if ((tn === $.UL || tn === $.OL) && ns === NS.HTML || isScopingElement(tn, ns))
            return false;
    }

    return true;
};

OpenElementStack.prototype.hasInButtonScope = function (tagName) {
    for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]),
            ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (tn === tagName && ns === NS.HTML)
            return true;

        if (tn === $.BUTTON && ns === NS.HTML || isScopingElement(tn, ns))
            return false;
    }

    return true;
};

OpenElementStack.prototype.hasInTableScope = function (tagName) {
    for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]),
            ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (ns !== NS.HTML)
            continue;

        if (tn === tagName)
            return true;

        if (tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML)
            return false;
    }

    return true;
};

OpenElementStack.prototype.hasTableBodyContextInTableScope = function () {
    for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]),
            ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (ns !== NS.HTML)
            continue;

        if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT)
            return true;

        if (tn === $.TABLE || tn === $.HTML)
            return false;
    }

    return true;
};

OpenElementStack.prototype.hasInSelectScope = function (tagName) {
    for (var i = this.stackTop; i >= 0; i--) {
        var tn = this.treeAdapter.getTagName(this.items[i]),
            ns = this.treeAdapter.getNamespaceURI(this.items[i]);

        if (ns !== NS.HTML)
            continue;

        if (tn === tagName)
            return true;

        if (tn !== $.OPTION && tn !== $.OPTGROUP)
            return false;
    }

    return true;
};

//Implied end tags
OpenElementStack.prototype.generateImpliedEndTags = function () {
    while (isImpliedEndTagRequired(this.currentTagName))
        this.pop();
};

OpenElementStack.prototype.generateImpliedEndTagsWithExclusion = function (exclusionTagName) {
    while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName)
        this.pop();
};

},{"../common/html":493}],503:[function(require,module,exports){
'use strict';

var WritableStream = require('stream').Writable,
    inherits = require('util').inherits,
    Parser = require('./index');

var ParserStream = module.exports = function (options) {
    WritableStream.call(this);

    this.parser = new Parser(options);

    this.lastChunkWritten = false;
    this.writeCallback = null;
    this.pausedByScript = false;

    this.document = this.parser.treeAdapter.createDocument();

    this.pendingHtmlInsertions = [];

    this._resume = this._resume.bind(this);
    this._documentWrite = this._documentWrite.bind(this);
    this._scriptHandler = this._scriptHandler.bind(this);

    this.parser._bootstrap(this.document, null);
};

inherits(ParserStream, WritableStream);

//WritableStream implementation
ParserStream.prototype._write = function (chunk, encoding, callback) {
    this.writeCallback = callback;
    this.parser.tokenizer.write(chunk.toString('utf8'), this.lastChunkWritten);
    this._runParsingLoop();
};

ParserStream.prototype.end = function (chunk, encoding, callback) {
    this.lastChunkWritten = true;
    WritableStream.prototype.end.call(this, chunk || '', encoding, callback);
};

//Scriptable parser implementation
ParserStream.prototype._runParsingLoop = function () {
    this.parser.runParsingLoopForCurrentChunk(this.writeCallback, this._scriptHandler);
};

ParserStream.prototype._resume = function () {
    if (!this.pausedByScript)
        throw new Error('Parser was already resumed');

    while (this.pendingHtmlInsertions.length) {
        var html = this.pendingHtmlInsertions.pop();

        this.parser.tokenizer.insertHtmlAtCurrentPos(html);
    }

    this.pausedByScript = false;

    //NOTE: keep parsing if we don't wait for the next input chunk
    if (this.parser.tokenizer.active)
        this._runParsingLoop();
};

ParserStream.prototype._documentWrite = function (html) {
    if (!this.parser.stopped)
        this.pendingHtmlInsertions.push(html);
};

ParserStream.prototype._scriptHandler = function (scriptElement) {
    if (this.listeners('script').length) {
        this.pausedByScript = true;
        this.emit('script', scriptElement, this._documentWrite, this._resume);
    }
    else
        this._runParsingLoop();
};


},{"./index":501,"stream":37,"util":64}],504:[function(require,module,exports){
'use strict';

var ParserStream = require('./parser_stream'),
    inherits = require('util').inherits,
    $ = require('../common/html').TAG_NAMES;

var PlainTextConversionStream = module.exports = function (options) {
    ParserStream.call(this, options);

    // NOTE: see https://html.spec.whatwg.org/#read-text
    this.parser._insertFakeElement($.HTML);
    this.parser._insertFakeElement($.HEAD);
    this.parser.openElements.pop();
    this.parser._insertFakeElement($.BODY);
    this.parser._insertFakeElement($.PRE);
    this.parser.treeAdapter.insertText(this.parser.openElements.current, '\n');
    this.parser.switchToPlaintextParsing();
};

inherits(PlainTextConversionStream, ParserStream);

},{"../common/html":493,"./parser_stream":503,"util":64}],505:[function(require,module,exports){
'use strict';

var WritableStream = require('stream').Writable,
    util = require('util');

var DevNullStream = module.exports = function () {
    WritableStream.call(this);
};

util.inherits(DevNullStream, WritableStream);

DevNullStream.prototype._write = function (chunk, encoding, cb) {
    cb();
};

},{"stream":37,"util":64}],506:[function(require,module,exports){
'use strict';

var TransformStream = require('stream').Transform,
    DevNullStream = require('./dev_null_stream'),
    inherits = require('util').inherits,
    Tokenizer = require('../tokenizer'),
    LocationInfoTokenizerMixin = require('../extensions/location_info/tokenizer_mixin'),
    ParserFeedbackSimulator = require('./parser_feedback_simulator'),
    mergeOptions = require('../utils/merge_options');

var DEFAULT_OPTIONS = {
    locationInfo: false
};

var SAXParser = module.exports = function (options) {
    TransformStream.call(this);

    this.options = mergeOptions(DEFAULT_OPTIONS, options);

    this.tokenizer = new Tokenizer(options);

    if (this.options.locationInfo)
        new LocationInfoTokenizerMixin(this.tokenizer);

    this.parserFeedbackSimulator = new ParserFeedbackSimulator(this.tokenizer);

    this.pendingText = null;
    this.currentTokenLocation = void 0;

    this.lastChunkWritten = false;
    this.stopped = false;

    // NOTE: always pipe stream to the /dev/null stream to avoid
    // `highWaterMark` hit even if we don't have consumers.
    // (see: https://github.com/inikulin/parse5/issues/97#issuecomment-171940774)
    this.pipe(new DevNullStream());
};

inherits(SAXParser, TransformStream);

//TransformStream implementation
SAXParser.prototype._transform = function (chunk, encoding, callback) {
    if (!this.stopped) {
        this.tokenizer.write(chunk.toString('utf8'), this.lastChunkWritten);
        this._runParsingLoop();
    }

    this.push(chunk);

    callback();
};

SAXParser.prototype._flush = function (callback) {
    callback();
};

SAXParser.prototype.end = function (chunk, encoding, callback) {
    this.lastChunkWritten = true;
    TransformStream.prototype.end.call(this, chunk, encoding, callback);
};

SAXParser.prototype.stop = function () {
    this.stopped = true;
};

//Internals
SAXParser.prototype._runParsingLoop = function () {
    do {
        var token = this.parserFeedbackSimulator.getNextToken();

        if (token.type === Tokenizer.HIBERNATION_TOKEN)
            break;

        if (token.type === Tokenizer.CHARACTER_TOKEN ||
            token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN ||
            token.type === Tokenizer.NULL_CHARACTER_TOKEN) {

            if (this.options.locationInfo) {
                if (this.pendingText === null)
                    this.currentTokenLocation = token.location;

                else
                    this.currentTokenLocation.endOffset = token.location.endOffset;
            }

            this.pendingText = (this.pendingText || '') + token.chars;
        }

        else {
            this._emitPendingText();
            this._handleToken(token);
        }
    } while (!this.stopped && token.type !== Tokenizer.EOF_TOKEN);
};

SAXParser.prototype._handleToken = function (token) {
    if (this.options.locationInfo)
        this.currentTokenLocation = token.location;

    if (token.type === Tokenizer.START_TAG_TOKEN)
        this.emit('startTag', token.tagName, token.attrs, token.selfClosing, this.currentTokenLocation);

    else if (token.type === Tokenizer.END_TAG_TOKEN)
        this.emit('endTag', token.tagName, this.currentTokenLocation);

    else if (token.type === Tokenizer.COMMENT_TOKEN)
        this.emit('comment', token.data, this.currentTokenLocation);

    else if (token.type === Tokenizer.DOCTYPE_TOKEN)
        this.emit('doctype', token.name, token.publicId, token.systemId, this.currentTokenLocation);
};

SAXParser.prototype._emitPendingText = function () {
    if (this.pendingText !== null) {
        this.emit('text', this.pendingText, this.currentTokenLocation);
        this.pendingText = null;
    }
};

},{"../extensions/location_info/tokenizer_mixin":497,"../tokenizer":510,"../utils/merge_options":515,"./dev_null_stream":505,"./parser_feedback_simulator":507,"stream":37,"util":64}],507:[function(require,module,exports){
'use strict';

var Tokenizer = require('../tokenizer'),
    foreignContent = require('../common/foreign_content'),
    UNICODE = require('../common/unicode'),
    HTML = require('../common/html');


//Aliases
var $ = HTML.TAG_NAMES,
    NS = HTML.NAMESPACES;


//ParserFeedbackSimulator
//Simulates adjustment of the Tokenizer which performed by standard parser during tree construction.
var ParserFeedbackSimulator = module.exports = function (tokenizer) {
    this.tokenizer = tokenizer;

    this.namespaceStack = [];
    this.namespaceStackTop = -1;
    this._enterNamespace(NS.HTML);
};

ParserFeedbackSimulator.prototype.getNextToken = function () {
    var token = this.tokenizer.getNextToken();

    if (token.type === Tokenizer.START_TAG_TOKEN)
        this._handleStartTagToken(token);

    else if (token.type === Tokenizer.END_TAG_TOKEN)
        this._handleEndTagToken(token);

    else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN && this.inForeignContent) {
        token.type = Tokenizer.CHARACTER_TOKEN;
        token.chars = UNICODE.REPLACEMENT_CHARACTER;
    }

    else if (this.skipNextNewLine) {
        if (token.type !== Tokenizer.HIBERNATION_TOKEN)
            this.skipNextNewLine = false;

        if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\n') {
            if (token.chars.length === 1)
                return this.getNextToken();

            token.chars = token.chars.substr(1);
        }
    }

    return token;
};

//Namespace stack mutations
ParserFeedbackSimulator.prototype._enterNamespace = function (namespace) {
    this.namespaceStackTop++;
    this.namespaceStack.push(namespace);

    this.inForeignContent = namespace !== NS.HTML;
    this.currentNamespace = namespace;
    this.tokenizer.allowCDATA = this.inForeignContent;
};

ParserFeedbackSimulator.prototype._leaveCurrentNamespace = function () {
    this.namespaceStackTop--;
    this.namespaceStack.pop();

    this.currentNamespace = this.namespaceStack[this.namespaceStackTop];
    this.inForeignContent = this.currentNamespace !== NS.HTML;
    this.tokenizer.allowCDATA = this.inForeignContent;
};

//Token handlers
ParserFeedbackSimulator.prototype._ensureTokenizerMode = function (tn) {
    if (tn === $.TEXTAREA || tn === $.TITLE)
        this.tokenizer.state = Tokenizer.MODE.RCDATA;

    else if (tn === $.PLAINTEXT)
        this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;

    else if (tn === $.SCRIPT)
        this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;

    else if (tn === $.STYLE || tn === $.IFRAME || tn === $.XMP ||
             tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT)
        this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
};

ParserFeedbackSimulator.prototype._handleStartTagToken = function (token) {
    var tn = token.tagName;

    if (tn === $.SVG)
        this._enterNamespace(NS.SVG);

    else if (tn === $.MATH)
        this._enterNamespace(NS.MATHML);

    if (this.inForeignContent) {
        if (foreignContent.causesExit(token)) {
            this._leaveCurrentNamespace();
            return;
        }

        var currentNs = this.currentNamespace;

        if (currentNs === NS.MATHML)
            foreignContent.adjustTokenMathMLAttrs(token);

        else if (currentNs === NS.SVG) {
            foreignContent.adjustTokenSVGTagName(token);
            foreignContent.adjustTokenSVGAttrs(token);
        }

        foreignContent.adjustTokenXMLAttrs(token);

        tn = token.tagName;

        if (!token.selfClosing && foreignContent.isIntegrationPoint(tn, currentNs, token.attrs))
            this._enterNamespace(NS.HTML);
    }

    else {
        if (tn === $.PRE || tn === $.TEXTAREA || tn === $.LISTING)
            this.skipNextNewLine = true;

        else if (tn === $.IMAGE)
            token.tagName = $.IMG;

        this._ensureTokenizerMode(tn);
    }
};

ParserFeedbackSimulator.prototype._handleEndTagToken = function (token) {
    var tn = token.tagName;

    if (!this.inForeignContent) {
        var previousNs = this.namespaceStack[this.namespaceStackTop - 1];

        if (previousNs === NS.SVG && foreignContent.SVG_TAG_NAMES_ADJUSTMENT_MAP[tn])
            tn = foreignContent.SVG_TAG_NAMES_ADJUSTMENT_MAP[tn];

        //NOTE: check for exit from integration point
        if (foreignContent.isIntegrationPoint(tn, previousNs, token.attrs))
            this._leaveCurrentNamespace();
    }

    else if (tn === $.SVG && this.currentNamespace === NS.SVG ||
             tn === $.MATH && this.currentNamespace === NS.MATHML)
        this._leaveCurrentNamespace();

    // NOTE: adjust end tag name as well for consistency
    if (this.currentNamespace === NS.SVG)
        foreignContent.adjustTokenSVGTagName(token);
};

},{"../common/foreign_content":492,"../common/html":493,"../common/unicode":494,"../tokenizer":510}],508:[function(require,module,exports){
'use strict';

var defaultTreeAdapter = require('../tree_adapters/default'),
    mergeOptions = require('../utils/merge_options'),
    doctype = require('../common/doctype'),
    HTML = require('../common/html');

//Aliases
var $ = HTML.TAG_NAMES,
    NS = HTML.NAMESPACES;

//Default serializer options
var DEFAULT_OPTIONS = {
    treeAdapter: defaultTreeAdapter
};

//Escaping regexes
var AMP_REGEX = /&/g,
    NBSP_REGEX = /\u00a0/g,
    DOUBLE_QUOTE_REGEX = /"/g,
    LT_REGEX = /</g,
    GT_REGEX = />/g;

//Serializer
var Serializer = module.exports = function (node, options) {
    this.options = mergeOptions(DEFAULT_OPTIONS, options);
    this.treeAdapter = this.options.treeAdapter;

    this.html = '';
    this.startNode = node;
};

// NOTE: exported as static method for the testing purposes
Serializer.escapeString = function (str, attrMode) {
    str = str
        .replace(AMP_REGEX, '&amp;')
        .replace(NBSP_REGEX, '&nbsp;');

    if (attrMode)
        str = str.replace(DOUBLE_QUOTE_REGEX, '&quot;');

    else {
        str = str
            .replace(LT_REGEX, '&lt;')
            .replace(GT_REGEX, '&gt;');
    }

    return str;
};


//API
Serializer.prototype.serialize = function () {
    this._serializeChildNodes(this.startNode);

    return this.html;
};


//Internals
Serializer.prototype._serializeChildNodes = function (parentNode) {
    var childNodes = this.treeAdapter.getChildNodes(parentNode);

    if (childNodes) {
        for (var i = 0, cnLength = childNodes.length; i < cnLength; i++) {
            var currentNode = childNodes[i];

            if (this.treeAdapter.isElementNode(currentNode))
                this._serializeElement(currentNode);

            else if (this.treeAdapter.isTextNode(currentNode))
                this._serializeTextNode(currentNode);

            else if (this.treeAdapter.isCommentNode(currentNode))
                this._serializeCommentNode(currentNode);

            else if (this.treeAdapter.isDocumentTypeNode(currentNode))
                this._serializeDocumentTypeNode(currentNode);
        }
    }
};

Serializer.prototype._serializeElement = function (node) {
    var tn = this.treeAdapter.getTagName(node),
        ns = this.treeAdapter.getNamespaceURI(node);

    this.html += '<' + tn;
    this._serializeAttributes(node);
    this.html += '>';

    if (tn !== $.AREA && tn !== $.BASE && tn !== $.BASEFONT && tn !== $.BGSOUND && tn !== $.BR && tn !== $.BR &&
        tn !== $.COL && tn !== $.EMBED && tn !== $.FRAME && tn !== $.HR && tn !== $.IMG && tn !== $.INPUT &&
        tn !== $.KEYGEN && tn !== $.LINK && tn !== $.MENUITEM && tn !== $.META && tn !== $.PARAM && tn !== $.SOURCE &&
        tn !== $.TRACK && tn !== $.WBR) {

        var childNodesHolder = tn === $.TEMPLATE && ns === NS.HTML ?
            this.treeAdapter.getTemplateContent(node) :
            node;

        this._serializeChildNodes(childNodesHolder);
        this.html += '</' + tn + '>';
    }
};

Serializer.prototype._serializeAttributes = function (node) {
    var attrs = this.treeAdapter.getAttrList(node);

    for (var i = 0, attrsLength = attrs.length; i < attrsLength; i++) {
        var attr = attrs[i],
            value = Serializer.escapeString(attr.value, true);

        this.html += ' ';

        if (!attr.namespace)
            this.html += attr.name;

        else if (attr.namespace === NS.XML)
            this.html += 'xml:' + attr.name;

        else if (attr.namespace === NS.XMLNS) {
            if (attr.name !== 'xmlns')
                this.html += 'xmlns:';

            this.html += attr.name;
        }

        else if (attr.namespace === NS.XLINK)
            this.html += 'xlink:' + attr.name;

        else
            this.html += attr.namespace + ':' + attr.name;

        this.html += '="' + value + '"';
    }
};

Serializer.prototype._serializeTextNode = function (node) {
    var content = this.treeAdapter.getTextNodeContent(node),
        parent = this.treeAdapter.getParentNode(node),
        parentTn = void 0;

    if (parent && this.treeAdapter.isElementNode(parent))
        parentTn = this.treeAdapter.getTagName(parent);

    if (parentTn === $.STYLE || parentTn === $.SCRIPT || parentTn === $.XMP || parentTn === $.IFRAME ||
        parentTn === $.NOEMBED || parentTn === $.NOFRAMES || parentTn === $.PLAINTEXT || parentTn === $.NOSCRIPT)

        this.html += content;

    else
        this.html += Serializer.escapeString(content, false);
};

Serializer.prototype._serializeCommentNode = function (node) {
    this.html += '<!--' + this.treeAdapter.getCommentNodeContent(node) + '-->';
};

Serializer.prototype._serializeDocumentTypeNode = function (node) {
    var name = this.treeAdapter.getDocumentTypeNodeName(node);

    this.html += '<' + doctype.serializeContent(name, null, null) + '>';
};

},{"../common/doctype":491,"../common/html":493,"../tree_adapters/default":513,"../utils/merge_options":515}],509:[function(require,module,exports){
'use strict';

var ReadableStream = require('stream').Readable,
    inherits = require('util').inherits,
    Serializer = require('./index');

var SerializerStream = module.exports = function (node, options) {
    ReadableStream.call(this);

    this.serializer = new Serializer(node, options);

    Object.defineProperty(this.serializer, 'html', {
        //NOTE: To make `+=` concat operator work properly we define
        //getter which always returns empty string
        get: function () {
            return '';
        },
        set: this.push.bind(this)
    });
};

inherits(SerializerStream, ReadableStream);

//Readable stream implementation
SerializerStream.prototype._read = function () {
    this.serializer.serialize();
    this.push(null);
};

},{"./index":508,"stream":37,"util":64}],510:[function(require,module,exports){
'use strict';

var Preprocessor = require('./preprocessor'),
    UNICODE = require('../common/unicode'),
    neTree = require('./named_entity_data');

//Aliases
var $ = UNICODE.CODE_POINTS,
    $$ = UNICODE.CODE_POINT_SEQUENCES;

//Replacement code points for numeric entities
var NUMERIC_ENTITY_REPLACEMENTS = {
    0x00: 0xFFFD, 0x0D: 0x000D, 0x80: 0x20AC, 0x81: 0x0081, 0x82: 0x201A, 0x83: 0x0192, 0x84: 0x201E,
    0x85: 0x2026, 0x86: 0x2020, 0x87: 0x2021, 0x88: 0x02C6, 0x89: 0x2030, 0x8A: 0x0160, 0x8B: 0x2039,
    0x8C: 0x0152, 0x8D: 0x008D, 0x8E: 0x017D, 0x8F: 0x008F, 0x90: 0x0090, 0x91: 0x2018, 0x92: 0x2019,
    0x93: 0x201C, 0x94: 0x201D, 0x95: 0x2022, 0x96: 0x2013, 0x97: 0x2014, 0x98: 0x02DC, 0x99: 0x2122,
    0x9A: 0x0161, 0x9B: 0x203A, 0x9C: 0x0153, 0x9D: 0x009D, 0x9E: 0x017E, 0x9F: 0x0178
};

// Named entity tree flags
var HAS_DATA_FLAG = 1 << 0;
var DATA_DUPLET_FLAG = 1 << 1;
var HAS_BRANCHES_FLAG = 1 << 2;
var MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;


//States
var DATA_STATE = 'DATA_STATE',
    CHARACTER_REFERENCE_IN_DATA_STATE = 'CHARACTER_REFERENCE_IN_DATA_STATE',
    RCDATA_STATE = 'RCDATA_STATE',
    CHARACTER_REFERENCE_IN_RCDATA_STATE = 'CHARACTER_REFERENCE_IN_RCDATA_STATE',
    RAWTEXT_STATE = 'RAWTEXT_STATE',
    SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE',
    PLAINTEXT_STATE = 'PLAINTEXT_STATE',
    TAG_OPEN_STATE = 'TAG_OPEN_STATE',
    END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE',
    TAG_NAME_STATE = 'TAG_NAME_STATE',
    RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE',
    RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE',
    RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE',
    RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE',
    RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE',
    RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE',
    SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE',
    SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE',
    SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE',
    SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE',
    SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE',
    SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE',
    SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE',
    SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE',
    SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE',
    SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE',
    SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE',
    SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE',
    BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE',
    ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE',
    AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE',
    BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE',
    ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE',
    ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE',
    ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE',
    CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE = 'CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE',
    AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE',
    SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE',
    BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE',
    BOGUS_COMMENT_STATE_CONTINUATION = 'BOGUS_COMMENT_STATE_CONTINUATION',
    MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE',
    COMMENT_START_STATE = 'COMMENT_START_STATE',
    COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE',
    COMMENT_STATE = 'COMMENT_STATE',
    COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE',
    COMMENT_END_STATE = 'COMMENT_END_STATE',
    COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE',
    DOCTYPE_STATE = 'DOCTYPE_STATE',
    DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE',
    AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE',
    BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE',
    DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE',
    DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE',
    BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE',
    BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE',
    DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE',
    DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE',
    AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE',
    BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE',
    CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';

//Utils

//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
//this functions if they will be situated in another module due to context switch.
//Always perform inlining check before modifying this functions ('node --trace-inlining').
function isWhitespace(cp) {
    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
}

function isAsciiDigit(cp) {
    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
}

function isAsciiUpper(cp) {
    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
}

function isAsciiLower(cp) {
    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
}

function isAsciiLetter(cp) {
    return isAsciiLower(cp) || isAsciiUpper(cp);
}

function isAsciiAlphaNumeric(cp) {
    return isAsciiLetter(cp) || isAsciiDigit(cp);
}

function isDigit(cp, isHex) {
    return isAsciiDigit(cp) || isHex && (cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F ||
                                         cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F);
}

function isReservedCodePoint(cp) {
    return cp >= 0xD800 && cp <= 0xDFFF || cp > 0x10FFFF;
}

function toAsciiLowerCodePoint(cp) {
    return cp + 0x0020;
}

//NOTE: String.fromCharCode() function can handle only characters from BMP subset.
//So, we need to workaround this manually.
//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)
function toChar(cp) {
    if (cp <= 0xFFFF)
        return String.fromCharCode(cp);

    cp -= 0x10000;
    return String.fromCharCode(cp >>> 10 & 0x3FF | 0xD800) + String.fromCharCode(0xDC00 | cp & 0x3FF);
}

function toAsciiLowerChar(cp) {
    return String.fromCharCode(toAsciiLowerCodePoint(cp));
}

function findNamedEntityTreeBranch(nodeIx, cp) {
    var branchCount = neTree[++nodeIx],
        lo = ++nodeIx,
        hi = lo + branchCount - 1;

    while (lo <= hi) {
        var mid = lo + hi >>> 1,
            midCp = neTree[mid];

        if (midCp < cp)
            lo = mid + 1;

        else if (midCp > cp)
            hi = mid - 1;

        else
            return neTree[mid + branchCount];
    }

    return -1;
}


//Tokenizer
var Tokenizer = module.exports = function () {
    this.preprocessor = new Preprocessor();

    this.tokenQueue = [];

    this.allowCDATA = false;

    this.state = DATA_STATE;
    this.returnState = '';

    this.tempBuff = [];
    this.additionalAllowedCp = void 0;
    this.lastStartTagName = '';

    this.consumedAfterSnapshot = -1;
    this.active = false;

    this.currentCharacterToken = null;
    this.currentToken = null;
    this.currentAttr = null;
};

//Token types
Tokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';
Tokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';
Tokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';
Tokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';
Tokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';
Tokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';
Tokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';
Tokenizer.EOF_TOKEN = 'EOF_TOKEN';
Tokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';

//Tokenizer initial states for different modes
Tokenizer.MODE = {
    DATA: DATA_STATE,
    RCDATA: RCDATA_STATE,
    RAWTEXT: RAWTEXT_STATE,
    SCRIPT_DATA: SCRIPT_DATA_STATE,
    PLAINTEXT: PLAINTEXT_STATE
};

//Static
Tokenizer.getTokenAttr = function (token, attrName) {
    for (var i = token.attrs.length - 1; i >= 0; i--) {
        if (token.attrs[i].name === attrName)
            return token.attrs[i].value;
    }

    return null;
};

//API
Tokenizer.prototype.getNextToken = function () {
    while (!this.tokenQueue.length && this.active) {
        this._hibernationSnapshot();

        var cp = this._consume();

        if (!this._ensureHibernation())
            this[this.state](cp);
    }

    return this.tokenQueue.shift();
};

Tokenizer.prototype.write = function (chunk, isLastChunk) {
    this.active = true;
    this.preprocessor.write(chunk, isLastChunk);
};

Tokenizer.prototype.insertHtmlAtCurrentPos = function (chunk) {
    this.active = true;
    this.preprocessor.insertHtmlAtCurrentPos(chunk);
};

//Hibernation
Tokenizer.prototype._hibernationSnapshot = function () {
    this.consumedAfterSnapshot = 0;
};

Tokenizer.prototype._ensureHibernation = function () {
    if (this.preprocessor.endOfChunkHit) {
        for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--)
            this.preprocessor.retreat();

        this.active = false;
        this.tokenQueue.push({type: Tokenizer.HIBERNATION_TOKEN});

        return true;
    }

    return false;
};


//Consumption
Tokenizer.prototype._consume = function () {
    this.consumedAfterSnapshot++;
    return this.preprocessor.advance();
};

Tokenizer.prototype._unconsume = function () {
    this.consumedAfterSnapshot--;
    this.preprocessor.retreat();
};

Tokenizer.prototype._unconsumeSeveral = function (count) {
    while (count--)
        this._unconsume();
};

Tokenizer.prototype._reconsumeInState = function (state) {
    this.state = state;
    this._unconsume();
};

Tokenizer.prototype._consumeSubsequentIfMatch = function (pattern, startCp, caseSensitive) {
    var consumedCount = 0,
        isMatch = true,
        patternLength = pattern.length,
        patternPos = 0,
        cp = startCp,
        patternCp = void 0;

    for (; patternPos < patternLength; patternPos++) {
        if (patternPos > 0) {
            cp = this._consume();
            consumedCount++;
        }

        if (cp === $.EOF) {
            isMatch = false;
            break;
        }

        patternCp = pattern[patternPos];

        if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
            isMatch = false;
            break;
        }
    }

    if (!isMatch)
        this._unconsumeSeveral(consumedCount);

    return isMatch;
};

//Lookahead
Tokenizer.prototype._lookahead = function () {
    var cp = this._consume();

    this._unconsume();

    return cp;
};

//Temp buffer
Tokenizer.prototype.isTempBufferEqualToScriptString = function () {
    if (this.tempBuff.length !== $$.SCRIPT_STRING.length)
        return false;

    for (var i = 0; i < this.tempBuff.length; i++) {
        if (this.tempBuff[i] !== $$.SCRIPT_STRING[i])
            return false;
    }

    return true;
};

//Token creation
Tokenizer.prototype._createStartTagToken = function () {
    this.currentToken = {
        type: Tokenizer.START_TAG_TOKEN,
        tagName: '',
        selfClosing: false,
        attrs: []
    };
};

Tokenizer.prototype._createEndTagToken = function () {
    this.currentToken = {
        type: Tokenizer.END_TAG_TOKEN,
        tagName: '',
        attrs: []
    };
};

Tokenizer.prototype._createCommentToken = function () {
    this.currentToken = {
        type: Tokenizer.COMMENT_TOKEN,
        data: ''
    };
};

Tokenizer.prototype._createDoctypeToken = function (initialName) {
    this.currentToken = {
        type: Tokenizer.DOCTYPE_TOKEN,
        name: initialName,
        forceQuirks: false,
        publicId: null,
        systemId: null
    };
};

Tokenizer.prototype._createCharacterToken = function (type, ch) {
    this.currentCharacterToken = {
        type: type,
        chars: ch
    };
};

//Tag attributes
Tokenizer.prototype._createAttr = function (attrNameFirstCh) {
    this.currentAttr = {
        name: attrNameFirstCh,
        value: ''
    };
};

Tokenizer.prototype._isDuplicateAttr = function () {
    return Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) !== null;
};

Tokenizer.prototype._leaveAttrName = function (toState) {
    this.state = toState;

    if (!this._isDuplicateAttr())
        this.currentToken.attrs.push(this.currentAttr);
};

Tokenizer.prototype._leaveAttrValue = function (toState) {
    this.state = toState;
};

//Appropriate end tag token
//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#appropriate-end-tag-token)
Tokenizer.prototype._isAppropriateEndTagToken = function () {
    return this.lastStartTagName === this.currentToken.tagName;
};

//Token emission
Tokenizer.prototype._emitCurrentToken = function () {
    this._emitCurrentCharacterToken();

    //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.
    if (this.currentToken.type === Tokenizer.START_TAG_TOKEN)
        this.lastStartTagName = this.currentToken.tagName;

    this.tokenQueue.push(this.currentToken);
    this.currentToken = null;
};

Tokenizer.prototype._emitCurrentCharacterToken = function () {
    if (this.currentCharacterToken) {
        this.tokenQueue.push(this.currentCharacterToken);
        this.currentCharacterToken = null;
    }
};

Tokenizer.prototype._emitEOFToken = function () {
    this._emitCurrentCharacterToken();
    this.tokenQueue.push({type: Tokenizer.EOF_TOKEN});
};

//Characters emission

//OPTIMIZATION: specification uses only one type of character tokens (one token per character).
//This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
//If we have a sequence of characters that belong to the same group, parser can process it
//as a single solid character token.
//So, there are 3 types of character tokens in parse5:
//1)NULL_CHARACTER_TOKEN - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
//2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
//3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
Tokenizer.prototype._appendCharToCurrentCharacterToken = function (type, ch) {
    if (this.currentCharacterToken && this.currentCharacterToken.type !== type)
        this._emitCurrentCharacterToken();

    if (this.currentCharacterToken)
        this.currentCharacterToken.chars += ch;

    else
        this._createCharacterToken(type, ch);
};

Tokenizer.prototype._emitCodePoint = function (cp) {
    var type = Tokenizer.CHARACTER_TOKEN;

    if (isWhitespace(cp))
        type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;

    else if (cp === $.NULL)
        type = Tokenizer.NULL_CHARACTER_TOKEN;

    this._appendCharToCurrentCharacterToken(type, toChar(cp));
};

Tokenizer.prototype._emitSeveralCodePoints = function (codePoints) {
    for (var i = 0; i < codePoints.length; i++)
        this._emitCodePoint(codePoints[i]);
};

//NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.
//So we can avoid additional checks here.
Tokenizer.prototype._emitChar = function (ch) {
    this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
};

//Character reference tokenization
Tokenizer.prototype._consumeNumericEntity = function (isHex) {
    var digits = '',
        nextCp = void 0;

    do {
        digits += toChar(this._consume());
        nextCp = this._lookahead();
    } while (nextCp !== $.EOF && isDigit(nextCp, isHex));

    if (this._lookahead() === $.SEMICOLON)
        this._consume();

    var referencedCp = parseInt(digits, isHex ? 16 : 10),
        replacement = NUMERIC_ENTITY_REPLACEMENTS[referencedCp];

    if (replacement)
        return replacement;

    if (isReservedCodePoint(referencedCp))
        return $.REPLACEMENT_CHARACTER;

    return referencedCp;
};

// NOTE: for the details on this algorithm see
// https://github.com/inikulin/parse5/tree/master/scripts/generate_named_entity_data/README.md
Tokenizer.prototype._consumeNamedEntity = function (inAttr) {
    var referencedCodePoints = null,
        referenceSize = 0,
        cp = null,
        consumedCount = 0,
        semicolonTerminated = false;

    for (var i = 0; i > -1;) {
        var current = neTree[i],
            inNode = current < MAX_BRANCH_MARKER_VALUE,
            nodeWithData = inNode && current & HAS_DATA_FLAG;

        if (nodeWithData) {
            referencedCodePoints = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];
            referenceSize = consumedCount;

            if (cp === $.SEMICOLON) {
                semicolonTerminated = true;
                break;
            }
        }

        cp = this._consume();
        consumedCount++;

        if (cp === $.EOF)
            break;

        if (inNode)
            i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;

        else
            i = cp === current ? ++i : -1;
    }


    if (referencedCodePoints) {
        if (!semicolonTerminated) {
            //NOTE: unconsume excess (e.g. 'it' in '&notit')
            this._unconsumeSeveral(consumedCount - referenceSize);

            //NOTE: If the character reference is being consumed as part of an attribute and the next character
            //is either a U+003D EQUALS SIGN character (=) or an alphanumeric ASCII character, then, for historical
            //reasons, all the characters that were matched after the U+0026 AMPERSAND character (&) must be
            //unconsumed, and nothing is returned.
            //However, if this next character is in fact a U+003D EQUALS SIGN character (=), then this is a
            //parse error, because some legacy user agents will misinterpret the markup in those cases.
            //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#tokenizing-character-references)
            if (inAttr) {
                var nextCp = this._lookahead();

                if (nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp)) {
                    this._unconsumeSeveral(referenceSize);
                    return null;
                }
            }
        }

        return referencedCodePoints;
    }

    this._unconsumeSeveral(consumedCount);

    return null;
};

Tokenizer.prototype._consumeCharacterReference = function (startCp, inAttr) {
    if (isWhitespace(startCp) || startCp === $.GREATER_THAN_SIGN ||
        startCp === $.AMPERSAND || startCp === this.additionalAllowedCp || startCp === $.EOF) {
        //NOTE: not a character reference. No characters are consumed, and nothing is returned.
        this._unconsume();
        return null;
    }

    if (startCp === $.NUMBER_SIGN) {
        //NOTE: we have a numeric entity candidate, now we should determine if it's hex or decimal
        var isHex = false,
            nextCp = this._lookahead();

        if (nextCp === $.LATIN_SMALL_X || nextCp === $.LATIN_CAPITAL_X) {
            this._consume();
            isHex = true;
        }

        nextCp = this._lookahead();

        //NOTE: if we have at least one digit this is a numeric entity for sure, so we consume it
        if (nextCp !== $.EOF && isDigit(nextCp, isHex))
            return [this._consumeNumericEntity(isHex)];

        //NOTE: otherwise this is a bogus number entity and a parse error. Unconsume the number sign
        //and the 'x'-character if appropriate.
        this._unconsumeSeveral(isHex ? 2 : 1);
        return null;
    }

    this._unconsume();

    return this._consumeNamedEntity(inAttr);
};

//State machine
var _ = Tokenizer.prototype;

//12.2.4.1 Data state
//------------------------------------------------------------------
_[DATA_STATE] = function dataState(cp) {
    this.preprocessor.dropParsedChunk();

    if (cp === $.AMPERSAND)
        this.state = CHARACTER_REFERENCE_IN_DATA_STATE;

    else if (cp === $.LESS_THAN_SIGN)
        this.state = TAG_OPEN_STATE;

    else if (cp === $.NULL)
        this._emitCodePoint(cp);

    else if (cp === $.EOF)
        this._emitEOFToken();

    else
        this._emitCodePoint(cp);
};


//12.2.4.2 Character reference in data state
//------------------------------------------------------------------
_[CHARACTER_REFERENCE_IN_DATA_STATE] = function characterReferenceInDataState(cp) {
    this.additionalAllowedCp = void 0;

    var referencedCodePoints = this._consumeCharacterReference(cp, false);

    if (!this._ensureHibernation()) {
        if (referencedCodePoints)
            this._emitSeveralCodePoints(referencedCodePoints);

        else
            this._emitChar('&');

        this.state = DATA_STATE;
    }
};


//12.2.4.3 RCDATA state
//------------------------------------------------------------------
_[RCDATA_STATE] = function rcdataState(cp) {
    this.preprocessor.dropParsedChunk();

    if (cp === $.AMPERSAND)
        this.state = CHARACTER_REFERENCE_IN_RCDATA_STATE;

    else if (cp === $.LESS_THAN_SIGN)
        this.state = RCDATA_LESS_THAN_SIGN_STATE;

    else if (cp === $.NULL)
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

    else if (cp === $.EOF)
        this._emitEOFToken();

    else
        this._emitCodePoint(cp);
};


//12.2.4.4 Character reference in RCDATA state
//------------------------------------------------------------------
_[CHARACTER_REFERENCE_IN_RCDATA_STATE] = function characterReferenceInRcdataState(cp) {
    this.additionalAllowedCp = void 0;

    var referencedCodePoints = this._consumeCharacterReference(cp, false);

    if (!this._ensureHibernation()) {
        if (referencedCodePoints)
            this._emitSeveralCodePoints(referencedCodePoints);

        else
            this._emitChar('&');

        this.state = RCDATA_STATE;
    }
};


//12.2.4.5 RAWTEXT state
//------------------------------------------------------------------
_[RAWTEXT_STATE] = function rawtextState(cp) {
    this.preprocessor.dropParsedChunk();

    if (cp === $.LESS_THAN_SIGN)
        this.state = RAWTEXT_LESS_THAN_SIGN_STATE;

    else if (cp === $.NULL)
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

    else if (cp === $.EOF)
        this._emitEOFToken();

    else
        this._emitCodePoint(cp);
};


//12.2.4.6 Script data state
//------------------------------------------------------------------
_[SCRIPT_DATA_STATE] = function scriptDataState(cp) {
    this.preprocessor.dropParsedChunk();

    if (cp === $.LESS_THAN_SIGN)
        this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;

    else if (cp === $.NULL)
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

    else if (cp === $.EOF)
        this._emitEOFToken();

    else
        this._emitCodePoint(cp);
};


//12.2.4.7 PLAINTEXT state
//------------------------------------------------------------------
_[PLAINTEXT_STATE] = function plaintextState(cp) {
    this.preprocessor.dropParsedChunk();

    if (cp === $.NULL)
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

    else if (cp === $.EOF)
        this._emitEOFToken();

    else
        this._emitCodePoint(cp);
};


//12.2.4.8 Tag open state
//------------------------------------------------------------------
_[TAG_OPEN_STATE] = function tagOpenState(cp) {
    if (cp === $.EXCLAMATION_MARK)
        this.state = MARKUP_DECLARATION_OPEN_STATE;

    else if (cp === $.SOLIDUS)
        this.state = END_TAG_OPEN_STATE;

    else if (isAsciiLetter(cp)) {
        this._createStartTagToken();
        this._reconsumeInState(TAG_NAME_STATE);
    }

    else if (cp === $.QUESTION_MARK)
        this._reconsumeInState(BOGUS_COMMENT_STATE);

    else {
        this._emitChar('<');
        this._reconsumeInState(DATA_STATE);
    }
};


//12.2.4.9 End tag open state
//------------------------------------------------------------------
_[END_TAG_OPEN_STATE] = function endTagOpenState(cp) {
    if (isAsciiLetter(cp)) {
        this._createEndTagToken();
        this._reconsumeInState(TAG_NAME_STATE);
    }

    else if (cp === $.GREATER_THAN_SIGN)
        this.state = DATA_STATE;

    else if (cp === $.EOF) {
        this._reconsumeInState(DATA_STATE);
        this._emitChar('<');
        this._emitChar('/');
    }

    else
        this._reconsumeInState(BOGUS_COMMENT_STATE);
};


//12.2.4.10 Tag name state
//------------------------------------------------------------------
_[TAG_NAME_STATE] = function tagNameState(cp) {
    if (isWhitespace(cp))
        this.state = BEFORE_ATTRIBUTE_NAME_STATE;

    else if (cp === $.SOLIDUS)
        this.state = SELF_CLOSING_START_TAG_STATE;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (isAsciiUpper(cp))
        this.currentToken.tagName += toAsciiLowerChar(cp);

    else if (cp === $.NULL)
        this.currentToken.tagName += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this.currentToken.tagName += toChar(cp);
};


//12.2.4.11 RCDATA less-than sign state
//------------------------------------------------------------------
_[RCDATA_LESS_THAN_SIGN_STATE] = function rcdataLessThanSignState(cp) {
    if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = RCDATA_END_TAG_OPEN_STATE;
    }

    else {
        this._emitChar('<');
        this._reconsumeInState(RCDATA_STATE);
    }
};


//12.2.4.12 RCDATA end tag open state
//------------------------------------------------------------------
_[RCDATA_END_TAG_OPEN_STATE] = function rcdataEndTagOpenState(cp) {
    if (isAsciiLetter(cp)) {
        this._createEndTagToken();
        this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);
    }

    else {
        this._emitChar('<');
        this._emitChar('/');
        this._reconsumeInState(RCDATA_STATE);
    }
};


//12.2.4.13 RCDATA end tag name state
//------------------------------------------------------------------
_[RCDATA_END_TAG_NAME_STATE] = function rcdataEndTagNameState(cp) {
    if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
    }

    else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
    }

    else {
        if (this._isAppropriateEndTagToken()) {
            if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
            }

            if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
            }

            if (cp === $.GREATER_THAN_SIGN) {
                this.state = DATA_STATE;
                this._emitCurrentToken();
                return;
            }
        }

        this._emitChar('<');
        this._emitChar('/');
        this._emitSeveralCodePoints(this.tempBuff);
        this._reconsumeInState(RCDATA_STATE);
    }
};


//12.2.4.14 RAWTEXT less-than sign state
//------------------------------------------------------------------
_[RAWTEXT_LESS_THAN_SIGN_STATE] = function rawtextLessThanSignState(cp) {
    if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = RAWTEXT_END_TAG_OPEN_STATE;
    }

    else {
        this._emitChar('<');
        this._reconsumeInState(RAWTEXT_STATE);
    }
};


//12.2.4.15 RAWTEXT end tag open state
//------------------------------------------------------------------
_[RAWTEXT_END_TAG_OPEN_STATE] = function rawtextEndTagOpenState(cp) {
    if (isAsciiLetter(cp)) {
        this._createEndTagToken();
        this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);
    }

    else {
        this._emitChar('<');
        this._emitChar('/');
        this._reconsumeInState(RAWTEXT_STATE);
    }
};


//12.2.4.16 RAWTEXT end tag name state
//------------------------------------------------------------------
_[RAWTEXT_END_TAG_NAME_STATE] = function rawtextEndTagNameState(cp) {
    if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
    }

    else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
    }

    else {
        if (this._isAppropriateEndTagToken()) {
            if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
            }

            if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
            }

            if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
            }
        }

        this._emitChar('<');
        this._emitChar('/');
        this._emitSeveralCodePoints(this.tempBuff);
        this._reconsumeInState(RAWTEXT_STATE);
    }
};


//12.2.4.17 Script data less-than sign state
//------------------------------------------------------------------
_[SCRIPT_DATA_LESS_THAN_SIGN_STATE] = function scriptDataLessThanSignState(cp) {
    if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
    }

    else if (cp === $.EXCLAMATION_MARK) {
        this.state = SCRIPT_DATA_ESCAPE_START_STATE;
        this._emitChar('<');
        this._emitChar('!');
    }

    else {
        this._emitChar('<');
        this._reconsumeInState(SCRIPT_DATA_STATE);
    }
};


//12.2.4.18 Script data end tag open state
//------------------------------------------------------------------
_[SCRIPT_DATA_END_TAG_OPEN_STATE] = function scriptDataEndTagOpenState(cp) {
    if (isAsciiLetter(cp)) {
        this._createEndTagToken();
        this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);
    }

    else {
        this._emitChar('<');
        this._emitChar('/');
        this._reconsumeInState(SCRIPT_DATA_STATE);
    }
};


//12.2.4.19 Script data end tag name state
//------------------------------------------------------------------
_[SCRIPT_DATA_END_TAG_NAME_STATE] = function scriptDataEndTagNameState(cp) {
    if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
    }

    else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
    }

    else {
        if (this._isAppropriateEndTagToken()) {
            if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
            }

            else if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
            }

            else if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
            }
        }

        this._emitChar('<');
        this._emitChar('/');
        this._emitSeveralCodePoints(this.tempBuff);
        this._reconsumeInState(SCRIPT_DATA_STATE);
    }
};


//12.2.4.20 Script data escape start state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPE_START_STATE] = function scriptDataEscapeStartState(cp) {
    if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
        this._emitChar('-');
    }

    else
        this._reconsumeInState(SCRIPT_DATA_STATE);
};


//12.2.4.21 Script data escape start dash state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPE_START_DASH_STATE] = function scriptDataEscapeStartDashState(cp) {
    if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
        this._emitChar('-');
    }

    else
        this._reconsumeInState(SCRIPT_DATA_STATE);
};


//12.2.4.22 Script data escaped state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPED_STATE] = function scriptDataEscapedState(cp) {
    if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
        this._emitChar('-');
    }

    else if (cp === $.LESS_THAN_SIGN)
        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;

    else if (cp === $.NULL)
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this._emitCodePoint(cp);
};


//12.2.4.23 Script data escaped dash state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPED_DASH_STATE] = function scriptDataEscapedDashState(cp) {
    if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
        this._emitChar('-');
    }

    else if (cp === $.LESS_THAN_SIGN)
        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;

    else if (cp === $.NULL) {
        this.state = SCRIPT_DATA_ESCAPED_STATE;
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else {
        this.state = SCRIPT_DATA_ESCAPED_STATE;
        this._emitCodePoint(cp);
    }
};


//12.2.4.24 Script data escaped dash dash state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPED_DASH_DASH_STATE] = function scriptDataEscapedDashDashState(cp) {
    if (cp === $.HYPHEN_MINUS)
        this._emitChar('-');

    else if (cp === $.LESS_THAN_SIGN)
        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = SCRIPT_DATA_STATE;
        this._emitChar('>');
    }

    else if (cp === $.NULL) {
        this.state = SCRIPT_DATA_ESCAPED_STATE;
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else {
        this.state = SCRIPT_DATA_ESCAPED_STATE;
        this._emitCodePoint(cp);
    }
};


//12.2.4.25 Script data escaped less-than sign state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataEscapedLessThanSignState(cp) {
    if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
    }

    else if (isAsciiLetter(cp)) {
        this.tempBuff = [];
        this._emitChar('<');
        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);
    }

    else {
        this._emitChar('<');
        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
    }
};


//12.2.4.26 Script data escaped end tag open state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE] = function scriptDataEscapedEndTagOpenState(cp) {
    if (isAsciiLetter(cp)) {
        this._createEndTagToken();
        this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);
    }

    else {
        this._emitChar('<');
        this._emitChar('/');
        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
    }
};


//12.2.4.27 Script data escaped end tag name state
//------------------------------------------------------------------
_[SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE] = function scriptDataEscapedEndTagNameState(cp) {
    if (isAsciiUpper(cp)) {
        this.currentToken.tagName += toAsciiLowerChar(cp);
        this.tempBuff.push(cp);
    }

    else if (isAsciiLower(cp)) {
        this.currentToken.tagName += toChar(cp);
        this.tempBuff.push(cp);
    }

    else {
        if (this._isAppropriateEndTagToken()) {
            if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
            }

            if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
            }

            if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
            }
        }

        this._emitChar('<');
        this._emitChar('/');
        this._emitSeveralCodePoints(this.tempBuff);
        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
    }
};


//12.2.4.28 Script data double escape start state
//------------------------------------------------------------------
_[SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE] = function scriptDataDoubleEscapeStartState(cp) {
    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
        this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;
        this._emitCodePoint(cp);
    }

    else if (isAsciiUpper(cp)) {
        this.tempBuff.push(toAsciiLowerCodePoint(cp));
        this._emitCodePoint(cp);
    }

    else if (isAsciiLower(cp)) {
        this.tempBuff.push(cp);
        this._emitCodePoint(cp);
    }

    else
        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
};


//12.2.4.29 Script data double escaped state
//------------------------------------------------------------------
_[SCRIPT_DATA_DOUBLE_ESCAPED_STATE] = function scriptDataDoubleEscapedState(cp) {
    if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
        this._emitChar('-');
    }

    else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
        this._emitChar('<');
    }

    else if (cp === $.NULL)
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this._emitCodePoint(cp);
};


//12.2.4.30 Script data double escaped dash state
//------------------------------------------------------------------
_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE] = function scriptDataDoubleEscapedDashState(cp) {
    if (cp === $.HYPHEN_MINUS) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
        this._emitChar('-');
    }

    else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
        this._emitChar('<');
    }

    else if (cp === $.NULL) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
        this._emitCodePoint(cp);
    }
};


//12.2.4.31 Script data double escaped dash dash state
//------------------------------------------------------------------
_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE] = function scriptDataDoubleEscapedDashDashState(cp) {
    if (cp === $.HYPHEN_MINUS)
        this._emitChar('-');

    else if (cp === $.LESS_THAN_SIGN) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
        this._emitChar('<');
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = SCRIPT_DATA_STATE;
        this._emitChar('>');
    }

    else if (cp === $.NULL) {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else {
        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
        this._emitCodePoint(cp);
    }
};


//12.2.4.32 Script data double escaped less-than sign state
//------------------------------------------------------------------
_[SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataDoubleEscapedLessThanSignState(cp) {
    if (cp === $.SOLIDUS) {
        this.tempBuff = [];
        this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
        this._emitChar('/');
    }

    else
        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
};


//12.2.4.33 Script data double escape end state
//------------------------------------------------------------------
_[SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE] = function scriptDataDoubleEscapeEndState(cp) {
    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
        this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

        this._emitCodePoint(cp);
    }

    else if (isAsciiUpper(cp)) {
        this.tempBuff.push(toAsciiLowerCodePoint(cp));
        this._emitCodePoint(cp);
    }

    else if (isAsciiLower(cp)) {
        this.tempBuff.push(cp);
        this._emitCodePoint(cp);
    }

    else
        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
};


//12.2.4.34 Before attribute name state
//------------------------------------------------------------------
_[BEFORE_ATTRIBUTE_NAME_STATE] = function beforeAttributeNameState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF)
        this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);

    else if (cp === $.EQUALS_SIGN) {
        this._createAttr('=');
        this.state = ATTRIBUTE_NAME_STATE;
    }

    else {
        this._createAttr('');
        this._reconsumeInState(ATTRIBUTE_NAME_STATE);
    }
};


//12.2.4.35 Attribute name state
//------------------------------------------------------------------
_[ATTRIBUTE_NAME_STATE] = function attributeNameState(cp) {
    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
        this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);
        this._unconsume();
    }

    else if (cp === $.EQUALS_SIGN)
        this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);

    else if (isAsciiUpper(cp))
        this.currentAttr.name += toAsciiLowerChar(cp);

    else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN)
        this.currentAttr.name += toChar(cp);

    else if (cp === $.NULL)
        this.currentAttr.name += UNICODE.REPLACEMENT_CHARACTER;

    else
        this.currentAttr.name += toChar(cp);
};


//12.2.4.36 After attribute name state
//------------------------------------------------------------------
_[AFTER_ATTRIBUTE_NAME_STATE] = function afterAttributeNameState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.SOLIDUS)
        this.state = SELF_CLOSING_START_TAG_STATE;

    else if (cp === $.EQUALS_SIGN)
        this.state = BEFORE_ATTRIBUTE_VALUE_STATE;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else {
        this._createAttr('');
        this._reconsumeInState(ATTRIBUTE_NAME_STATE);
    }
};


//12.2.4.37 Before attribute value state
//------------------------------------------------------------------
_[BEFORE_ATTRIBUTE_VALUE_STATE] = function beforeAttributeValueState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.QUOTATION_MARK)
        this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;

    else if (cp === $.APOSTROPHE)
        this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;

    else
        this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);
};


//12.2.4.38 Attribute value (double-quoted) state
//------------------------------------------------------------------
_[ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE] = function attributeValueDoubleQuotedState(cp) {
    if (cp === $.QUOTATION_MARK)
        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;

    else if (cp === $.AMPERSAND) {
        this.additionalAllowedCp = $.QUOTATION_MARK;
        this.returnState = this.state;
        this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
    }

    else if (cp === $.NULL)
        this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this.currentAttr.value += toChar(cp);
};


//12.2.4.39 Attribute value (single-quoted) state
//------------------------------------------------------------------
_[ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE] = function attributeValueSingleQuotedState(cp) {
    if (cp === $.APOSTROPHE)
        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;

    else if (cp === $.AMPERSAND) {
        this.additionalAllowedCp = $.APOSTROPHE;
        this.returnState = this.state;
        this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
    }

    else if (cp === $.NULL)
        this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this.currentAttr.value += toChar(cp);
};


//12.2.4.40 Attribute value (unquoted) state
//------------------------------------------------------------------
_[ATTRIBUTE_VALUE_UNQUOTED_STATE] = function attributeValueUnquotedState(cp) {
    if (isWhitespace(cp))
        this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);

    else if (cp === $.AMPERSAND) {
        this.additionalAllowedCp = $.GREATER_THAN_SIGN;
        this.returnState = this.state;
        this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this._leaveAttrValue(DATA_STATE);
        this._emitCurrentToken();
    }

    else if (cp === $.NULL)
        this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN ||
             cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT)
        this.currentAttr.value += toChar(cp);

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this.currentAttr.value += toChar(cp);
};


//12.2.4.41 Character reference in attribute value state
//------------------------------------------------------------------
_[CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE] = function characterReferenceInAttributeValueState(cp) {
    var referencedCodePoints = this._consumeCharacterReference(cp, true);

    if (!this._ensureHibernation()) {
        if (referencedCodePoints) {
            for (var i = 0; i < referencedCodePoints.length; i++)
                this.currentAttr.value += toChar(referencedCodePoints[i]);
        }
        else
            this.currentAttr.value += '&';

        this.state = this.returnState;
    }
};


//12.2.4.42 After attribute value (quoted) state
//------------------------------------------------------------------
_[AFTER_ATTRIBUTE_VALUE_QUOTED_STATE] = function afterAttributeValueQuotedState(cp) {
    if (isWhitespace(cp))
        this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);

    else if (cp === $.SOLIDUS)
        this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);

    else if (cp === $.GREATER_THAN_SIGN) {
        this._leaveAttrValue(DATA_STATE);
        this._emitCurrentToken();
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
};


//12.2.4.43 Self-closing start tag state
//------------------------------------------------------------------
_[SELF_CLOSING_START_TAG_STATE] = function selfClosingStartTagState(cp) {
    if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.selfClosing = true;
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.EOF)
        this._reconsumeInState(DATA_STATE);

    else
        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
};


//12.2.4.44 Bogus comment state
//------------------------------------------------------------------
_[BOGUS_COMMENT_STATE] = function bogusCommentState() {
    this._createCommentToken();
    this._reconsumeInState(BOGUS_COMMENT_STATE_CONTINUATION);
};

//HACK: to support streaming and make BOGUS_COMMENT_STATE reentrant we've
//introduced BOGUS_COMMENT_STATE_CONTINUATION state which will not produce
//comment token on each call.
_[BOGUS_COMMENT_STATE_CONTINUATION] = function bogusCommentStateContinuation(cp) {
    while (true) {
        if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            break;
        }

        else if (cp === $.EOF) {
            this._reconsumeInState(DATA_STATE);
            break;
        }

        else {
            this.currentToken.data += cp === $.NULL ? UNICODE.REPLACEMENT_CHARACTER : toChar(cp);

            this._hibernationSnapshot();
            cp = this._consume();

            if (this._ensureHibernation())
                return;
        }
    }

    this._emitCurrentToken();
};

//12.2.4.45 Markup declaration open state
//------------------------------------------------------------------
_[MARKUP_DECLARATION_OPEN_STATE] = function markupDeclarationOpenState(cp) {
    var dashDashMatch = this._consumeSubsequentIfMatch($$.DASH_DASH_STRING, cp, true),
        doctypeMatch = !dashDashMatch && this._consumeSubsequentIfMatch($$.DOCTYPE_STRING, cp, false),
        cdataMatch = !dashDashMatch && !doctypeMatch &&
                     this.allowCDATA &&
                     this._consumeSubsequentIfMatch($$.CDATA_START_STRING, cp, true);

    if (!this._ensureHibernation()) {
        if (dashDashMatch) {
            this._createCommentToken();
            this.state = COMMENT_START_STATE;
        }

        else if (doctypeMatch)
            this.state = DOCTYPE_STATE;

        else if (cdataMatch)
            this.state = CDATA_SECTION_STATE;

        else
            this._reconsumeInState(BOGUS_COMMENT_STATE);
    }
};


//12.2.4.46 Comment start state
//------------------------------------------------------------------
_[COMMENT_START_STATE] = function commentStartState(cp) {
    if (cp === $.HYPHEN_MINUS)
        this.state = COMMENT_START_DASH_STATE;

    else if (cp === $.NULL) {
        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
        this.state = COMMENT_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.EOF) {
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else {
        this.currentToken.data += toChar(cp);
        this.state = COMMENT_STATE;
    }
};


//12.2.4.47 Comment start dash state
//------------------------------------------------------------------
_[COMMENT_START_DASH_STATE] = function commentStartDashState(cp) {
    if (cp === $.HYPHEN_MINUS)
        this.state = COMMENT_END_STATE;

    else if (cp === $.NULL) {
        this.currentToken.data += '-';
        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
        this.state = COMMENT_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.EOF) {
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else {
        this.currentToken.data += '-';
        this.currentToken.data += toChar(cp);
        this.state = COMMENT_STATE;
    }
};


//12.2.4.48 Comment state
//------------------------------------------------------------------
_[COMMENT_STATE] = function commentState(cp) {
    if (cp === $.HYPHEN_MINUS)
        this.state = COMMENT_END_DASH_STATE;

    else if (cp === $.NULL)
        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.EOF) {
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else
        this.currentToken.data += toChar(cp);
};


//12.2.4.49 Comment end dash state
//------------------------------------------------------------------
_[COMMENT_END_DASH_STATE] = function commentEndDashState(cp) {
    if (cp === $.HYPHEN_MINUS)
        this.state = COMMENT_END_STATE;

    else if (cp === $.NULL) {
        this.currentToken.data += '-';
        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
        this.state = COMMENT_STATE;
    }

    else if (cp === $.EOF) {
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else {
        this.currentToken.data += '-';
        this.currentToken.data += toChar(cp);
        this.state = COMMENT_STATE;
    }
};


//12.2.4.50 Comment end state
//------------------------------------------------------------------
_[COMMENT_END_STATE] = function commentEndState(cp) {
    if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.EXCLAMATION_MARK)
        this.state = COMMENT_END_BANG_STATE;

    else if (cp === $.HYPHEN_MINUS)
        this.currentToken.data += '-';

    else if (cp === $.NULL) {
        this.currentToken.data += '--';
        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
        this.state = COMMENT_STATE;
    }

    else if (cp === $.EOF) {
        this._reconsumeInState(DATA_STATE);
        this._emitCurrentToken();
    }

    else {
        this.currentToken.data += '--';
        this.currentToken.data += toChar(cp);
        this.state = COMMENT_STATE;
    }
};


//12.2.4.51 Comment end bang state
//------------------------------------------------------------------
_[COMMENT_END_BANG_STATE] = function commentEndBangState(cp) {
    if (cp === $.HYPHEN_MINUS) {
        this.currentToken.data += '--!';
        this.state = COMMENT_END_DASH_STATE;
    }

    else if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else if (cp === $.NULL) {
        this.currentToken.data += '--!';
        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
        this.state = COMMENT_STATE;
    }

    else if (cp === $.EOF) {
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else {
        this.currentToken.data += '--!';
        this.currentToken.data += toChar(cp);
        this.state = COMMENT_STATE;
    }
};


//12.2.4.52 DOCTYPE state
//------------------------------------------------------------------
_[DOCTYPE_STATE] = function doctypeState(cp) {
    if (isWhitespace(cp))
        return;

    else if (cp === $.GREATER_THAN_SIGN) {
        this._createDoctypeToken(null);
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.EOF) {
        this._createDoctypeToken(null);
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }
    else {
        this._createDoctypeToken('');
        this._reconsumeInState(DOCTYPE_NAME_STATE);
    }
};


//12.2.4.54 DOCTYPE name state
//------------------------------------------------------------------
_[DOCTYPE_NAME_STATE] = function doctypeNameState(cp) {
    if (isWhitespace(cp) || cp === $.GREATER_THAN_SIGN || cp === $.EOF)
        this._reconsumeInState(AFTER_DOCTYPE_NAME_STATE);

    else if (isAsciiUpper(cp))
        this.currentToken.name += toAsciiLowerChar(cp);

    else if (cp === $.NULL)
        this.currentToken.name += UNICODE.REPLACEMENT_CHARACTER;

    else
        this.currentToken.name += toChar(cp);
};


//12.2.4.55 After DOCTYPE name state
//------------------------------------------------------------------
_[AFTER_DOCTYPE_NAME_STATE] = function afterDoctypeNameState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.GREATER_THAN_SIGN) {
        this.state = DATA_STATE;
        this._emitCurrentToken();
    }

    else {
        var publicMatch = this._consumeSubsequentIfMatch($$.PUBLIC_STRING, cp, false),
            systemMatch = !publicMatch && this._consumeSubsequentIfMatch($$.SYSTEM_STRING, cp, false);

        if (!this._ensureHibernation()) {
            if (publicMatch)
                this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;

            else if (systemMatch)
                this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;

            else {
                this.currentToken.forceQuirks = true;
                this.state = BOGUS_DOCTYPE_STATE;
            }
        }
    }
};


//12.2.4.57 Before DOCTYPE public identifier state
//------------------------------------------------------------------
_[BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE] = function beforeDoctypePublicIdentifierState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.QUOTATION_MARK) {
        this.currentToken.publicId = '';
        this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
    }

    else if (cp === $.APOSTROPHE) {
        this.currentToken.publicId = '';
        this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
    }

    else {
        this.currentToken.forceQuirks = true;
        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
    }
};


//12.2.4.58 DOCTYPE public identifier (double-quoted) state
//------------------------------------------------------------------
_[DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypePublicIdentifierDoubleQuotedState(cp) {
    if (cp === $.QUOTATION_MARK)
        this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;

    else if (cp === $.NULL)
        this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else
        this.currentToken.publicId += toChar(cp);
};


//12.2.4.59 DOCTYPE public identifier (single-quoted) state
//------------------------------------------------------------------
_[DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypePublicIdentifierSingleQuotedState(cp) {
    if (cp === $.APOSTROPHE)
        this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;

    else if (cp === $.NULL)
        this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else
        this.currentToken.publicId += toChar(cp);
};


//12.2.4.61 Between DOCTYPE public and system identifiers state
//------------------------------------------------------------------
_[BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE] = function betweenDoctypePublicAndSystemIdentifiersState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.QUOTATION_MARK) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
    }


    else if (cp === $.APOSTROPHE) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
    }

    else {
        this.currentToken.forceQuirks = true;
        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
    }
};


//12.2.4.63 Before DOCTYPE system identifier state
//------------------------------------------------------------------
_[BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function beforeDoctypeSystemIdentifierState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.QUOTATION_MARK) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
    }

    else if (cp === $.APOSTROPHE) {
        this.currentToken.systemId = '';
        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
    }

    else {
        this.currentToken.forceQuirks = true;
        this._reconsumeInState(BOGUS_DOCTYPE_STATE);
    }
};


//12.2.4.64 DOCTYPE system identifier (double-quoted) state
//------------------------------------------------------------------
_[DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypeSystemIdentifierDoubleQuotedState(cp) {
    if (cp === $.QUOTATION_MARK)
        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.NULL)
        this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else
        this.currentToken.systemId += toChar(cp);
};


//12.2.4.65 DOCTYPE system identifier (single-quoted) state
//------------------------------------------------------------------
_[DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypeSystemIdentifierSingleQuotedState(cp) {
    if (cp === $.APOSTROPHE)
        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;

    else if (cp === $.GREATER_THAN_SIGN) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.NULL)
        this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER;

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else
        this.currentToken.systemId += toChar(cp);
};


//12.2.4.66 After DOCTYPE system identifier state
//------------------------------------------------------------------
_[AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function afterDoctypeSystemIdentifierState(cp) {
    if (isWhitespace(cp))
        return;

    if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.EOF) {
        this.currentToken.forceQuirks = true;
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }

    else
        this.state = BOGUS_DOCTYPE_STATE;
};


//12.2.4.67 Bogus DOCTYPE state
//------------------------------------------------------------------
_[BOGUS_DOCTYPE_STATE] = function bogusDoctypeState(cp) {
    if (cp === $.GREATER_THAN_SIGN) {
        this._emitCurrentToken();
        this.state = DATA_STATE;
    }

    else if (cp === $.EOF) {
        this._emitCurrentToken();
        this._reconsumeInState(DATA_STATE);
    }
};


//12.2.4.68 CDATA section state
//------------------------------------------------------------------
_[CDATA_SECTION_STATE] = function cdataSectionState(cp) {
    while (true) {
        if (cp === $.EOF) {
            this._reconsumeInState(DATA_STATE);
            break;
        }

        else {
            var cdataEndMatch = this._consumeSubsequentIfMatch($$.CDATA_END_STRING, cp, true);

            if (this._ensureHibernation())
                break;

            if (cdataEndMatch) {
                this.state = DATA_STATE;
                break;
            }

            this._emitCodePoint(cp);

            this._hibernationSnapshot();
            cp = this._consume();

            if (this._ensureHibernation())
                break;
        }
    }
};

},{"../common/unicode":494,"./named_entity_data":511,"./preprocessor":512}],511:[function(require,module,exports){
'use strict';

//NOTE: this file contains auto-generated array mapped radix tree that is used for the named entity references consumption
//(details: https://github.com/inikulin/parse5/tree/master/scripts/generate_named_entity_data/README.md)
module.exports = new Uint16Array([4,52,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,106,303,412,810,1432,1701,1796,1987,2114,2360,2420,2484,3170,3251,4140,4393,4575,4610,5106,5512,5728,6117,6274,6315,6345,6427,6516,7002,7910,8733,9323,9870,10170,10631,10893,11318,11386,11467,12773,13092,14474,14922,15448,15542,16419,17666,18166,18611,19004,19095,19298,19397,4,16,69,77,97,98,99,102,103,108,109,110,111,112,114,115,116,117,140,150,158,169,176,194,199,210,216,222,226,242,256,266,283,294,108,105,103,5,198,1,59,148,1,198,80,5,38,1,59,156,1,38,99,117,116,101,5,193,1,59,167,1,193,114,101,118,101,59,1,258,4,2,105,121,182,191,114,99,5,194,1,59,189,1,194,59,1,1040,114,59,3,55349,56580,114,97,118,101,5,192,1,59,208,1,192,112,104,97,59,1,913,97,99,114,59,1,256,100,59,1,10835,4,2,103,112,232,237,111,110,59,1,260,102,59,3,55349,56632,112,108,121,70,117,110,99,116,105,111,110,59,1,8289,105,110,103,5,197,1,59,264,1,197,4,2,99,115,272,277,114,59,3,55349,56476,105,103,110,59,1,8788,105,108,100,101,5,195,1,59,292,1,195,109,108,5,196,1,59,301,1,196,4,8,97,99,101,102,111,114,115,117,321,350,354,383,388,394,400,405,4,2,99,114,327,336,107,115,108,97,115,104,59,1,8726,4,2,118,119,342,345,59,1,10983,101,100,59,1,8966,121,59,1,1041,4,3,99,114,116,362,369,379,97,117,115,101,59,1,8757,110,111,117,108,108,105,115,59,1,8492,97,59,1,914,114,59,3,55349,56581,112,102,59,3,55349,56633,101,118,101,59,1,728,99,114,59,1,8492,109,112,101,113,59,1,8782,4,14,72,79,97,99,100,101,102,104,105,108,111,114,115,117,442,447,456,504,542,547,569,573,577,616,678,784,790,796,99,121,59,1,1063,80,89,5,169,1,59,454,1,169,4,3,99,112,121,464,470,497,117,116,101,59,1,262,4,2,59,105,476,478,1,8914,116,97,108,68,105,102,102,101,114,101,110,116,105,97,108,68,59,1,8517,108,101,121,115,59,1,8493,4,4,97,101,105,111,514,520,530,535,114,111,110,59,1,268,100,105,108,5,199,1,59,528,1,199,114,99,59,1,264,110,105,110,116,59,1,8752,111,116,59,1,266,4,2,100,110,553,560,105,108,108,97,59,1,184,116,101,114,68,111,116,59,1,183,114,59,1,8493,105,59,1,935,114,99,108,101,4,4,68,77,80,84,591,596,603,609,111,116,59,1,8857,105,110,117,115,59,1,8854,108,117,115,59,1,8853,105,109,101,115,59,1,8855,111,4,2,99,115,623,646,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8754,101,67,117,114,108,121,4,2,68,81,658,671,111,117,98,108,101,81,117,111,116,101,59,1,8221,117,111,116,101,59,1,8217,4,4,108,110,112,117,688,701,736,753,111,110,4,2,59,101,696,698,1,8759,59,1,10868,4,3,103,105,116,709,717,722,114,117,101,110,116,59,1,8801,110,116,59,1,8751,111,117,114,73,110,116,101,103,114,97,108,59,1,8750,4,2,102,114,742,745,59,1,8450,111,100,117,99,116,59,1,8720,110,116,101,114,67,108,111,99,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8755,111,115,115,59,1,10799,99,114,59,3,55349,56478,112,4,2,59,67,803,805,1,8915,97,112,59,1,8781,4,11,68,74,83,90,97,99,101,102,105,111,115,834,850,855,860,865,888,903,916,921,1011,1415,4,2,59,111,840,842,1,8517,116,114,97,104,100,59,1,10513,99,121,59,1,1026,99,121,59,1,1029,99,121,59,1,1039,4,3,103,114,115,873,879,883,103,101,114,59,1,8225,114,59,1,8609,104,118,59,1,10980,4,2,97,121,894,900,114,111,110,59,1,270,59,1,1044,108,4,2,59,116,910,912,1,8711,97,59,1,916,114,59,3,55349,56583,4,2,97,102,927,998,4,2,99,109,933,992,114,105,116,105,99,97,108,4,4,65,68,71,84,950,957,978,985,99,117,116,101,59,1,180,111,4,2,116,117,964,967,59,1,729,98,108,101,65,99,117,116,101,59,1,733,114,97,118,101,59,1,96,105,108,100,101,59,1,732,111,110,100,59,1,8900,102,101,114,101,110,116,105,97,108,68,59,1,8518,4,4,112,116,117,119,1021,1026,1048,1249,102,59,3,55349,56635,4,3,59,68,69,1034,1036,1041,1,168,111,116,59,1,8412,113,117,97,108,59,1,8784,98,108,101,4,6,67,68,76,82,85,86,1065,1082,1101,1189,1211,1236,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8751,111,4,2,116,119,1089,1092,59,1,168,110,65,114,114,111,119,59,1,8659,4,2,101,111,1107,1141,102,116,4,3,65,82,84,1117,1124,1136,114,114,111,119,59,1,8656,105,103,104,116,65,114,114,111,119,59,1,8660,101,101,59,1,10980,110,103,4,2,76,82,1149,1177,101,102,116,4,2,65,82,1158,1165,114,114,111,119,59,1,10232,105,103,104,116,65,114,114,111,119,59,1,10234,105,103,104,116,65,114,114,111,119,59,1,10233,105,103,104,116,4,2,65,84,1199,1206,114,114,111,119,59,1,8658,101,101,59,1,8872,112,4,2,65,68,1218,1225,114,114,111,119,59,1,8657,111,119,110,65,114,114,111,119,59,1,8661,101,114,116,105,99,97,108,66,97,114,59,1,8741,110,4,6,65,66,76,82,84,97,1264,1292,1299,1352,1391,1408,114,114,111,119,4,3,59,66,85,1276,1278,1283,1,8595,97,114,59,1,10515,112,65,114,114,111,119,59,1,8693,114,101,118,101,59,1,785,101,102,116,4,3,82,84,86,1310,1323,1334,105,103,104,116,86,101,99,116,111,114,59,1,10576,101,101,86,101,99,116,111,114,59,1,10590,101,99,116,111,114,4,2,59,66,1345,1347,1,8637,97,114,59,1,10582,105,103,104,116,4,2,84,86,1362,1373,101,101,86,101,99,116,111,114,59,1,10591,101,99,116,111,114,4,2,59,66,1384,1386,1,8641,97,114,59,1,10583,101,101,4,2,59,65,1399,1401,1,8868,114,114,111,119,59,1,8615,114,114,111,119,59,1,8659,4,2,99,116,1421,1426,114,59,3,55349,56479,114,111,107,59,1,272,4,16,78,84,97,99,100,102,103,108,109,111,112,113,115,116,117,120,1466,1470,1478,1489,1515,1520,1525,1536,1544,1593,1609,1617,1650,1664,1668,1677,71,59,1,330,72,5,208,1,59,1476,1,208,99,117,116,101,5,201,1,59,1487,1,201,4,3,97,105,121,1497,1503,1512,114,111,110,59,1,282,114,99,5,202,1,59,1510,1,202,59,1,1069,111,116,59,1,278,114,59,3,55349,56584,114,97,118,101,5,200,1,59,1534,1,200,101,109,101,110,116,59,1,8712,4,2,97,112,1550,1555,99,114,59,1,274,116,121,4,2,83,86,1563,1576,109,97,108,108,83,113,117,97,114,101,59,1,9723,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9643,4,2,103,112,1599,1604,111,110,59,1,280,102,59,3,55349,56636,115,105,108,111,110,59,1,917,117,4,2,97,105,1624,1640,108,4,2,59,84,1631,1633,1,10869,105,108,100,101,59,1,8770,108,105,98,114,105,117,109,59,1,8652,4,2,99,105,1656,1660,114,59,1,8496,109,59,1,10867,97,59,1,919,109,108,5,203,1,59,1675,1,203,4,2,105,112,1683,1689,115,116,115,59,1,8707,111,110,101,110,116,105,97,108,69,59,1,8519,4,5,99,102,105,111,115,1713,1717,1722,1762,1791,121,59,1,1060,114,59,3,55349,56585,108,108,101,100,4,2,83,86,1732,1745,109,97,108,108,83,113,117,97,114,101,59,1,9724,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9642,4,3,112,114,117,1770,1775,1781,102,59,3,55349,56637,65,108,108,59,1,8704,114,105,101,114,116,114,102,59,1,8497,99,114,59,1,8497,4,12,74,84,97,98,99,100,102,103,111,114,115,116,1822,1827,1834,1848,1855,1877,1882,1887,1890,1896,1978,1984,99,121,59,1,1027,5,62,1,59,1832,1,62,109,109,97,4,2,59,100,1843,1845,1,915,59,1,988,114,101,118,101,59,1,286,4,3,101,105,121,1863,1869,1874,100,105,108,59,1,290,114,99,59,1,284,59,1,1043,111,116,59,1,288,114,59,3,55349,56586,59,1,8921,112,102,59,3,55349,56638,101,97,116,101,114,4,6,69,70,71,76,83,84,1915,1933,1944,1953,1959,1971,113,117,97,108,4,2,59,76,1925,1927,1,8805,101,115,115,59,1,8923,117,108,108,69,113,117,97,108,59,1,8807,114,101,97,116,101,114,59,1,10914,101,115,115,59,1,8823,108,97,110,116,69,113,117,97,108,59,1,10878,105,108,100,101,59,1,8819,99,114,59,3,55349,56482,59,1,8811,4,8,65,97,99,102,105,111,115,117,2005,2012,2026,2032,2036,2049,2073,2089,82,68,99,121,59,1,1066,4,2,99,116,2018,2023,101,107,59,1,711,59,1,94,105,114,99,59,1,292,114,59,1,8460,108,98,101,114,116,83,112,97,99,101,59,1,8459,4,2,112,114,2055,2059,102,59,1,8461,105,122,111,110,116,97,108,76,105,110,101,59,1,9472,4,2,99,116,2079,2083,114,59,1,8459,114,111,107,59,1,294,109,112,4,2,68,69,2097,2107,111,119,110,72,117,109,112,59,1,8782,113,117,97,108,59,1,8783,4,14,69,74,79,97,99,100,102,103,109,110,111,115,116,117,2144,2149,2155,2160,2171,2189,2194,2198,2209,2245,2307,2329,2334,2341,99,121,59,1,1045,108,105,103,59,1,306,99,121,59,1,1025,99,117,116,101,5,205,1,59,2169,1,205,4,2,105,121,2177,2186,114,99,5,206,1,59,2184,1,206,59,1,1048,111,116,59,1,304,114,59,1,8465,114,97,118,101,5,204,1,59,2207,1,204,4,3,59,97,112,2217,2219,2238,1,8465,4,2,99,103,2225,2229,114,59,1,298,105,110,97,114,121,73,59,1,8520,108,105,101,115,59,1,8658,4,2,116,118,2251,2281,4,2,59,101,2257,2259,1,8748,4,2,103,114,2265,2271,114,97,108,59,1,8747,115,101,99,116,105,111,110,59,1,8898,105,115,105,98,108,101,4,2,67,84,2293,2300,111,109,109,97,59,1,8291,105,109,101,115,59,1,8290,4,3,103,112,116,2315,2320,2325,111,110,59,1,302,102,59,3,55349,56640,97,59,1,921,99,114,59,1,8464,105,108,100,101,59,1,296,4,2,107,109,2347,2352,99,121,59,1,1030,108,5,207,1,59,2358,1,207,4,5,99,102,111,115,117,2372,2386,2391,2397,2414,4,2,105,121,2378,2383,114,99,59,1,308,59,1,1049,114,59,3,55349,56589,112,102,59,3,55349,56641,4,2,99,101,2403,2408,114,59,3,55349,56485,114,99,121,59,1,1032,107,99,121,59,1,1028,4,7,72,74,97,99,102,111,115,2436,2441,2446,2452,2467,2472,2478,99,121,59,1,1061,99,121,59,1,1036,112,112,97,59,1,922,4,2,101,121,2458,2464,100,105,108,59,1,310,59,1,1050,114,59,3,55349,56590,112,102,59,3,55349,56642,99,114,59,3,55349,56486,4,11,74,84,97,99,101,102,108,109,111,115,116,2508,2513,2520,2562,2585,2981,2986,3004,3011,3146,3167,99,121,59,1,1033,5,60,1,59,2518,1,60,4,5,99,109,110,112,114,2532,2538,2544,2548,2558,117,116,101,59,1,313,98,100,97,59,1,923,103,59,1,10218,108,97,99,101,116,114,102,59,1,8466,114,59,1,8606,4,3,97,101,121,2570,2576,2582,114,111,110,59,1,317,100,105,108,59,1,315,59,1,1051,4,2,102,115,2591,2907,116,4,10,65,67,68,70,82,84,85,86,97,114,2614,2663,2672,2728,2735,2760,2820,2870,2888,2895,4,2,110,114,2620,2633,103,108,101,66,114,97,99,107,101,116,59,1,10216,114,111,119,4,3,59,66,82,2644,2646,2651,1,8592,97,114,59,1,8676,105,103,104,116,65,114,114,111,119,59,1,8646,101,105,108,105,110,103,59,1,8968,111,4,2,117,119,2679,2692,98,108,101,66,114,97,99,107,101,116,59,1,10214,110,4,2,84,86,2699,2710,101,101,86,101,99,116,111,114,59,1,10593,101,99,116,111,114,4,2,59,66,2721,2723,1,8643,97,114,59,1,10585,108,111,111,114,59,1,8970,105,103,104,116,4,2,65,86,2745,2752,114,114,111,119,59,1,8596,101,99,116,111,114,59,1,10574,4,2,101,114,2766,2792,101,4,3,59,65,86,2775,2777,2784,1,8867,114,114,111,119,59,1,8612,101,99,116,111,114,59,1,10586,105,97,110,103,108,101,4,3,59,66,69,2806,2808,2813,1,8882,97,114,59,1,10703,113,117,97,108,59,1,8884,112,4,3,68,84,86,2829,2841,2852,111,119,110,86,101,99,116,111,114,59,1,10577,101,101,86,101,99,116,111,114,59,1,10592,101,99,116,111,114,4,2,59,66,2863,2865,1,8639,97,114,59,1,10584,101,99,116,111,114,4,2,59,66,2881,2883,1,8636,97,114,59,1,10578,114,114,111,119,59,1,8656,105,103,104,116,97,114,114,111,119,59,1,8660,115,4,6,69,70,71,76,83,84,2922,2936,2947,2956,2962,2974,113,117,97,108,71,114,101,97,116,101,114,59,1,8922,117,108,108,69,113,117,97,108,59,1,8806,114,101,97,116,101,114,59,1,8822,101,115,115,59,1,10913,108,97,110,116,69,113,117,97,108,59,1,10877,105,108,100,101,59,1,8818,114,59,3,55349,56591,4,2,59,101,2992,2994,1,8920,102,116,97,114,114,111,119,59,1,8666,105,100,111,116,59,1,319,4,3,110,112,119,3019,3110,3115,103,4,4,76,82,108,114,3030,3058,3070,3098,101,102,116,4,2,65,82,3039,3046,114,114,111,119,59,1,10229,105,103,104,116,65,114,114,111,119,59,1,10231,105,103,104,116,65,114,114,111,119,59,1,10230,101,102,116,4,2,97,114,3079,3086,114,114,111,119,59,1,10232,105,103,104,116,97,114,114,111,119,59,1,10234,105,103,104,116,97,114,114,111,119,59,1,10233,102,59,3,55349,56643,101,114,4,2,76,82,3123,3134,101,102,116,65,114,114,111,119,59,1,8601,105,103,104,116,65,114,114,111,119,59,1,8600,4,3,99,104,116,3154,3158,3161,114,59,1,8466,59,1,8624,114,111,107,59,1,321,59,1,8810,4,8,97,99,101,102,105,111,115,117,3188,3192,3196,3222,3227,3237,3243,3248,112,59,1,10501,121,59,1,1052,4,2,100,108,3202,3213,105,117,109,83,112,97,99,101,59,1,8287,108,105,110,116,114,102,59,1,8499,114,59,3,55349,56592,110,117,115,80,108,117,115,59,1,8723,112,102,59,3,55349,56644,99,114,59,1,8499,59,1,924,4,9,74,97,99,101,102,111,115,116,117,3271,3276,3283,3306,3422,3427,4120,4126,4137,99,121,59,1,1034,99,117,116,101,59,1,323,4,3,97,101,121,3291,3297,3303,114,111,110,59,1,327,100,105,108,59,1,325,59,1,1053,4,3,103,115,119,3314,3380,3415,97,116,105,118,101,4,3,77,84,86,3327,3340,3365,101,100,105,117,109,83,112,97,99,101,59,1,8203,104,105,4,2,99,110,3348,3357,107,83,112,97,99,101,59,1,8203,83,112,97,99,101,59,1,8203,101,114,121,84,104,105,110,83,112,97,99,101,59,1,8203,116,101,100,4,2,71,76,3389,3405,114,101,97,116,101,114,71,114,101,97,116,101,114,59,1,8811,101,115,115,76,101,115,115,59,1,8810,76,105,110,101,59,1,10,114,59,3,55349,56593,4,4,66,110,112,116,3437,3444,3460,3464,114,101,97,107,59,1,8288,66,114,101,97,107,105,110,103,83,112,97,99,101,59,1,160,102,59,1,8469,4,13,59,67,68,69,71,72,76,78,80,82,83,84,86,3492,3494,3517,3536,3578,3657,3685,3784,3823,3860,3915,4066,4107,1,10988,4,2,111,117,3500,3510,110,103,114,117,101,110,116,59,1,8802,112,67,97,112,59,1,8813,111,117,98,108,101,86,101,114,116,105,99,97,108,66,97,114,59,1,8742,4,3,108,113,120,3544,3552,3571,101,109,101,110,116,59,1,8713,117,97,108,4,2,59,84,3561,3563,1,8800,105,108,100,101,59,3,8770,824,105,115,116,115,59,1,8708,114,101,97,116,101,114,4,7,59,69,70,71,76,83,84,3600,3602,3609,3621,3631,3637,3650,1,8815,113,117,97,108,59,1,8817,117,108,108,69,113,117,97,108,59,3,8807,824,114,101,97,116,101,114,59,3,8811,824,101,115,115,59,1,8825,108,97,110,116,69,113,117,97,108,59,3,10878,824,105,108,100,101,59,1,8821,117,109,112,4,2,68,69,3666,3677,111,119,110,72,117,109,112,59,3,8782,824,113,117,97,108,59,3,8783,824,101,4,2,102,115,3692,3724,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3709,3711,3717,1,8938,97,114,59,3,10703,824,113,117,97,108,59,1,8940,115,4,6,59,69,71,76,83,84,3739,3741,3748,3757,3764,3777,1,8814,113,117,97,108,59,1,8816,114,101,97,116,101,114,59,1,8824,101,115,115,59,3,8810,824,108,97,110,116,69,113,117,97,108,59,3,10877,824,105,108,100,101,59,1,8820,101,115,116,101,100,4,2,71,76,3795,3812,114,101,97,116,101,114,71,114,101,97,116,101,114,59,3,10914,824,101,115,115,76,101,115,115,59,3,10913,824,114,101,99,101,100,101,115,4,3,59,69,83,3838,3840,3848,1,8832,113,117,97,108,59,3,10927,824,108,97,110,116,69,113,117,97,108,59,1,8928,4,2,101,105,3866,3881,118,101,114,115,101,69,108,101,109,101,110,116,59,1,8716,103,104,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3900,3902,3908,1,8939,97,114,59,3,10704,824,113,117,97,108,59,1,8941,4,2,113,117,3921,3973,117,97,114,101,83,117,4,2,98,112,3933,3952,115,101,116,4,2,59,69,3942,3945,3,8847,824,113,117,97,108,59,1,8930,101,114,115,101,116,4,2,59,69,3963,3966,3,8848,824,113,117,97,108,59,1,8931,4,3,98,99,112,3981,4000,4045,115,101,116,4,2,59,69,3990,3993,3,8834,8402,113,117,97,108,59,1,8840,99,101,101,100,115,4,4,59,69,83,84,4015,4017,4025,4037,1,8833,113,117,97,108,59,3,10928,824,108,97,110,116,69,113,117,97,108,59,1,8929,105,108,100,101,59,3,8831,824,101,114,115,101,116,4,2,59,69,4056,4059,3,8835,8402,113,117,97,108,59,1,8841,105,108,100,101,4,4,59,69,70,84,4080,4082,4089,4100,1,8769,113,117,97,108,59,1,8772,117,108,108,69,113,117,97,108,59,1,8775,105,108,100,101,59,1,8777,101,114,116,105,99,97,108,66,97,114,59,1,8740,99,114,59,3,55349,56489,105,108,100,101,5,209,1,59,4135,1,209,59,1,925,4,14,69,97,99,100,102,103,109,111,112,114,115,116,117,118,4170,4176,4187,4205,4212,4217,4228,4253,4259,4292,4295,4316,4337,4346,108,105,103,59,1,338,99,117,116,101,5,211,1,59,4185,1,211,4,2,105,121,4193,4202,114,99,5,212,1,59,4200,1,212,59,1,1054,98,108,97,99,59,1,336,114,59,3,55349,56594,114,97,118,101,5,210,1,59,4226,1,210,4,3,97,101,105,4236,4241,4246,99,114,59,1,332,103,97,59,1,937,99,114,111,110,59,1,927,112,102,59,3,55349,56646,101,110,67,117,114,108,121,4,2,68,81,4272,4285,111,117,98,108,101,81,117,111,116,101,59,1,8220,117,111,116,101,59,1,8216,59,1,10836,4,2,99,108,4301,4306,114,59,3,55349,56490,97,115,104,5,216,1,59,4314,1,216,105,4,2,108,109,4323,4332,100,101,5,213,1,59,4330,1,213,101,115,59,1,10807,109,108,5,214,1,59,4344,1,214,101,114,4,2,66,80,4354,4380,4,2,97,114,4360,4364,114,59,1,8254,97,99,4,2,101,107,4372,4375,59,1,9182,101,116,59,1,9140,97,114,101,110,116,104,101,115,105,115,59,1,9180,4,9,97,99,102,104,105,108,111,114,115,4413,4422,4426,4431,4435,4438,4448,4471,4561,114,116,105,97,108,68,59,1,8706,121,59,1,1055,114,59,3,55349,56595,105,59,1,934,59,1,928,117,115,77,105,110,117,115,59,1,177,4,2,105,112,4454,4467,110,99,97,114,101,112,108,97,110,101,59,1,8460,102,59,1,8473,4,4,59,101,105,111,4481,4483,4526,4531,1,10939,99,101,100,101,115,4,4,59,69,83,84,4498,4500,4507,4519,1,8826,113,117,97,108,59,1,10927,108,97,110,116,69,113,117,97,108,59,1,8828,105,108,100,101,59,1,8830,109,101,59,1,8243,4,2,100,112,4537,4543,117,99,116,59,1,8719,111,114,116,105,111,110,4,2,59,97,4555,4557,1,8759,108,59,1,8733,4,2,99,105,4567,4572,114,59,3,55349,56491,59,1,936,4,4,85,102,111,115,4585,4594,4599,4604,79,84,5,34,1,59,4592,1,34,114,59,3,55349,56596,112,102,59,1,8474,99,114,59,3,55349,56492,4,12,66,69,97,99,101,102,104,105,111,114,115,117,4636,4642,4650,4681,4704,4763,4767,4771,5047,5069,5081,5094,97,114,114,59,1,10512,71,5,174,1,59,4648,1,174,4,3,99,110,114,4658,4664,4668,117,116,101,59,1,340,103,59,1,10219,114,4,2,59,116,4675,4677,1,8608,108,59,1,10518,4,3,97,101,121,4689,4695,4701,114,111,110,59,1,344,100,105,108,59,1,342,59,1,1056,4,2,59,118,4710,4712,1,8476,101,114,115,101,4,2,69,85,4722,4748,4,2,108,113,4728,4736,101,109,101,110,116,59,1,8715,117,105,108,105,98,114,105,117,109,59,1,8651,112,69,113,117,105,108,105,98,114,105,117,109,59,1,10607,114,59,1,8476,111,59,1,929,103,104,116,4,8,65,67,68,70,84,85,86,97,4792,4840,4849,4905,4912,4972,5022,5040,4,2,110,114,4798,4811,103,108,101,66,114,97,99,107,101,116,59,1,10217,114,111,119,4,3,59,66,76,4822,4824,4829,1,8594,97,114,59,1,8677,101,102,116,65,114,114,111,119,59,1,8644,101,105,108,105,110,103,59,1,8969,111,4,2,117,119,4856,4869,98,108,101,66,114,97,99,107,101,116,59,1,10215,110,4,2,84,86,4876,4887,101,101,86,101,99,116,111,114,59,1,10589,101,99,116,111,114,4,2,59,66,4898,4900,1,8642,97,114,59,1,10581,108,111,111,114,59,1,8971,4,2,101,114,4918,4944,101,4,3,59,65,86,4927,4929,4936,1,8866,114,114,111,119,59,1,8614,101,99,116,111,114,59,1,10587,105,97,110,103,108,101,4,3,59,66,69,4958,4960,4965,1,8883,97,114,59,1,10704,113,117,97,108,59,1,8885,112,4,3,68,84,86,4981,4993,5004,111,119,110,86,101,99,116,111,114,59,1,10575,101,101,86,101,99,116,111,114,59,1,10588,101,99,116,111,114,4,2,59,66,5015,5017,1,8638,97,114,59,1,10580,101,99,116,111,114,4,2,59,66,5033,5035,1,8640,97,114,59,1,10579,114,114,111,119,59,1,8658,4,2,112,117,5053,5057,102,59,1,8477,110,100,73,109,112,108,105,101,115,59,1,10608,105,103,104,116,97,114,114,111,119,59,1,8667,4,2,99,104,5087,5091,114,59,1,8475,59,1,8625,108,101,68,101,108,97,121,101,100,59,1,10740,4,13,72,79,97,99,102,104,105,109,111,113,115,116,117,5134,5150,5157,5164,5198,5203,5259,5265,5277,5283,5374,5380,5385,4,2,67,99,5140,5146,72,99,121,59,1,1065,121,59,1,1064,70,84,99,121,59,1,1068,99,117,116,101,59,1,346,4,5,59,97,101,105,121,5176,5178,5184,5190,5195,1,10940,114,111,110,59,1,352,100,105,108,59,1,350,114,99,59,1,348,59,1,1057,114,59,3,55349,56598,111,114,116,4,4,68,76,82,85,5216,5227,5238,5250,111,119,110,65,114,114,111,119,59,1,8595,101,102,116,65,114,114,111,119,59,1,8592,105,103,104,116,65,114,114,111,119,59,1,8594,112,65,114,114,111,119,59,1,8593,103,109,97,59,1,931,97,108,108,67,105,114,99,108,101,59,1,8728,112,102,59,3,55349,56650,4,2,114,117,5289,5293,116,59,1,8730,97,114,101,4,4,59,73,83,85,5306,5308,5322,5367,1,9633,110,116,101,114,115,101,99,116,105,111,110,59,1,8851,117,4,2,98,112,5329,5347,115,101,116,4,2,59,69,5338,5340,1,8847,113,117,97,108,59,1,8849,101,114,115,101,116,4,2,59,69,5358,5360,1,8848,113,117,97,108,59,1,8850,110,105,111,110,59,1,8852,99,114,59,3,55349,56494,97,114,59,1,8902,4,4,98,99,109,112,5395,5420,5475,5478,4,2,59,115,5401,5403,1,8912,101,116,4,2,59,69,5411,5413,1,8912,113,117,97,108,59,1,8838,4,2,99,104,5426,5468,101,101,100,115,4,4,59,69,83,84,5440,5442,5449,5461,1,8827,113,117,97,108,59,1,10928,108,97,110,116,69,113,117,97,108,59,1,8829,105,108,100,101,59,1,8831,84,104,97,116,59,1,8715,59,1,8721,4,3,59,101,115,5486,5488,5507,1,8913,114,115,101,116,4,2,59,69,5498,5500,1,8835,113,117,97,108,59,1,8839,101,116,59,1,8913,4,11,72,82,83,97,99,102,104,105,111,114,115,5536,5546,5552,5567,5579,5602,5607,5655,5695,5701,5711,79,82,78,5,222,1,59,5544,1,222,65,68,69,59,1,8482,4,2,72,99,5558,5563,99,121,59,1,1035,121,59,1,1062,4,2,98,117,5573,5576,59,1,9,59,1,932,4,3,97,101,121,5587,5593,5599,114,111,110,59,1,356,100,105,108,59,1,354,59,1,1058,114,59,3,55349,56599,4,2,101,105,5613,5631,4,2,114,116,5619,5627,101,102,111,114,101,59,1,8756,97,59,1,920,4,2,99,110,5637,5647,107,83,112,97,99,101,59,3,8287,8202,83,112,97,99,101,59,1,8201,108,100,101,4,4,59,69,70,84,5668,5670,5677,5688,1,8764,113,117,97,108,59,1,8771,117,108,108,69,113,117,97,108,59,1,8773,105,108,100,101,59,1,8776,112,102,59,3,55349,56651,105,112,108,101,68,111,116,59,1,8411,4,2,99,116,5717,5722,114,59,3,55349,56495,114,111,107,59,1,358,4,14,97,98,99,100,102,103,109,110,111,112,114,115,116,117,5758,5789,5805,5823,5830,5835,5846,5852,5921,5937,6089,6095,6101,6108,4,2,99,114,5764,5774,117,116,101,5,218,1,59,5772,1,218,114,4,2,59,111,5781,5783,1,8607,99,105,114,59,1,10569,114,4,2,99,101,5796,5800,121,59,1,1038,118,101,59,1,364,4,2,105,121,5811,5820,114,99,5,219,1,59,5818,1,219,59,1,1059,98,108,97,99,59,1,368,114,59,3,55349,56600,114,97,118,101,5,217,1,59,5844,1,217,97,99,114,59,1,362,4,2,100,105,5858,5905,101,114,4,2,66,80,5866,5892,4,2,97,114,5872,5876,114,59,1,95,97,99,4,2,101,107,5884,5887,59,1,9183,101,116,59,1,9141,97,114,101,110,116,104,101,115,105,115,59,1,9181,111,110,4,2,59,80,5913,5915,1,8899,108,117,115,59,1,8846,4,2,103,112,5927,5932,111,110,59,1,370,102,59,3,55349,56652,4,8,65,68,69,84,97,100,112,115,5955,5985,5996,6009,6026,6033,6044,6075,114,114,111,119,4,3,59,66,68,5967,5969,5974,1,8593,97,114,59,1,10514,111,119,110,65,114,114,111,119,59,1,8645,111,119,110,65,114,114,111,119,59,1,8597,113,117,105,108,105,98,114,105,117,109,59,1,10606,101,101,4,2,59,65,6017,6019,1,8869,114,114,111,119,59,1,8613,114,114,111,119,59,1,8657,111,119,110,97,114,114,111,119,59,1,8661,101,114,4,2,76,82,6052,6063,101,102,116,65,114,114,111,119,59,1,8598,105,103,104,116,65,114,114,111,119,59,1,8599,105,4,2,59,108,6082,6084,1,978,111,110,59,1,933,105,110,103,59,1,366,99,114,59,3,55349,56496,105,108,100,101,59,1,360,109,108,5,220,1,59,6115,1,220,4,9,68,98,99,100,101,102,111,115,118,6137,6143,6148,6152,6166,6250,6255,6261,6267,97,115,104,59,1,8875,97,114,59,1,10987,121,59,1,1042,97,115,104,4,2,59,108,6161,6163,1,8873,59,1,10982,4,2,101,114,6172,6175,59,1,8897,4,3,98,116,121,6183,6188,6238,97,114,59,1,8214,4,2,59,105,6194,6196,1,8214,99,97,108,4,4,66,76,83,84,6209,6214,6220,6231,97,114,59,1,8739,105,110,101,59,1,124,101,112,97,114,97,116,111,114,59,1,10072,105,108,100,101,59,1,8768,84,104,105,110,83,112,97,99,101,59,1,8202,114,59,3,55349,56601,112,102,59,3,55349,56653,99,114,59,3,55349,56497,100,97,115,104,59,1,8874,4,5,99,101,102,111,115,6286,6292,6298,6303,6309,105,114,99,59,1,372,100,103,101,59,1,8896,114,59,3,55349,56602,112,102,59,3,55349,56654,99,114,59,3,55349,56498,4,4,102,105,111,115,6325,6330,6333,6339,114,59,3,55349,56603,59,1,926,112,102,59,3,55349,56655,99,114,59,3,55349,56499,4,9,65,73,85,97,99,102,111,115,117,6365,6370,6375,6380,6391,6405,6410,6416,6422,99,121,59,1,1071,99,121,59,1,1031,99,121,59,1,1070,99,117,116,101,5,221,1,59,6389,1,221,4,2,105,121,6397,6402,114,99,59,1,374,59,1,1067,114,59,3,55349,56604,112,102,59,3,55349,56656,99,114,59,3,55349,56500,109,108,59,1,376,4,8,72,97,99,100,101,102,111,115,6445,6450,6457,6472,6477,6501,6505,6510,99,121,59,1,1046,99,117,116,101,59,1,377,4,2,97,121,6463,6469,114,111,110,59,1,381,59,1,1047,111,116,59,1,379,4,2,114,116,6483,6497,111,87,105,100,116,104,83,112,97,99,101,59,1,8203,97,59,1,918,114,59,1,8488,112,102,59,1,8484,99,114,59,3,55349,56501,4,16,97,98,99,101,102,103,108,109,110,111,112,114,115,116,117,119,6550,6561,6568,6612,6622,6634,6645,6672,6699,6854,6870,6923,6933,6963,6974,6983,99,117,116,101,5,225,1,59,6559,1,225,114,101,118,101,59,1,259,4,6,59,69,100,105,117,121,6582,6584,6588,6591,6600,6609,1,8766,59,3,8766,819,59,1,8767,114,99,5,226,1,59,6598,1,226,116,101,5,180,1,59,6607,1,180,59,1,1072,108,105,103,5,230,1,59,6620,1,230,4,2,59,114,6628,6630,1,8289,59,3,55349,56606,114,97,118,101,5,224,1,59,6643,1,224,4,2,101,112,6651,6667,4,2,102,112,6657,6663,115,121,109,59,1,8501,104,59,1,8501,104,97,59,1,945,4,2,97,112,6678,6692,4,2,99,108,6684,6688,114,59,1,257,103,59,1,10815,5,38,1,59,6697,1,38,4,2,100,103,6705,6737,4,5,59,97,100,115,118,6717,6719,6724,6727,6734,1,8743,110,100,59,1,10837,59,1,10844,108,111,112,101,59,1,10840,59,1,10842,4,7,59,101,108,109,114,115,122,6753,6755,6758,6762,6814,6835,6848,1,8736,59,1,10660,101,59,1,8736,115,100,4,2,59,97,6770,6772,1,8737,4,8,97,98,99,100,101,102,103,104,6790,6793,6796,6799,6802,6805,6808,6811,59,1,10664,59,1,10665,59,1,10666,59,1,10667,59,1,10668,59,1,10669,59,1,10670,59,1,10671,116,4,2,59,118,6821,6823,1,8735,98,4,2,59,100,6830,6832,1,8894,59,1,10653,4,2,112,116,6841,6845,104,59,1,8738,59,1,197,97,114,114,59,1,9084,4,2,103,112,6860,6865,111,110,59,1,261,102,59,3,55349,56658,4,7,59,69,97,101,105,111,112,6886,6888,6891,6897,6900,6904,6908,1,8776,59,1,10864,99,105,114,59,1,10863,59,1,8778,100,59,1,8779,115,59,1,39,114,111,120,4,2,59,101,6917,6919,1,8776,113,59,1,8778,105,110,103,5,229,1,59,6931,1,229,4,3,99,116,121,6941,6946,6949,114,59,3,55349,56502,59,1,42,109,112,4,2,59,101,6957,6959,1,8776,113,59,1,8781,105,108,100,101,5,227,1,59,6972,1,227,109,108,5,228,1,59,6981,1,228,4,2,99,105,6989,6997,111,110,105,110,116,59,1,8755,110,116,59,1,10769,4,16,78,97,98,99,100,101,102,105,107,108,110,111,112,114,115,117,7036,7041,7119,7135,7149,7155,7219,7224,7347,7354,7463,7489,7786,7793,7814,7866,111,116,59,1,10989,4,2,99,114,7047,7094,107,4,4,99,101,112,115,7058,7064,7073,7080,111,110,103,59,1,8780,112,115,105,108,111,110,59,1,1014,114,105,109,101,59,1,8245,105,109,4,2,59,101,7088,7090,1,8765,113,59,1,8909,4,2,118,119,7100,7105,101,101,59,1,8893,101,100,4,2,59,103,7113,7115,1,8965,101,59,1,8965,114,107,4,2,59,116,7127,7129,1,9141,98,114,107,59,1,9142,4,2,111,121,7141,7146,110,103,59,1,8780,59,1,1073,113,117,111,59,1,8222,4,5,99,109,112,114,116,7167,7181,7188,7193,7199,97,117,115,4,2,59,101,7176,7178,1,8757,59,1,8757,112,116,121,118,59,1,10672,115,105,59,1,1014,110,111,117,59,1,8492,4,3,97,104,119,7207,7210,7213,59,1,946,59,1,8502,101,101,110,59,1,8812,114,59,3,55349,56607,103,4,7,99,111,115,116,117,118,119,7241,7262,7288,7305,7328,7335,7340,4,3,97,105,117,7249,7253,7258,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,4,3,100,112,116,7270,7275,7281,111,116,59,1,10752,108,117,115,59,1,10753,105,109,101,115,59,1,10754,4,2,113,116,7294,7300,99,117,112,59,1,10758,97,114,59,1,9733,114,105,97,110,103,108,101,4,2,100,117,7318,7324,111,119,110,59,1,9661,112,59,1,9651,112,108,117,115,59,1,10756,101,101,59,1,8897,101,100,103,101,59,1,8896,97,114,111,119,59,1,10509,4,3,97,107,111,7362,7436,7458,4,2,99,110,7368,7432,107,4,3,108,115,116,7377,7386,7394,111,122,101,110,103,101,59,1,10731,113,117,97,114,101,59,1,9642,114,105,97,110,103,108,101,4,4,59,100,108,114,7411,7413,7419,7425,1,9652,111,119,110,59,1,9662,101,102,116,59,1,9666,105,103,104,116,59,1,9656,107,59,1,9251,4,2,49,51,7442,7454,4,2,50,52,7448,7451,59,1,9618,59,1,9617,52,59,1,9619,99,107,59,1,9608,4,2,101,111,7469,7485,4,2,59,113,7475,7478,3,61,8421,117,105,118,59,3,8801,8421,116,59,1,8976,4,4,112,116,119,120,7499,7504,7517,7523,102,59,3,55349,56659,4,2,59,116,7510,7512,1,8869,111,109,59,1,8869,116,105,101,59,1,8904,4,12,68,72,85,86,98,100,104,109,112,116,117,118,7549,7571,7597,7619,7655,7660,7682,7708,7715,7721,7728,7750,4,4,76,82,108,114,7559,7562,7565,7568,59,1,9559,59,1,9556,59,1,9558,59,1,9555,4,5,59,68,85,100,117,7583,7585,7588,7591,7594,1,9552,59,1,9574,59,1,9577,59,1,9572,59,1,9575,4,4,76,82,108,114,7607,7610,7613,7616,59,1,9565,59,1,9562,59,1,9564,59,1,9561,4,7,59,72,76,82,104,108,114,7635,7637,7640,7643,7646,7649,7652,1,9553,59,1,9580,59,1,9571,59,1,9568,59,1,9579,59,1,9570,59,1,9567,111,120,59,1,10697,4,4,76,82,108,114,7670,7673,7676,7679,59,1,9557,59,1,9554,59,1,9488,59,1,9484,4,5,59,68,85,100,117,7694,7696,7699,7702,7705,1,9472,59,1,9573,59,1,9576,59,1,9516,59,1,9524,105,110,117,115,59,1,8863,108,117,115,59,1,8862,105,109,101,115,59,1,8864,4,4,76,82,108,114,7738,7741,7744,7747,59,1,9563,59,1,9560,59,1,9496,59,1,9492,4,7,59,72,76,82,104,108,114,7766,7768,7771,7774,7777,7780,7783,1,9474,59,1,9578,59,1,9569,59,1,9566,59,1,9532,59,1,9508,59,1,9500,114,105,109,101,59,1,8245,4,2,101,118,7799,7804,118,101,59,1,728,98,97,114,5,166,1,59,7812,1,166,4,4,99,101,105,111,7824,7829,7834,7846,114,59,3,55349,56503,109,105,59,1,8271,109,4,2,59,101,7841,7843,1,8765,59,1,8909,108,4,3,59,98,104,7855,7857,7860,1,92,59,1,10693,115,117,98,59,1,10184,4,2,108,109,7872,7885,108,4,2,59,101,7879,7881,1,8226,116,59,1,8226,112,4,3,59,69,101,7894,7896,7899,1,8782,59,1,10926,4,2,59,113,7905,7907,1,8783,59,1,8783,4,15,97,99,100,101,102,104,105,108,111,114,115,116,117,119,121,7942,8021,8075,8080,8121,8126,8157,8279,8295,8430,8446,8485,8491,8707,8726,4,3,99,112,114,7950,7956,8007,117,116,101,59,1,263,4,6,59,97,98,99,100,115,7970,7972,7977,7984,7998,8003,1,8745,110,100,59,1,10820,114,99,117,112,59,1,10825,4,2,97,117,7990,7994,112,59,1,10827,112,59,1,10823,111,116,59,1,10816,59,3,8745,65024,4,2,101,111,8013,8017,116,59,1,8257,110,59,1,711,4,4,97,101,105,117,8031,8046,8056,8061,4,2,112,114,8037,8041,115,59,1,10829,111,110,59,1,269,100,105,108,5,231,1,59,8054,1,231,114,99,59,1,265,112,115,4,2,59,115,8069,8071,1,10828,109,59,1,10832,111,116,59,1,267,4,3,100,109,110,8088,8097,8104,105,108,5,184,1,59,8095,1,184,112,116,121,118,59,1,10674,116,5,162,2,59,101,8112,8114,1,162,114,100,111,116,59,1,183,114,59,3,55349,56608,4,3,99,101,105,8134,8138,8154,121,59,1,1095,99,107,4,2,59,109,8146,8148,1,10003,97,114,107,59,1,10003,59,1,967,114,4,7,59,69,99,101,102,109,115,8174,8176,8179,8258,8261,8268,8273,1,9675,59,1,10691,4,3,59,101,108,8187,8189,8193,1,710,113,59,1,8791,101,4,2,97,100,8200,8223,114,114,111,119,4,2,108,114,8210,8216,101,102,116,59,1,8634,105,103,104,116,59,1,8635,4,5,82,83,97,99,100,8235,8238,8241,8246,8252,59,1,174,59,1,9416,115,116,59,1,8859,105,114,99,59,1,8858,97,115,104,59,1,8861,59,1,8791,110,105,110,116,59,1,10768,105,100,59,1,10991,99,105,114,59,1,10690,117,98,115,4,2,59,117,8288,8290,1,9827,105,116,59,1,9827,4,4,108,109,110,112,8305,8326,8376,8400,111,110,4,2,59,101,8313,8315,1,58,4,2,59,113,8321,8323,1,8788,59,1,8788,4,2,109,112,8332,8344,97,4,2,59,116,8339,8341,1,44,59,1,64,4,3,59,102,108,8352,8354,8358,1,8705,110,59,1,8728,101,4,2,109,120,8365,8371,101,110,116,59,1,8705,101,115,59,1,8450,4,2,103,105,8382,8395,4,2,59,100,8388,8390,1,8773,111,116,59,1,10861,110,116,59,1,8750,4,3,102,114,121,8408,8412,8417,59,3,55349,56660,111,100,59,1,8720,5,169,2,59,115,8424,8426,1,169,114,59,1,8471,4,2,97,111,8436,8441,114,114,59,1,8629,115,115,59,1,10007,4,2,99,117,8452,8457,114,59,3,55349,56504,4,2,98,112,8463,8474,4,2,59,101,8469,8471,1,10959,59,1,10961,4,2,59,101,8480,8482,1,10960,59,1,10962,100,111,116,59,1,8943,4,7,100,101,108,112,114,118,119,8507,8522,8536,8550,8600,8697,8702,97,114,114,4,2,108,114,8516,8519,59,1,10552,59,1,10549,4,2,112,115,8528,8532,114,59,1,8926,99,59,1,8927,97,114,114,4,2,59,112,8545,8547,1,8630,59,1,10557,4,6,59,98,99,100,111,115,8564,8566,8573,8587,8592,8596,1,8746,114,99,97,112,59,1,10824,4,2,97,117,8579,8583,112,59,1,10822,112,59,1,10826,111,116,59,1,8845,114,59,1,10821,59,3,8746,65024,4,4,97,108,114,118,8610,8623,8663,8672,114,114,4,2,59,109,8618,8620,1,8631,59,1,10556,121,4,3,101,118,119,8632,8651,8656,113,4,2,112,115,8639,8645,114,101,99,59,1,8926,117,99,99,59,1,8927,101,101,59,1,8910,101,100,103,101,59,1,8911,101,110,5,164,1,59,8670,1,164,101,97,114,114,111,119,4,2,108,114,8684,8690,101,102,116,59,1,8630,105,103,104,116,59,1,8631,101,101,59,1,8910,101,100,59,1,8911,4,2,99,105,8713,8721,111,110,105,110,116,59,1,8754,110,116,59,1,8753,108,99,116,121,59,1,9005,4,19,65,72,97,98,99,100,101,102,104,105,106,108,111,114,115,116,117,119,122,8773,8778,8783,8821,8839,8854,8887,8914,8930,8944,9036,9041,9058,9197,9227,9258,9281,9297,9305,114,114,59,1,8659,97,114,59,1,10597,4,4,103,108,114,115,8793,8799,8805,8809,103,101,114,59,1,8224,101,116,104,59,1,8504,114,59,1,8595,104,4,2,59,118,8816,8818,1,8208,59,1,8867,4,2,107,108,8827,8834,97,114,111,119,59,1,10511,97,99,59,1,733,4,2,97,121,8845,8851,114,111,110,59,1,271,59,1,1076,4,3,59,97,111,8862,8864,8880,1,8518,4,2,103,114,8870,8876,103,101,114,59,1,8225,114,59,1,8650,116,115,101,113,59,1,10871,4,3,103,108,109,8895,8902,8907,5,176,1,59,8900,1,176,116,97,59,1,948,112,116,121,118,59,1,10673,4,2,105,114,8920,8926,115,104,116,59,1,10623,59,3,55349,56609,97,114,4,2,108,114,8938,8941,59,1,8643,59,1,8642,4,5,97,101,103,115,118,8956,8986,8989,8996,9001,109,4,3,59,111,115,8965,8967,8983,1,8900,110,100,4,2,59,115,8975,8977,1,8900,117,105,116,59,1,9830,59,1,9830,59,1,168,97,109,109,97,59,1,989,105,110,59,1,8946,4,3,59,105,111,9009,9011,9031,1,247,100,101,5,247,2,59,111,9020,9022,1,247,110,116,105,109,101,115,59,1,8903,110,120,59,1,8903,99,121,59,1,1106,99,4,2,111,114,9048,9053,114,110,59,1,8990,111,112,59,1,8973,4,5,108,112,116,117,119,9070,9076,9081,9130,9144,108,97,114,59,1,36,102,59,3,55349,56661,4,5,59,101,109,112,115,9093,9095,9109,9116,9122,1,729,113,4,2,59,100,9102,9104,1,8784,111,116,59,1,8785,105,110,117,115,59,1,8760,108,117,115,59,1,8724,113,117,97,114,101,59,1,8865,98,108,101,98,97,114,119,101,100,103,101,59,1,8966,110,4,3,97,100,104,9153,9160,9172,114,114,111,119,59,1,8595,111,119,110,97,114,114,111,119,115,59,1,8650,97,114,112,111,111,110,4,2,108,114,9184,9190,101,102,116,59,1,8643,105,103,104,116,59,1,8642,4,2,98,99,9203,9211,107,97,114,111,119,59,1,10512,4,2,111,114,9217,9222,114,110,59,1,8991,111,112,59,1,8972,4,3,99,111,116,9235,9248,9252,4,2,114,121,9241,9245,59,3,55349,56505,59,1,1109,108,59,1,10742,114,111,107,59,1,273,4,2,100,114,9264,9269,111,116,59,1,8945,105,4,2,59,102,9276,9278,1,9663,59,1,9662,4,2,97,104,9287,9292,114,114,59,1,8693,97,114,59,1,10607,97,110,103,108,101,59,1,10662,4,2,99,105,9311,9315,121,59,1,1119,103,114,97,114,114,59,1,10239,4,18,68,97,99,100,101,102,103,108,109,110,111,112,113,114,115,116,117,120,9361,9376,9398,9439,9444,9447,9462,9495,9531,9585,9598,9614,9659,9755,9771,9792,9808,9826,4,2,68,111,9367,9372,111,116,59,1,10871,116,59,1,8785,4,2,99,115,9382,9392,117,116,101,5,233,1,59,9390,1,233,116,101,114,59,1,10862,4,4,97,105,111,121,9408,9414,9430,9436,114,111,110,59,1,283,114,4,2,59,99,9421,9423,1,8790,5,234,1,59,9428,1,234,108,111,110,59,1,8789,59,1,1101,111,116,59,1,279,59,1,8519,4,2,68,114,9453,9458,111,116,59,1,8786,59,3,55349,56610,4,3,59,114,115,9470,9472,9482,1,10906,97,118,101,5,232,1,59,9480,1,232,4,2,59,100,9488,9490,1,10902,111,116,59,1,10904,4,4,59,105,108,115,9505,9507,9515,9518,1,10905,110,116,101,114,115,59,1,9191,59,1,8467,4,2,59,100,9524,9526,1,10901,111,116,59,1,10903,4,3,97,112,115,9539,9544,9564,99,114,59,1,275,116,121,4,3,59,115,118,9554,9556,9561,1,8709,101,116,59,1,8709,59,1,8709,112,4,2,49,59,9571,9583,4,2,51,52,9577,9580,59,1,8196,59,1,8197,1,8195,4,2,103,115,9591,9594,59,1,331,112,59,1,8194,4,2,103,112,9604,9609,111,110,59,1,281,102,59,3,55349,56662,4,3,97,108,115,9622,9635,9640,114,4,2,59,115,9629,9631,1,8917,108,59,1,10723,117,115,59,1,10865,105,4,3,59,108,118,9649,9651,9656,1,949,111,110,59,1,949,59,1,1013,4,4,99,115,117,118,9669,9686,9716,9747,4,2,105,111,9675,9680,114,99,59,1,8790,108,111,110,59,1,8789,4,2,105,108,9692,9696,109,59,1,8770,97,110,116,4,2,103,108,9705,9710,116,114,59,1,10902,101,115,115,59,1,10901,4,3,97,101,105,9724,9729,9734,108,115,59,1,61,115,116,59,1,8799,118,4,2,59,68,9741,9743,1,8801,68,59,1,10872,112,97,114,115,108,59,1,10725,4,2,68,97,9761,9766,111,116,59,1,8787,114,114,59,1,10609,4,3,99,100,105,9779,9783,9788,114,59,1,8495,111,116,59,1,8784,109,59,1,8770,4,2,97,104,9798,9801,59,1,951,5,240,1,59,9806,1,240,4,2,109,114,9814,9822,108,5,235,1,59,9820,1,235,111,59,1,8364,4,3,99,105,112,9834,9838,9843,108,59,1,33,115,116,59,1,8707,4,2,101,111,9849,9859,99,116,97,116,105,111,110,59,1,8496,110,101,110,116,105,97,108,101,59,1,8519,4,12,97,99,101,102,105,106,108,110,111,112,114,115,9896,9910,9914,9921,9954,9960,9967,9989,9994,10027,10036,10164,108,108,105,110,103,100,111,116,115,101,113,59,1,8786,121,59,1,1092,109,97,108,101,59,1,9792,4,3,105,108,114,9929,9935,9950,108,105,103,59,1,64259,4,2,105,108,9941,9945,103,59,1,64256,105,103,59,1,64260,59,3,55349,56611,108,105,103,59,1,64257,108,105,103,59,3,102,106,4,3,97,108,116,9975,9979,9984,116,59,1,9837,105,103,59,1,64258,110,115,59,1,9649,111,102,59,1,402,4,2,112,114,10000,10005,102,59,3,55349,56663,4,2,97,107,10011,10016,108,108,59,1,8704,4,2,59,118,10022,10024,1,8916,59,1,10969,97,114,116,105,110,116,59,1,10765,4,2,97,111,10042,10159,4,2,99,115,10048,10155,4,6,49,50,51,52,53,55,10062,10102,10114,10135,10139,10151,4,6,50,51,52,53,54,56,10076,10083,10086,10093,10096,10099,5,189,1,59,10081,1,189,59,1,8531,5,188,1,59,10091,1,188,59,1,8533,59,1,8537,59,1,8539,4,2,51,53,10108,10111,59,1,8532,59,1,8534,4,3,52,53,56,10122,10129,10132,5,190,1,59,10127,1,190,59,1,8535,59,1,8540,53,59,1,8536,4,2,54,56,10145,10148,59,1,8538,59,1,8541,56,59,1,8542,108,59,1,8260,119,110,59,1,8994,99,114,59,3,55349,56507,4,17,69,97,98,99,100,101,102,103,105,106,108,110,111,114,115,116,118,10206,10217,10247,10254,10268,10273,10358,10363,10374,10380,10385,10406,10458,10464,10470,10497,10610,4,2,59,108,10212,10214,1,8807,59,1,10892,4,3,99,109,112,10225,10231,10244,117,116,101,59,1,501,109,97,4,2,59,100,10239,10241,1,947,59,1,989,59,1,10886,114,101,118,101,59,1,287,4,2,105,121,10260,10265,114,99,59,1,285,59,1,1075,111,116,59,1,289,4,4,59,108,113,115,10283,10285,10288,10308,1,8805,59,1,8923,4,3,59,113,115,10296,10298,10301,1,8805,59,1,8807,108,97,110,116,59,1,10878,4,4,59,99,100,108,10318,10320,10324,10345,1,10878,99,59,1,10921,111,116,4,2,59,111,10332,10334,1,10880,4,2,59,108,10340,10342,1,10882,59,1,10884,4,2,59,101,10351,10354,3,8923,65024,115,59,1,10900,114,59,3,55349,56612,4,2,59,103,10369,10371,1,8811,59,1,8921,109,101,108,59,1,8503,99,121,59,1,1107,4,4,59,69,97,106,10395,10397,10400,10403,1,8823,59,1,10898,59,1,10917,59,1,10916,4,4,69,97,101,115,10416,10419,10434,10453,59,1,8809,112,4,2,59,112,10426,10428,1,10890,114,111,120,59,1,10890,4,2,59,113,10440,10442,1,10888,4,2,59,113,10448,10450,1,10888,59,1,8809,105,109,59,1,8935,112,102,59,3,55349,56664,97,118,101,59,1,96,4,2,99,105,10476,10480,114,59,1,8458,109,4,3,59,101,108,10489,10491,10494,1,8819,59,1,10894,59,1,10896,5,62,6,59,99,100,108,113,114,10512,10514,10527,10532,10538,10545,1,62,4,2,99,105,10520,10523,59,1,10919,114,59,1,10874,111,116,59,1,8919,80,97,114,59,1,10645,117,101,115,116,59,1,10876,4,5,97,100,101,108,115,10557,10574,10579,10599,10605,4,2,112,114,10563,10570,112,114,111,120,59,1,10886,114,59,1,10616,111,116,59,1,8919,113,4,2,108,113,10586,10592,101,115,115,59,1,8923,108,101,115,115,59,1,10892,101,115,115,59,1,8823,105,109,59,1,8819,4,2,101,110,10616,10626,114,116,110,101,113,113,59,3,8809,65024,69,59,3,8809,65024,4,10,65,97,98,99,101,102,107,111,115,121,10653,10658,10713,10718,10724,10760,10765,10786,10850,10875,114,114,59,1,8660,4,4,105,108,109,114,10668,10674,10678,10684,114,115,112,59,1,8202,102,59,1,189,105,108,116,59,1,8459,4,2,100,114,10690,10695,99,121,59,1,1098,4,3,59,99,119,10703,10705,10710,1,8596,105,114,59,1,10568,59,1,8621,97,114,59,1,8463,105,114,99,59,1,293,4,3,97,108,114,10732,10748,10754,114,116,115,4,2,59,117,10741,10743,1,9829,105,116,59,1,9829,108,105,112,59,1,8230,99,111,110,59,1,8889,114,59,3,55349,56613,115,4,2,101,119,10772,10779,97,114,111,119,59,1,10533,97,114,111,119,59,1,10534,4,5,97,109,111,112,114,10798,10803,10809,10839,10844,114,114,59,1,8703,116,104,116,59,1,8763,107,4,2,108,114,10816,10827,101,102,116,97,114,114,111,119,59,1,8617,105,103,104,116,97,114,114,111,119,59,1,8618,102,59,3,55349,56665,98,97,114,59,1,8213,4,3,99,108,116,10858,10863,10869,114,59,3,55349,56509,97,115,104,59,1,8463,114,111,107,59,1,295,4,2,98,112,10881,10887,117,108,108,59,1,8259,104,101,110,59,1,8208,4,15,97,99,101,102,103,105,106,109,110,111,112,113,115,116,117,10925,10936,10958,10977,10990,11001,11039,11045,11101,11192,11220,11226,11237,11285,11299,99,117,116,101,5,237,1,59,10934,1,237,4,3,59,105,121,10944,10946,10955,1,8291,114,99,5,238,1,59,10953,1,238,59,1,1080,4,2,99,120,10964,10968,121,59,1,1077,99,108,5,161,1,59,10975,1,161,4,2,102,114,10983,10986,59,1,8660,59,3,55349,56614,114,97,118,101,5,236,1,59,10999,1,236,4,4,59,105,110,111,11011,11013,11028,11034,1,8520,4,2,105,110,11019,11024,110,116,59,1,10764,116,59,1,8749,102,105,110,59,1,10716,116,97,59,1,8489,108,105,103,59,1,307,4,3,97,111,112,11053,11092,11096,4,3,99,103,116,11061,11065,11088,114,59,1,299,4,3,101,108,112,11073,11076,11082,59,1,8465,105,110,101,59,1,8464,97,114,116,59,1,8465,104,59,1,305,102,59,1,8887,101,100,59,1,437,4,5,59,99,102,111,116,11113,11115,11121,11136,11142,1,8712,97,114,101,59,1,8453,105,110,4,2,59,116,11129,11131,1,8734,105,101,59,1,10717,100,111,116,59,1,305,4,5,59,99,101,108,112,11154,11156,11161,11179,11186,1,8747,97,108,59,1,8890,4,2,103,114,11167,11173,101,114,115,59,1,8484,99,97,108,59,1,8890,97,114,104,107,59,1,10775,114,111,100,59,1,10812,4,4,99,103,112,116,11202,11206,11211,11216,121,59,1,1105,111,110,59,1,303,102,59,3,55349,56666,97,59,1,953,114,111,100,59,1,10812,117,101,115,116,5,191,1,59,11235,1,191,4,2,99,105,11243,11248,114,59,3,55349,56510,110,4,5,59,69,100,115,118,11261,11263,11266,11271,11282,1,8712,59,1,8953,111,116,59,1,8949,4,2,59,118,11277,11279,1,8948,59,1,8947,59,1,8712,4,2,59,105,11291,11293,1,8290,108,100,101,59,1,297,4,2,107,109,11305,11310,99,121,59,1,1110,108,5,239,1,59,11316,1,239,4,6,99,102,109,111,115,117,11332,11346,11351,11357,11363,11380,4,2,105,121,11338,11343,114,99,59,1,309,59,1,1081,114,59,3,55349,56615,97,116,104,59,1,567,112,102,59,3,55349,56667,4,2,99,101,11369,11374,114,59,3,55349,56511,114,99,121,59,1,1112,107,99,121,59,1,1108,4,8,97,99,102,103,104,106,111,115,11404,11418,11433,11438,11445,11450,11455,11461,112,112,97,4,2,59,118,11413,11415,1,954,59,1,1008,4,2,101,121,11424,11430,100,105,108,59,1,311,59,1,1082,114,59,3,55349,56616,114,101,101,110,59,1,312,99,121,59,1,1093,99,121,59,1,1116,112,102,59,3,55349,56668,99,114,59,3,55349,56512,4,23,65,66,69,72,97,98,99,100,101,102,103,104,106,108,109,110,111,112,114,115,116,117,118,11515,11538,11544,11555,11560,11721,11780,11818,11868,12136,12160,12171,12203,12208,12246,12275,12327,12509,12523,12569,12641,12732,12752,4,3,97,114,116,11523,11528,11532,114,114,59,1,8666,114,59,1,8656,97,105,108,59,1,10523,97,114,114,59,1,10510,4,2,59,103,11550,11552,1,8806,59,1,10891,97,114,59,1,10594,4,9,99,101,103,109,110,112,113,114,116,11580,11586,11594,11600,11606,11624,11627,11636,11694,117,116,101,59,1,314,109,112,116,121,118,59,1,10676,114,97,110,59,1,8466,98,100,97,59,1,955,103,4,3,59,100,108,11615,11617,11620,1,10216,59,1,10641,101,59,1,10216,59,1,10885,117,111,5,171,1,59,11634,1,171,114,4,8,59,98,102,104,108,112,115,116,11655,11657,11669,11673,11677,11681,11685,11690,1,8592,4,2,59,102,11663,11665,1,8676,115,59,1,10527,115,59,1,10525,107,59,1,8617,112,59,1,8619,108,59,1,10553,105,109,59,1,10611,108,59,1,8610,4,3,59,97,101,11702,11704,11709,1,10923,105,108,59,1,10521,4,2,59,115,11715,11717,1,10925,59,3,10925,65024,4,3,97,98,114,11729,11734,11739,114,114,59,1,10508,114,107,59,1,10098,4,2,97,107,11745,11758,99,4,2,101,107,11752,11755,59,1,123,59,1,91,4,2,101,115,11764,11767,59,1,10635,108,4,2,100,117,11774,11777,59,1,10639,59,1,10637,4,4,97,101,117,121,11790,11796,11811,11815,114,111,110,59,1,318,4,2,100,105,11802,11807,105,108,59,1,316,108,59,1,8968,98,59,1,123,59,1,1083,4,4,99,113,114,115,11828,11832,11845,11864,97,59,1,10550,117,111,4,2,59,114,11840,11842,1,8220,59,1,8222,4,2,100,117,11851,11857,104,97,114,59,1,10599,115,104,97,114,59,1,10571,104,59,1,8626,4,5,59,102,103,113,115,11880,11882,12008,12011,12031,1,8804,116,4,5,97,104,108,114,116,11895,11913,11935,11947,11996,114,114,111,119,4,2,59,116,11905,11907,1,8592,97,105,108,59,1,8610,97,114,112,111,111,110,4,2,100,117,11925,11931,111,119,110,59,1,8637,112,59,1,8636,101,102,116,97,114,114,111,119,115,59,1,8647,105,103,104,116,4,3,97,104,115,11959,11974,11984,114,114,111,119,4,2,59,115,11969,11971,1,8596,59,1,8646,97,114,112,111,111,110,115,59,1,8651,113,117,105,103,97,114,114,111,119,59,1,8621,104,114,101,101,116,105,109,101,115,59,1,8907,59,1,8922,4,3,59,113,115,12019,12021,12024,1,8804,59,1,8806,108,97,110,116,59,1,10877,4,5,59,99,100,103,115,12043,12045,12049,12070,12083,1,10877,99,59,1,10920,111,116,4,2,59,111,12057,12059,1,10879,4,2,59,114,12065,12067,1,10881,59,1,10883,4,2,59,101,12076,12079,3,8922,65024,115,59,1,10899,4,5,97,100,101,103,115,12095,12103,12108,12126,12131,112,112,114,111,120,59,1,10885,111,116,59,1,8918,113,4,2,103,113,12115,12120,116,114,59,1,8922,103,116,114,59,1,10891,116,114,59,1,8822,105,109,59,1,8818,4,3,105,108,114,12144,12150,12156,115,104,116,59,1,10620,111,111,114,59,1,8970,59,3,55349,56617,4,2,59,69,12166,12168,1,8822,59,1,10897,4,2,97,98,12177,12198,114,4,2,100,117,12184,12187,59,1,8637,4,2,59,108,12193,12195,1,8636,59,1,10602,108,107,59,1,9604,99,121,59,1,1113,4,5,59,97,99,104,116,12220,12222,12227,12235,12241,1,8810,114,114,59,1,8647,111,114,110,101,114,59,1,8990,97,114,100,59,1,10603,114,105,59,1,9722,4,2,105,111,12252,12258,100,111,116,59,1,320,117,115,116,4,2,59,97,12267,12269,1,9136,99,104,101,59,1,9136,4,4,69,97,101,115,12285,12288,12303,12322,59,1,8808,112,4,2,59,112,12295,12297,1,10889,114,111,120,59,1,10889,4,2,59,113,12309,12311,1,10887,4,2,59,113,12317,12319,1,10887,59,1,8808,105,109,59,1,8934,4,8,97,98,110,111,112,116,119,122,12345,12359,12364,12421,12446,12467,12474,12490,4,2,110,114,12351,12355,103,59,1,10220,114,59,1,8701,114,107,59,1,10214,103,4,3,108,109,114,12373,12401,12409,101,102,116,4,2,97,114,12382,12389,114,114,111,119,59,1,10229,105,103,104,116,97,114,114,111,119,59,1,10231,97,112,115,116,111,59,1,10236,105,103,104,116,97,114,114,111,119,59,1,10230,112,97,114,114,111,119,4,2,108,114,12433,12439,101,102,116,59,1,8619,105,103,104,116,59,1,8620,4,3,97,102,108,12454,12458,12462,114,59,1,10629,59,3,55349,56669,117,115,59,1,10797,105,109,101,115,59,1,10804,4,2,97,98,12480,12485,115,116,59,1,8727,97,114,59,1,95,4,3,59,101,102,12498,12500,12506,1,9674,110,103,101,59,1,9674,59,1,10731,97,114,4,2,59,108,12517,12519,1,40,116,59,1,10643,4,5,97,99,104,109,116,12535,12540,12548,12561,12564,114,114,59,1,8646,111,114,110,101,114,59,1,8991,97,114,4,2,59,100,12556,12558,1,8651,59,1,10605,59,1,8206,114,105,59,1,8895,4,6,97,99,104,105,113,116,12583,12589,12594,12597,12614,12635,113,117,111,59,1,8249,114,59,3,55349,56513,59,1,8624,109,4,3,59,101,103,12606,12608,12611,1,8818,59,1,10893,59,1,10895,4,2,98,117,12620,12623,59,1,91,111,4,2,59,114,12630,12632,1,8216,59,1,8218,114,111,107,59,1,322,5,60,8,59,99,100,104,105,108,113,114,12660,12662,12675,12680,12686,12692,12698,12705,1,60,4,2,99,105,12668,12671,59,1,10918,114,59,1,10873,111,116,59,1,8918,114,101,101,59,1,8907,109,101,115,59,1,8905,97,114,114,59,1,10614,117,101,115,116,59,1,10875,4,2,80,105,12711,12716,97,114,59,1,10646,4,3,59,101,102,12724,12726,12729,1,9667,59,1,8884,59,1,9666,114,4,2,100,117,12739,12746,115,104,97,114,59,1,10570,104,97,114,59,1,10598,4,2,101,110,12758,12768,114,116,110,101,113,113,59,3,8808,65024,69,59,3,8808,65024,4,14,68,97,99,100,101,102,104,105,108,110,111,112,115,117,12803,12809,12893,12908,12914,12928,12933,12937,13011,13025,13032,13049,13052,13069,68,111,116,59,1,8762,4,4,99,108,112,114,12819,12827,12849,12887,114,5,175,1,59,12825,1,175,4,2,101,116,12833,12836,59,1,9794,4,2,59,101,12842,12844,1,10016,115,101,59,1,10016,4,2,59,115,12855,12857,1,8614,116,111,4,4,59,100,108,117,12869,12871,12877,12883,1,8614,111,119,110,59,1,8615,101,102,116,59,1,8612,112,59,1,8613,107,101,114,59,1,9646,4,2,111,121,12899,12905,109,109,97,59,1,10793,59,1,1084,97,115,104,59,1,8212,97,115,117,114,101,100,97,110,103,108,101,59,1,8737,114,59,3,55349,56618,111,59,1,8487,4,3,99,100,110,12945,12954,12985,114,111,5,181,1,59,12952,1,181,4,4,59,97,99,100,12964,12966,12971,12976,1,8739,115,116,59,1,42,105,114,59,1,10992,111,116,5,183,1,59,12983,1,183,117,115,4,3,59,98,100,12995,12997,13000,1,8722,59,1,8863,4,2,59,117,13006,13008,1,8760,59,1,10794,4,2,99,100,13017,13021,112,59,1,10971,114,59,1,8230,112,108,117,115,59,1,8723,4,2,100,112,13038,13044,101,108,115,59,1,8871,102,59,3,55349,56670,59,1,8723,4,2,99,116,13058,13063,114,59,3,55349,56514,112,111,115,59,1,8766,4,3,59,108,109,13077,13079,13087,1,956,116,105,109,97,112,59,1,8888,97,112,59,1,8888,4,24,71,76,82,86,97,98,99,100,101,102,103,104,105,106,108,109,111,112,114,115,116,117,118,119,13142,13165,13217,13229,13247,13330,13359,13414,13420,13508,13513,13579,13602,13626,13631,13762,13767,13855,13936,13995,14214,14285,14312,14432,4,2,103,116,13148,13152,59,3,8921,824,4,2,59,118,13158,13161,3,8811,8402,59,3,8811,824,4,3,101,108,116,13173,13200,13204,102,116,4,2,97,114,13181,13188,114,114,111,119,59,1,8653,105,103,104,116,97,114,114,111,119,59,1,8654,59,3,8920,824,4,2,59,118,13210,13213,3,8810,8402,59,3,8810,824,105,103,104,116,97,114,114,111,119,59,1,8655,4,2,68,100,13235,13241,97,115,104,59,1,8879,97,115,104,59,1,8878,4,5,98,99,110,112,116,13259,13264,13270,13275,13308,108,97,59,1,8711,117,116,101,59,1,324,103,59,3,8736,8402,4,5,59,69,105,111,112,13287,13289,13293,13298,13302,1,8777,59,3,10864,824,100,59,3,8779,824,115,59,1,329,114,111,120,59,1,8777,117,114,4,2,59,97,13316,13318,1,9838,108,4,2,59,115,13325,13327,1,9838,59,1,8469,4,2,115,117,13336,13344,112,5,160,1,59,13342,1,160,109,112,4,2,59,101,13352,13355,3,8782,824,59,3,8783,824,4,5,97,101,111,117,121,13371,13385,13391,13407,13411,4,2,112,114,13377,13380,59,1,10819,111,110,59,1,328,100,105,108,59,1,326,110,103,4,2,59,100,13399,13401,1,8775,111,116,59,3,10861,824,112,59,1,10818,59,1,1085,97,115,104,59,1,8211,4,7,59,65,97,100,113,115,120,13436,13438,13443,13466,13472,13478,13494,1,8800,114,114,59,1,8663,114,4,2,104,114,13450,13454,107,59,1,10532,4,2,59,111,13460,13462,1,8599,119,59,1,8599,111,116,59,3,8784,824,117,105,118,59,1,8802,4,2,101,105,13484,13489,97,114,59,1,10536,109,59,3,8770,824,105,115,116,4,2,59,115,13503,13505,1,8708,59,1,8708,114,59,3,55349,56619,4,4,69,101,115,116,13523,13527,13563,13568,59,3,8807,824,4,3,59,113,115,13535,13537,13559,1,8817,4,3,59,113,115,13545,13547,13551,1,8817,59,3,8807,824,108,97,110,116,59,3,10878,824,59,3,10878,824,105,109,59,1,8821,4,2,59,114,13574,13576,1,8815,59,1,8815,4,3,65,97,112,13587,13592,13597,114,114,59,1,8654,114,114,59,1,8622,97,114,59,1,10994,4,3,59,115,118,13610,13612,13623,1,8715,4,2,59,100,13618,13620,1,8956,59,1,8954,59,1,8715,99,121,59,1,1114,4,7,65,69,97,100,101,115,116,13647,13652,13656,13661,13665,13737,13742,114,114,59,1,8653,59,3,8806,824,114,114,59,1,8602,114,59,1,8229,4,4,59,102,113,115,13675,13677,13703,13725,1,8816,116,4,2,97,114,13684,13691,114,114,111,119,59,1,8602,105,103,104,116,97,114,114,111,119,59,1,8622,4,3,59,113,115,13711,13713,13717,1,8816,59,3,8806,824,108,97,110,116,59,3,10877,824,4,2,59,115,13731,13734,3,10877,824,59,1,8814,105,109,59,1,8820,4,2,59,114,13748,13750,1,8814,105,4,2,59,101,13757,13759,1,8938,59,1,8940,105,100,59,1,8740,4,2,112,116,13773,13778,102,59,3,55349,56671,5,172,3,59,105,110,13787,13789,13829,1,172,110,4,4,59,69,100,118,13800,13802,13806,13812,1,8713,59,3,8953,824,111,116,59,3,8949,824,4,3,97,98,99,13820,13823,13826,59,1,8713,59,1,8951,59,1,8950,105,4,2,59,118,13836,13838,1,8716,4,3,97,98,99,13846,13849,13852,59,1,8716,59,1,8958,59,1,8957,4,3,97,111,114,13863,13892,13899,114,4,4,59,97,115,116,13874,13876,13883,13888,1,8742,108,108,101,108,59,1,8742,108,59,3,11005,8421,59,3,8706,824,108,105,110,116,59,1,10772,4,3,59,99,101,13907,13909,13914,1,8832,117,101,59,1,8928,4,2,59,99,13920,13923,3,10927,824,4,2,59,101,13929,13931,1,8832,113,59,3,10927,824,4,4,65,97,105,116,13946,13951,13971,13982,114,114,59,1,8655,114,114,4,3,59,99,119,13961,13963,13967,1,8603,59,3,10547,824,59,3,8605,824,103,104,116,97,114,114,111,119,59,1,8603,114,105,4,2,59,101,13990,13992,1,8939,59,1,8941,4,7,99,104,105,109,112,113,117,14011,14036,14060,14080,14085,14090,14106,4,4,59,99,101,114,14021,14023,14028,14032,1,8833,117,101,59,1,8929,59,3,10928,824,59,3,55349,56515,111,114,116,4,2,109,112,14045,14050,105,100,59,1,8740,97,114,97,108,108,101,108,59,1,8742,109,4,2,59,101,14067,14069,1,8769,4,2,59,113,14075,14077,1,8772,59,1,8772,105,100,59,1,8740,97,114,59,1,8742,115,117,4,2,98,112,14098,14102,101,59,1,8930,101,59,1,8931,4,3,98,99,112,14114,14157,14171,4,4,59,69,101,115,14124,14126,14130,14133,1,8836,59,3,10949,824,59,1,8840,101,116,4,2,59,101,14141,14144,3,8834,8402,113,4,2,59,113,14151,14153,1,8840,59,3,10949,824,99,4,2,59,101,14164,14166,1,8833,113,59,3,10928,824,4,4,59,69,101,115,14181,14183,14187,14190,1,8837,59,3,10950,824,59,1,8841,101,116,4,2,59,101,14198,14201,3,8835,8402,113,4,2,59,113,14208,14210,1,8841,59,3,10950,824,4,4,103,105,108,114,14224,14228,14238,14242,108,59,1,8825,108,100,101,5,241,1,59,14236,1,241,103,59,1,8824,105,97,110,103,108,101,4,2,108,114,14254,14269,101,102,116,4,2,59,101,14263,14265,1,8938,113,59,1,8940,105,103,104,116,4,2,59,101,14279,14281,1,8939,113,59,1,8941,4,2,59,109,14291,14293,1,957,4,3,59,101,115,14301,14303,14308,1,35,114,111,59,1,8470,112,59,1,8199,4,9,68,72,97,100,103,105,108,114,115,14332,14338,14344,14349,14355,14369,14376,14408,14426,97,115,104,59,1,8877,97,114,114,59,1,10500,112,59,3,8781,8402,97,115,104,59,1,8876,4,2,101,116,14361,14365,59,3,8805,8402,59,3,62,8402,110,102,105,110,59,1,10718,4,3,65,101,116,14384,14389,14393,114,114,59,1,10498,59,3,8804,8402,4,2,59,114,14399,14402,3,60,8402,105,101,59,3,8884,8402,4,2,65,116,14414,14419,114,114,59,1,10499,114,105,101,59,3,8885,8402,105,109,59,3,8764,8402,4,3,65,97,110,14440,14445,14468,114,114,59,1,8662,114,4,2,104,114,14452,14456,107,59,1,10531,4,2,59,111,14462,14464,1,8598,119,59,1,8598,101,97,114,59,1,10535,4,18,83,97,99,100,101,102,103,104,105,108,109,111,112,114,115,116,117,118,14512,14515,14535,14560,14597,14603,14618,14643,14657,14662,14701,14741,14747,14769,14851,14877,14907,14916,59,1,9416,4,2,99,115,14521,14531,117,116,101,5,243,1,59,14529,1,243,116,59,1,8859,4,2,105,121,14541,14557,114,4,2,59,99,14548,14550,1,8858,5,244,1,59,14555,1,244,59,1,1086,4,5,97,98,105,111,115,14572,14577,14583,14587,14591,115,104,59,1,8861,108,97,99,59,1,337,118,59,1,10808,116,59,1,8857,111,108,100,59,1,10684,108,105,103,59,1,339,4,2,99,114,14609,14614,105,114,59,1,10687,59,3,55349,56620,4,3,111,114,116,14626,14630,14640,110,59,1,731,97,118,101,5,242,1,59,14638,1,242,59,1,10689,4,2,98,109,14649,14654,97,114,59,1,10677,59,1,937,110,116,59,1,8750,4,4,97,99,105,116,14672,14677,14693,14698,114,114,59,1,8634,4,2,105,114,14683,14687,114,59,1,10686,111,115,115,59,1,10683,110,101,59,1,8254,59,1,10688,4,3,97,101,105,14709,14714,14719,99,114,59,1,333,103,97,59,1,969,4,3,99,100,110,14727,14733,14736,114,111,110,59,1,959,59,1,10678,117,115,59,1,8854,112,102,59,3,55349,56672,4,3,97,101,108,14755,14759,14764,114,59,1,10679,114,112,59,1,10681,117,115,59,1,8853,4,7,59,97,100,105,111,115,118,14785,14787,14792,14831,14837,14841,14848,1,8744,114,114,59,1,8635,4,4,59,101,102,109,14802,14804,14817,14824,1,10845,114,4,2,59,111,14811,14813,1,8500,102,59,1,8500,5,170,1,59,14822,1,170,5,186,1,59,14829,1,186,103,111,102,59,1,8886,114,59,1,10838,108,111,112,101,59,1,10839,59,1,10843,4,3,99,108,111,14859,14863,14873,114,59,1,8500,97,115,104,5,248,1,59,14871,1,248,108,59,1,8856,105,4,2,108,109,14884,14893,100,101,5,245,1,59,14891,1,245,101,115,4,2,59,97,14901,14903,1,8855,115,59,1,10806,109,108,5,246,1,59,14914,1,246,98,97,114,59,1,9021,4,12,97,99,101,102,104,105,108,109,111,114,115,117,14948,14992,14996,15033,15038,15068,15090,15189,15192,15222,15427,15441,114,4,4,59,97,115,116,14959,14961,14976,14989,1,8741,5,182,2,59,108,14968,14970,1,182,108,101,108,59,1,8741,4,2,105,108,14982,14986,109,59,1,10995,59,1,11005,59,1,8706,121,59,1,1087,114,4,5,99,105,109,112,116,15009,15014,15019,15024,15027,110,116,59,1,37,111,100,59,1,46,105,108,59,1,8240,59,1,8869,101,110,107,59,1,8241,114,59,3,55349,56621,4,3,105,109,111,15046,15057,15063,4,2,59,118,15052,15054,1,966,59,1,981,109,97,116,59,1,8499,110,101,59,1,9742,4,3,59,116,118,15076,15078,15087,1,960,99,104,102,111,114,107,59,1,8916,59,1,982,4,2,97,117,15096,15119,110,4,2,99,107,15103,15115,107,4,2,59,104,15110,15112,1,8463,59,1,8462,118,59,1,8463,115,4,9,59,97,98,99,100,101,109,115,116,15140,15142,15148,15151,15156,15168,15171,15179,15184,1,43,99,105,114,59,1,10787,59,1,8862,105,114,59,1,10786,4,2,111,117,15162,15165,59,1,8724,59,1,10789,59,1,10866,110,5,177,1,59,15177,1,177,105,109,59,1,10790,119,111,59,1,10791,59,1,177,4,3,105,112,117,15200,15208,15213,110,116,105,110,116,59,1,10773,102,59,3,55349,56673,110,100,5,163,1,59,15220,1,163,4,10,59,69,97,99,101,105,110,111,115,117,15244,15246,15249,15253,15258,15334,15347,15367,15416,15421,1,8826,59,1,10931,112,59,1,10935,117,101,59,1,8828,4,2,59,99,15264,15266,1,10927,4,6,59,97,99,101,110,115,15280,15282,15290,15299,15303,15329,1,8826,112,112,114,111,120,59,1,10935,117,114,108,121,101,113,59,1,8828,113,59,1,10927,4,3,97,101,115,15311,15319,15324,112,112,114,111,120,59,1,10937,113,113,59,1,10933,105,109,59,1,8936,105,109,59,1,8830,109,101,4,2,59,115,15342,15344,1,8242,59,1,8473,4,3,69,97,115,15355,15358,15362,59,1,10933,112,59,1,10937,105,109,59,1,8936,4,3,100,102,112,15375,15378,15404,59,1,8719,4,3,97,108,115,15386,15392,15398,108,97,114,59,1,9006,105,110,101,59,1,8978,117,114,102,59,1,8979,4,2,59,116,15410,15412,1,8733,111,59,1,8733,105,109,59,1,8830,114,101,108,59,1,8880,4,2,99,105,15433,15438,114,59,3,55349,56517,59,1,968,110,99,115,112,59,1,8200,4,6,102,105,111,112,115,117,15462,15467,15472,15478,15485,15491,114,59,3,55349,56622,110,116,59,1,10764,112,102,59,3,55349,56674,114,105,109,101,59,1,8279,99,114,59,3,55349,56518,4,3,97,101,111,15499,15520,15534,116,4,2,101,105,15506,15515,114,110,105,111,110,115,59,1,8461,110,116,59,1,10774,115,116,4,2,59,101,15528,15530,1,63,113,59,1,8799,116,5,34,1,59,15540,1,34,4,21,65,66,72,97,98,99,100,101,102,104,105,108,109,110,111,112,114,115,116,117,120,15586,15609,15615,15620,15796,15855,15893,15931,15977,16001,16039,16183,16204,16222,16228,16285,16312,16318,16363,16408,16416,4,3,97,114,116,15594,15599,15603,114,114,59,1,8667,114,59,1,8658,97,105,108,59,1,10524,97,114,114,59,1,10511,97,114,59,1,10596,4,7,99,100,101,110,113,114,116,15636,15651,15656,15664,15687,15696,15770,4,2,101,117,15642,15646,59,3,8765,817,116,101,59,1,341,105,99,59,1,8730,109,112,116,121,118,59,1,10675,103,4,4,59,100,101,108,15675,15677,15680,15683,1,10217,59,1,10642,59,1,10661,101,59,1,10217,117,111,5,187,1,59,15694,1,187,114,4,11,59,97,98,99,102,104,108,112,115,116,119,15721,15723,15727,15739,15742,15746,15750,15754,15758,15763,15767,1,8594,112,59,1,10613,4,2,59,102,15733,15735,1,8677,115,59,1,10528,59,1,10547,115,59,1,10526,107,59,1,8618,112,59,1,8620,108,59,1,10565,105,109,59,1,10612,108,59,1,8611,59,1,8605,4,2,97,105,15776,15781,105,108,59,1,10522,111,4,2,59,110,15788,15790,1,8758,97,108,115,59,1,8474,4,3,97,98,114,15804,15809,15814,114,114,59,1,10509,114,107,59,1,10099,4,2,97,107,15820,15833,99,4,2,101,107,15827,15830,59,1,125,59,1,93,4,2,101,115,15839,15842,59,1,10636,108,4,2,100,117,15849,15852,59,1,10638,59,1,10640,4,4,97,101,117,121,15865,15871,15886,15890,114,111,110,59,1,345,4,2,100,105,15877,15882,105,108,59,1,343,108,59,1,8969,98,59,1,125,59,1,1088,4,4,99,108,113,115,15903,15907,15914,15927,97,59,1,10551,100,104,97,114,59,1,10601,117,111,4,2,59,114,15922,15924,1,8221,59,1,8221,104,59,1,8627,4,3,97,99,103,15939,15966,15970,108,4,4,59,105,112,115,15950,15952,15957,15963,1,8476,110,101,59,1,8475,97,114,116,59,1,8476,59,1,8477,116,59,1,9645,5,174,1,59,15975,1,174,4,3,105,108,114,15985,15991,15997,115,104,116,59,1,10621,111,111,114,59,1,8971,59,3,55349,56623,4,2,97,111,16007,16028,114,4,2,100,117,16014,16017,59,1,8641,4,2,59,108,16023,16025,1,8640,59,1,10604,4,2,59,118,16034,16036,1,961,59,1,1009,4,3,103,110,115,16047,16167,16171,104,116,4,6,97,104,108,114,115,116,16063,16081,16103,16130,16143,16155,114,114,111,119,4,2,59,116,16073,16075,1,8594,97,105,108,59,1,8611,97,114,112,111,111,110,4,2,100,117,16093,16099,111,119,110,59,1,8641,112,59,1,8640,101,102,116,4,2,97,104,16112,16120,114,114,111,119,115,59,1,8644,97,114,112,111,111,110,115,59,1,8652,105,103,104,116,97,114,114,111,119,115,59,1,8649,113,117,105,103,97,114,114,111,119,59,1,8605,104,114,101,101,116,105,109,101,115,59,1,8908,103,59,1,730,105,110,103,100,111,116,115,101,113,59,1,8787,4,3,97,104,109,16191,16196,16201,114,114,59,1,8644,97,114,59,1,8652,59,1,8207,111,117,115,116,4,2,59,97,16214,16216,1,9137,99,104,101,59,1,9137,109,105,100,59,1,10990,4,4,97,98,112,116,16238,16252,16257,16278,4,2,110,114,16244,16248,103,59,1,10221,114,59,1,8702,114,107,59,1,10215,4,3,97,102,108,16265,16269,16273,114,59,1,10630,59,3,55349,56675,117,115,59,1,10798,105,109,101,115,59,1,10805,4,2,97,112,16291,16304,114,4,2,59,103,16298,16300,1,41,116,59,1,10644,111,108,105,110,116,59,1,10770,97,114,114,59,1,8649,4,4,97,99,104,113,16328,16334,16339,16342,113,117,111,59,1,8250,114,59,3,55349,56519,59,1,8625,4,2,98,117,16348,16351,59,1,93,111,4,2,59,114,16358,16360,1,8217,59,1,8217,4,3,104,105,114,16371,16377,16383,114,101,101,59,1,8908,109,101,115,59,1,8906,105,4,4,59,101,102,108,16394,16396,16399,16402,1,9657,59,1,8885,59,1,9656,116,114,105,59,1,10702,108,117,104,97,114,59,1,10600,59,1,8478,4,19,97,98,99,100,101,102,104,105,108,109,111,112,113,114,115,116,117,119,122,16459,16466,16472,16572,16590,16672,16687,16746,16844,16850,16924,16963,16988,17115,17121,17154,17206,17614,17656,99,117,116,101,59,1,347,113,117,111,59,1,8218,4,10,59,69,97,99,101,105,110,112,115,121,16494,16496,16499,16513,16518,16531,16536,16556,16564,16569,1,8827,59,1,10932,4,2,112,114,16505,16508,59,1,10936,111,110,59,1,353,117,101,59,1,8829,4,2,59,100,16524,16526,1,10928,105,108,59,1,351,114,99,59,1,349,4,3,69,97,115,16544,16547,16551,59,1,10934,112,59,1,10938,105,109,59,1,8937,111,108,105,110,116,59,1,10771,105,109,59,1,8831,59,1,1089,111,116,4,3,59,98,101,16582,16584,16587,1,8901,59,1,8865,59,1,10854,4,7,65,97,99,109,115,116,120,16606,16611,16634,16642,16646,16652,16668,114,114,59,1,8664,114,4,2,104,114,16618,16622,107,59,1,10533,4,2,59,111,16628,16630,1,8600,119,59,1,8600,116,5,167,1,59,16640,1,167,105,59,1,59,119,97,114,59,1,10537,109,4,2,105,110,16659,16665,110,117,115,59,1,8726,59,1,8726,116,59,1,10038,114,4,2,59,111,16679,16682,3,55349,56624,119,110,59,1,8994,4,4,97,99,111,121,16697,16702,16716,16739,114,112,59,1,9839,4,2,104,121,16708,16713,99,121,59,1,1097,59,1,1096,114,116,4,2,109,112,16724,16729,105,100,59,1,8739,97,114,97,108,108,101,108,59,1,8741,5,173,1,59,16744,1,173,4,2,103,109,16752,16770,109,97,4,3,59,102,118,16762,16764,16767,1,963,59,1,962,59,1,962,4,8,59,100,101,103,108,110,112,114,16788,16790,16795,16806,16817,16828,16832,16838,1,8764,111,116,59,1,10858,4,2,59,113,16801,16803,1,8771,59,1,8771,4,2,59,69,16812,16814,1,10910,59,1,10912,4,2,59,69,16823,16825,1,10909,59,1,10911,101,59,1,8774,108,117,115,59,1,10788,97,114,114,59,1,10610,97,114,114,59,1,8592,4,4,97,101,105,116,16860,16883,16891,16904,4,2,108,115,16866,16878,108,115,101,116,109,105,110,117,115,59,1,8726,104,112,59,1,10803,112,97,114,115,108,59,1,10724,4,2,100,108,16897,16900,59,1,8739,101,59,1,8995,4,2,59,101,16910,16912,1,10922,4,2,59,115,16918,16920,1,10924,59,3,10924,65024,4,3,102,108,112,16932,16938,16958,116,99,121,59,1,1100,4,2,59,98,16944,16946,1,47,4,2,59,97,16952,16954,1,10692,114,59,1,9023,102,59,3,55349,56676,97,4,2,100,114,16970,16985,101,115,4,2,59,117,16978,16980,1,9824,105,116,59,1,9824,59,1,8741,4,3,99,115,117,16996,17028,17089,4,2,97,117,17002,17015,112,4,2,59,115,17009,17011,1,8851,59,3,8851,65024,112,4,2,59,115,17022,17024,1,8852,59,3,8852,65024,117,4,2,98,112,17035,17062,4,3,59,101,115,17043,17045,17048,1,8847,59,1,8849,101,116,4,2,59,101,17056,17058,1,8847,113,59,1,8849,4,3,59,101,115,17070,17072,17075,1,8848,59,1,8850,101,116,4,2,59,101,17083,17085,1,8848,113,59,1,8850,4,3,59,97,102,17097,17099,17112,1,9633,114,4,2,101,102,17106,17109,59,1,9633,59,1,9642,59,1,9642,97,114,114,59,1,8594,4,4,99,101,109,116,17131,17136,17142,17148,114,59,3,55349,56520,116,109,110,59,1,8726,105,108,101,59,1,8995,97,114,102,59,1,8902,4,2,97,114,17160,17172,114,4,2,59,102,17167,17169,1,9734,59,1,9733,4,2,97,110,17178,17202,105,103,104,116,4,2,101,112,17188,17197,112,115,105,108,111,110,59,1,1013,104,105,59,1,981,115,59,1,175,4,5,98,99,109,110,112,17218,17351,17420,17423,17427,4,9,59,69,100,101,109,110,112,114,115,17238,17240,17243,17248,17261,17267,17279,17285,17291,1,8834,59,1,10949,111,116,59,1,10941,4,2,59,100,17254,17256,1,8838,111,116,59,1,10947,117,108,116,59,1,10945,4,2,69,101,17273,17276,59,1,10955,59,1,8842,108,117,115,59,1,10943,97,114,114,59,1,10617,4,3,101,105,117,17299,17335,17339,116,4,3,59,101,110,17308,17310,17322,1,8834,113,4,2,59,113,17317,17319,1,8838,59,1,10949,101,113,4,2,59,113,17330,17332,1,8842,59,1,10955,109,59,1,10951,4,2,98,112,17345,17348,59,1,10965,59,1,10963,99,4,6,59,97,99,101,110,115,17366,17368,17376,17385,17389,17415,1,8827,112,112,114,111,120,59,1,10936,117,114,108,121,101,113,59,1,8829,113,59,1,10928,4,3,97,101,115,17397,17405,17410,112,112,114,111,120,59,1,10938,113,113,59,1,10934,105,109,59,1,8937,105,109,59,1,8831,59,1,8721,103,59,1,9834,4,13,49,50,51,59,69,100,101,104,108,109,110,112,115,17455,17462,17469,17476,17478,17481,17496,17509,17524,17530,17536,17548,17554,5,185,1,59,17460,1,185,5,178,1,59,17467,1,178,5,179,1,59,17474,1,179,1,8835,59,1,10950,4,2,111,115,17487,17491,116,59,1,10942,117,98,59,1,10968,4,2,59,100,17502,17504,1,8839,111,116,59,1,10948,115,4,2,111,117,17516,17520,108,59,1,10185,98,59,1,10967,97,114,114,59,1,10619,117,108,116,59,1,10946,4,2,69,101,17542,17545,59,1,10956,59,1,8843,108,117,115,59,1,10944,4,3,101,105,117,17562,17598,17602,116,4,3,59,101,110,17571,17573,17585,1,8835,113,4,2,59,113,17580,17582,1,8839,59,1,10950,101,113,4,2,59,113,17593,17595,1,8843,59,1,10956,109,59,1,10952,4,2,98,112,17608,17611,59,1,10964,59,1,10966,4,3,65,97,110,17622,17627,17650,114,114,59,1,8665,114,4,2,104,114,17634,17638,107,59,1,10534,4,2,59,111,17644,17646,1,8601,119,59,1,8601,119,97,114,59,1,10538,108,105,103,5,223,1,59,17664,1,223,4,13,97,98,99,100,101,102,104,105,111,112,114,115,119,17694,17709,17714,17737,17742,17749,17754,17860,17905,17957,17964,18090,18122,4,2,114,117,17700,17706,103,101,116,59,1,8982,59,1,964,114,107,59,1,9140,4,3,97,101,121,17722,17728,17734,114,111,110,59,1,357,100,105,108,59,1,355,59,1,1090,111,116,59,1,8411,108,114,101,99,59,1,8981,114,59,3,55349,56625,4,4,101,105,107,111,17764,17805,17836,17851,4,2,114,116,17770,17786,101,4,2,52,102,17777,17780,59,1,8756,111,114,101,59,1,8756,97,4,3,59,115,118,17795,17797,17802,1,952,121,109,59,1,977,59,1,977,4,2,99,110,17811,17831,107,4,2,97,115,17818,17826,112,112,114,111,120,59,1,8776,105,109,59,1,8764,115,112,59,1,8201,4,2,97,115,17842,17846,112,59,1,8776,105,109,59,1,8764,114,110,5,254,1,59,17858,1,254,4,3,108,109,110,17868,17873,17901,100,101,59,1,732,101,115,5,215,3,59,98,100,17884,17886,17898,1,215,4,2,59,97,17892,17894,1,8864,114,59,1,10801,59,1,10800,116,59,1,8749,4,3,101,112,115,17913,17917,17953,97,59,1,10536,4,4,59,98,99,102,17927,17929,17934,17939,1,8868,111,116,59,1,9014,105,114,59,1,10993,4,2,59,111,17945,17948,3,55349,56677,114,107,59,1,10970,97,59,1,10537,114,105,109,101,59,1,8244,4,3,97,105,112,17972,17977,18082,100,101,59,1,8482,4,7,97,100,101,109,112,115,116,17993,18051,18056,18059,18066,18072,18076,110,103,108,101,4,5,59,100,108,113,114,18009,18011,18017,18032,18035,1,9653,111,119,110,59,1,9663,101,102,116,4,2,59,101,18026,18028,1,9667,113,59,1,8884,59,1,8796,105,103,104,116,4,2,59,101,18045,18047,1,9657,113,59,1,8885,111,116,59,1,9708,59,1,8796,105,110,117,115,59,1,10810,108,117,115,59,1,10809,98,59,1,10701,105,109,101,59,1,10811,101,122,105,117,109,59,1,9186,4,3,99,104,116,18098,18111,18116,4,2,114,121,18104,18108,59,3,55349,56521,59,1,1094,99,121,59,1,1115,114,111,107,59,1,359,4,2,105,111,18128,18133,120,116,59,1,8812,104,101,97,100,4,2,108,114,18143,18154,101,102,116,97,114,114,111,119,59,1,8606,105,103,104,116,97,114,114,111,119,59,1,8608,4,18,65,72,97,98,99,100,102,103,104,108,109,111,112,114,115,116,117,119,18204,18209,18214,18234,18250,18268,18292,18308,18319,18343,18379,18397,18413,18504,18547,18553,18584,18603,114,114,59,1,8657,97,114,59,1,10595,4,2,99,114,18220,18230,117,116,101,5,250,1,59,18228,1,250,114,59,1,8593,114,4,2,99,101,18241,18245,121,59,1,1118,118,101,59,1,365,4,2,105,121,18256,18265,114,99,5,251,1,59,18263,1,251,59,1,1091,4,3,97,98,104,18276,18281,18287,114,114,59,1,8645,108,97,99,59,1,369,97,114,59,1,10606,4,2,105,114,18298,18304,115,104,116,59,1,10622,59,3,55349,56626,114,97,118,101,5,249,1,59,18317,1,249,4,2,97,98,18325,18338,114,4,2,108,114,18332,18335,59,1,8639,59,1,8638,108,107,59,1,9600,4,2,99,116,18349,18374,4,2,111,114,18355,18369,114,110,4,2,59,101,18363,18365,1,8988,114,59,1,8988,111,112,59,1,8975,114,105,59,1,9720,4,2,97,108,18385,18390,99,114,59,1,363,5,168,1,59,18395,1,168,4,2,103,112,18403,18408,111,110,59,1,371,102,59,3,55349,56678,4,6,97,100,104,108,115,117,18427,18434,18445,18470,18475,18494,114,114,111,119,59,1,8593,111,119,110,97,114,114,111,119,59,1,8597,97,114,112,111,111,110,4,2,108,114,18457,18463,101,102,116,59,1,8639,105,103,104,116,59,1,8638,117,115,59,1,8846,105,4,3,59,104,108,18484,18486,18489,1,965,59,1,978,111,110,59,1,965,112,97,114,114,111,119,115,59,1,8648,4,3,99,105,116,18512,18537,18542,4,2,111,114,18518,18532,114,110,4,2,59,101,18526,18528,1,8989,114,59,1,8989,111,112,59,1,8974,110,103,59,1,367,114,105,59,1,9721,99,114,59,3,55349,56522,4,3,100,105,114,18561,18566,18572,111,116,59,1,8944,108,100,101,59,1,361,105,4,2,59,102,18579,18581,1,9653,59,1,9652,4,2,97,109,18590,18595,114,114,59,1,8648,108,5,252,1,59,18601,1,252,97,110,103,108,101,59,1,10663,4,15,65,66,68,97,99,100,101,102,108,110,111,112,114,115,122,18643,18648,18661,18667,18847,18851,18857,18904,18909,18915,18931,18937,18943,18949,18996,114,114,59,1,8661,97,114,4,2,59,118,18656,18658,1,10984,59,1,10985,97,115,104,59,1,8872,4,2,110,114,18673,18679,103,114,116,59,1,10652,4,7,101,107,110,112,114,115,116,18695,18704,18711,18720,18742,18754,18810,112,115,105,108,111,110,59,1,1013,97,112,112,97,59,1,1008,111,116,104,105,110,103,59,1,8709,4,3,104,105,114,18728,18732,18735,105,59,1,981,59,1,982,111,112,116,111,59,1,8733,4,2,59,104,18748,18750,1,8597,111,59,1,1009,4,2,105,117,18760,18766,103,109,97,59,1,962,4,2,98,112,18772,18791,115,101,116,110,101,113,4,2,59,113,18784,18787,3,8842,65024,59,3,10955,65024,115,101,116,110,101,113,4,2,59,113,18803,18806,3,8843,65024,59,3,10956,65024,4,2,104,114,18816,18822,101,116,97,59,1,977,105,97,110,103,108,101,4,2,108,114,18834,18840,101,102,116,59,1,8882,105,103,104,116,59,1,8883,121,59,1,1074,97,115,104,59,1,8866,4,3,101,108,114,18865,18884,18890,4,3,59,98,101,18873,18875,18880,1,8744,97,114,59,1,8891,113,59,1,8794,108,105,112,59,1,8942,4,2,98,116,18896,18901,97,114,59,1,124,59,1,124,114,59,3,55349,56627,116,114,105,59,1,8882,115,117,4,2,98,112,18923,18927,59,3,8834,8402,59,3,8835,8402,112,102,59,3,55349,56679,114,111,112,59,1,8733,116,114,105,59,1,8883,4,2,99,117,18955,18960,114,59,3,55349,56523,4,2,98,112,18966,18981,110,4,2,69,101,18973,18977,59,3,10955,65024,59,3,8842,65024,110,4,2,69,101,18988,18992,59,3,10956,65024,59,3,8843,65024,105,103,122,97,103,59,1,10650,4,7,99,101,102,111,112,114,115,19020,19026,19061,19066,19072,19075,19089,105,114,99,59,1,373,4,2,100,105,19032,19055,4,2,98,103,19038,19043,97,114,59,1,10847,101,4,2,59,113,19050,19052,1,8743,59,1,8793,101,114,112,59,1,8472,114,59,3,55349,56628,112,102,59,3,55349,56680,59,1,8472,4,2,59,101,19081,19083,1,8768,97,116,104,59,1,8768,99,114,59,3,55349,56524,4,14,99,100,102,104,105,108,109,110,111,114,115,117,118,119,19125,19146,19152,19157,19173,19176,19192,19197,19202,19236,19252,19269,19286,19291,4,3,97,105,117,19133,19137,19142,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,116,114,105,59,1,9661,114,59,3,55349,56629,4,2,65,97,19163,19168,114,114,59,1,10234,114,114,59,1,10231,59,1,958,4,2,65,97,19182,19187,114,114,59,1,10232,114,114,59,1,10229,97,112,59,1,10236,105,115,59,1,8955,4,3,100,112,116,19210,19215,19230,111,116,59,1,10752,4,2,102,108,19221,19225,59,3,55349,56681,117,115,59,1,10753,105,109,101,59,1,10754,4,2,65,97,19242,19247,114,114,59,1,10233,114,114,59,1,10230,4,2,99,113,19258,19263,114,59,3,55349,56525,99,117,112,59,1,10758,4,2,112,116,19275,19281,108,117,115,59,1,10756,114,105,59,1,9651,101,101,59,1,8897,101,100,103,101,59,1,8896,4,8,97,99,101,102,105,111,115,117,19316,19335,19349,19357,19362,19367,19373,19379,99,4,2,117,121,19323,19332,116,101,5,253,1,59,19330,1,253,59,1,1103,4,2,105,121,19341,19346,114,99,59,1,375,59,1,1099,110,5,165,1,59,19355,1,165,114,59,3,55349,56630,99,121,59,1,1111,112,102,59,3,55349,56682,99,114,59,3,55349,56526,4,2,99,109,19385,19389,121,59,1,1102,108,5,255,1,59,19395,1,255,4,10,97,99,100,101,102,104,105,111,115,119,19419,19426,19441,19446,19462,19467,19472,19480,19486,19492,99,117,116,101,59,1,378,4,2,97,121,19432,19438,114,111,110,59,1,382,59,1,1079,111,116,59,1,380,4,2,101,116,19452,19458,116,114,102,59,1,8488,97,59,1,950,114,59,3,55349,56631,99,121,59,1,1078,103,114,97,114,114,59,1,8669,112,102,59,3,55349,56683,99,114,59,3,55349,56527,4,2,106,110,19498,19501,59,1,8205,106,59,1,8204]);
},{}],512:[function(require,module,exports){
'use strict';

var UNICODE = require('../common/unicode');

//Aliases
var $ = UNICODE.CODE_POINTS;

//Utils

//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
//this functions if they will be situated in another module due to context switch.
//Always perform inlining check before modifying this functions ('node --trace-inlining').
function isSurrogatePair(cp1, cp2) {
    return cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF;
}

function getSurrogatePairCodePoint(cp1, cp2) {
    return (cp1 - 0xD800) * 0x400 + 0x2400 + cp2;
}


//Const
var DEFAULT_BUFFER_WATERLINE = 1 << 16;


//Preprocessor
//NOTE: HTML input preprocessing
//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)
var Preprocessor = module.exports = function () {
    this.html = null;

    this.pos = -1;
    this.lastGapPos = -1;
    this.lastCharPos = -1;

    this.gapStack = [];

    this.skipNextNewLine = false;

    this.lastChunkWritten = false;
    this.endOfChunkHit = false;
    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
};

Preprocessor.prototype.dropParsedChunk = function () {
    if (this.pos > this.bufferWaterline) {
        this.lastCharPos -= this.pos;
        this.html = this.html.substring(this.pos);
        this.pos = 0;
        this.lastGapPos = -1;
        this.gapStack = [];
    }
};

Preprocessor.prototype._addGap = function () {
    this.gapStack.push(this.lastGapPos);
    this.lastGapPos = this.pos;
};

Preprocessor.prototype._processHighRangeCodePoint = function (cp) {
    //NOTE: try to peek a surrogate pair
    if (this.pos !== this.lastCharPos) {
        var nextCp = this.html.charCodeAt(this.pos + 1);

        if (isSurrogatePair(cp, nextCp)) {
            //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.
            this.pos++;
            cp = getSurrogatePairCodePoint(cp, nextCp);

            //NOTE: add gap that should be avoided during retreat
            this._addGap();
        }
    }

    // NOTE: we've hit the end of chunk, stop processing at this point
    else if (!this.lastChunkWritten) {
        this.endOfChunkHit = true;
        return $.EOF;
    }

    return cp;
};

Preprocessor.prototype.write = function (chunk, isLastChunk) {
    if (this.html)
        this.html += chunk;

    else
        this.html = chunk;

    this.lastCharPos = this.html.length - 1;
    this.endOfChunkHit = false;
    this.lastChunkWritten = isLastChunk;
};

Preprocessor.prototype.insertHtmlAtCurrentPos = function (chunk) {
    this.html = this.html.substring(0, this.pos + 1) +
                chunk +
                this.html.substring(this.pos + 1, this.html.length);

    this.lastCharPos = this.html.length - 1;
    this.endOfChunkHit = false;
};


Preprocessor.prototype.advance = function () {
    this.pos++;

    if (this.pos > this.lastCharPos) {
        if (!this.lastChunkWritten)
            this.endOfChunkHit = true;

        return $.EOF;
    }

    var cp = this.html.charCodeAt(this.pos);

    //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character
    //must be ignored.
    if (this.skipNextNewLine && cp === $.LINE_FEED) {
        this.skipNextNewLine = false;
        this._addGap();
        return this.advance();
    }

    //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters
    if (cp === $.CARRIAGE_RETURN) {
        this.skipNextNewLine = true;
        return $.LINE_FEED;
    }

    this.skipNextNewLine = false;

    //OPTIMIZATION: first perform check if the code point in the allowed range that covers most common
    //HTML input (e.g. ASCII codes) to avoid performance-cost operations for high-range code points.
    return cp >= 0xD800 ? this._processHighRangeCodePoint(cp) : cp;
};

Preprocessor.prototype.retreat = function () {
    if (this.pos === this.lastGapPos) {
        this.lastGapPos = this.gapStack.pop();
        this.pos--;
    }

    this.pos--;
};


},{"../common/unicode":494}],513:[function(require,module,exports){
'use strict';

var DOCUMENT_MODE = require('../common/html').DOCUMENT_MODE;

//Node construction
exports.createDocument = function () {
    return {
        nodeName: '#document',
        mode: DOCUMENT_MODE.NO_QUIRKS,
        childNodes: []
    };
};

exports.createDocumentFragment = function () {
    return {
        nodeName: '#document-fragment',
        childNodes: []
    };
};

exports.createElement = function (tagName, namespaceURI, attrs) {
    return {
        nodeName: tagName,
        tagName: tagName,
        attrs: attrs,
        namespaceURI: namespaceURI,
        childNodes: [],
        parentNode: null
    };
};

exports.createCommentNode = function (data) {
    return {
        nodeName: '#comment',
        data: data,
        parentNode: null
    };
};

var createTextNode = function (value) {
    return {
        nodeName: '#text',
        value: value,
        parentNode: null
    };
};


//Tree mutation
var appendChild = exports.appendChild = function (parentNode, newNode) {
    parentNode.childNodes.push(newNode);
    newNode.parentNode = parentNode;
};

var insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {
    var insertionIdx = parentNode.childNodes.indexOf(referenceNode);

    parentNode.childNodes.splice(insertionIdx, 0, newNode);
    newNode.parentNode = parentNode;
};

exports.setTemplateContent = function (templateElement, contentElement) {
    templateElement.content = contentElement;
};

exports.getTemplateContent = function (templateElement) {
    return templateElement.content;
};

exports.setDocumentType = function (document, name, publicId, systemId) {
    var doctypeNode = null;

    for (var i = 0; i < document.childNodes.length; i++) {
        if (document.childNodes[i].nodeName === '#documentType') {
            doctypeNode = document.childNodes[i];
            break;
        }
    }

    if (doctypeNode) {
        doctypeNode.name = name;
        doctypeNode.publicId = publicId;
        doctypeNode.systemId = systemId;
    }

    else {
        appendChild(document, {
            nodeName: '#documentType',
            name: name,
            publicId: publicId,
            systemId: systemId
        });
    }
};

exports.setDocumentMode = function (document, mode) {
    document.mode = mode;
};

exports.getDocumentMode = function (document) {
    return document.mode;
};

exports.detachNode = function (node) {
    if (node.parentNode) {
        var idx = node.parentNode.childNodes.indexOf(node);

        node.parentNode.childNodes.splice(idx, 1);
        node.parentNode = null;
    }
};

exports.insertText = function (parentNode, text) {
    if (parentNode.childNodes.length) {
        var prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];

        if (prevNode.nodeName === '#text') {
            prevNode.value += text;
            return;
        }
    }

    appendChild(parentNode, createTextNode(text));
};

exports.insertTextBefore = function (parentNode, text, referenceNode) {
    var prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];

    if (prevNode && prevNode.nodeName === '#text')
        prevNode.value += text;
    else
        insertBefore(parentNode, createTextNode(text), referenceNode);
};

exports.adoptAttributes = function (recipient, attrs) {
    var recipientAttrsMap = [];

    for (var i = 0; i < recipient.attrs.length; i++)
        recipientAttrsMap.push(recipient.attrs[i].name);

    for (var j = 0; j < attrs.length; j++) {
        if (recipientAttrsMap.indexOf(attrs[j].name) === -1)
            recipient.attrs.push(attrs[j]);
    }
};


//Tree traversing
exports.getFirstChild = function (node) {
    return node.childNodes[0];
};

exports.getChildNodes = function (node) {
    return node.childNodes;
};

exports.getParentNode = function (node) {
    return node.parentNode;
};

exports.getAttrList = function (element) {
    return element.attrs;
};

//Node data
exports.getTagName = function (element) {
    return element.tagName;
};

exports.getNamespaceURI = function (element) {
    return element.namespaceURI;
};

exports.getTextNodeContent = function (textNode) {
    return textNode.value;
};

exports.getCommentNodeContent = function (commentNode) {
    return commentNode.data;
};

exports.getDocumentTypeNodeName = function (doctypeNode) {
    return doctypeNode.name;
};

exports.getDocumentTypeNodePublicId = function (doctypeNode) {
    return doctypeNode.publicId;
};

exports.getDocumentTypeNodeSystemId = function (doctypeNode) {
    return doctypeNode.systemId;
};

//Node types
exports.isTextNode = function (node) {
    return node.nodeName === '#text';
};

exports.isCommentNode = function (node) {
    return node.nodeName === '#comment';
};

exports.isDocumentTypeNode = function (node) {
    return node.nodeName === '#documentType';
};

exports.isElementNode = function (node) {
    return !!node.tagName;
};

},{"../common/html":493}],514:[function(require,module,exports){
'use strict';

var doctype = require('../common/doctype'),
    DOCUMENT_MODE = require('../common/html').DOCUMENT_MODE;


//Conversion tables for DOM Level1 structure emulation
var nodeTypes = {
    element: 1,
    text: 3,
    cdata: 4,
    comment: 8
};

var nodePropertyShorthands = {
    tagName: 'name',
    childNodes: 'children',
    parentNode: 'parent',
    previousSibling: 'prev',
    nextSibling: 'next',
    nodeValue: 'data'
};

//Node
var Node = function (props) {
    for (var key in props) {
        if (props.hasOwnProperty(key))
            this[key] = props[key];
    }
};

Node.prototype = {
    get firstChild() {
        var children = this.children;

        return children && children[0] || null;
    },

    get lastChild() {
        var children = this.children;

        return children && children[children.length - 1] || null;
    },

    get nodeType() {
        return nodeTypes[this.type] || nodeTypes.element;
    }
};

Object.keys(nodePropertyShorthands).forEach(function (key) {
    var shorthand = nodePropertyShorthands[key];

    Object.defineProperty(Node.prototype, key, {
        get: function () {
            return this[shorthand] || null;
        },
        set: function (val) {
            this[shorthand] = val;
            return val;
        }
    });
});


//Node construction
exports.createDocument = function () {
    return new Node({
        type: 'root',
        name: 'root',
        parent: null,
        prev: null,
        next: null,
        children: [],
        'x-mode': DOCUMENT_MODE.NO_QUIRKS
    });
};

exports.createDocumentFragment = function () {
    return new Node({
        type: 'root',
        name: 'root',
        parent: null,
        prev: null,
        next: null,
        children: []
    });
};

exports.createElement = function (tagName, namespaceURI, attrs) {
    var attribs = Object.create(null),
        attribsNamespace = Object.create(null),
        attribsPrefix = Object.create(null);

    for (var i = 0; i < attrs.length; i++) {
        var attrName = attrs[i].name;

        attribs[attrName] = attrs[i].value;
        attribsNamespace[attrName] = attrs[i].namespace;
        attribsPrefix[attrName] = attrs[i].prefix;
    }

    return new Node({
        type: tagName === 'script' || tagName === 'style' ? tagName : 'tag',
        name: tagName,
        namespace: namespaceURI,
        attribs: attribs,
        'x-attribsNamespace': attribsNamespace,
        'x-attribsPrefix': attribsPrefix,
        children: [],
        parent: null,
        prev: null,
        next: null
    });
};

exports.createCommentNode = function (data) {
    return new Node({
        type: 'comment',
        data: data,
        parent: null,
        prev: null,
        next: null
    });
};

var createTextNode = function (value) {
    return new Node({
        type: 'text',
        data: value,
        parent: null,
        prev: null,
        next: null
    });
};


//Tree mutation
var appendChild = exports.appendChild = function (parentNode, newNode) {
    var prev = parentNode.children[parentNode.children.length - 1];

    if (prev) {
        prev.next = newNode;
        newNode.prev = prev;
    }

    parentNode.children.push(newNode);
    newNode.parent = parentNode;
};

var insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {
    var insertionIdx = parentNode.children.indexOf(referenceNode),
        prev = referenceNode.prev;

    if (prev) {
        prev.next = newNode;
        newNode.prev = prev;
    }

    referenceNode.prev = newNode;
    newNode.next = referenceNode;

    parentNode.children.splice(insertionIdx, 0, newNode);
    newNode.parent = parentNode;
};

exports.setTemplateContent = function (templateElement, contentElement) {
    appendChild(templateElement, contentElement);
};

exports.getTemplateContent = function (templateElement) {
    return templateElement.children[0];
};

exports.setDocumentType = function (document, name, publicId, systemId) {
    var data = doctype.serializeContent(name, publicId, systemId),
        doctypeNode = null;

    for (var i = 0; i < document.children.length; i++) {
        if (document.children[i].type === 'directive' && document.children[i].name === '!doctype') {
            doctypeNode = document.children[i];
            break;
        }
    }

    if (doctypeNode) {
        doctypeNode.data = data;
        doctypeNode['x-name'] = name;
        doctypeNode['x-publicId'] = publicId;
        doctypeNode['x-systemId'] = systemId;
    }

    else {
        appendChild(document, new Node({
            type: 'directive',
            name: '!doctype',
            data: data,
            'x-name': name,
            'x-publicId': publicId,
            'x-systemId': systemId
        }));
    }

};

exports.setDocumentMode = function (document, mode) {
    document['x-mode'] = mode;
};

exports.getDocumentMode = function (document) {
    return document['x-mode'];
};

exports.detachNode = function (node) {
    if (node.parent) {
        var idx = node.parent.children.indexOf(node),
            prev = node.prev,
            next = node.next;

        node.prev = null;
        node.next = null;

        if (prev)
            prev.next = next;

        if (next)
            next.prev = prev;

        node.parent.children.splice(idx, 1);
        node.parent = null;
    }
};

exports.insertText = function (parentNode, text) {
    var lastChild = parentNode.children[parentNode.children.length - 1];

    if (lastChild && lastChild.type === 'text')
        lastChild.data += text;
    else
        appendChild(parentNode, createTextNode(text));
};

exports.insertTextBefore = function (parentNode, text, referenceNode) {
    var prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];

    if (prevNode && prevNode.type === 'text')
        prevNode.data += text;
    else
        insertBefore(parentNode, createTextNode(text), referenceNode);
};

exports.adoptAttributes = function (recipient, attrs) {
    for (var i = 0; i < attrs.length; i++) {
        var attrName = attrs[i].name;

        if (typeof recipient.attribs[attrName] === 'undefined') {
            recipient.attribs[attrName] = attrs[i].value;
            recipient['x-attribsNamespace'][attrName] = attrs[i].namespace;
            recipient['x-attribsPrefix'][attrName] = attrs[i].prefix;
        }
    }
};


//Tree traversing
exports.getFirstChild = function (node) {
    return node.children[0];
};

exports.getChildNodes = function (node) {
    return node.children;
};

exports.getParentNode = function (node) {
    return node.parent;
};

exports.getAttrList = function (element) {
    var attrList = [];

    for (var name in element.attribs) {
        attrList.push({
            name: name,
            value: element.attribs[name],
            namespace: element['x-attribsNamespace'][name],
            prefix: element['x-attribsPrefix'][name]
        });
    }

    return attrList;
};


//Node data
exports.getTagName = function (element) {
    return element.name;
};

exports.getNamespaceURI = function (element) {
    return element.namespace;
};

exports.getTextNodeContent = function (textNode) {
    return textNode.data;
};

exports.getCommentNodeContent = function (commentNode) {
    return commentNode.data;
};

exports.getDocumentTypeNodeName = function (doctypeNode) {
    return doctypeNode['x-name'];
};

exports.getDocumentTypeNodePublicId = function (doctypeNode) {
    return doctypeNode['x-publicId'];
};

exports.getDocumentTypeNodeSystemId = function (doctypeNode) {
    return doctypeNode['x-systemId'];
};


//Node types
exports.isTextNode = function (node) {
    return node.type === 'text';
};

exports.isCommentNode = function (node) {
    return node.type === 'comment';
};

exports.isDocumentTypeNode = function (node) {
    return node.type === 'directive' && node.name === '!doctype';
};

exports.isElementNode = function (node) {
    return !!node.attribs;
};

},{"../common/doctype":491,"../common/html":493}],515:[function(require,module,exports){
'use strict';

module.exports = function mergeOptions(defaults, options) {
    options = options || Object.create(null);

    return [defaults, options].reduce(function (merged, optObj) {
        Object.keys(optObj).forEach(function (key) {
            merged[key] = optObj[key];
        });

        return merged;
    }, Object.create(null));
};

},{}],516:[function(require,module,exports){
'use strict';

var Mixin = module.exports = function (host) {
    var originalMethods = {},
        overriddenMethods = this._getOverriddenMethods(this, originalMethods);

    Object.keys(overriddenMethods).forEach(function (key) {
        if (typeof overriddenMethods[key] === 'function') {
            originalMethods[key] = host[key];
            host[key] = overriddenMethods[key];
        }
    });
};

Mixin.prototype._getOverriddenMethods = function () {
    throw new Error('Not implemented');
};


},{}],517:[function(require,module,exports){
'use strict';
module.exports = (url, opts) => {
	if (typeof url !== 'string') {
		throw new TypeError(`Expected \`url\` to be of type \`string\`, got \`${typeof url}\``);
	}

	url = url.trim();
	opts = Object.assign({https: false}, opts);

	if (/^\.*\/|^(?!localhost)\w+:/.test(url)) {
		return url;
	}

	return url.replace(/^(?!(?:\w+:)?\/\/)/, opts.https ? 'https://' : 'http://');
};

},{}],518:[function(require,module,exports){
(function (process){
var once = require('once')
var eos = require('end-of-stream')
var fs = require('fs') // we only need fs to get the ReadStream and WriteStream prototypes

var noop = function () {}
var ancient = /^v?\.0/.test(process.version)

var isFn = function (fn) {
  return typeof fn === 'function'
}

var isFS = function (stream) {
  if (!ancient) return false // newer node version do not need to care about fs is a special way
  if (!fs) return false // browser
  return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close)
}

var isRequest = function (stream) {
  return stream.setHeader && isFn(stream.abort)
}

var destroyer = function (stream, reading, writing, callback) {
  callback = once(callback)

  var closed = false
  stream.on('close', function () {
    closed = true
  })

  eos(stream, {readable: reading, writable: writing}, function (err) {
    if (err) return callback(err)
    closed = true
    callback()
  })

  var destroyed = false
  return function (err) {
    if (closed) return
    if (destroyed) return
    destroyed = true

    if (isFS(stream)) return stream.close(noop) // use close for fs streams to avoid fd leaks
    if (isRequest(stream)) return stream.abort() // request.destroy just do .end - .abort is what we want

    if (isFn(stream.destroy)) return stream.destroy()

    callback(err || new Error('stream was destroyed'))
  }
}

var call = function (fn) {
  fn()
}

var pipe = function (from, to) {
  return from.pipe(to)
}

var pump = function () {
  var streams = Array.prototype.slice.call(arguments)
  var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop

  if (Array.isArray(streams[0])) streams = streams[0]
  if (streams.length < 2) throw new Error('pump requires two streams per minimum')

  var error
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1
    var writing = i > 0
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err
      if (err) destroys.forEach(call)
      if (reading) return
      destroys.forEach(call)
      callback(error)
    })
  })

  return streams.reduce(pipe)
}

module.exports = pump

}).call(this,require('_process'))
},{"_process":16,"end-of-stream":196,"fs":3,"once":488}],519:[function(require,module,exports){
'use strict';

var ucs2decode = require('./ucs2/decode')
  , adapt      = require('./lib/adapt')

  , stringFromCharCode = String.fromCharCode
  , floor = Math.floor

/** Highest positive signed 32-bit float value */
  , maxInt = 2147483647 // aka. 0x7FFFFFFF or 2^31-1

  , base = 36
  , delimiter = '-' // '\x2D'
  , initialBias = 72, initialN = 128, tMin = 1, tMax = 26;

/**
	* Converts a digit/integer into a basic code point.
	* @see `basicToDigit()`
	* @private
	* @param {Number} digit The numeric value of a basic code point.
	* @returns {Number} The basic code point whose value (when used for
	* representing integers) is `digit`, which needs to be in the range
	* `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	* used; else, the lowercase form is used. The behavior is undefined
	* if `flag` is non-zero and `digit` has no uppercase form.
*/
var digitToBasic = function (digit, flag) {
	//  0..25 map to ASCII a..z or A..Z
	// 26..35 map to ASCII 0..9
	return digit + 22 + 75 * (digit < 26) - ((flag !== 0) << 5);
};

/**
	* Converts a string of Unicode symbols (e.g. a domain name label) to a
	* Punycode string of ASCII-only symbols.
	* @memberOf punycode
	* @param {String} input The string of Unicode symbols.
	* @returns {String} The resulting Punycode string of ASCII-only symbols.
*/
module.exports = function (input) {
	var n,
	delta,
	handledCPCount,
	basicLength,
	bias,
	j,
	m,
	q,
	k,
	t,
	currentValue,
	output = [],
	/** `inputLength` will hold the number of code points in `input`. */
	inputLength,
	/** Cached calculation results */
	handledCPCountPlusOne,
	baseMinusT,
	qMinusT;

	// Convert the input in UCS-2 to Unicode
	input = ucs2decode(input);

	// Cache the length
	inputLength = input.length;

	// Initialize the state
	n = initialN;
	delta = 0;
	bias = initialBias;

	// Handle the basic code points
	for (j = 0; j < inputLength; ++j) {
		currentValue = input[j];
		if (currentValue < 0x80) {
			output.push(stringFromCharCode(currentValue));
		}
	}

	handledCPCount = basicLength = output.length;

	// `handledCPCount` is the number of code points that have been handled;
	// `basicLength` is the number of basic code points.

	// Finish the basic string - if it is not empty - with a delimiter
	if (basicLength) {
		output.push(delimiter);
	}

	// Main encoding loop:
	while (handledCPCount < inputLength) {

		// All non-basic code points < n have been handled already. Find the next
		// larger one:
		for (m = maxInt, j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue >= n && currentValue < m) {
				m = currentValue;
			}
		}

		// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
		// but guard against overflow
		handledCPCountPlusOne = handledCPCount + 1;
		if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
			throw new RangeError('Overflow: input needs wider integers to process');
		}

		delta += (m - n) * handledCPCountPlusOne;
		n = m;

		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];

			if (currentValue < n && ++delta > maxInt) {
				throw new RangeError('Overflow: input needs wider integers to process');
			}

			if (currentValue === n) {
				// Represent delta as a generalized variable-length integer
				for (q = delta, k = base; true; k += base) {
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
					if (q < t) {
						break;
					}
					qMinusT = q - t;
					baseMinusT = base - t;
					output.push(
						stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
					);
					q = floor(qMinusT / baseMinusT);
				}

				output.push(stringFromCharCode(digitToBasic(q, 0)));
				bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
				delta = 0;
				++handledCPCount;
			}
		}

		++delta;
		++n;

	}
	return output.join('');
};

},{"./lib/adapt":520,"./ucs2/decode":521}],520:[function(require,module,exports){
'use strict';

var floor = Math.floor

  , base = 36, tMin = 1, tMax = 26, damp = 700, skew = 38
  , baseMinusTMin = base - tMin;

/**
	* Bias adaptation function as per section 3.4 of RFC 3492.
	* https://tools.ietf.org/html/rfc3492#section-3.4
	* @private
*/
module.exports = function (delta, numPoints, firstTime) {
	var k = 0;
	delta = firstTime ? floor(delta / damp) : delta >> 1;
	delta += floor(delta / numPoints);
	for (k = 0; delta > baseMinusTMin * tMax >> 1; k += base) {
		delta = floor(delta / baseMinusTMin);
	}
	return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

},{}],521:[function(require,module,exports){
'use strict';

/**
	* Creates an array containing the numeric code points of each Unicode
	* character in the string. While JavaScript uses UCS-2 internally,
	* this function will convert a pair of surrogate halves (each of which
	* UCS-2 exposes as separate characters) into a single code point,
	* matching UTF-16.
	* @see `punycode.ucs2.encode`
	* @see <https://mathiasbynens.be/notes/javascript-encoding>
	* @memberOf punycode.ucs2
	* @name decode
	* @param {String} string The Unicode input string (UCS-2).
	* @returns {Array} The new array of code points.
*/
module.exports = function ucs2decode(string) {
	var output = [],
	counter = 0,
	length = string.length,
	value,
	extra;
	while (counter < length) {
		value = string.charCodeAt(counter++);
		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
			// high surrogate, and there is a next character
			extra = string.charCodeAt(counter++);
			if ((extra & 0xFC00) === 0xDC00) { // low surrogate
				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
			} else {
				// unmatched surrogate; only append this code unit, in case the next
				// code unit is the high surrogate of a surrogate pair
				output.push(value);
				counter--;
			}
		} else {
			output.push(value);
		}
	}
	return output;
};

},{}],522:[function(require,module,exports){
(function (Buffer){
'use strict';

const Readable = require('stream').Readable;
const lowercaseKeys = require('lowercase-keys');

class Response extends Readable {
	constructor(statusCode, headers, body, url) {
		if (typeof statusCode !== 'number') {
			throw new TypeError('Argument `statusCode` should be a number');
		}
		if (typeof headers !== 'object') {
			throw new TypeError('Argument `headers` should be an object');
		}
		if (!(body instanceof Buffer)) {
			throw new TypeError('Argument `body` should be a buffer');
		}
		if (typeof url !== 'string') {
			throw new TypeError('Argument `url` should be a string');
		}

		super();
		this.statusCode = statusCode;
		this.headers = lowercaseKeys(headers);
		this.body = body;
		this.url = url;
	}

	_read() {
		this.push(this.body);
		this.push(null);
	}
}

module.exports = Response;

}).call(this,require("buffer").Buffer)
},{"buffer":4,"lowercase-keys":467,"stream":37}],523:[function(require,module,exports){
(function(a,b){'object'==typeof exports&&'object'==typeof module?module.exports=b():'function'==typeof define&&define.amd?define([],b):'object'==typeof exports?exports.smartquotes=b():a.smartquotes=b()})(this,function(){return function(a){function b(d){if(c[d])return c[d].exports;var e=c[d]={i:d,l:!1,exports:{}};return a[d].call(e.exports,e,e.exports,b),e.l=!0,e.exports}var c={};return b.m=a,b.c=c,b.d=function(a,c,d){b.o(a,c)||Object.defineProperty(a,c,{configurable:!1,enumerable:!0,get:d})},b.n=function(a){var c=a&&a.__esModule?function(){return a['default']}:function(){return a};return b.d(c,'a',c),c},b.o=function(a,b){return Object.prototype.hasOwnProperty.call(a,b)},b.p='',b(b.s=3)}([function(a,b,c){'use strict';var d=c(1);a.exports=function(a,b){return b=b||{},d.forEach(function(c){var d='function'==typeof c[1]?c[1](b.retainLength):c[1];a=a.replace(c[0],d)}),a}},function(a){'use strict';a.exports=[[/'''/g,function(a){return'\u2034'+(a?'\u2063\u2063':'')}],[/(\W|^)"(\w)/g,'$1\u201C$2'],[/(\u201c[^"]*)"([^"]*$|[^\u201c"]*\u201c)/g,'$1\u201D$2'],[/([^0-9])"/g,'$1\u201D'],[/''/g,function(a){return'\u2033'+(a?'\u2063':'')}],[/(\W|^)'(\S)/g,'$1\u2018$2'],[/([a-z])'([a-z])/ig,'$1\u2019$2'],[/(\u2018)([0-9]{2}[^\u2019]*)(\u2018([^0-9]|$)|$|\u2019[a-z])/ig,'\u2019$2$3'],[/((\u2018[^']*)|[a-z])'([^0-9]|$)/ig,'$1\u2019$3'],[/(\B|^)\u2018(?=([^\u2018\u2019]*\u2019\b)*([^\u2018\u2019]*\B\W[\u2018\u2019]\b|[^\u2018\u2019]*$))/ig,'$1\u2019'],[/"/g,'\u2033'],[/'/g,'\u2032']]},function(a,b,c){'use strict';function d(a){if(-1===['CODE','PRE','SCRIPT','STYLE'].indexOf(a.nodeName.toUpperCase())){var b,c,h,i='',j=a.childNodes,k=[];for(b=0;b<j.length;b++)c=j[b],c.nodeType===g||'#text'===c.nodeName?(k.push([c,i.length]),i+=c.nodeValue||c.value):c.childNodes&&c.childNodes.length&&(i+=d(c));for(b in i=f(i,{retainLength:!0}),k)h=k[b],h[0].nodeValue?h[0].nodeValue=e(i,h[0].nodeValue,h[1]):h[0].value&&(h[0].value=e(i,h[0].value,h[1]));return i}}function e(a,b,c){return a.substr(c,b.length).replace('\u2063','')}var f=c(0),g='undefined'!=typeof Element&&Element.TEXT_NODE||3;a.exports=function(a){return d(a),a}},function(a,b,c){'use strict';function d(a){return'undefined'!=typeof document&&'undefined'==typeof a?(g.runOnReady(function(){return f(document.body)}),d):'string'==typeof a?h(a):f(a)}var e=c(1),f=c(2),g=c(4),h=c(0);a.exports=d,a.exports.string=h,a.exports.element=f,a.exports.replacements=e,a.exports.listen=g},function(a,b,c){'use strict';function d(a){var b=new MutationObserver(function(a){a.forEach(function(a){var b,c=!0,d=!1;try{for(var f,g,h=a.addedNodes[Symbol.iterator]();!(c=(f=h.next()).done);c=!0)g=f.value,e(g)}catch(a){d=!0,b=a}finally{try{!c&&h.return&&h.return()}finally{if(d)throw b}}})});return d.runOnReady(function(){b.observe(a||document.body,{childList:!0,subtree:!0})}),b}var e=c(2),f=c(0);d.runOnReady=function(a){if('loading'!==document.readyState)a();else if(document.addEventListener)document.addEventListener('DOMContentLoaded',a,!1);else var b=setInterval(function(){'loading'!==document.readyState&&(clearInterval(b),a())},10)},a.exports=d}])});

},{}],524:[function(require,module,exports){
// Utilities
const lowerCase = require('./lower-case')
const specials = require('./specials')

const regex = /(?:(?:(\s?(?:^|[.\(\)!?;:"-])\s*)(\w))|(\w))(\w*[’']*\w*)/g

const convertToRegExp = specials => specials.map(s => [new RegExp(`\\b${s}\\b`, 'gi'), s])

function parseMatch(match) {
  const firstCharacter = match[0]

  // test first character
  if (/\s/.test(firstCharacter)) {
    // if whitespace - trim and return
    return match.substr(1)
  }
  if (/[\(\)]/.test(firstCharacter)) {
    // if parens - this shouldn't be replaced
    return null
  }

  return match
}

module.exports = (str, options = {}) => {
  str = str.toLowerCase().replace(regex, (m, lead = '', forced, lower, rest) => {
    const parsedMatch = parseMatch(m)
    if (!parsedMatch) {
      return m
    }
    if (!forced) {
      const fullLower = lower + rest

      if (lowerCase.has(fullLower)) {
        return parsedMatch
      }
    }

    return lead + (lower || forced).toUpperCase() + rest
  })

  const customSpecials = options.special || []
  const replace = [...specials, ...customSpecials]
  const replaceRegExp = convertToRegExp(replace)

  replaceRegExp.forEach(([pattern, s]) => {
    str = str.replace(pattern, s)
  })

  return str
}

},{"./lower-case":525,"./specials":526}],525:[function(require,module,exports){
const conjunctions = [
  'for',
  'and',
  'nor',
  'but',
  'or',
  'yet',
  'so'
]

const articles = [
  'a',
  'an',
  'the'
]

const prepositions = [
  'aboard',
  'about',
  'above',
  'across',
  'after',
  'against',
  'along',
  'amid',
  'among',
  'anti',
  'around',
  'as',
  'at',
  'before',
  'behind',
  'below',
  'beneath',
  'beside',
  'besides',
  'between',
  'beyond',
  'but',
  'by',
  'concerning',
  'considering',
  'despite',
  'down',
  'during',
  'except',
  'excepting',
  'excluding',
  'following',
  'for',
  'from',
  'in',
  'inside',
  'into',
  'like',
  'minus',
  'near',
  'of',
  'off',
  'on',
  'onto',
  'opposite',
  'over',
  'past',
  'per',
  'plus',
  'regarding',
  'round',
  'save',
  'since',
  'than',
  'through',
  'to',
  'toward',
  'towards',
  'under',
  'underneath',
  'unlike',
  'until',
  'up',
  'upon',
  'versus',
  'via',
  'with',
  'within',
  'without'
]

module.exports = new Set([
  ...conjunctions,
  ...articles,
  ...prepositions
])

},{}],526:[function(require,module,exports){
const intended = [
  'ZEIT',
  'ZEIT Inc.',
  'CLI',
  'API',
  'HTTP',
  'HTTPS',
  'JSX',
  'DNS',
  'URL',
  'now.sh',
  'now.json',
  'CI',
  'CDN',
  'package.json',
  'GitHub',
  'CSS',
  'JS',
  'HTML',
  'WordPress',
  'JavaScript',
  'Next.js',
  'Node.js'
]

module.exports = intended

},{}],527:[function(require,module,exports){
module.exports = [
  "aaa",
  "aarp",
  "abarth",
  "abb",
  "abbott",
  "abbvie",
  "abc",
  "able",
  "abogado",
  "abudhabi",
  "ac",
  "academy",
  "accenture",
  "accountant",
  "accountants",
  "aco",
  "active",
  "actor",
  "ad",
  "adac",
  "ads",
  "adult",
  "ae",
  "aeg",
  "aero",
  "aetna",
  "af",
  "afamilycompany",
  "afl",
  "africa",
  "ag",
  "agakhan",
  "agency",
  "ai",
  "aig",
  "aigo",
  "airbus",
  "airforce",
  "airtel",
  "akdn",
  "al",
  "alfaromeo",
  "alibaba",
  "alipay",
  "allfinanz",
  "allstate",
  "ally",
  "alsace",
  "alstom",
  "am",
  "americanexpress",
  "americanfamily",
  "amex",
  "amfam",
  "amica",
  "amsterdam",
  "analytics",
  "android",
  "anquan",
  "anz",
  "ao",
  "aol",
  "apartments",
  "app",
  "apple",
  "aq",
  "aquarelle",
  "ar",
  "arab",
  "aramco",
  "archi",
  "army",
  "arpa",
  "art",
  "arte",
  "as",
  "asda",
  "asia",
  "associates",
  "at",
  "athleta",
  "attorney",
  "au",
  "auction",
  "audi",
  "audible",
  "audio",
  "auspost",
  "author",
  "auto",
  "autos",
  "avianca",
  "aw",
  "aws",
  "ax",
  "axa",
  "az",
  "azure",
  "ba",
  "baby",
  "baidu",
  "banamex",
  "bananarepublic",
  "band",
  "bank",
  "bar",
  "barcelona",
  "barclaycard",
  "barclays",
  "barefoot",
  "bargains",
  "baseball",
  "basketball",
  "bauhaus",
  "bayern",
  "bb",
  "bbc",
  "bbt",
  "bbva",
  "bcg",
  "bcn",
  "bd",
  "be",
  "beats",
  "beauty",
  "beer",
  "bentley",
  "berlin",
  "best",
  "bestbuy",
  "bet",
  "bf",
  "bg",
  "bh",
  "bharti",
  "bi",
  "bible",
  "bid",
  "bike",
  "bing",
  "bingo",
  "bio",
  "biz",
  "bj",
  "black",
  "blackfriday",
  "blanco",
  "blockbuster",
  "blog",
  "bloomberg",
  "blue",
  "bm",
  "bms",
  "bmw",
  "bn",
  "bnl",
  "bnpparibas",
  "bo",
  "boats",
  "boehringer",
  "bofa",
  "bom",
  "bond",
  "boo",
  "book",
  "booking",
  "bosch",
  "bostik",
  "boston",
  "bot",
  "boutique",
  "box",
  "br",
  "bradesco",
  "bridgestone",
  "broadway",
  "broker",
  "brother",
  "brussels",
  "bs",
  "bt",
  "budapest",
  "bugatti",
  "build",
  "builders",
  "business",
  "buy",
  "buzz",
  "bv",
  "bw",
  "by",
  "bz",
  "bzh",
  "ca",
  "cab",
  "cafe",
  "cal",
  "call",
  "calvinklein",
  "cam",
  "camera",
  "camp",
  "cancerresearch",
  "canon",
  "capetown",
  "capital",
  "capitalone",
  "car",
  "caravan",
  "cards",
  "care",
  "career",
  "careers",
  "cars",
  "cartier",
  "casa",
  "case",
  "caseih",
  "cash",
  "casino",
  "cat",
  "catering",
  "catholic",
  "cba",
  "cbn",
  "cbre",
  "cbs",
  "cc",
  "cd",
  "ceb",
  "center",
  "ceo",
  "cern",
  "cf",
  "cfa",
  "cfd",
  "cg",
  "ch",
  "chanel",
  "channel",
  "chase",
  "chat",
  "cheap",
  "chintai",
  "christmas",
  "chrome",
  "chrysler",
  "church",
  "ci",
  "cipriani",
  "circle",
  "cisco",
  "citadel",
  "citi",
  "citic",
  "city",
  "cityeats",
  "ck",
  "cl",
  "claims",
  "cleaning",
  "click",
  "clinic",
  "clinique",
  "clothing",
  "cloud",
  "club",
  "clubmed",
  "cm",
  "cn",
  "co",
  "coach",
  "codes",
  "coffee",
  "college",
  "cologne",
  "com",
  "comcast",
  "commbank",
  "community",
  "company",
  "compare",
  "computer",
  "comsec",
  "condos",
  "construction",
  "consulting",
  "contact",
  "contractors",
  "cooking",
  "cookingchannel",
  "cool",
  "coop",
  "corsica",
  "country",
  "coupon",
  "coupons",
  "courses",
  "cr",
  "credit",
  "creditcard",
  "creditunion",
  "cricket",
  "crown",
  "crs",
  "cruise",
  "cruises",
  "csc",
  "cu",
  "cuisinella",
  "cv",
  "cw",
  "cx",
  "cy",
  "cymru",
  "cyou",
  "cz",
  "dabur",
  "dad",
  "dance",
  "data",
  "date",
  "dating",
  "datsun",
  "day",
  "dclk",
  "dds",
  "de",
  "deal",
  "dealer",
  "deals",
  "degree",
  "delivery",
  "dell",
  "deloitte",
  "delta",
  "democrat",
  "dental",
  "dentist",
  "desi",
  "design",
  "dev",
  "dhl",
  "diamonds",
  "diet",
  "digital",
  "direct",
  "directory",
  "discount",
  "discover",
  "dish",
  "diy",
  "dj",
  "dk",
  "dm",
  "dnp",
  "do",
  "docs",
  "doctor",
  "dodge",
  "dog",
  "doha",
  "domains",
  "dot",
  "download",
  "drive",
  "dtv",
  "dubai",
  "duck",
  "dunlop",
  "duns",
  "dupont",
  "durban",
  "dvag",
  "dvr",
  "dz",
  "earth",
  "eat",
  "ec",
  "eco",
  "edeka",
  "edu",
  "education",
  "ee",
  "eg",
  "email",
  "emerck",
  "energy",
  "engineer",
  "engineering",
  "enterprises",
  "epost",
  "epson",
  "equipment",
  "er",
  "ericsson",
  "erni",
  "es",
  "esq",
  "estate",
  "esurance",
  "et",
  "etisalat",
  "eu",
  "eurovision",
  "eus",
  "events",
  "everbank",
  "exchange",
  "expert",
  "exposed",
  "express",
  "extraspace",
  "fage",
  "fail",
  "fairwinds",
  "faith",
  "family",
  "fan",
  "fans",
  "farm",
  "farmers",
  "fashion",
  "fast",
  "fedex",
  "feedback",
  "ferrari",
  "ferrero",
  "fi",
  "fiat",
  "fidelity",
  "fido",
  "film",
  "final",
  "finance",
  "financial",
  "fire",
  "firestone",
  "firmdale",
  "fish",
  "fishing",
  "fit",
  "fitness",
  "fj",
  "fk",
  "flickr",
  "flights",
  "flir",
  "florist",
  "flowers",
  "fly",
  "fm",
  "fo",
  "foo",
  "food",
  "foodnetwork",
  "football",
  "ford",
  "forex",
  "forsale",
  "forum",
  "foundation",
  "fox",
  "fr",
  "free",
  "fresenius",
  "frl",
  "frogans",
  "frontdoor",
  "frontier",
  "ftr",
  "fujitsu",
  "fujixerox",
  "fun",
  "fund",
  "furniture",
  "futbol",
  "fyi",
  "ga",
  "gal",
  "gallery",
  "gallo",
  "gallup",
  "game",
  "games",
  "gap",
  "garden",
  "gb",
  "gbiz",
  "gd",
  "gdn",
  "ge",
  "gea",
  "gent",
  "genting",
  "george",
  "gf",
  "gg",
  "ggee",
  "gh",
  "gi",
  "gift",
  "gifts",
  "gives",
  "giving",
  "gl",
  "glade",
  "glass",
  "gle",
  "global",
  "globo",
  "gm",
  "gmail",
  "gmbh",
  "gmo",
  "gmx",
  "gn",
  "godaddy",
  "gold",
  "goldpoint",
  "golf",
  "goo",
  "goodhands",
  "goodyear",
  "goog",
  "google",
  "gop",
  "got",
  "gov",
  "gp",
  "gq",
  "gr",
  "grainger",
  "graphics",
  "gratis",
  "green",
  "gripe",
  "grocery",
  "group",
  "gs",
  "gt",
  "gu",
  "guardian",
  "gucci",
  "guge",
  "guide",
  "guitars",
  "guru",
  "gw",
  "gy",
  "hair",
  "hamburg",
  "hangout",
  "haus",
  "hbo",
  "hdfc",
  "hdfcbank",
  "health",
  "healthcare",
  "help",
  "helsinki",
  "here",
  "hermes",
  "hgtv",
  "hiphop",
  "hisamitsu",
  "hitachi",
  "hiv",
  "hk",
  "hkt",
  "hm",
  "hn",
  "hockey",
  "holdings",
  "holiday",
  "homedepot",
  "homegoods",
  "homes",
  "homesense",
  "honda",
  "honeywell",
  "horse",
  "hospital",
  "host",
  "hosting",
  "hot",
  "hoteles",
  "hotels",
  "hotmail",
  "house",
  "how",
  "hr",
  "hsbc",
  "ht",
  "hu",
  "hughes",
  "hyatt",
  "hyundai",
  "ibm",
  "icbc",
  "ice",
  "icu",
  "id",
  "ie",
  "ieee",
  "ifm",
  "ikano",
  "il",
  "im",
  "imamat",
  "imdb",
  "immo",
  "immobilien",
  "in",
  "industries",
  "infiniti",
  "info",
  "ing",
  "ink",
  "institute",
  "insurance",
  "insure",
  "int",
  "intel",
  "international",
  "intuit",
  "investments",
  "io",
  "ipiranga",
  "iq",
  "ir",
  "irish",
  "is",
  "iselect",
  "ismaili",
  "ist",
  "istanbul",
  "it",
  "itau",
  "itv",
  "iveco",
  "iwc",
  "jaguar",
  "java",
  "jcb",
  "jcp",
  "je",
  "jeep",
  "jetzt",
  "jewelry",
  "jio",
  "jlc",
  "jll",
  "jm",
  "jmp",
  "jnj",
  "jo",
  "jobs",
  "joburg",
  "jot",
  "joy",
  "jp",
  "jpmorgan",
  "jprs",
  "juegos",
  "juniper",
  "kaufen",
  "kddi",
  "ke",
  "kerryhotels",
  "kerrylogistics",
  "kerryproperties",
  "kfh",
  "kg",
  "kh",
  "ki",
  "kia",
  "kim",
  "kinder",
  "kindle",
  "kitchen",
  "kiwi",
  "km",
  "kn",
  "koeln",
  "komatsu",
  "kosher",
  "kp",
  "kpmg",
  "kpn",
  "kr",
  "krd",
  "kred",
  "kuokgroup",
  "kw",
  "ky",
  "kyoto",
  "kz",
  "la",
  "lacaixa",
  "ladbrokes",
  "lamborghini",
  "lamer",
  "lancaster",
  "lancia",
  "lancome",
  "land",
  "landrover",
  "lanxess",
  "lasalle",
  "lat",
  "latino",
  "latrobe",
  "law",
  "lawyer",
  "lb",
  "lc",
  "lds",
  "lease",
  "leclerc",
  "lefrak",
  "legal",
  "lego",
  "lexus",
  "lgbt",
  "li",
  "liaison",
  "lidl",
  "life",
  "lifeinsurance",
  "lifestyle",
  "lighting",
  "like",
  "lilly",
  "limited",
  "limo",
  "lincoln",
  "linde",
  "link",
  "lipsy",
  "live",
  "living",
  "lixil",
  "lk",
  "llc",
  "loan",
  "loans",
  "locker",
  "locus",
  "loft",
  "lol",
  "london",
  "lotte",
  "lotto",
  "love",
  "lpl",
  "lplfinancial",
  "lr",
  "ls",
  "lt",
  "ltd",
  "ltda",
  "lu",
  "lundbeck",
  "lupin",
  "luxe",
  "luxury",
  "lv",
  "ly",
  "ma",
  "macys",
  "madrid",
  "maif",
  "maison",
  "makeup",
  "man",
  "management",
  "mango",
  "map",
  "market",
  "marketing",
  "markets",
  "marriott",
  "marshalls",
  "maserati",
  "mattel",
  "mba",
  "mc",
  "mckinsey",
  "md",
  "me",
  "med",
  "media",
  "meet",
  "melbourne",
  "meme",
  "memorial",
  "men",
  "menu",
  "meo",
  "merckmsd",
  "metlife",
  "mg",
  "mh",
  "miami",
  "microsoft",
  "mil",
  "mini",
  "mint",
  "mit",
  "mitsubishi",
  "mk",
  "ml",
  "mlb",
  "mls",
  "mm",
  "mma",
  "mn",
  "mo",
  "mobi",
  "mobile",
  "mobily",
  "moda",
  "moe",
  "moi",
  "mom",
  "monash",
  "money",
  "monster",
  "mopar",
  "mormon",
  "mortgage",
  "moscow",
  "moto",
  "motorcycles",
  "mov",
  "movie",
  "movistar",
  "mp",
  "mq",
  "mr",
  "ms",
  "msd",
  "mt",
  "mtn",
  "mtr",
  "mu",
  "museum",
  "mutual",
  "mv",
  "mw",
  "mx",
  "my",
  "mz",
  "na",
  "nab",
  "nadex",
  "nagoya",
  "name",
  "nationwide",
  "natura",
  "navy",
  "nba",
  "nc",
  "ne",
  "nec",
  "net",
  "netbank",
  "netflix",
  "network",
  "neustar",
  "new",
  "newholland",
  "news",
  "next",
  "nextdirect",
  "nexus",
  "nf",
  "nfl",
  "ng",
  "ngo",
  "nhk",
  "ni",
  "nico",
  "nike",
  "nikon",
  "ninja",
  "nissan",
  "nissay",
  "nl",
  "no",
  "nokia",
  "northwesternmutual",
  "norton",
  "now",
  "nowruz",
  "nowtv",
  "np",
  "nr",
  "nra",
  "nrw",
  "ntt",
  "nu",
  "nyc",
  "nz",
  "obi",
  "observer",
  "off",
  "office",
  "okinawa",
  "olayan",
  "olayangroup",
  "oldnavy",
  "ollo",
  "om",
  "omega",
  "one",
  "ong",
  "onl",
  "online",
  "onyourside",
  "ooo",
  "open",
  "oracle",
  "orange",
  "org",
  "organic",
  "origins",
  "osaka",
  "otsuka",
  "ott",
  "ovh",
  "pa",
  "page",
  "panasonic",
  "panerai",
  "paris",
  "pars",
  "partners",
  "parts",
  "party",
  "passagens",
  "pay",
  "pccw",
  "pe",
  "pet",
  "pf",
  "pfizer",
  "pg",
  "ph",
  "pharmacy",
  "phd",
  "philips",
  "phone",
  "photo",
  "photography",
  "photos",
  "physio",
  "piaget",
  "pics",
  "pictet",
  "pictures",
  "pid",
  "pin",
  "ping",
  "pink",
  "pioneer",
  "pizza",
  "pk",
  "pl",
  "place",
  "play",
  "playstation",
  "plumbing",
  "plus",
  "pm",
  "pn",
  "pnc",
  "pohl",
  "poker",
  "politie",
  "porn",
  "post",
  "pr",
  "pramerica",
  "praxi",
  "press",
  "prime",
  "pro",
  "prod",
  "productions",
  "prof",
  "progressive",
  "promo",
  "properties",
  "property",
  "protection",
  "pru",
  "prudential",
  "ps",
  "pt",
  "pub",
  "pw",
  "pwc",
  "py",
  "qa",
  "qpon",
  "quebec",
  "quest",
  "qvc",
  "racing",
  "radio",
  "raid",
  "re",
  "read",
  "realestate",
  "realtor",
  "realty",
  "recipes",
  "red",
  "redstone",
  "redumbrella",
  "rehab",
  "reise",
  "reisen",
  "reit",
  "reliance",
  "ren",
  "rent",
  "rentals",
  "repair",
  "report",
  "republican",
  "rest",
  "restaurant",
  "review",
  "reviews",
  "rexroth",
  "rich",
  "richardli",
  "ricoh",
  "rightathome",
  "ril",
  "rio",
  "rip",
  "rmit",
  "ro",
  "rocher",
  "rocks",
  "rodeo",
  "rogers",
  "room",
  "rs",
  "rsvp",
  "ru",
  "rugby",
  "ruhr",
  "run",
  "rw",
  "rwe",
  "ryukyu",
  "sa",
  "saarland",
  "safe",
  "safety",
  "sakura",
  "sale",
  "salon",
  "samsclub",
  "samsung",
  "sandvik",
  "sandvikcoromant",
  "sanofi",
  "sap",
  "sapo",
  "sarl",
  "sas",
  "save",
  "saxo",
  "sb",
  "sbi",
  "sbs",
  "sc",
  "sca",
  "scb",
  "schaeffler",
  "schmidt",
  "scholarships",
  "school",
  "schule",
  "schwarz",
  "science",
  "scjohnson",
  "scor",
  "scot",
  "sd",
  "se",
  "search",
  "seat",
  "secure",
  "security",
  "seek",
  "select",
  "sener",
  "services",
  "ses",
  "seven",
  "sew",
  "sex",
  "sexy",
  "sfr",
  "sg",
  "sh",
  "shangrila",
  "sharp",
  "shaw",
  "shell",
  "shia",
  "shiksha",
  "shoes",
  "shop",
  "shopping",
  "shouji",
  "show",
  "showtime",
  "shriram",
  "si",
  "silk",
  "sina",
  "singles",
  "site",
  "sj",
  "sk",
  "ski",
  "skin",
  "sky",
  "skype",
  "sl",
  "sling",
  "sm",
  "smart",
  "smile",
  "sn",
  "sncf",
  "so",
  "soccer",
  "social",
  "softbank",
  "software",
  "sohu",
  "solar",
  "solutions",
  "song",
  "sony",
  "soy",
  "space",
  "spiegel",
  "sport",
  "spot",
  "spreadbetting",
  "sr",
  "srl",
  "srt",
  "st",
  "stada",
  "staples",
  "star",
  "starhub",
  "statebank",
  "statefarm",
  "statoil",
  "stc",
  "stcgroup",
  "stockholm",
  "storage",
  "store",
  "stream",
  "studio",
  "study",
  "style",
  "su",
  "sucks",
  "supplies",
  "supply",
  "support",
  "surf",
  "surgery",
  "suzuki",
  "sv",
  "swatch",
  "swiftcover",
  "swiss",
  "sx",
  "sy",
  "sydney",
  "symantec",
  "systems",
  "sz",
  "tab",
  "taipei",
  "talk",
  "taobao",
  "target",
  "tatamotors",
  "tatar",
  "tattoo",
  "tax",
  "taxi",
  "tc",
  "tci",
  "td",
  "tdk",
  "team",
  "tech",
  "technology",
  "tel",
  "telecity",
  "telefonica",
  "temasek",
  "tennis",
  "teva",
  "tf",
  "tg",
  "th",
  "thd",
  "theater",
  "theatre",
  "tiaa",
  "tickets",
  "tienda",
  "tiffany",
  "tips",
  "tires",
  "tirol",
  "tj",
  "tjmaxx",
  "tjx",
  "tk",
  "tkmaxx",
  "tl",
  "tm",
  "tmall",
  "tn",
  "to",
  "today",
  "tokyo",
  "tools",
  "top",
  "toray",
  "toshiba",
  "total",
  "tours",
  "town",
  "toyota",
  "toys",
  "tr",
  "trade",
  "trading",
  "training",
  "travel",
  "travelchannel",
  "travelers",
  "travelersinsurance",
  "trust",
  "trv",
  "tt",
  "tube",
  "tui",
  "tunes",
  "tushu",
  "tv",
  "tvs",
  "tw",
  "tz",
  "ua",
  "ubank",
  "ubs",
  "uconnect",
  "ug",
  "uk",
  "unicom",
  "university",
  "uno",
  "uol",
  "ups",
  "us",
  "uy",
  "uz",
  "va",
  "vacations",
  "vana",
  "vanguard",
  "vc",
  "ve",
  "vegas",
  "ventures",
  "verisign",
  "versicherung",
  "vet",
  "vg",
  "vi",
  "viajes",
  "video",
  "vig",
  "viking",
  "villas",
  "vin",
  "vip",
  "virgin",
  "visa",
  "vision",
  "vista",
  "vistaprint",
  "viva",
  "vivo",
  "vlaanderen",
  "vn",
  "vodka",
  "volkswagen",
  "volvo",
  "vote",
  "voting",
  "voto",
  "voyage",
  "vu",
  "vuelos",
  "wales",
  "walmart",
  "walter",
  "wang",
  "wanggou",
  "warman",
  "watch",
  "watches",
  "weather",
  "weatherchannel",
  "webcam",
  "weber",
  "website",
  "wed",
  "wedding",
  "weibo",
  "weir",
  "wf",
  "whoswho",
  "wien",
  "wiki",
  "williamhill",
  "win",
  "windows",
  "wine",
  "winners",
  "wme",
  "wolterskluwer",
  "woodside",
  "work",
  "works",
  "world",
  "wow",
  "ws",
  "wtc",
  "wtf",
  "xbox",
  "xerox",
  "xfinity",
  "xihuan",
  "xin",
  "कॉम", // xn--11b4c3d
  "セール", // xn--1ck2e1b
  "佛山", // xn--1qqw23a
  "ಭಾರತ", // xn--2scrj9c
  "慈善", // xn--30rr7y
  "集团", // xn--3bst00m
  "在线", // xn--3ds443g
  "한국", // xn--3e0b707e
  "ଭାରତ", // xn--3hcrj9c
  "大众汽车", // xn--3oq18vl8pn36a
  "点看", // xn--3pxu8k
  "คอม", // xn--42c2d9a
  "ভাৰত", // xn--45br5cyl
  "ভারত", // xn--45brj9c
  "八卦", // xn--45q11c
  "موقع", // xn--4gbrim
  "বাংলা", // xn--54b7fta0cc
  "公益", // xn--55qw42g
  "公司", // xn--55qx5d
  "香格里拉", // xn--5su34j936bgsg
  "网站", // xn--5tzm5g
  "移动", // xn--6frz82g
  "我爱你", // xn--6qq986b3xl
  "москва", // xn--80adxhks
  "қаз", // xn--80ao21a
  "католик", // xn--80aqecdr1a
  "онлайн", // xn--80asehdb
  "сайт", // xn--80aswg
  "联通", // xn--8y0a063a
  "срб", // xn--90a3ac
  "бг", // xn--90ae
  "бел", // xn--90ais
  "קום", // xn--9dbq2a
  "时尚", // xn--9et52u
  "微博", // xn--9krt00a
  "淡马锡", // xn--b4w605ferd
  "ファッション", // xn--bck1b9a5dre4c
  "орг", // xn--c1avg
  "नेट", // xn--c2br7g
  "ストア", // xn--cck2b3b
  "삼성", // xn--cg4bki
  "சிங்கப்பூர்", // xn--clchc0ea0b2g2a9gcd
  "商标", // xn--czr694b
  "商店", // xn--czrs0t
  "商城", // xn--czru2d
  "дети", // xn--d1acj3b
  "мкд", // xn--d1alf
  "ею", // xn--e1a4c
  "ポイント", // xn--eckvdtc9d
  "新闻", // xn--efvy88h
  "工行", // xn--estv75g
  "家電", // xn--fct429k
  "كوم", // xn--fhbei
  "中文网", // xn--fiq228c5hs
  "中信", // xn--fiq64b
  "中国", // xn--fiqs8s
  "中國", // xn--fiqz9s
  "娱乐", // xn--fjq720a
  "谷歌", // xn--flw351e
  "భారత్", // xn--fpcrj9c3d
  "ලංකා", // xn--fzc2c9e2c
  "電訊盈科", // xn--fzys8d69uvgm
  "购物", // xn--g2xx48c
  "クラウド", // xn--gckr3f0f
  "ભારત", // xn--gecrj9c
  "通販", // xn--gk3at1e
  "भारतम्", // xn--h2breg3eve
  "भारत", // xn--h2brj9c
  "भारोत", // xn--h2brj9c8c
  "网店", // xn--hxt814e
  "संगठन", // xn--i1b6b1a6a2e
  "餐厅", // xn--imr513n
  "网络", // xn--io0a7i
  "ком", // xn--j1aef
  "укр", // xn--j1amh
  "香港", // xn--j6w193g
  "诺基亚", // xn--jlq61u9w7b
  "食品", // xn--jvr189m
  "飞利浦", // xn--kcrx77d1x4a
  "台湾", // xn--kprw13d
  "台灣", // xn--kpry57d
  "手表", // xn--kpu716f
  "手机", // xn--kput3i
  "мон", // xn--l1acc
  "الجزائر", // xn--lgbbat1ad8j
  "عمان", // xn--mgb9awbf
  "ارامكو", // xn--mgba3a3ejt
  "ایران", // xn--mgba3a4f16a
  "العليان", // xn--mgba7c0bbn0a
  "اتصالات", // xn--mgbaakc7dvf
  "امارات", // xn--mgbaam7a8h
  "بازار", // xn--mgbab2bd
  "پاکستان", // xn--mgbai9azgqp6j
  "الاردن", // xn--mgbayh7gpa
  "موبايلي", // xn--mgbb9fbpob
  "بارت", // xn--mgbbh1a
  "بھارت", // xn--mgbbh1a71e
  "المغرب", // xn--mgbc0a9azcg
  "ابوظبي", // xn--mgbca7dzdo
  "السعودية", // xn--mgberp4a5d4ar
  "ڀارت", // xn--mgbgu82a
  "كاثوليك", // xn--mgbi4ecexp
  "سودان", // xn--mgbpl2fh
  "همراه", // xn--mgbt3dhd
  "عراق", // xn--mgbtx2b
  "مليسيا", // xn--mgbx4cd0ab
  "澳門", // xn--mix891f
  "닷컴", // xn--mk1bu44c
  "政府", // xn--mxtq1m
  "شبكة", // xn--ngbc5azd
  "بيتك", // xn--ngbe9e0a
  "عرب", // xn--ngbrx
  "გე", // xn--node
  "机构", // xn--nqv7f
  "组织机构", // xn--nqv7fs00ema
  "健康", // xn--nyqy26a
  "ไทย", // xn--o3cw4h
  "سورية", // xn--ogbpf8fl
  "招聘", // xn--otu796d
  "рус", // xn--p1acf
  "рф", // xn--p1ai
  "珠宝", // xn--pbt977c
  "تونس", // xn--pgbs0dh
  "大拿", // xn--pssy2u
  "みんな", // xn--q9jyb4c
  "グーグル", // xn--qcka1pmc
  "ελ", // xn--qxam
  "世界", // xn--rhqv96g
  "書籍", // xn--rovu88b
  "ഭാരതം", // xn--rvc1e0am3e
  "ਭਾਰਤ", // xn--s9brj9c
  "网址", // xn--ses554g
  "닷넷", // xn--t60b56a
  "コム", // xn--tckwe
  "天主教", // xn--tiq49xqyj
  "游戏", // xn--unup4y
  "vermögensberater", // xn--vermgensberater-ctb
  "vermögensberatung", // xn--vermgensberatung-pwb
  "企业", // xn--vhquv
  "信息", // xn--vuq861b
  "嘉里大酒店", // xn--w4r85el8fhu5dnra
  "嘉里", // xn--w4rs40l
  "مصر", // xn--wgbh1c
  "قطر", // xn--wgbl6a
  "广东", // xn--xhq521b
  "இலங்கை", // xn--xkc2al3hye2a
  "இந்தியா", // xn--xkc2dl3a5ee0h
  "հայ", // xn--y9a3aq
  "新加坡", // xn--yfro4i67o
  "فلسطين", // xn--ygbi2ammx
  "政务", // xn--zfr164b
  "xperia",
  "xxx",
  "xyz",
  "yachts",
  "yahoo",
  "yamaxun",
  "yandex",
  "ye",
  "yodobashi",
  "yoga",
  "yokohama",
  "you",
  "youtube",
  "yt",
  "yun",
  "za",
  "zappos",
  "zara",
  "zero",
  "zip",
  "zippo",
  "zm",
  "zone",
  "zuerich",
  "zw"
];

},{}],528:[function(require,module,exports){
'use strict';
const {Readable} = require('stream');

module.exports = input => (
	new Readable({
		read() {
			this.push(input);
			this.push(null);
		}
	})
);

},{"stream":37}],529:[function(require,module,exports){
/*global module:true*/
/*jslint nomen:true*/
/**
 * @module Utility
 */
(function (context, undefined) {
    'use strict';

    var DEFAULT_TRUNCATE_SYMBOL = '…',
        // Limit emails to no more than about 600 chars, well over the max of ~300.
        // cf. RFC: https://www.rfc-editor.org/errata_search.php?eid=1690
        URL_REGEX = /(((ftp|https?):\/\/)[\-\w@:%_\+.~#?,&\/\/=]+)|((mailto:)?[_.\w-]{1,300}@(.{1,300}\.)[a-zA-Z]{2,3})/g;

    function __appendEllipsis(string, options, content) {
        if (content.length === string.length || !options.ellipsis) {
            return content;
        }
        content += options.ellipsis;
        return content;
    }
    /**
     * Truncate HTML string and keep tag safe.
     *
     * @method truncate
     * @param {String} string string needs to be truncated
     * @param {Number} maxLength length of truncated string
     * @param {Object} options (optional)
     * @param {Boolean|String} [options.ellipsis] omission symbol for truncated string, '...' by default
     * @return {String} truncated string
     */
    function truncate(string, maxLength, options) {
        var content = '', // truncated text storage
            matches = true,
            remainingLength = maxLength,
            result,
            index;

        options = options || {};
        options.ellipsis = (typeof options.ellipsis === "undefined") ? DEFAULT_TRUNCATE_SYMBOL : options.ellipsis;

        if (!string || string.length === 0) {
            return '';
        }

        matches = true;
        while (matches) {
            URL_REGEX.lastIndex = content.length;
            matches = URL_REGEX.exec(string);

            if (!matches || (matches.index - content.length) >= remainingLength) {
                content += string.substring(content.length, maxLength);
                return __appendEllipsis(string, options, content, maxLength);
            }

            result = matches[0];
            index = matches.index;
            content += string.substring(content.length, index + result.length);
            remainingLength -= index + result.length;

            if (remainingLength <= 0) {
                break;
            }
        }

        return __appendEllipsis(string, options, content, maxLength);
    }

    if ('undefined' !== typeof module && module.exports) {
        module.exports = truncate;
    } else {
        context.truncate = truncate;
    }
}(String));

},{}],530:[function(require,module,exports){
'use strict';
const url = require('url');
const prependHttp = require('prepend-http');

module.exports = (input, options) => {
	if (typeof input !== 'string') {
		throw new TypeError(`Expected \`url\` to be of type \`string\`, got \`${typeof input}\` instead.`);
	}

	const finalUrl = prependHttp(input, Object.assign({https: true}, options));
	return url.parse(finalUrl);
};

},{"prepend-http":517,"url":59}],531:[function(require,module,exports){
'use strict';
const ipRegex = require('ip-regex');
const tlds = require('tlds');

module.exports = options => {
	options = {
		strict: true,
		...options
	};

	const protocol = `(?:(?:[a-z]+:)?//)${options.strict ? '' : '?'}`;
	const auth = '(?:\\S+(?::\\S*)?@)?';
	const ip = ipRegex.v4().source;
	const host = '(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)';
	const domain = '(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*';
	const tld = `(?:\\.${options.strict ? '(?:[a-z\\u00a1-\\uffff]{2,})' : `(?:${tlds.sort((a, b) => b.length - a.length).join('|')})`})\\.?`;
	const port = '(?::\\d{2,5})?';
	const path = '(?:[/?#][^\\s"]*)?';
	const regex = `(?:${protocol}|www\\.)${auth}(?:localhost|${ip}|${host}${domain}${tld})${port}${path}`;

	return options.exact ? new RegExp(`(?:^${regex}$)`, 'i') : new RegExp(regex, 'ig');
};

},{"ip-regex":242,"tlds":527}],532:[function(require,module,exports){
module.exports=[
	"3g2",
	"3gp",
	"aaf",
	"asf",
	"avchd",
	"avi",
	"drc",
	"flv",
	"m2v",
	"m4p",
	"m4v",
	"mkv",
	"mng",
	"mov",
	"mp2",
	"mp4",
	"mpe",
	"mpeg",
	"mpg",
	"mpv",
	"mxf",
	"nsv",
	"ogg",
	"ogv",
	"qt",
	"rm",
	"rmvb",
	"roq",
	"svi",
	"vob",
	"webm",
	"wmv",
	"yuv"
]

},{}],533:[function(require,module,exports){
'use strict'

const {isFunction, composeErrorMessage} = require('./helpers')

function interfaceObject (error, ...props) {
  Object.assign(error, ...props)

  error.description = isFunction(error.message) ? error.message(error) : error.message

  error.message = error.code
   ? composeErrorMessage(error.code, error.description)
   : error.description
}

module.exports = interfaceObject

},{"./helpers":536}],534:[function(require,module,exports){
'use strict'

const {inherits} = require('./helpers')
const mimicFn = require('mimic-fn')

const REGEX_CLASS_NAME = /[^0-9a-zA-Z_$]/

function createError (className) {
  if (typeof className !== 'string') {
    throw new TypeError('Expected className to be a string')
  }

  if (REGEX_CLASS_NAME.test(className)) {
    throw new Error('className contains invalid characters')
  }

  function ErrorClass () {
    Object.defineProperty(this, 'name', {
      configurable: true,
      value: className,
      writable: true
    })

    Error.captureStackTrace(this, this.constructor)
  }

  inherits(ErrorClass, Error)
  mimicFn(ErrorClass, Error)
  return ErrorClass
}

module.exports = createError

},{"./helpers":536,"mimic-fn":480}],535:[function(require,module,exports){
'use strict'

const cleanStack = require('clean-stack')
const mimicFn = require('mimic-fn')

const addErrorProps = require('./add-error-props')
const {isString} = require('./helpers')

function createExtendError (ErrorClass, classProps) {
  function ExtendError (props) {
    const error = new ErrorClass()
    const errorProps = isString(props) ? {message: props} : props
    addErrorProps(error, classProps, errorProps)

    error.stack = cleanStack(error.stack)
    return error
  }

  ExtendError.prototype = ErrorClass.prototype
  mimicFn(ExtendError, ErrorClass)

  return ExtendError
}

module.exports = createExtendError

},{"./add-error-props":533,"./helpers":536,"clean-stack":158,"mimic-fn":480}],536:[function(require,module,exports){
'use strict'

module.exports = {
  isFunction: obj => typeof obj === 'function',
  isString: obj => typeof obj === 'string',
  composeErrorMessage: (code, description) => `${code}, ${description}`,
  inherits: (ctor, superCtor) => {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    })
  }
}

},{}],537:[function(require,module,exports){
'use strict'

const createExtendError = require('./create-extend-error')
const createError = require('./create-error')

const createErrorClass = ErrorClass => (className, props) => {
  const errorClass = createError(className || ErrorClass.name)
  return createExtendError(errorClass, props)
}

module.exports = createErrorClass(Error)
module.exports.type = createErrorClass(TypeError)
module.exports.range = createErrorClass(RangeError)
module.exports.eval = createErrorClass(EvalError)
module.exports.syntax = createErrorClass(SyntaxError)
module.exports.reference = createErrorClass(ReferenceError)
module.exports.uri = createErrorClass(URIError)

},{"./create-error":534,"./create-extend-error":535}],538:[function(require,module,exports){
// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}

},{}],539:[function(require,module,exports){
/**
 * default settings
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var FilterCSS = require("cssfilter").FilterCSS;
var getDefaultCSSWhiteList = require("cssfilter").getDefaultWhiteList;
var _ = require("./util");

function getDefaultWhiteList() {
  return {
    a: ["target", "href", "title"],
    abbr: ["title"],
    address: [],
    area: ["shape", "coords", "href", "alt"],
    article: [],
    aside: [],
    audio: ["autoplay", "controls", "loop", "preload", "src"],
    b: [],
    bdi: ["dir"],
    bdo: ["dir"],
    big: [],
    blockquote: ["cite"],
    br: [],
    caption: [],
    center: [],
    cite: [],
    code: [],
    col: ["align", "valign", "span", "width"],
    colgroup: ["align", "valign", "span", "width"],
    dd: [],
    del: ["datetime"],
    details: ["open"],
    div: [],
    dl: [],
    dt: [],
    em: [],
    font: ["color", "size", "face"],
    footer: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    header: [],
    hr: [],
    i: [],
    img: ["src", "alt", "title", "width", "height"],
    ins: ["datetime"],
    li: [],
    mark: [],
    nav: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    section: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    table: ["width", "border", "align", "valign"],
    tbody: ["align", "valign"],
    td: ["width", "rowspan", "colspan", "align", "valign"],
    tfoot: ["align", "valign"],
    th: ["width", "rowspan", "colspan", "align", "valign"],
    thead: ["align", "valign"],
    tr: ["rowspan", "align", "valign"],
    tt: [],
    u: [],
    ul: [],
    video: ["autoplay", "controls", "loop", "preload", "src", "height", "width"]
  };
}

var defaultCSSFilter = new FilterCSS();

/**
 * default onTag function
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */
function onTag(tag, html, options) {
  // do nothing
}

/**
 * default onIgnoreTag function
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */
function onIgnoreTag(tag, html, options) {
  // do nothing
}

/**
 * default onTagAttr function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function onTagAttr(tag, name, value) {
  // do nothing
}

/**
 * default onIgnoreTagAttr function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function onIgnoreTagAttr(tag, name, value) {
  // do nothing
}

/**
 * default escapeHtml function
 *
 * @param {String} html
 */
function escapeHtml(html) {
  return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
}

/**
 * default safeAttrValue function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @param {Object} cssFilter
 * @return {String}
 */
function safeAttrValue(tag, name, value, cssFilter) {
  // unescape attribute value firstly
  value = friendlyAttrValue(value);

  if (name === "href" || name === "src") {
    // filter `href` and `src` attribute
    // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`
    value = _.trim(value);
    if (value === "#") return "#";
    if (
      !(
        value.substr(0, 7) === "http://" ||
        value.substr(0, 8) === "https://" ||
        value.substr(0, 7) === "mailto:" ||
        value.substr(0, 4) === "tel:" ||
        value[0] === "#" ||
        value[0] === "/"
      )
    ) {
      return "";
    }
  } else if (name === "background") {
    // filter `background` attribute (maybe no use)
    // `javascript:`
    REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
      return "";
    }
  } else if (name === "style") {
    // `expression()`
    REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
      return "";
    }
    // `url()`
    REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
      REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
        return "";
      }
    }
    if (cssFilter !== false) {
      cssFilter = cssFilter || defaultCSSFilter;
      value = cssFilter.process(value);
    }
  }

  // escape `<>"` before returns
  value = escapeAttrValue(value);
  return value;
}

// RegExp list
var REGEXP_LT = /</g;
var REGEXP_GT = />/g;
var REGEXP_QUOTE = /"/g;
var REGEXP_QUOTE_2 = /&quot;/g;
var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\/\*|\*\//gm;
var REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a)\:/gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:/gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:\s*image\//gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;

/**
 * escape doube quote
 *
 * @param {String} str
 * @return {String} str
 */
function escapeQuote(str) {
  return str.replace(REGEXP_QUOTE, "&quot;");
}

/**
 * unescape double quote
 *
 * @param {String} str
 * @return {String} str
 */
function unescapeQuote(str) {
  return str.replace(REGEXP_QUOTE_2, '"');
}

/**
 * escape html entities
 *
 * @param {String} str
 * @return {String}
 */
function escapeHtmlEntities(str) {
  return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {
    return code[0] === "x" || code[0] === "X"
      ? String.fromCharCode(parseInt(code.substr(1), 16))
      : String.fromCharCode(parseInt(code, 10));
  });
}

/**
 * escape html5 new danger entities
 *
 * @param {String} str
 * @return {String}
 */
function escapeDangerHtml5Entities(str) {
  return str
    .replace(REGEXP_ATTR_VALUE_COLON, ":")
    .replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
}

/**
 * clear nonprintable characters
 *
 * @param {String} str
 * @return {String}
 */
function clearNonPrintableCharacter(str) {
  var str2 = "";
  for (var i = 0, len = str.length; i < len; i++) {
    str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
  }
  return _.trim(str2);
}

/**
 * get friendly attribute value
 *
 * @param {String} str
 * @return {String}
 */
function friendlyAttrValue(str) {
  str = unescapeQuote(str);
  str = escapeHtmlEntities(str);
  str = escapeDangerHtml5Entities(str);
  str = clearNonPrintableCharacter(str);
  return str;
}

/**
 * unescape attribute value
 *
 * @param {String} str
 * @return {String}
 */
function escapeAttrValue(str) {
  str = escapeQuote(str);
  str = escapeHtml(str);
  return str;
}

/**
 * `onIgnoreTag` function for removing all the tags that are not in whitelist
 */
function onIgnoreTagStripAll() {
  return "";
}

/**
 * remove tag body
 * specify a `tags` list, if the tag is not in the `tags` list then process by the specify function (optional)
 *
 * @param {array} tags
 * @param {function} next
 */
function StripTagBody(tags, next) {
  if (typeof next !== "function") {
    next = function() {};
  }

  var isRemoveAllTag = !Array.isArray(tags);
  function isRemoveTag(tag) {
    if (isRemoveAllTag) return true;
    return _.indexOf(tags, tag) !== -1;
  }

  var removeList = [];
  var posStart = false;

  return {
    onIgnoreTag: function(tag, html, options) {
      if (isRemoveTag(tag)) {
        if (options.isClosing) {
          var ret = "[/removed]";
          var end = options.position + ret.length;
          removeList.push([
            posStart !== false ? posStart : options.position,
            end
          ]);
          posStart = false;
          return ret;
        } else {
          if (!posStart) {
            posStart = options.position;
          }
          return "[removed]";
        }
      } else {
        return next(tag, html, options);
      }
    },
    remove: function(html) {
      var rethtml = "";
      var lastPos = 0;
      _.forEach(removeList, function(pos) {
        rethtml += html.slice(lastPos, pos[0]);
        lastPos = pos[1];
      });
      rethtml += html.slice(lastPos);
      return rethtml;
    }
  };
}

/**
 * remove html comments
 *
 * @param {String} html
 * @return {String}
 */
function stripCommentTag(html) {
  return html.replace(STRIP_COMMENT_TAG_REGEXP, "");
}
var STRIP_COMMENT_TAG_REGEXP = /<!--[\s\S]*?-->/g;

/**
 * remove invisible characters
 *
 * @param {String} html
 * @return {String}
 */
function stripBlankChar(html) {
  var chars = html.split("");
  chars = chars.filter(function(char) {
    var c = char.charCodeAt(0);
    if (c === 127) return false;
    if (c <= 31) {
      if (c === 10 || c === 13) return true;
      return false;
    }
    return true;
  });
  return chars.join("");
}

exports.whiteList = getDefaultWhiteList();
exports.getDefaultWhiteList = getDefaultWhiteList;
exports.onTag = onTag;
exports.onIgnoreTag = onIgnoreTag;
exports.onTagAttr = onTagAttr;
exports.onIgnoreTagAttr = onIgnoreTagAttr;
exports.safeAttrValue = safeAttrValue;
exports.escapeHtml = escapeHtml;
exports.escapeQuote = escapeQuote;
exports.unescapeQuote = unescapeQuote;
exports.escapeHtmlEntities = escapeHtmlEntities;
exports.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
exports.clearNonPrintableCharacter = clearNonPrintableCharacter;
exports.friendlyAttrValue = friendlyAttrValue;
exports.escapeAttrValue = escapeAttrValue;
exports.onIgnoreTagStripAll = onIgnoreTagStripAll;
exports.StripTagBody = StripTagBody;
exports.stripCommentTag = stripCommentTag;
exports.stripBlankChar = stripBlankChar;
exports.cssFilter = defaultCSSFilter;
exports.getDefaultCSSWhiteList = getDefaultCSSWhiteList;

},{"./util":542,"cssfilter":171}],540:[function(require,module,exports){
/**
 * xss
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var DEFAULT = require("./default");
var parser = require("./parser");
var FilterXSS = require("./xss");

/**
 * filter xss function
 *
 * @param {String} html
 * @param {Object} options { whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml }
 * @return {String}
 */
function filterXSS(html, options) {
  var xss = new FilterXSS(options);
  return xss.process(html);
}

exports = module.exports = filterXSS;
exports.filterXSS = filterXSS;
exports.FilterXSS = FilterXSS;
for (var i in DEFAULT) exports[i] = DEFAULT[i];
for (var i in parser) exports[i] = parser[i];

// using `xss` on the browser, output `filterXSS` to the globals
if (typeof window !== "undefined") {
  window.filterXSS = module.exports;
}

// using `xss` on the WebWorker, output `filterXSS` to the globals
function isWorkerEnv() {
  return typeof self !== 'undefined' && typeof DedicatedWorkerGlobalScope !== 'undefined' && self instanceof DedicatedWorkerGlobalScope;
}
if (isWorkerEnv()) {
  self.filterXSS = module.exports;
}

},{"./default":539,"./parser":541,"./xss":543}],541:[function(require,module,exports){
/**
 * Simple HTML Parser
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var _ = require("./util");

/**
 * get tag name
 *
 * @param {String} html e.g. '<a hef="#">'
 * @return {String}
 */
function getTagName(html) {
  var i = _.spaceIndex(html);
  if (i === -1) {
    var tagName = html.slice(1, -1);
  } else {
    var tagName = html.slice(1, i + 1);
  }
  tagName = _.trim(tagName).toLowerCase();
  if (tagName.slice(0, 1) === "/") tagName = tagName.slice(1);
  if (tagName.slice(-1) === "/") tagName = tagName.slice(0, -1);
  return tagName;
}

/**
 * is close tag?
 *
 * @param {String} html 如：'<a hef="#">'
 * @return {Boolean}
 */
function isClosing(html) {
  return html.slice(0, 2) === "</";
}

/**
 * parse input html and returns processed html
 *
 * @param {String} html
 * @param {Function} onTag e.g. function (sourcePosition, position, tag, html, isClosing)
 * @param {Function} escapeHtml
 * @return {String}
 */
function parseTag(html, onTag, escapeHtml) {
  "user strict";

  var rethtml = "";
  var lastPos = 0;
  var tagStart = false;
  var quoteStart = false;
  var currentPos = 0;
  var len = html.length;
  var currentTagName = "";
  var currentHtml = "";

  for (currentPos = 0; currentPos < len; currentPos++) {
    var c = html.charAt(currentPos);
    if (tagStart === false) {
      if (c === "<") {
        tagStart = currentPos;
        continue;
      }
    } else {
      if (quoteStart === false) {
        if (c === "<") {
          rethtml += escapeHtml(html.slice(lastPos, currentPos));
          tagStart = currentPos;
          lastPos = currentPos;
          continue;
        }
        if (c === ">") {
          rethtml += escapeHtml(html.slice(lastPos, tagStart));
          currentHtml = html.slice(tagStart, currentPos + 1);
          currentTagName = getTagName(currentHtml);
          rethtml += onTag(
            tagStart,
            rethtml.length,
            currentTagName,
            currentHtml,
            isClosing(currentHtml)
          );
          lastPos = currentPos + 1;
          tagStart = false;
          continue;
        }
        if ((c === '"' || c === "'") && html.charAt(currentPos - 1) === "=") {
          quoteStart = c;
          continue;
        }
      } else {
        if (c === quoteStart) {
          quoteStart = false;
          continue;
        }
      }
    }
  }
  if (lastPos < html.length) {
    rethtml += escapeHtml(html.substr(lastPos));
  }

  return rethtml;
}

var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9_:\.\-]/gim;

/**
 * parse input attributes and returns processed attributes
 *
 * @param {String} html e.g. `href="#" target="_blank"`
 * @param {Function} onAttr e.g. `function (name, value)`
 * @return {String}
 */
function parseAttr(html, onAttr) {
  "user strict";

  var lastPos = 0;
  var retAttrs = [];
  var tmpName = false;
  var len = html.length;

  function addAttr(name, value) {
    name = _.trim(name);
    name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
    if (name.length < 1) return;
    var ret = onAttr(name, value || "");
    if (ret) retAttrs.push(ret);
  }

  // 逐个分析字符
  for (var i = 0; i < len; i++) {
    var c = html.charAt(i);
    var v, j;
    if (tmpName === false && c === "=") {
      tmpName = html.slice(lastPos, i);
      lastPos = i + 1;
      continue;
    }
    if (tmpName !== false) {
      if (
        i === lastPos &&
        (c === '"' || c === "'") &&
        html.charAt(i - 1) === "="
      ) {
        j = html.indexOf(c, i + 1);
        if (j === -1) {
          break;
        } else {
          v = _.trim(html.slice(lastPos + 1, j));
          addAttr(tmpName, v);
          tmpName = false;
          i = j;
          lastPos = i + 1;
          continue;
        }
      }
    }
    if (/\s|\n|\t/.test(c)) {
      html = html.replace(/\s|\n|\t/g, " ");
      if (tmpName === false) {
        j = findNextEqual(html, i);
        if (j === -1) {
          v = _.trim(html.slice(lastPos, i));
          addAttr(v);
          tmpName = false;
          lastPos = i + 1;
          continue;
        } else {
          i = j - 1;
          continue;
        }
      } else {
        j = findBeforeEqual(html, i - 1);
        if (j === -1) {
          v = _.trim(html.slice(lastPos, i));
          v = stripQuoteWrap(v);
          addAttr(tmpName, v);
          tmpName = false;
          lastPos = i + 1;
          continue;
        } else {
          continue;
        }
      }
    }
  }

  if (lastPos < html.length) {
    if (tmpName === false) {
      addAttr(html.slice(lastPos));
    } else {
      addAttr(tmpName, stripQuoteWrap(_.trim(html.slice(lastPos))));
    }
  }

  return _.trim(retAttrs.join(" "));
}

function findNextEqual(str, i) {
  for (; i < str.length; i++) {
    var c = str[i];
    if (c === " ") continue;
    if (c === "=") return i;
    return -1;
  }
}

function findBeforeEqual(str, i) {
  for (; i > 0; i--) {
    var c = str[i];
    if (c === " ") continue;
    if (c === "=") return i;
    return -1;
  }
}

function isQuoteWrapString(text) {
  if (
    (text[0] === '"' && text[text.length - 1] === '"') ||
    (text[0] === "'" && text[text.length - 1] === "'")
  ) {
    return true;
  } else {
    return false;
  }
}

function stripQuoteWrap(text) {
  if (isQuoteWrapString(text)) {
    return text.substr(1, text.length - 2);
  } else {
    return text;
  }
}

exports.parseTag = parseTag;
exports.parseAttr = parseAttr;

},{"./util":542}],542:[function(require,module,exports){
module.exports = {
  indexOf: function(arr, item) {
    var i, j;
    if (Array.prototype.indexOf) {
      return arr.indexOf(item);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      if (arr[i] === item) {
        return i;
      }
    }
    return -1;
  },
  forEach: function(arr, fn, scope) {
    var i, j;
    if (Array.prototype.forEach) {
      return arr.forEach(fn, scope);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      fn.call(scope, arr[i], i, arr);
    }
  },
  trim: function(str) {
    if (String.prototype.trim) {
      return str.trim();
    }
    return str.replace(/(^\s*)|(\s*$)/g, "");
  },
  spaceIndex: function(str) {
    var reg = /\s|\n|\t/;
    var match = reg.exec(str);
    return match ? match.index : -1;
  }
};

},{}],543:[function(require,module,exports){
/**
 * filter xss
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var FilterCSS = require("cssfilter").FilterCSS;
var DEFAULT = require("./default");
var parser = require("./parser");
var parseTag = parser.parseTag;
var parseAttr = parser.parseAttr;
var _ = require("./util");

/**
 * returns `true` if the input value is `undefined` or `null`
 *
 * @param {Object} obj
 * @return {Boolean}
 */
function isNull(obj) {
  return obj === undefined || obj === null;
}

/**
 * get attributes for a tag
 *
 * @param {String} html
 * @return {Object}
 *   - {String} html
 *   - {Boolean} closing
 */
function getAttrs(html) {
  var i = _.spaceIndex(html);
  if (i === -1) {
    return {
      html: "",
      closing: html[html.length - 2] === "/"
    };
  }
  html = _.trim(html.slice(i + 1, -1));
  var isClosing = html[html.length - 1] === "/";
  if (isClosing) html = _.trim(html.slice(0, -1));
  return {
    html: html,
    closing: isClosing
  };
}

/**
 * shallow copy
 *
 * @param {Object} obj
 * @return {Object}
 */
function shallowCopyObject(obj) {
  var ret = {};
  for (var i in obj) {
    ret[i] = obj[i];
  }
  return ret;
}

/**
 * FilterXSS class
 *
 * @param {Object} options
 *        whiteList, onTag, onTagAttr, onIgnoreTag,
 *        onIgnoreTagAttr, safeAttrValue, escapeHtml
 *        stripIgnoreTagBody, allowCommentTag, stripBlankChar
 *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`
 */
function FilterXSS(options) {
  options = shallowCopyObject(options || {});

  if (options.stripIgnoreTag) {
    if (options.onIgnoreTag) {
      console.error(
        'Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time'
      );
    }
    options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
  }

  options.whiteList = options.whiteList || DEFAULT.whiteList;
  options.onTag = options.onTag || DEFAULT.onTag;
  options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
  options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
  options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
  options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
  options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
  this.options = options;

  if (options.css === false) {
    this.cssFilter = false;
  } else {
    options.css = options.css || {};
    this.cssFilter = new FilterCSS(options.css);
  }
}

/**
 * start process and returns result
 *
 * @param {String} html
 * @return {String}
 */
FilterXSS.prototype.process = function(html) {
  // compatible with the input
  html = html || "";
  html = html.toString();
  if (!html) return "";

  var me = this;
  var options = me.options;
  var whiteList = options.whiteList;
  var onTag = options.onTag;
  var onIgnoreTag = options.onIgnoreTag;
  var onTagAttr = options.onTagAttr;
  var onIgnoreTagAttr = options.onIgnoreTagAttr;
  var safeAttrValue = options.safeAttrValue;
  var escapeHtml = options.escapeHtml;
  var cssFilter = me.cssFilter;

  // remove invisible characters
  if (options.stripBlankChar) {
    html = DEFAULT.stripBlankChar(html);
  }

  // remove html comments
  if (!options.allowCommentTag) {
    html = DEFAULT.stripCommentTag(html);
  }

  // if enable stripIgnoreTagBody
  var stripIgnoreTagBody = false;
  if (options.stripIgnoreTagBody) {
    var stripIgnoreTagBody = DEFAULT.StripTagBody(
      options.stripIgnoreTagBody,
      onIgnoreTag
    );
    onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;
  }

  var retHtml = parseTag(
    html,
    function(sourcePosition, position, tag, html, isClosing) {
      var info = {
        sourcePosition: sourcePosition,
        position: position,
        isClosing: isClosing,
        isWhite: whiteList.hasOwnProperty(tag)
      };

      // call `onTag()`
      var ret = onTag(tag, html, info);
      if (!isNull(ret)) return ret;

      if (info.isWhite) {
        if (info.isClosing) {
          return "</" + tag + ">";
        }

        var attrs = getAttrs(html);
        var whiteAttrList = whiteList[tag];
        var attrsHtml = parseAttr(attrs.html, function(name, value) {
          // call `onTagAttr()`
          var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
          var ret = onTagAttr(tag, name, value, isWhiteAttr);
          if (!isNull(ret)) return ret;

          if (isWhiteAttr) {
            // call `safeAttrValue()`
            value = safeAttrValue(tag, name, value, cssFilter);
            if (value) {
              return name + '="' + value + '"';
            } else {
              return name;
            }
          } else {
            // call `onIgnoreTagAttr()`
            var ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
            if (!isNull(ret)) return ret;
            return;
          }
        });

        // build new tag html
        var html = "<" + tag;
        if (attrsHtml) html += " " + attrsHtml;
        if (attrs.closing) html += " /";
        html += ">";
        return html;
      } else {
        // call `onIgnoreTag()`
        var ret = onIgnoreTag(tag, html, info);
        if (!isNull(ret)) return ret;
        return escapeHtml(html);
      }
    },
    escapeHtml
  );

  // if enable stripIgnoreTagBody
  if (stripIgnoreTagBody) {
    retHtml = stripIgnoreTagBody.remove(retHtml);
  }

  return retHtml;
};

module.exports = FilterXSS;

},{"./default":539,"./parser":541,"./util":542,"cssfilter":171}]},{},[66]);
